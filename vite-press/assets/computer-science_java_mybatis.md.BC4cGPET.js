import{_ as i,c as a,o as n,af as l}from"./chunks/framework.Bhntpte7.js";const E=JSON.parse('{"title":"Mybatis","description":"","frontmatter":{"date":"","draft":false,"title":"Mybatis","weight":1000},"headers":[],"relativePath":"computer-science/java/mybatis.md","filePath":"computer-science/java/mybatis.md"}'),h={name:"computer-science/java/mybatis.md"};function e(t,s,p,r,k,d){return n(),a("div",null,[...s[0]||(s[0]=[l(`<ul><li><a href="https://github.com/zhuojl/mybatis-crypt" target="_blank" rel="noreferrer">zhuojl/mybatis-crypt</a></li></ul><h2 id="mybatis是怎么进行事务管理的-2025-02-08" tabindex="-1">mybatis是怎么进行事务管理的 2025-02-08 <a class="header-anchor" href="#mybatis是怎么进行事务管理的-2025-02-08" aria-label="Permalink to “mybatis是怎么进行事务管理的 2025-02-08”">​</a></h2><p>MyBatis 通过集成外部事务管理器（如 Spring 或 Java EE 容器）或使用内置的 JDBC 事务管理机制来管理事务。以下是 MyBatis 事务管理的主要方式：</p><h3 id="_1-使用-jdbc-事务管理" tabindex="-1">1. 使用 JDBC 事务管理 <a class="header-anchor" href="#_1-使用-jdbc-事务管理" aria-label="Permalink to “1. 使用 JDBC 事务管理”">​</a></h3><p>MyBatis 默认使用 JDBC 的事务管理，通过 <code>java.sql.Connection</code> 实现。具体步骤如下：</p><ul><li><strong>开启事务</strong>：调用 <code>Connection.setAutoCommit(false)</code> 关闭自动提交。</li><li><strong>提交事务</strong>：调用 <code>Connection.commit()</code> 提交事务。</li><li><strong>回滚事务</strong>：调用 <code>Connection.rollback()</code> 回滚事务。</li></ul><p>示例代码：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SqlSession sqlSession </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sqlSessionFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 执行数据库操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sqlSession.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;insertUser&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,user);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sqlSession.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;updateUser&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,user);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 提交事务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sqlSession.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">commit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Exception </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 回滚事务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sqlSession.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rollback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">finally</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 关闭 SqlSession</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sqlSession.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_2-集成-spring-事务管理" tabindex="-1">2. 集成 Spring 事务管理 <a class="header-anchor" href="#_2-集成-spring-事务管理" aria-label="Permalink to “2. 集成 Spring 事务管理”">​</a></h3><p>MyBatis 通常与 Spring 集成，利用 Spring 的事务管理功能。Spring 提供了声明式和编程式事务管理。</p><h4 id="_2-1-声明式事务管理" tabindex="-1">2.1 声明式事务管理 <a class="header-anchor" href="#_2-1-声明式事务管理" aria-label="Permalink to “2.1 声明式事务管理”">​</a></h4><p>通过 <code>@Transactional</code> 注解或 XML 配置实现事务管理。</p><p>示例代码：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Service</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UserMapper userMapper;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Transactional</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> addUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(User </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        userMapper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insertUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        userMapper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="_2-2-编程式事务管理" tabindex="-1">2.2 编程式事务管理 <a class="header-anchor" href="#_2-2-编程式事务管理" aria-label="Permalink to “2.2 编程式事务管理”">​</a></h4><p>通过 <code>TransactionTemplate</code> 或 <code>PlatformTransactionManager</code> 手动管理事务。</p><p>示例代码：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Service</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UserMapper userMapper;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PlatformTransactionManager transactionManager;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> addUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(User </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        TransactionDefinition def </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DefaultTransactionDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        TransactionStatus status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> transactionManager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getTransaction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(def);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            userMapper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insertUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            userMapper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            transactionManager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">commit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(status);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Exception </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            transactionManager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rollback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(status);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            throw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_3-使用-java-ee-容器的事务管理" tabindex="-1">3. 使用 Java EE 容器的事务管理 <a class="header-anchor" href="#_3-使用-java-ee-容器的事务管理" aria-label="Permalink to “3. 使用 Java EE 容器的事务管理”">​</a></h3><p>在 Java EE 环境中，MyBatis 可以通过 JTA（Java Transaction API）与容器的事务管理器集成，通常通过 <code>UserTransaction</code> 或容器提供的其他机制管理事务。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to “总结”">​</a></h3><ul><li><strong>JDBC 事务管理</strong>：MyBatis 默认使用 JDBC 事务管理，手动控制事务。</li><li><strong>Spring 事务管理</strong>：与 Spring 集成时，推荐使用 Spring 的事务管理，支持声明式和编程式事务。</li><li><strong>Java EE 事务管理</strong>：在 Java EE 环境中，可通过 JTA 与容器的事务管理器集成。</li></ul><p>选择合适的事务管理方式取决于应用场景和框架集成需求。</p><h2 id="我使用springboot框架-我在一个方法中使用mybatis提供的mapper方法插入了一条数据-但是我没有在方法上使用-transactional注解-这种情况下有事务吗-2025-02-08" tabindex="-1">我使用springboot框架，我在一个方法中使用mybatis提供的mapper方法插入了一条数据，但是我没有在方法上使用@Transactional注解，这种情况下有事务吗 2025-02-08 <a class="header-anchor" href="#我使用springboot框架-我在一个方法中使用mybatis提供的mapper方法插入了一条数据-但是我没有在方法上使用-transactional注解-这种情况下有事务吗-2025-02-08" aria-label="Permalink to “我使用springboot框架，我在一个方法中使用mybatis提供的mapper方法插入了一条数据，但是我没有在方法上使用@Transactional注解，这种情况下有事务吗 2025-02-08”">​</a></h2><p>在 Spring Boot 中使用 MyBatis 时，如果你在一个方法中调用了 MyBatis 的 Mapper 方法插入数据，但没有在方法上使用 <code>@Transactional</code> 注解，那么<strong>默认情况下是没有事务管理的</strong>。具体表现如下：</p><hr><h3 id="_1-没有事务的情况" tabindex="-1">1. <strong>没有事务的情况</strong> <a class="header-anchor" href="#_1-没有事务的情况" aria-label="Permalink to “1. 没有事务的情况”">​</a></h3><ul><li>如果没有 <code>@Transactional</code> 注解，Spring 不会为该方法开启事务。</li><li>每次调用 MyBatis 的 Mapper 方法时，MyBatis 会使用默认的 JDBC 行为，即<strong>自动提交（auto-commit）</strong>。</li><li>这意味着每次执行 SQL 语句（如插入、更新、删除）后，数据库会立即提交该操作，无法回滚。</li></ul><hr><h3 id="_2-可能的风险" tabindex="-1">2. <strong>可能的风险</strong> <a class="header-anchor" href="#_2-可能的风险" aria-label="Permalink to “2. 可能的风险”">​</a></h3><ul><li><strong>数据不一致</strong>：如果方法中有多个数据库操作（例如插入多条数据），其中一个操作失败，前面的操作已经提交，无法回滚，可能导致数据不一致。</li><li><strong>缺乏事务控制</strong>：无法保证操作的原子性。</li></ul><hr><h3 id="_3-如何验证没有事务" tabindex="-1">3. <strong>如何验证没有事务</strong> <a class="header-anchor" href="#_3-如何验证没有事务" aria-label="Permalink to “3. 如何验证没有事务”">​</a></h3><p>你可以通过以下方式验证：</p><ul><li>在方法中故意抛出异常，观察数据是否被插入。</li><li>如果没有事务，即使抛出异常，已经插入的数据也会被提交到数据库。</li></ul><p>示例代码：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Service</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UserMapper userMapper;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> addUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(User </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        userMapper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insertUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 插入数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RuntimeException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;模拟异常&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 抛出异常</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>运行后，检查数据库，会发现 <code>user</code> 数据已经被插入，即使抛出了异常。</p><hr><h3 id="_4-如何启用事务" tabindex="-1">4. <strong>如何启用事务</strong> <a class="header-anchor" href="#_4-如何启用事务" aria-label="Permalink to “4. 如何启用事务”">​</a></h3><p>如果你希望方法中的操作在一个事务中执行，可以通过以下方式启用事务管理：</p><h4 id="_4-1-使用-transactional-注解" tabindex="-1">4.1 使用 <code>@Transactional</code> 注解 <a class="header-anchor" href="#_4-1-使用-transactional-注解" aria-label="Permalink to “4.1 使用 @Transactional 注解”">​</a></h4><p>在方法上添加 <code>@Transactional</code> 注解，Spring 会为该方法开启事务。</p><p>示例代码：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Service</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UserMapper userMapper;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Transactional</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> addUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(User </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        userMapper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insertUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 插入数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RuntimeException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;模拟异常&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 抛出异常</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>运行后，检查数据库，会发现 <code>user</code> 数据没有被插入，因为事务回滚了。</p><h4 id="_4-2-配置事务管理器" tabindex="-1">4.2 配置事务管理器 <a class="header-anchor" href="#_4-2-配置事务管理器" aria-label="Permalink to “4.2 配置事务管理器”">​</a></h4><p>确保 Spring Boot 项目中已经配置了事务管理器（通常使用 <code>DataSourceTransactionManager</code>）。Spring Boot 会自动配置事务管理器，只要你引入了相关依赖（如 <code>spring-boot-starter-data-jpa</code> 或 <code>mybatis-spring-boot-starter</code>）。</p><hr><h3 id="_5-总结" tabindex="-1">5. <strong>总结</strong> <a class="header-anchor" href="#_5-总结" aria-label="Permalink to “5. 总结”">​</a></h3><ul><li><strong>没有 <code>@Transactional</code> 注解</strong>：默认没有事务，每次 SQL 操作会立即提交。</li><li><strong>需要事务</strong>：在方法上添加 <code>@Transactional</code> 注解，确保方法中的多个操作在同一个事务中执行，保证原子性。</li><li><strong>验证事务</strong>：通过抛出异常的方式验证事务是否生效。</li></ul><p>如果你希望方法中的操作具有事务性，务必使用 <code>@Transactional</code> 注解。</p><h2 id="什么是乐观锁、悲观锁-2025-02-08" tabindex="-1">什么是乐观锁、悲观锁 2025-02-08 <a class="header-anchor" href="#什么是乐观锁、悲观锁-2025-02-08" aria-label="Permalink to “什么是乐观锁、悲观锁 2025-02-08”">​</a></h2><p>乐观锁和悲观锁是并发控制中常用的两种策略，用于解决多个事务或线程同时访问和修改同一数据时可能引发的数据不一致问题。它们的核心区别在于对并发冲突的处理方式。</p><hr><h3 id="_1-悲观锁-pessimistic-locking" tabindex="-1">1. <strong>悲观锁（Pessimistic Locking）</strong> <a class="header-anchor" href="#_1-悲观锁-pessimistic-locking" aria-label="Permalink to “1. 悲观锁（Pessimistic Locking）”">​</a></h3><p>悲观锁假设并发冲突很可能发生，因此在访问数据时直接加锁，确保其他事务或线程无法修改数据，直到当前操作完成。</p><h4 id="实现方式" tabindex="-1">实现方式 <a class="header-anchor" href="#实现方式" aria-label="Permalink to “实现方式”">​</a></h4><ul><li>在数据库中，通常通过 <code>SELECT ... FOR UPDATE</code> 或 <code>SELECT ... LOCK IN SHARE MODE</code> 实现。</li><li>在代码中，可以通过 <code>synchronized</code> 关键字或 <code>ReentrantLock</code> 实现。</li></ul><h4 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to “特点”">​</a></h4><ul><li><strong>优点</strong>：保证数据强一致性，适合写操作多的场景。</li><li><strong>缺点</strong>：加锁会降低并发性能，可能导致死锁。</li></ul><h4 id="适用场景" tabindex="-1">适用场景 <a class="header-anchor" href="#适用场景" aria-label="Permalink to “适用场景”">​</a></h4><ul><li>写操作频繁，且并发冲突概率高的场景。</li><li>例如：银行转账、库存扣减等。</li></ul><h4 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to “示例”">​</a></h4><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 数据库中使用悲观锁</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BEGIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> account</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FOR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 加锁</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> account</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> balance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> balance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COMMIT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><hr><h3 id="_2-乐观锁-optimistic-locking" tabindex="-1">2. <strong>乐观锁（Optimistic Locking）</strong> <a class="header-anchor" href="#_2-乐观锁-optimistic-locking" aria-label="Permalink to “2. 乐观锁（Optimistic Locking）”">​</a></h3><p>乐观锁假设并发冲突很少发生，因此在访问数据时不会加锁，而是在提交时检查数据是否被其他事务修改过。如果发现冲突，则回滚或重试。</p><h4 id="实现方式-1" tabindex="-1">实现方式 <a class="header-anchor" href="#实现方式-1" aria-label="Permalink to “实现方式”">​</a></h4><ul><li>通常通过版本号（Version）或时间戳（Timestamp）实现。</li><li>在数据库中，可以为表添加一个 <code>version</code> 字段，每次更新时检查版本号是否一致。</li></ul><h4 id="特点-1" tabindex="-1">特点 <a class="header-anchor" href="#特点-1" aria-label="Permalink to “特点”">​</a></h4><ul><li><strong>优点</strong>：不加锁，提高并发性能，适合读操作多的场景。</li><li><strong>缺点</strong>：冲突时需要回滚或重试，可能增加业务逻辑复杂度。</li></ul><h4 id="适用场景-1" tabindex="-1">适用场景 <a class="header-anchor" href="#适用场景-1" aria-label="Permalink to “适用场景”">​</a></h4><ul><li>读操作频繁，写操作较少的场景。</li><li>例如：电商库存、评论系统等。</li></ul><h4 id="示例-1" tabindex="-1">示例 <a class="header-anchor" href="#示例-1" aria-label="Permalink to “示例”">​</a></h4><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 数据库中使用乐观锁</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 表结构</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> product</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id      </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    stock   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    version</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> INT</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> -- 版本号字段</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 更新操作</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stock   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    version</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> version</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  AND</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> version</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 检查版本号</span></span></code></pre></div><p>在代码中，可以通过以下方式实现乐观锁：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> updateProduct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Product product) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rows </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> productMapper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateProduct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            product.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            product.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getStock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            product.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    );</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (rows </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OptimisticLockException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;数据已被修改，请重试&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h3 id="_3-对比总结" tabindex="-1">3. <strong>对比总结</strong> <a class="header-anchor" href="#_3-对比总结" aria-label="Permalink to “3. 对比总结”">​</a></h3><table tabindex="0"><thead><tr><th>特性</th><th>悲观锁</th><th>乐观锁</th></tr></thead><tbody><tr><td><strong>加锁时机</strong></td><td>访问数据时立即加锁</td><td>提交时检查冲突</td></tr><tr><td><strong>性能</strong></td><td>低（加锁影响并发）</td><td>高（不加锁，冲突时回滚）</td></tr><tr><td><strong>适用场景</strong></td><td>写操作多，冲突概率高</td><td>读操作多，冲突概率低</td></tr><tr><td><strong>实现复杂度</strong></td><td>简单</td><td>较复杂（需处理冲突）</td></tr><tr><td><strong>数据一致性</strong></td><td>强一致性</td><td>最终一致性</td></tr></tbody></table><hr><h3 id="_4-如何选择" tabindex="-1">4. <strong>如何选择</strong> <a class="header-anchor" href="#_4-如何选择" aria-label="Permalink to “4. 如何选择”">​</a></h3><ul><li>如果业务场景中写操作频繁，且对数据一致性要求高，选择<strong>悲观锁</strong>。</li><li>如果业务场景中读操作频繁，且冲突概率低，选择<strong>乐观锁</strong>。</li></ul><hr><h3 id="_5-实际应用中的注意事项" tabindex="-1">5. <strong>实际应用中的注意事项</strong> <a class="header-anchor" href="#_5-实际应用中的注意事项" aria-label="Permalink to “5. 实际应用中的注意事项”">​</a></h3><ul><li><strong>悲观锁</strong>：注意死锁问题，避免长时间持有锁。</li><li><strong>乐观锁</strong>：需要设计重试机制，处理冲突时的回滚或重试逻辑。</li></ul><p>通过合理选择锁机制，可以在保证数据一致性的同时，最大化系统的并发性能。</p><h2 id="mybatis-框架使用了哪些设计模式" tabindex="-1">mybatis 框架使用了哪些设计模式 <a class="header-anchor" href="#mybatis-框架使用了哪些设计模式" aria-label="Permalink to “mybatis 框架使用了哪些设计模式”">​</a></h2><p>MyBatis 框架在其设计和实现中使用了多种设计模式，以下是主要的设计模式及其应用场景：</p><h3 id="_1-builder模式" tabindex="-1">1. <strong>Builder模式</strong> <a class="header-anchor" href="#_1-builder模式" aria-label="Permalink to “1. Builder模式”">​</a></h3><ul><li><strong>应用场景</strong>：MyBatis 在初始化过程中，使用 <code>SqlSessionFactoryBuilder</code> 构建 <code>SqlSessionFactory</code>，并通过 <code>XMLConfigBuilder</code>、<code>XMLMapperBuilder</code> 等类解析配置文件，构建核心对象 <code>Configuration</code>。这些 Builder 类负责将复杂的配置解析和对象构建过程分离<a href="./@ref.html">1</a><a href="./@ref.html">2</a><a href="./@ref.html">4</a>。</li><li><strong>示例</strong>：<code>SqlSessionFactoryBuilder</code> 根据不同的输入参数构建 <code>SqlSessionFactory</code> 对象<a href="./@ref.html">1</a><a href="./@ref.html">2</a>。</li></ul><h3 id="_2-工厂模式" tabindex="-1">2. <strong>工厂模式</strong> <a class="header-anchor" href="#_2-工厂模式" aria-label="Permalink to “2. 工厂模式”">​</a></h3><ul><li><strong>应用场景</strong>：MyBatis 使用工厂模式创建核心对象，如 <code>SqlSessionFactory</code> 负责创建 <code>SqlSession</code>，<code>MapperProxyFactory</code> 负责创建 Mapper 接口的代理对象<a href="./@ref.html">1</a><a href="./@ref.html">2</a><a href="./@ref.html">4</a>。</li><li><strong>示例</strong>：<code>SqlSessionFactory</code> 的 <code>openSession()</code> 方法根据不同的参数创建 <code>SqlSession</code> 对象<a href="./@ref.html">1</a><a href="./@ref.html">2</a>。</li></ul><h3 id="_3-单例模式" tabindex="-1">3. <strong>单例模式</strong> <a class="header-anchor" href="#_3-单例模式" aria-label="Permalink to “3. 单例模式”">​</a></h3><ul><li><strong>应用场景</strong>：MyBatis 中的 <code>ErrorContext</code> 和 <code>LogFactory</code> 使用了单例模式，确保全局唯一实例。<code>ErrorContext</code> 用于记录线程执行环境的错误信息，<code>LogFactory</code> 用于获取日志对象<a href="./@ref.html">1</a><a href="./@ref.html">2</a><a href="./@ref.html">4</a>。</li><li><strong>示例</strong>：<code>LogFactory</code> 提供了一个全局的日志工厂，用于获取配置好的日志对象<a href="./@ref.html">2</a><a href="./@ref.html">4</a>。</li></ul><h3 id="_4-代理模式" tabindex="-1">4. <strong>代理模式</strong> <a class="header-anchor" href="#_4-代理模式" aria-label="Permalink to “4. 代理模式”">​</a></h3><ul><li><strong>应用场景</strong>：MyBatis 的核心功能之一是通过动态代理实现 Mapper 接口与 SQL 语句的绑定。<code>MapperProxy</code> 是 Mapper 接口的代理类，负责将接口方法调用转换为 SQL 执行<a href="./@ref.html">1</a><a href="./@ref.html">2</a><a href="./@ref.html">4</a>。</li><li><strong>示例</strong>：<code>MapperProxy</code> 使用 JDK 动态代理为 Mapper 接口创建代理对象<a href="./@ref.html">1</a><a href="./@ref.html">4</a>。</li></ul><h3 id="_5-装饰器模式" tabindex="-1">5. <strong>装饰器模式</strong> <a class="header-anchor" href="#_5-装饰器模式" aria-label="Permalink to “5. 装饰器模式”">​</a></h3><ul><li><strong>应用场景</strong>：MyBatis 的缓存模块使用了装饰器模式，通过 <code>BlockingCache</code>、<code>FifoCache</code>、<code>LruCache</code> 等装饰类为缓存添加不同的功能，如阻塞、日志、同步等<a href="./@ref.html">3</a><a href="./@ref.html">4</a>。</li><li><strong>示例</strong>：<code>LruCache</code> 装饰 <code>PerpetualCache</code>，实现最近最少使用缓存策略<a href="./@ref.html">3</a><a href="./@ref.html">4</a>。</li></ul><h3 id="_6-模板方法模式" tabindex="-1">6. <strong>模板方法模式</strong> <a class="header-anchor" href="#_6-模板方法模式" aria-label="Permalink to “6. 模板方法模式”">​</a></h3><ul><li><strong>应用场景</strong>：MyBatis 的 <code>BaseExecutor</code> 和 <code>BaseTypeHandler</code> 使用了模板方法模式，定义了操作的骨架，具体实现由子类完成。例如，<code>BaseExecutor</code> 实现了 SQL 执行的通用逻辑，子类如 <code>SimpleExecutor</code> 负责具体实现<a href="./@ref.html">1</a><a href="./@ref.html">3</a><a href="./@ref.html">4</a>。</li><li><strong>示例</strong>：<code>BaseTypeHandler</code> 定义了类型处理的模板方法，子类如 <code>IntegerTypeHandler</code> 负责具体实现<a href="./@ref.html">3</a><a href="./@ref.html">4</a>。</li></ul><h3 id="_7-适配器模式" tabindex="-1">7. <strong>适配器模式</strong> <a class="header-anchor" href="#_7-适配器模式" aria-label="Permalink to “7. 适配器模式”">​</a></h3><ul><li><strong>应用场景</strong>：MyBatis 的日志模块使用适配器模式，将不同的日志框架（如 Log4j、JDK Logging）适配到统一的 <code>Log</code> 接口<a href="./@ref.html">1</a><a href="./@ref.html">4</a>。</li><li><strong>示例</strong>：<code>Log</code> 接口适配了多种日志框架的实现<a href="./@ref.html">1</a><a href="./@ref.html">4</a>。</li></ul><h3 id="_8-组合模式" tabindex="-1">8. <strong>组合模式</strong> <a class="header-anchor" href="#_8-组合模式" aria-label="Permalink to “8. 组合模式”">​</a></h3><ul><li><strong>应用场景</strong>：MyBatis 的 <code>SqlNode</code> 及其子类（如 <code>ChooseSqlNode</code>）使用了组合模式，将多个 SQL 节点组合成复杂的 SQL 语句<a href="./@ref.html">1</a>。</li><li><strong>示例</strong>：<code>SqlNode</code> 及其子类共同构建动态 SQL 语句<a href="./@ref.html">1</a>。</li></ul><h3 id="_9-迭代器模式" tabindex="-1">9. <strong>迭代器模式</strong> <a class="header-anchor" href="#_9-迭代器模式" aria-label="Permalink to “9. 迭代器模式”">​</a></h3><ul><li><strong>应用场景</strong>：MyBatis 的 <code>PropertyTokenizer</code> 使用了迭代器模式，用于解析属性表达式的迭代<a href="./@ref.html">1</a>。</li><li><strong>示例</strong>：<code>PropertyTokenizer</code> 迭代解析属性表达式<a href="./@ref.html">1</a>。</li></ul><h3 id="总结-1" tabindex="-1">总结 <a class="header-anchor" href="#总结-1" aria-label="Permalink to “总结”">​</a></h3><p>MyBatis 通过灵活运用多种设计模式，实现了配置解析、对象创建、SQL 执行、缓存管理等核心功能。这些设计模式不仅提高了代码的复用性和可维护性，还使得框架更加灵活和可扩展。</p>`,110)])])}const g=i(h,[["render",e]]);export{E as __pageData,g as default};
