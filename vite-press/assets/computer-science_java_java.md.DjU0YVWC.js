import{_ as i,c as a,o as n,af as l}from"./chunks/framework.Bhntpte7.js";const g=JSON.parse('{"title":"java","description":"","frontmatter":{"date":"","draft":false,"title":"java","weight":2,"outline":[1,8]},"headers":[],"relativePath":"computer-science/java/java.md","filePath":"computer-science/java/java.md"}'),h={name:"computer-science/java/java.md"};function t(e,s,k,p,r,E){return n(),a("div",null,[...s[0]||(s[0]=[l(`<h1 id="github-repository" tabindex="-1">github repository <a class="header-anchor" href="#github-repository" aria-label="Permalink to “github repository”">​</a></h1><ul><li><a href="https://github.com/binarywang/qrcode-utils" target="_blank" rel="noreferrer">binarywang/qrcode-utils</a><ul><li>二维码生成工具</li></ul></li><li><a href="https://www.tio-boot.com/" target="_blank" rel="noreferrer">Tio Boot Docs</a></li></ul><h1 id="string" tabindex="-1">String <a class="header-anchor" href="#string" aria-label="Permalink to “String”">​</a></h1><h2 id="stringbuffer-是怎么保证线程安全的" tabindex="-1">StringBuffer 是怎么保证线程安全的？ <a class="header-anchor" href="#stringbuffer-是怎么保证线程安全的" aria-label="Permalink to “StringBuffer 是怎么保证线程安全的？”">​</a></h2><p><code>StringBuffer</code> 是通过 <strong>同步机制</strong> 来保证线程安全的。具体来说，它的所有关键方法（如 <code>append()</code>、<code>insert()</code>、<code>delete()</code>、<code>reverse()</code> 等）都使用了 <code>synchronized</code> 关键字进行修饰，确保同一时间只有一个线程可以执行这些方法<a href="./@ref.html">1</a><a href="./@ref.html">2</a><a href="./@ref.html">7</a>。</p><h3 id="_1-同步方法" tabindex="-1">1. <strong>同步方法</strong> <a class="header-anchor" href="#_1-同步方法" aria-label="Permalink to “1. 同步方法”">​</a></h3><p><code>StringBuffer</code> 的方法在设计时都加了 <code>synchronized</code> 关键字，例如：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> synchronized</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> StringBuffer </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String str){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 方法实现</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这种机制确保了在多线程环境下，只有一个线程可以访问和修改 <code>StringBuffer</code> 的内容，避免了竞态条件（Race Condition）和数据不一致的问题<a href="./@ref.html">1</a><a href="./@ref.html">2</a>。</p><h3 id="_2-锁机制" tabindex="-1">2. <strong>锁机制</strong> <a class="header-anchor" href="#_2-锁机制" aria-label="Permalink to “2. 锁机制”">​</a></h3><p><code>StringBuffer</code> 内部使用了一个锁对象（即 <code>this</code> 锁），当一个线程调用 <code>StringBuffer</code> 的同步方法时，会获取这个锁，其他线程必须等待锁释放后才能继续执行。这种锁机制保证了线程间的同步<a href="./@ref.html">1</a><a href="./@ref.html">7</a>。</p><h3 id="_3-性能影响" tabindex="-1">3. <strong>性能影响</strong> <a class="header-anchor" href="#_3-性能影响" aria-label="Permalink to “3. 性能影响”">​</a></h3><p>虽然 <code>StringBuffer</code> 的同步机制确保了线程安全，但也带来了性能开销。因为在多线程环境下，每次只能有一个线程操作 <code>StringBuffer</code> ，其他线程会被阻塞。因此，在单线程环境下，推荐使用性能更高的 <code>StringBuilder</code>，它没有同步机制<a href="./@ref.html">1</a><a href="./@ref.html">5</a><a href="./@ref.html">8</a>。</p><h3 id="_4-适用场景" tabindex="-1">4. <strong>适用场景</strong> <a class="header-anchor" href="#_4-适用场景" aria-label="Permalink to “4. 适用场景”">​</a></h3><ul><li><strong>多线程环境</strong>：如果需要在多线程环境下对字符串进行操作，<code>StringBuffer</code> 是合适的选择，因为它确保了线程安全<a href="./@ref.html">2</a><a href="./@ref.html">9</a>。</li><li><strong>单线程环境</strong>：在单线程环境下，建议使用 <code>StringBuilder</code>，因为它没有同步开销，性能更高<a href="./@ref.html">1</a><a href="./@ref.html">8</a>。</li></ul><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to “总结”">​</a></h3><p><code>StringBuffer</code> 通过 <code>synchronized</code> 关键字实现的同步机制，确保了多线程环境下的线程安全性。虽然这种机制带来了性能开销，但在需要线程安全的场景下，它是一个可靠的选择<a href="./@ref.html">1</a><a href="./@ref.html">2</a><a href="./@ref.html">7</a>。</p><h2 id="stringbuffer-和-stringbuilder-字符串在底层是以什么数据结构保存的" tabindex="-1">StringBuffer 和 StringBuilder 字符串在底层是以什么数据结构保存的 <a class="header-anchor" href="#stringbuffer-和-stringbuilder-字符串在底层是以什么数据结构保存的" aria-label="Permalink to “StringBuffer 和 StringBuilder 字符串在底层是以什么数据结构保存的”">​</a></h2><p><code>StringBuffer</code> 和 <code>StringBuilder</code> 在底层都是使用 <strong>字符数组（<code>char[]</code>）</strong> 来保存字符串数据的。具体来说，它们继承了 <code>AbstractStringBuilder</code> 类，而 <code>AbstractStringBuilder</code> 类中定义了一个 <code>char[] value</code> 数组，用于存储字符序列<a href="./@ref.html">1</a><a href="./@ref.html">3</a><a href="./@ref.html">4</a>。</p><h3 id="_1-底层数据结构" tabindex="-1">1. <strong>底层数据结构</strong> <a class="header-anchor" href="#_1-底层数据结构" aria-label="Permalink to “1. 底层数据结构”">​</a></h3><ul><li><code>StringBuffer</code> 和 <code>StringBuilder</code> 的底层数据结构是一个动态的 <code>char[]</code> 数组，数组名为 <code>value</code>。</li><li><code>value</code> 数组的长度会根据字符串的长度动态扩容，以适应字符串的修改操作<a href="./@ref.html">3</a><a href="./@ref.html">4</a>。</li></ul><h3 id="_2-初始容量" tabindex="-1">2. <strong>初始容量</strong> <a class="header-anchor" href="#_2-初始容量" aria-label="Permalink to “2. 初始容量”">​</a></h3><ul><li>如果使用无参构造函数创建 <code>StringBuffer</code> 或 <code>StringBuilder</code>，默认的初始容量为 <strong>16</strong>。</li><li>如果使用带参构造函数（如 <code>new StringBuilder(&quot;abc&quot;)</code>），初始容量为 <strong>字符串长度 + 16</strong><a href="./@ref.html">3</a><a href="./@ref.html">4</a>。</li></ul><h3 id="_3-扩容机制" tabindex="-1">3. <strong>扩容机制</strong> <a class="header-anchor" href="#_3-扩容机制" aria-label="Permalink to “3. 扩容机制”">​</a></h3><ul><li>当 <code>value</code> 数组的容量不足以容纳新的字符时，会触发扩容操作。</li><li>扩容的规则是：<strong>新容量 = 原容量 * 2 + 2</strong>。如果仍然不足，则直接扩容到所需的最小容量<a href="./@ref.html">3</a><a href="./@ref.html">4</a>。</li></ul><h3 id="_4-示例代码" tabindex="-1">4. <strong>示例代码</strong> <a class="header-anchor" href="#_4-示例代码" aria-label="Permalink to “4. 示例代码”">​</a></h3><p>以下是 <code>AbstractStringBuilder</code> 类中定义 <code>value</code> 数组的部分源码：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AbstractStringBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] value; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 用于存储字符序列的数组</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count;    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 当前字符数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_5-总结" tabindex="-1">5. <strong>总结</strong> <a class="header-anchor" href="#_5-总结" aria-label="Permalink to “5. 总结”">​</a></h3><p><code>StringBuffer</code> 和 <code>StringBuilder</code> 的底层数据结构是 <code>char[]</code> 数组，通过动态扩容机制支持字符串的修改操作。两者的主要区别在于线程安全性：</p><ul><li><code>StringBuffer</code> 是线程安全的，所有方法都加了 <code>synchronized</code> 修饰。</li><li><code>StringBuilder</code> 是线程不安全的，但性能更高<a href="./@ref.html">5</a><a href="./@ref.html">6</a><a href="./@ref.html">7</a>。</li></ul><p>如果需要在多线程环境下操作字符串，建议使用 <code>StringBuffer</code>；在单线程环境下，建议使用 <code>StringBuilder</code> 以获得更好的性能<a href="./@ref.html">5</a><a href="./@ref.html">6</a><a href="./@ref.html">7</a>。</p><h1 id="虚拟线程" tabindex="-1">虚拟线程 <a class="header-anchor" href="#虚拟线程" aria-label="Permalink to “虚拟线程”">​</a></h1><h2 id="什么是虚拟线程" tabindex="-1">什么是虚拟线程？ <a class="header-anchor" href="#什么是虚拟线程" aria-label="Permalink to “什么是虚拟线程？”">​</a></h2><p><strong>虚拟线程（Virtual Threads）</strong> 是 Java 19 引入的一种轻量级线程，旨在简化和增强并发编程，特别是在处理大量 I/O 密集型任务时<a href="./@ref.html">1</a><a href="./@ref.html">2</a>。它是由 JVM 管理的线程，与传统线程（平台线程）相比，虚拟线程具有更高的并发性和更低的资源开销<a href="./@ref.html">1</a><a href="./@ref.html">6</a>。</p><h3 id="虚拟线程的核心特点" tabindex="-1">虚拟线程的核心特点 <a class="header-anchor" href="#虚拟线程的核心特点" aria-label="Permalink to “虚拟线程的核心特点”">​</a></h3><ol><li><strong>轻量级</strong>：虚拟线程的创建和切换开销非常小，可以轻松创建数百万个虚拟线程，而不会像传统线程那样消耗大量系统资源<a href="./@ref.html">1</a><a href="./@ref.html">6</a>。</li><li><strong>I/O 优化</strong>：虚拟线程在遇到 I/O 阻塞（如网络通信、文件读取）时，会暂时放弃等待并切换到其他任务，从而提高 CPU 利用率，避免线程空闲<a href="./@ref.html">1</a><a href="./@ref.html">2</a>。</li><li><strong>JVM 管理</strong>：虚拟线程由 JVM 调度和管理，而不是由操作系统直接管理。这使得虚拟线程的创建和销毁更加高效<a href="./@ref.html">1</a><a href="./@ref.html">6</a>。</li><li><strong>与传统线程的区别</strong>：传统线程与操作系统线程是一对一的关系，资源消耗较大；而虚拟线程与操作系统线程是多对一的关系，多个虚拟线程可以在少量操作系统线程上运行<a href="./@ref.html">6</a>。</li></ol><h3 id="虚拟线程的适用场景" tabindex="-1">虚拟线程的适用场景 <a class="header-anchor" href="#虚拟线程的适用场景" aria-label="Permalink to “虚拟线程的适用场景”">​</a></h3><p>虚拟线程特别适合以下场景：</p><ul><li><strong>高并发任务</strong>：如处理大量网络请求或文件 I/O 操作<a href="./@ref.html">1</a><a href="./@ref.html">6</a>。</li><li><strong>I/O 密集型任务</strong>：任务中涉及大量等待时间（如数据库查询、HTTP 请求）<a href="./@ref.html">1</a><a href="./@ref.html">6</a>。</li><li><strong>高吞吐量应用</strong>：需要同时处理大量任务的应用<a href="./@ref.html">6</a>。</li></ul><h3 id="虚拟线程的使用" tabindex="-1">虚拟线程的使用 <a class="header-anchor" href="#虚拟线程的使用" aria-label="Permalink to “虚拟线程的使用”">​</a></h3><p>在 Java 21 中，虚拟线程已经成为正式功能，可以通过以下方式创建和使用：</p><ol><li><strong>直接创建虚拟线程</strong>：<div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ofVirtual</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;这是一个虚拟线程&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></li><li><strong>使用虚拟线程池</strong>：<div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Executors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newVirtualThreadPerTaskExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    executor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">submit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;任务在虚拟线程中执行&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><h3 id="虚拟线程的局限性" tabindex="-1">虚拟线程的局限性 <a class="header-anchor" href="#虚拟线程的局限性" aria-label="Permalink to “虚拟线程的局限性”">​</a></h3><ul><li><strong>CPU 密集型任务</strong>：虚拟线程在处理计算密集型任务时，性能与传统线程相比没有明显优势，因为计算任务不存在大量 I/O 等待<a href="./@ref.html">1</a><a href="./@ref.html">6</a>。</li><li><strong>内存占用</strong>：虽然虚拟线程轻量，但大量虚拟线程仍会增加内存占用和垃圾回收的压力<a href="./@ref.html">3</a>。</li></ul><h3 id="总结-1" tabindex="-1">总结 <a class="header-anchor" href="#总结-1" aria-label="Permalink to “总结”">​</a></h3><p>虚拟线程是 Java 并发编程的重要改进，特别适合高并发和 I/O 密集型任务。它通过轻量级的设计和高效的调度机制，显著提升了应用的吞吐量和资源利用率<a href="./@ref.html">1</a><a href="./@ref.html">2</a><a href="./@ref.html">6</a>。</p><h2 id="响应式编程和虚拟线程都能提高程序的并发量-它们的差异是什么" tabindex="-1">响应式编程和虚拟线程都能提高程序的并发量，它们的差异是什么 <a class="header-anchor" href="#响应式编程和虚拟线程都能提高程序的并发量-它们的差异是什么" aria-label="Permalink to “响应式编程和虚拟线程都能提高程序的并发量，它们的差异是什么”">​</a></h2><p>响应式编程和虚拟线程虽然都能提高程序的并发量，但它们的实现方式、适用场景以及开发体验存在显著差异。以下是两者的主要区别：</p><hr><h3 id="_1-实现原理" tabindex="-1">1. <strong>实现原理</strong> <a class="header-anchor" href="#_1-实现原理" aria-label="Permalink to “1. 实现原理”">​</a></h3><ul><li><strong>响应式编程</strong>：<br> 响应式编程基于异步数据流和事件驱动模型，使用发布/订阅模式（如 <code>Flux</code> 和 <code>Mono</code>）来处理异步任务。它通过非阻塞 I/O 和回调机制，确保线程在等待 I/O 操作时不会阻塞，而是继续处理其他任务。响应式编程的核心是“** 非阻塞<strong>”和“</strong>事件驱动**”<a href="./@ref.html">1</a><a href="./@ref.html">2</a>。</li><li><strong>虚拟线程</strong>：<br> 虚拟线程是 JVM 管理的轻量级线程，底层仍然依赖于操作系统的平台线程（内核线程），但虚拟线程的创建和切换开销远低于传统线程。当虚拟线程遇到阻塞操作时，JVM 会将其挂起并切换到其他虚拟线程，从而避免线程资源的浪费<a href="./@ref.html">3</a><a href="./@ref.html">7</a>。</li></ul><hr><h3 id="_2-编程模型" tabindex="-1">2. <strong>编程模型</strong> <a class="header-anchor" href="#_2-编程模型" aria-label="Permalink to “2. 编程模型”">​</a></h3><ul><li><strong>响应式编程</strong>：<br> 响应式编程采用声明式编程范式，代码通常由一系列操作符（如 <code>map</code>、<code>flatMap</code>）组成，形成数据流的转换管道。这种模型需要开发者熟悉函数式编程和响应式 API，代码可读性较差，调试难度较高<a href="./@ref.html">1</a><a href="./@ref.html">4</a>。</li><li><strong>虚拟线程</strong>：<br> 虚拟线程保留了传统的阻塞式编程模型，开发者可以像使用平台线程一样编写代码，无需改变编程习惯。虚拟线程的引入使得高并发编程更加简单和直观<a href="./@ref.html">3</a><a href="./@ref.html">7</a>。</li></ul><hr><h3 id="_3-适用场景" tabindex="-1">3. <strong>适用场景</strong> <a class="header-anchor" href="#_3-适用场景" aria-label="Permalink to “3. 适用场景”">​</a></h3><ul><li><strong>响应式编程</strong>：<br> 适用于 I/O 密集型任务，如网络请求、数据库操作等。它通过非阻塞 I/O 和事件驱动机制，最大化线程的利用率。但在 CPU 密集型任务中，响应式编程的性能提升有限，甚至可能适得其反<a href="./@ref.html">2</a><a href="./@ref.html">4</a>。</li><li><strong>虚拟线程</strong>：<br> 同样适用于 I/O 密集型任务，能够显著提高并发性能。虚拟线程的优势在于其轻量化和低开销，适合处理大量并发请求。但对于 CPU 密集型任务，虚拟线程的性能提升有限，因为虚拟线程的调度仍然依赖于平台线程<a href="./@ref.html">3</a><a href="./@ref.html">7</a> 。</li></ul><hr><h3 id="_4-开发体验" tabindex="-1">4. <strong>开发体验</strong> <a class="header-anchor" href="#_4-开发体验" aria-label="Permalink to “4. 开发体验”">​</a></h3><ul><li><strong>响应式编程</strong>：<br> 响应式编程的代码通常难以理解和调试，尤其是回调嵌套和复杂的操作符链。开发者需要具备函数式编程和响应式编程的知识，学习成本较高。</li><li><strong>虚拟线程</strong>：<br> 虚拟线程的使用与传统的线程编程类似，开发者无需学习新的编程范式，代码更直观且易于维护。虚拟线程的引入降低了高并发编程的门槛。</li></ul><hr><h3 id="_5-性能优化" tabindex="-1">5. <strong>性能优化</strong> <a class="header-anchor" href="#_5-性能优化" aria-label="Permalink to “5. 性能优化”">​</a></h3><ul><li><strong>响应式编程</strong>：<br> 通过减少线程阻塞和上下文切换，响应式编程能够提高 CPU 和内存的利用率。但它依赖于开发者正确使用非阻塞 API 和操作符。</li><li><strong>虚拟线程</strong>：<br> 虚拟线程通过轻量化的线程管理和高效的调度机制，减少了线程创建和上下文切换的开销。虚拟线程的性能优化由 JVM 自动完成，开发者无需额外干预。</li></ul><hr><h3 id="总结-2" tabindex="-1">总结 <a class="header-anchor" href="#总结-2" aria-label="Permalink to “总结”">​</a></h3><ul><li><strong>响应式编程</strong>和<strong>虚拟线程</strong>的目标都是提高程序的并发性能，但它们的实现方式和适用场景不同。</li><li>响应式编程适合需要高度优化的 I/O 密集型任务，但代码复杂且学习成本高。</li><li>虚拟线程提供了一种更简单、直观的方式来实现高并发，特别适合需要快速开发和维护的场景</li></ul><p>如果需要更深入的技术细节，可以参考相关文档或实践案例。</p><h2 id="虚拟线程在jvm中的内存模型是怎样的" tabindex="-1">虚拟线程在jvm中的内存模型是怎样的 <a class="header-anchor" href="#虚拟线程在jvm中的内存模型是怎样的" aria-label="Permalink to “虚拟线程在jvm中的内存模型是怎样的”">​</a></h2><p>虚拟线程（Virtual Threads）是Java 19引入并在Java 21中正式发布的一项新特性，旨在提高I/O密集型任务的性能。虚拟线程的内存模型与传统平台线程（Platform Threads）有所不同，主要体现在以下几个方面：</p><h3 id="_1-虚拟线程的内存结构" tabindex="-1">1. <strong>虚拟线程的内存结构</strong> <a class="header-anchor" href="#_1-虚拟线程的内存结构" aria-label="Permalink to “1. 虚拟线程的内存结构”">​</a></h3><p>虚拟线程由JVM管理，而不是操作系统，因此它们的内存占用远小于平台线程。每个虚拟线程通常只占用几KB的内存，而平台线程则需要1MB左右的内存<a href="./@ref.html">4</a> 。虚拟线程的轻量化设计使得JVM能够轻松支持数百万个虚拟线程，而不会显著增加内存负担。</p><h3 id="_2-虚拟线程与jvm内存模型的关系" tabindex="-1">2. <strong>虚拟线程与JVM内存模型的关系</strong> <a class="header-anchor" href="#_2-虚拟线程与jvm内存模型的关系" aria-label="Permalink to “2. 虚拟线程与JVM内存模型的关系”">​</a></h3><p>虚拟线程仍然依赖于JVM的内存模型，包括程序计数器、虚拟机栈、本地方法栈、堆和方法区等<a href="./@ref.html">1</a><a href="./@ref.html">2</a>。具体来说：</p><ul><li><strong>程序计数器</strong>：每个虚拟线程都有自己的程序计数器，用于记录当前执行的字节码指令位置。</li><li><strong>虚拟机栈</strong>：虚拟线程的栈帧存储在JVM的栈内存中，但由于虚拟线程的轻量化设计，栈帧的创建和销毁开销较小。</li><li><strong>堆</strong>：虚拟线程创建的对象实例仍然存储在堆中，与平台线程共享堆内存<a href="./@ref.html">2</a><a href="./@ref.html">6</a>。</li></ul><h3 id="_3-虚拟线程的调度与内存使用" tabindex="-1">3. <strong>虚拟线程的调度与内存使用</strong> <a class="header-anchor" href="#_3-虚拟线程的调度与内存使用" aria-label="Permalink to “3. 虚拟线程的调度与内存使用”">​</a></h3><p>虚拟线程的调度由JVM负责，而不是操作系统。当虚拟线程遇到I/O阻塞时，JVM会将其挂起并切换到其他虚拟线程，从而避免CPU资源的浪费。这种机制减少了线程上下文切换的开销，并提高了内存的利用率<a href="./@ref.html">4</a><a href="./@ref.html">5</a>。</p><h3 id="_4-虚拟线程与垃圾回收" tabindex="-1">4. <strong>虚拟线程与垃圾回收</strong> <a class="header-anchor" href="#_4-虚拟线程与垃圾回收" aria-label="Permalink to “4. 虚拟线程与垃圾回收”">​</a></h3><p>虚拟线程创建的对象实例仍然受到JVM垃圾回收机制的管理。虚拟线程的轻量化设计不会增加垃圾回收的负担，反而通过减少线程阻塞和上下文切换，提高了垃圾回收的效率<a href="./@ref.html">5</a><a href="./@ref.html">6</a>。</p><h3 id="_5-虚拟线程的适用场景" tabindex="-1">5. <strong>虚拟线程的适用场景</strong> <a class="header-anchor" href="#_5-虚拟线程的适用场景" aria-label="Permalink to “5. 虚拟线程的适用场景”">​</a></h3><p>虚拟线程特别适用于高并发、I/O密集型任务，例如网络请求、文件读写等。在这些场景下，虚拟线程可以显著减少线程阻塞带来的性能损失，从而提高整体吞吐量<a href="./@ref.html">4</a><a href="./@ref.html">5</a>。</p><h3 id="总结-3" tabindex="-1">总结 <a class="header-anchor" href="#总结-3" aria-label="Permalink to “总结”">​</a></h3><p>虚拟线程在JVM中的内存模型与传统平台线程类似，但由于其轻量化设计和由JVM管理的特性，虚拟线程的内存占用和调度开销显著降低。虚拟线程的内存模型仍然依赖于JVM的程序计数器、虚拟机栈、堆等结构，但其高效的调度机制和轻量化的内存占用使其在处理高并发任务时表现出色<a href="./@ref.html">1</a><a href="./@ref.html">2</a><a href="./@ref.html">4</a> 。</p><h2 id="虚拟线程会增加jvm的性能消耗吗" tabindex="-1">虚拟线程会增加jvm的性能消耗吗 <a class="header-anchor" href="#虚拟线程会增加jvm的性能消耗吗" aria-label="Permalink to “虚拟线程会增加jvm的性能消耗吗”">​</a></h2><p>虚拟线程在JVM中的性能消耗相对较低，尤其是在处理I/O密集型任务时，它们通过提高CPU利用率来优化性能。以下是具体分析：</p><h3 id="_1-虚拟线程的资源消耗" tabindex="-1">1. <strong>虚拟线程的资源消耗</strong> <a class="header-anchor" href="#_1-虚拟线程的资源消耗" aria-label="Permalink to “1. 虚拟线程的资源消耗”">​</a></h3><p>虚拟线程由JVM管理，而不是操作系统，因此它们的创建和切换开销远低于传统的平台线程。每个虚拟线程仅占用几KB的内存，而平台线程通常需要1MB左右的内存<a href="./@ref.html">5</a> 。这种轻量化设计使得JVM能够轻松支持数百万个虚拟线程，而不会显著增加内存负担<a href="./@ref.html">6</a>。</p><h3 id="_2-性能优势" tabindex="-1">2. <strong>性能优势</strong> <a class="header-anchor" href="#_2-性能优势" aria-label="Permalink to “2. 性能优势”">​</a></h3><p>虚拟线程的主要优势在于处理I/O密集型任务时的高效性。当虚拟线程遇到I/O阻塞时，JVM会将其挂起并切换到其他虚拟线程，从而避免CPU资源的浪费。这种机制显著提高了CPU的利用率，尤其是在高并发场景下<a href="./@ref.html">1</a><a href="./@ref.html">2</a>。</p><h3 id="_3-cpu密集型任务的限制" tabindex="-1">3. <strong>CPU密集型任务的限制</strong> <a class="header-anchor" href="#_3-cpu密集型任务的限制" aria-label="Permalink to “3. CPU密集型任务的限制”">​</a></h3><p>对于CPU密集型任务，虚拟线程的性能与平台线程相当，因为它们并没有增加实际的CPU资源。虚拟线程的优势主要体现在I/O阻塞时的任务切换上，而不是计算能力的提升<a href="./@ref.html">1</a><a href="./@ref.html">5</a>。</p><h3 id="_4-jvm的性能消耗" tabindex="-1">4. <strong>JVM的性能消耗</strong> <a class="header-anchor" href="#_4-jvm的性能消耗" aria-label="Permalink to “4. JVM的性能消耗”">​</a></h3><p>虚拟线程的管理由JVM负责，虽然这会增加一定的调度开销，但由于虚拟线程的轻量化设计，这种开销通常可以忽略不计。尤其是在高并发场景下，虚拟线程的资源消耗远低于平台线程<a href="./@ref.html">5</a><a href="./@ref.html">6</a>。</p><h3 id="_5-适用场景" tabindex="-1">5. <strong>适用场景</strong> <a class="header-anchor" href="#_5-适用场景" aria-label="Permalink to “5. 适用场景”">​</a></h3><p>虚拟线程特别适用于高并发、I/O密集型任务，例如网络请求、文件读写等。在这些场景下，虚拟线程可以显著减少线程阻塞带来的性能损失，从而提高整体吞吐量<a href="./@ref.html">2</a><a href="./@ref.html">5</a>。</p><h3 id="总结-4" tabindex="-1">总结 <a class="header-anchor" href="#总结-4" aria-label="Permalink to “总结”">​</a></h3><p>虚拟线程不会显著增加JVM的性能消耗，反而通过优化任务调度和减少线程阻塞来提高性能。然而，对于CPU密集型任务，虚拟线程的性能提升有限<a href="./@ref.html">1</a><a href="./@ref.html">5</a><a href="./@ref.html">6</a>。</p><h2 id="在-springboot-项目中虚拟线程可以怎么使用" tabindex="-1">在 springboot 项目中虚拟线程可以怎么使用 <a class="header-anchor" href="#在-springboot-项目中虚拟线程可以怎么使用" aria-label="Permalink to “在 springboot 项目中虚拟线程可以怎么使用”">​</a></h2><p>在 Spring Boot 项目中使用虚拟线程可以显著提升应用的并发性能，尤其是在 I/O 密集型场景中。以下是几种常见的虚拟线程使用方式及其配置方法：</p><hr><h3 id="_1-启用虚拟线程处理-http-请求" tabindex="-1">1. <strong>启用虚拟线程处理 HTTP 请求</strong> <a class="header-anchor" href="#_1-启用虚拟线程处理-http-请求" aria-label="Permalink to “1. 启用虚拟线程处理 HTTP 请求”">​</a></h3><p>Spring Boot 默认使用 Tomcat 作为 Web 容器，通常使用平台线程处理请求。可以通过配置将 Tomcat 的线程池替换为虚拟线程池。</p><h4 id="配置代码" tabindex="-1">配置代码： <a class="header-anchor" href="#配置代码" aria-label="Permalink to “配置代码：”">​</a></h4><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.apache.coyote.ProtocolHandler;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.boot.web.embedded.tomcat.TomcatProtocolHandlerCustomizer;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.context.annotation.Bean;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.context.annotation.Configuration;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.concurrent.Executors;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TomcatConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TomcatProtocolHandlerCustomizer&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">protocolHandlerVirtualThreadExecutorCustomizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> protocolHandler </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            protocolHandler.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Executors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newVirtualThreadPerTaskExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="说明" tabindex="-1">说明： <a class="header-anchor" href="#说明" aria-label="Permalink to “说明：”">​</a></h4><ul><li>该配置将 Tomcat 的线程池替换为虚拟线程池，所有 HTTP 请求将在虚拟线程中处理</li></ul><hr><h3 id="_2-使用虚拟线程执行异步任务" tabindex="-1">2. <strong>使用虚拟线程执行异步任务</strong> <a class="header-anchor" href="#_2-使用虚拟线程执行异步任务" aria-label="Permalink to “2. 使用虚拟线程执行异步任务”">​</a></h3><p>Spring Boot 中的 <code>@Async</code> 注解通常用于异步执行任务。可以通过配置将异步任务的线程池替换为虚拟线程池。</p><h4 id="配置代码-1" tabindex="-1">配置代码： <a class="header-anchor" href="#配置代码-1" aria-label="Permalink to “配置代码：”">​</a></h4><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.context.annotation.Bean;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.context.annotation.Configuration;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.core.task.TaskExecutor;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.scheduling.annotation.EnableAsync;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.scheduling.concurrent.TaskExecutorAdapter;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.concurrent.Executors;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">EnableAsync</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AsyncConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TaskExecutor </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asyncTaskExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TaskExecutorAdapter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Executors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newVirtualThreadPerTaskExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="使用示例" tabindex="-1">使用示例： <a class="header-anchor" href="#使用示例" aria-label="Permalink to “使用示例：”">​</a></h4><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Service</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AsyncService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Async</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doSomething</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> InterruptedException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模拟耗时操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;任务完成&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="说明-1" tabindex="-1">说明： <a class="header-anchor" href="#说明-1" aria-label="Permalink to “说明：”">​</a></h4><ul><li>通过 <code>@Async</code> 注解执行的任务将在虚拟线程中运行</li></ul><hr><h3 id="_3-使用虚拟线程执行定时任务" tabindex="-1">3. <strong>使用虚拟线程执行定时任务</strong> <a class="header-anchor" href="#_3-使用虚拟线程执行定时任务" aria-label="Permalink to “3. 使用虚拟线程执行定时任务”">​</a></h3><p>Spring Boot 中的 <code>@Scheduled</code> 注解用于定时任务。可以通过配置将定时任务的线程池替换为虚拟线程池。</p><h4 id="配置代码-2" tabindex="-1">配置代码： <a class="header-anchor" href="#配置代码-2" aria-label="Permalink to “配置代码：”">​</a></h4><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.context.annotation.Bean;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.context.annotation.Configuration;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.scheduling.TaskScheduler;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.scheduling.annotation.EnableScheduling;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.scheduling.concurrent.ConcurrentTaskScheduler;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.concurrent.Executors;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">EnableScheduling</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SchedulingConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TaskScheduler </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">taskScheduler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConcurrentTaskScheduler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Executors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newScheduledThreadPool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ofVirtual</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">factory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="使用示例-1" tabindex="-1">使用示例： <a class="header-anchor" href="#使用示例-1" aria-label="Permalink to “使用示例：”">​</a></h4><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Service</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ScheduledService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Scheduled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fixedRate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runTask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;定时任务执行&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="说明-2" tabindex="-1">说明： <a class="header-anchor" href="#说明-2" aria-label="Permalink to “说明：”">​</a></h4><ul><li>定时任务将在虚拟线程中执行<a href="./@ref.html">5</a>。</li></ul><hr><h3 id="_4-使用虚拟线程执行自定义任务" tabindex="-1">4. <strong>使用虚拟线程执行自定义任务</strong> <a class="header-anchor" href="#_4-使用虚拟线程执行自定义任务" aria-label="Permalink to “4. 使用虚拟线程执行自定义任务”">​</a></h3><p>可以通过 <code>Executors.newVirtualThreadPerTaskExecutor()</code> 创建一个虚拟线程池，用于执行自定义任务。</p><h4 id="示例代码" tabindex="-1">示例代码： <a class="header-anchor" href="#示例代码" aria-label="Permalink to “示例代码：”">​</a></h4><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.concurrent.ExecutorService;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.concurrent.Executors;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomTaskExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ExecutorService executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Executors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newVirtualThreadPerTaskExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            executor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">submit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;任务执行&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        executor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shutdown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="说明-3" tabindex="-1">说明： <a class="header-anchor" href="#说明-3" aria-label="Permalink to “说明：”">​</a></h4><ul><li>该方式适合在非 Spring 管理的环境中使用虚拟线程<a href="./@ref.html">1</a><a href="./@ref.html">5</a>。</li></ul><hr><h3 id="_5-虚拟线程的最佳实践" tabindex="-1">5. <strong>虚拟线程的最佳实践</strong> <a class="header-anchor" href="#_5-虚拟线程的最佳实践" aria-label="Permalink to “5. 虚拟线程的最佳实践”">​</a></h3><ul><li><strong>避免池化虚拟线程</strong>：虚拟线程的创建和销毁成本极低，无需池化<a href="./@ref.html">1</a>。</li><li><strong>适合 I/O 密集型任务</strong>：虚拟线程在 I/O 阻塞时自动挂起，适合网络请求、数据库操作等场景<a href="./@ref.html">2</a>。</li><li><strong>逐步迁移</strong>：可以在现有项目中逐步启用虚拟线程，无需一次性替换所有线程<a href="./@ref.html">3</a>。</li></ul><hr><h3 id="_6-环境要求" tabindex="-1">6. <strong>环境要求</strong> <a class="header-anchor" href="#_6-环境要求" aria-label="Permalink to “6. 环境要求”">​</a></h3><ul><li><strong>JDK 版本</strong>：Java 19+（预览功能），Java 21+（正式功能）。</li><li><strong>Spring Boot 版本</strong>：Spring Boot 3.2+ 开始支持虚拟线程<a href="./@ref.html">2</a><a href="./@ref.html">5</a>。</li></ul><hr><p>通过以上方式，可以在 Spring Boot 项目中充分利用虚拟线程提升并发性能，同时保持代码简洁。</p><h2 id="虚拟线程的m-n模型具体是如何工作的" tabindex="-1">虚拟线程的M:N模型具体是如何工作的？ <a class="header-anchor" href="#虚拟线程的m-n模型具体是如何工作的" aria-label="Permalink to “虚拟线程的M:N模型具体是如何工作的？”">​</a></h2><p>虚拟线程的 <strong>M:N 模型</strong> 是一种线程调度机制，它将 <strong>M 个虚拟线程</strong> 映射到 <strong>N 个操作系统线程</strong> 上执行。这种模型的目的是在保持轻量级线程的同时，充分利用操作系统的线程资源。以下是 M:N 模型的具体工作原理：</p><hr><h3 id="_1-基本概念" tabindex="-1">1. <strong>基本概念</strong> <a class="header-anchor" href="#_1-基本概念" aria-label="Permalink to “1. 基本概念”">​</a></h3><ul><li><strong>虚拟线程（Virtual Threads）</strong>： <ul><li>由 JVM 管理的轻量级线程。</li><li>内存占用小，创建和销毁成本低。</li><li>数量可以非常多（数百万个）。</li></ul></li><li><strong>操作系统线程（Platform Threads）</strong>： <ul><li>由操作系统管理的线程。</li><li>内存占用大（默认 1MB 栈空间），创建和销毁成本高。</li><li>数量有限（通常数千个）。</li></ul></li></ul><hr><h3 id="_2-m-n-模型的核心思想" tabindex="-1">2. <strong>M:N 模型的核心思想</strong> <a class="header-anchor" href="#_2-m-n-模型的核心思想" aria-label="Permalink to “2. M:N 模型的核心思想”">​</a></h3><ul><li>将大量虚拟线程（M）映射到少量操作系统线程（N）上执行。</li><li>虚拟线程在执行任务时，由 JVM 调度到可用的操作系统线程上运行。</li><li>当虚拟线程遇到阻塞操作（如 I/O）时，JVM 会将其挂起，并释放操作系统线程去执行其他虚拟线程。</li></ul><hr><h3 id="_3-具体工作流程" tabindex="-1">3. <strong>具体工作流程</strong> <a class="header-anchor" href="#_3-具体工作流程" aria-label="Permalink to “3. 具体工作流程”">​</a></h3><ol><li><strong>虚拟线程创建</strong>：</li></ol><ul><li>当创建一个虚拟线程时，JVM 会为其分配一个轻量级的上下文（如栈、程序计数器等）。</li><li>虚拟线程不会直接绑定到操作系统线程，而是由 JVM 管理。</li></ul><ol start="2"><li><strong>任务调度</strong>：</li></ol><ul><li>当虚拟线程需要执行任务时，JVM 会将其调度到一个可用的操作系统线程上运行。</li><li>操作系统线程是实际执行任务的载体。</li></ul><ol start="3"><li><strong>阻塞操作处理</strong>：</li></ol><ul><li>如果虚拟线程执行了阻塞操作（如 I/O 或等待锁），JVM 会将其挂起。</li><li>挂起后，操作系统线程会被释放，并可以执行其他虚拟线程。</li></ul><ol start="4"><li><strong>任务恢复</strong>：</li></ol><ul><li>当阻塞操作完成后，JVM 会重新调度该虚拟线程到某个操作系统线程上继续执行。</li></ul><ol start="5"><li><strong>线程切换</strong>：</li></ol><ul><li>虚拟线程的切换由 JVM 管理，不需要操作系统介入。</li><li>切换开销极小，因为虚拟线程的上下文是轻量级的。</li></ul><hr><h3 id="_4-m-n-模型的优势" tabindex="-1">4. <strong>M:N 模型的优势</strong> <a class="header-anchor" href="#_4-m-n-模型的优势" aria-label="Permalink to “4. M:N 模型的优势”">​</a></h3><ul><li><strong>高并发</strong>： <ul><li>可以轻松创建数百万个虚拟线程，适合高并发场景。</li></ul></li><li><strong>资源高效利用</strong>： <ul><li>少量操作系统线程可以服务大量虚拟线程，避免线程资源浪费。</li></ul></li><li><strong>简化编程</strong>： <ul><li>开发者可以使用同步编程模型，同时获得异步性能。</li></ul></li><li><strong>低延迟</strong>： <ul><li>虚拟线程的切换开销极小，任务可以快速恢复执行。</li></ul></li></ul><hr><h3 id="_5-m-n-模型的实现细节" tabindex="-1">5. <strong>M:N 模型的实现细节</strong> <a class="header-anchor" href="#_5-m-n-模型的实现细节" aria-label="Permalink to “5. M:N 模型的实现细节”">​</a></h3><ul><li><strong>调度器（Scheduler）</strong>： <ul><li>JVM 内置了一个调度器，负责将虚拟线程分配到操作系统线程上执行。</li><li>调度器会根据任务的状态（如运行、阻塞、就绪）动态管理虚拟线程。</li></ul></li><li><strong>栈管理</strong>： <ul><li>虚拟线程的栈是动态分配的，可以根据需要扩展或收缩。</li><li>挂起时，栈状态会被保存；恢复时，栈状态会被恢复。</li></ul></li><li><strong>阻塞操作感知</strong>： <ul><li>JVM 会识别虚拟线程的阻塞操作（如 I/O、锁等待），并自动挂起和恢复线程。</li></ul></li></ul><hr><h3 id="_6-示例" tabindex="-1">6. <strong>示例</strong> <a class="header-anchor" href="#_6-示例" aria-label="Permalink to “6. 示例”">​</a></h3><p>以下是一个简单的示例，展示了虚拟线程的 M:N 模型：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.concurrent.ExecutorService;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.concurrent.Executors;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> VirtualThreadExample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 创建一个虚拟线程调度器（M:N 模型）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (ExecutorService executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Executors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newVirtualThreadPerTaskExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 提交 1000 个任务</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> taskId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                executor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">submit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;任务 &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> taskId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; 开始运行...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模拟 I/O 阻塞操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (InterruptedException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;任务 &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> taskId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; 结束运行。&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在这个例子中：</p><ul><li>1000 个虚拟线程被创建并提交到虚拟线程调度器。</li><li>这些虚拟线程会被映射到少量的操作系统线程上执行。</li><li>当虚拟线程执行 <code>Thread.sleep</code> 时，JVM 会将其挂起，并释放操作系统线程去执行其他虚拟线程。</li></ul><hr><h3 id="_7-与传统线程模型的对比" tabindex="-1">7. <strong>与传统线程模型的对比</strong> <a class="header-anchor" href="#_7-与传统线程模型的对比" aria-label="Permalink to “7. 与传统线程模型的对比”">​</a></h3><table tabindex="0"><thead><tr><th><strong>特性</strong></th><th><strong>传统线程（1:1 模型）</strong></th><th><strong>虚拟线程（M:N 模型）</strong></th></tr></thead><tbody><tr><td>线程数量</td><td>受操作系统限制（通常数千个）</td><td>可轻松创建数百万个</td></tr><tr><td>内存占用</td><td>高（默认 1MB 栈空间）</td><td>低（动态分配栈空间）</td></tr><tr><td>线程切换</td><td>操作系统介入，开销大</td><td>JVM 管理，开销小</td></tr><tr><td>阻塞操作处理</td><td>操作系统线程被占用</td><td>虚拟线程挂起，操作系统线程释放</td></tr><tr><td>适用场景</td><td>CPU 密集型任务</td><td>I/O 密集型任务</td></tr></tbody></table><hr><h3 id="总结-5" tabindex="-1">总结 <a class="header-anchor" href="#总结-5" aria-label="Permalink to “总结”">​</a></h3><p>M:N 模型通过将大量轻量级虚拟线程映射到少量操作系统线程上，实现了高并发、低资源占用的线程管理。这种模型特别适合现代高并发、I/O 密集型的应用场景，同时简化了开发者的编程复杂度。</p><h2 id="java虚拟线程和传统线程有什么区别" tabindex="-1">Java虚拟线程和传统线程有什么区别 <a class="header-anchor" href="#java虚拟线程和传统线程有什么区别" aria-label="Permalink to “Java虚拟线程和传统线程有什么区别”">​</a></h2><p>Java 虚拟线程（Virtual Threads）与传统线程（Platform Threads）在实现、性能和适用场景上有显著区别。以下是两者的主要对比：</p><hr><h3 id="_1-实现方式" tabindex="-1">1. <strong>实现方式</strong> <a class="header-anchor" href="#_1-实现方式" aria-label="Permalink to “1. 实现方式”">​</a></h3><ul><li><strong>传统线程</strong>： <ul><li>直接映射到操作系统的线程（内核线程）。</li><li>每个线程都需要分配一个固定的栈空间（默认 1MB）。</li><li>创建和销毁成本较高，线程数量受操作系统限制。</li></ul></li><li><strong>虚拟线程</strong>： <ul><li>由 JVM 管理，不直接映射到操作系统线程。</li><li>虚拟线程的栈空间是动态分配的，内存占用更小。</li><li>创建和销毁成本极低，可以轻松创建数百万个虚拟线程。</li></ul></li></ul><hr><h3 id="_2-线程模型" tabindex="-1">2. <strong>线程模型</strong> <a class="header-anchor" href="#_2-线程模型" aria-label="Permalink to “2. 线程模型”">​</a></h3><ul><li><strong>传统线程</strong>： <ul><li>采用 &quot;1:1&quot; 模型，即一个 Java 线程对应一个操作系统线程。</li><li>线程在执行 I/O 或阻塞操作时会一直占用操作系统线程。</li></ul></li><li><strong>虚拟线程</strong>： <ul><li>采用 &quot;M:N&quot; 模型，即多个虚拟线程映射到少数操作系统线程。</li><li>虚拟线程在执行 I/O 或阻塞操作时会被挂起，释放操作系统线程去执行其他虚拟线程。</li></ul></li></ul><hr><h3 id="_3-性能" tabindex="-1">3. <strong>性能</strong> <a class="header-anchor" href="#_3-性能" aria-label="Permalink to “3. 性能”">​</a></h3><ul><li><strong>传统线程</strong>： <ul><li>线程数量有限，无法高效处理大量并发任务。</li><li>线程切换需要操作系统介入，开销较大。</li></ul></li><li><strong>虚拟线程</strong>： <ul><li>可以轻松创建大量线程，适合高并发场景。</li><li>线程切换由 JVM 管理，开销极小。</li></ul></li></ul><hr><h3 id="_4-适用场景-1" tabindex="-1">4. <strong>适用场景</strong> <a class="header-anchor" href="#_4-适用场景-1" aria-label="Permalink to “4. 适用场景”">​</a></h3><ul><li><strong>传统线程</strong>： <ul><li>适合 CPU 密集型任务，如计算密集型操作。</li><li>需要直接控制操作系统线程的场景。</li></ul></li><li><strong>虚拟线程</strong>： <ul><li>适合 I/O 密集型任务，如网络请求、文件读写等。</li><li>需要处理大量并发任务的场景，如微服务、Web 服务器等。</li></ul></li></ul><hr><h3 id="_5-编程模型" tabindex="-1">5. <strong>编程模型</strong> <a class="header-anchor" href="#_5-编程模型" aria-label="Permalink to “5. 编程模型”">​</a></h3><ul><li><strong>传统线程</strong>： <ul><li>需要手动管理线程池，避免创建过多线程。</li><li>代码复杂度较高，尤其是在处理异步任务时。</li></ul></li><li><strong>虚拟线程</strong>： <ul><li>无需手动管理线程池，可以按需创建虚拟线程。</li><li>代码更简洁，支持同步编程模型，同时具备异步性能。</li></ul></li></ul><hr><h3 id="_6-资源占用" tabindex="-1">6. <strong>资源占用</strong> <a class="header-anchor" href="#_6-资源占用" aria-label="Permalink to “6. 资源占用”">​</a></h3><ul><li><strong>传统线程</strong>： <ul><li>每个线程占用固定的栈空间（默认 1MB），内存消耗较大。</li><li>线程数量受操作系统限制（通常数千个）。</li></ul></li><li><strong>虚拟线程</strong>： <ul><li>栈空间动态分配，内存占用更小。</li><li>可以轻松创建数百万个虚拟线程。</li></ul></li></ul><hr><h3 id="_7-兼容性" tabindex="-1">7. <strong>兼容性</strong> <a class="header-anchor" href="#_7-兼容性" aria-label="Permalink to “7. 兼容性”">​</a></h3><ul><li><strong>传统线程</strong>： <ul><li>所有 Java 版本都支持。</li></ul></li><li><strong>虚拟线程</strong>： <ul><li>从 Java 19 开始引入，默认是预览功能，需在运行时添加 <code>--enable-preview</code> 参数。</li><li>在 Java 21 中成为正式功能。</li></ul></li></ul><hr><h3 id="_8-示例对比" tabindex="-1">8. <strong>示例对比</strong> <a class="header-anchor" href="#_8-示例对比" aria-label="Permalink to “8. 示例对比”">​</a></h3><ul><li><strong>传统线程</strong>：<div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ExecutorService executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Executors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newFixedThreadPool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    executor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">submit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;传统线程执行任务&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">executor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shutdown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div></li><li><strong>虚拟线程</strong>：<div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (ExecutorService executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Executors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newVirtualThreadPerTaskExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        executor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">submit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;虚拟线程执行任务&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><hr><h3 id="总结-6" tabindex="-1">总结 <a class="header-anchor" href="#总结-6" aria-label="Permalink to “总结”">​</a></h3><table tabindex="0"><thead><tr><th><strong>特性</strong></th><th><strong>传统线程</strong></th><th><strong>虚拟线程</strong></th></tr></thead><tbody><tr><td>实现方式</td><td>1:1 映射到操作系统线程</td><td>M:N 映射到操作系统线程</td></tr><tr><td>内存占用</td><td>高（默认 1MB 栈空间）</td><td>低（动态分配栈空间）</td></tr><tr><td>创建成本</td><td>高</td><td>极低</td></tr><tr><td>线程切换</td><td>操作系统介入，开销大</td><td>JVM 管理，开销小</td></tr><tr><td>适用场景</td><td>CPU 密集型任务</td><td>I/O 密集型任务</td></tr><tr><td>线程数量</td><td>受操作系统限制（通常数千个）</td><td>可轻松创建数百万个</td></tr><tr><td>编程复杂度</td><td>高（需手动管理线程池）</td><td>低（按需创建，无需池化）</td></tr></tbody></table><p>虚拟线程是 Java 在并发编程领域的一次重大改进，特别适合现代高并发、I/O 密集型的应用场景。</p><h2 id="可以生成一个java使用虚拟线程的例子吗" tabindex="-1">可以生成一个java使用虚拟线程的例子吗 <a class="header-anchor" href="#可以生成一个java使用虚拟线程的例子吗" aria-label="Permalink to “可以生成一个java使用虚拟线程的例子吗”">​</a></h2><p>以下是一个使用 Java 虚拟线程的示例代码，展示了如何创建和运行虚拟线程：</p><h3 id="示例代码-1" tabindex="-1">示例代码 <a class="header-anchor" href="#示例代码-1" aria-label="Permalink to “示例代码”">​</a></h3><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.concurrent.ExecutorService;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.concurrent.Executors;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> VirtualThreadExample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 方法 1: 直接创建并运行虚拟线程</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startVirtualThread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;虚拟线程 1 开始运行...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模拟耗时操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (InterruptedException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;虚拟线程 1 结束运行。&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 方法 2: 创建虚拟线程但不自动运行，手动调用 start()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Thread virtualThread </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ofVirtual</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unstarted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;虚拟线程 2 开始运行...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模拟耗时操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (InterruptedException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;虚拟线程 2 结束运行。&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        virtualThread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 方法 3: 使用 ExecutorService 调度虚拟线程</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (ExecutorService executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Executors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newVirtualThreadPerTaskExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> threadId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                executor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">submit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;虚拟线程 &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> threadId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; 开始运行...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模拟耗时操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (InterruptedException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;虚拟线程 &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> threadId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; 结束运行。&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="代码说明" tabindex="-1">代码说明 <a class="header-anchor" href="#代码说明" aria-label="Permalink to “代码说明”">​</a></h3><ol><li><strong>方法 1</strong>: 使用 <code>Thread.startVirtualThread()</code> 直接创建并运行虚拟线程。这种方式适合简单的任务。</li><li><strong>方法 2</strong>: 使用 <code>Thread.ofVirtual().unstarted()</code> 创建虚拟线程，但不自动运行，需要手动调用 <code>start()</code> 启动。</li><li><strong>方法 3</strong>: 使用 <code>Executors.newVirtualThreadPerTaskExecutor()</code> 创建一个虚拟线程池，适合需要管理多个虚拟线程的场景。</li></ol><h3 id="运行说明" tabindex="-1">运行说明 <a class="header-anchor" href="#运行说明" aria-label="Permalink to “运行说明”">​</a></h3><ul><li>虚拟线程在 Java 19 中引入，但默认是预览功能，需在运行代码时添加 <code>--enable-preview</code> 参数。</li><li>虚拟线程适用于 I/O 密集型任务，如网络请求、文件读写等，能够在等待 I/O 时自动挂起并切换到其他虚拟线程，提升资源利用率<a href="./@ref.html">1</a>。</li></ul><h3 id="运行命令" tabindex="-1">运行命令 <a class="header-anchor" href="#运行命令" aria-label="Permalink to “运行命令”">​</a></h3><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --source</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 19</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --enable-preview</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> VirtualThreadExample.java</span></span></code></pre></div><h3 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to “注意事项”">​</a></h3><ul><li>虚拟线程不应池化，因为其创建和销毁成本极低，适合按需创建<a href="./@ref.html">1</a>。</li><li>虚拟线程的 I/O 操作会自动挂起并切换，而普通线程的 I/O 操作仍会阻塞<a href="./@ref.html">1</a>。</li></ul><p>以上示例展示了虚拟线程的基本用法，适用于 Java 19 及以上版本。</p><h2 id="java的虚拟线程是如何对i-o操作进行优化的" tabindex="-1">java的虚拟线程是如何对I/O操作进行优化的 <a class="header-anchor" href="#java的虚拟线程是如何对i-o操作进行优化的" aria-label="Permalink to “java的虚拟线程是如何对I/O操作进行优化的”">​</a></h2><p>Java 的虚拟线程（Virtual Threads）通过<strong>非阻塞</strong>和<strong>轻量级调度</strong>的方式对 I/O 操作进行了显著优化，具体体现在以下几个方面：</p><hr><h3 id="_1-非阻塞-i-o-操作" tabindex="-1">1. <strong>非阻塞 I/O 操作</strong> <a class="header-anchor" href="#_1-非阻塞-i-o-操作" aria-label="Permalink to “1. 非阻塞 I/O 操作”">​</a></h3><p>虚拟线程在执行 I/O 操作（如读写文件、网络请求、数据库查询）时，不会阻塞当前线程。当虚拟线程遇到 I/O 操作时，它会立即被<strong>挂起</strong>，并释放底层的平台线程（Platform Thread），以便该平台线程可以去执行其他虚拟线程的任务。当 I/O 操作完成后，虚拟线程会被重新调度并继续执行<a href="./@ref.html">55</a><a href="./@ref.html">56</a>。</p><p>这种方式避免了传统线程模型中线程因等待 I/O 操作而阻塞的问题，从而显著提高了线程的利用率。</p><hr><h3 id="_2-轻量级线程调度" tabindex="-1">2. <strong>轻量级线程调度</strong> <a class="header-anchor" href="#_2-轻量级线程调度" aria-label="Permalink to “2. 轻量级线程调度”">​</a></h3><p>虚拟线程是由 JVM 管理的轻量级线程，其创建和销毁成本极低。与传统线程（平台线程）相比，虚拟线程的数量可以轻松达到数百万个，而不会占用大量系统资源<a href="./@ref.html">17</a><a href="./@ref.html">55</a>。</p><p>虚拟线程的调度由 JVM 负责，底层使用 <code>ForkJoinPool</code> 作为调度器。虚拟线程在执行 I/O 操作时会被挂起，调度器会立即切换到其他虚拟线程，从而避免了线程资源的浪费<a href="./@ref.html">1</a><a href="./@ref.html">55</a>。</p><hr><h3 id="_3-减少线程上下文切换" tabindex="-1">3. <strong>减少线程上下文切换</strong> <a class="header-anchor" href="#_3-减少线程上下文切换" aria-label="Permalink to “3. 减少线程上下文切换”">​</a></h3><p>在传统线程模型中，线程的上下文切换由操作系统负责，开销较大。而虚拟线程的上下文切换由 JVM 管理，切换成本极低。这使得虚拟线程在处理大量 I/O 密集型任务时，能够更高效地切换任务，减少 CPU 资源的浪费<a href="./@ref.html">17</a><a href="./@ref.html">55</a>。</p><hr><h3 id="_4-与异步编程的结合" tabindex="-1">4. <strong>与异步编程的结合</strong> <a class="header-anchor" href="#_4-与异步编程的结合" aria-label="Permalink to “4. 与异步编程的结合”">​</a></h3><p>虚拟线程的接口与传统线程完全一致，开发者可以像编写同步代码一样编写异步任务。当虚拟线程执行 I/O 操作时，代码看起来是同步的，但实际上是异步执行的。这种方式既简化了代码的编写，又避免了回调地狱的问题<a href="./@ref.html">55</a><a href="./@ref.html">56</a> 。</p><p>例如，以下代码展示了虚拟线程如何处理 I/O 操作：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startVirtualThread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFromDatabase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// I/O 操作，虚拟线程会被挂起</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span></code></pre></div><p>在执行 <code>readFromDatabase()</code> 时，虚拟线程会被挂起，平台线程可以继续执行其他任务<a href="./@ref.html">55</a>。</p><hr><h3 id="_5-适用于高并发场景" tabindex="-1">5. <strong>适用于高并发场景</strong> <a class="header-anchor" href="#_5-适用于高并发场景" aria-label="Permalink to “5. 适用于高并发场景”">​</a></h3><p>虚拟线程特别适合处理 I/O 密集型任务，如网络请求、文件读写和数据库查询。在这些场景中，任务的大部分时间都花在等待 I/O 操作上，而虚拟线程的非阻塞特性可以显著提高系统的吞吐量和并发能力<a href="./@ref.html">1</a><a href="./@ref.html">17</a>。</p><hr><h3 id="总结-7" tabindex="-1">总结 <a class="header-anchor" href="#总结-7" aria-label="Permalink to “总结”">​</a></h3><p>Java 的虚拟线程通过<strong>非阻塞 I/O</strong>、<strong>轻量级调度</strong>和<strong>减少上下文切换</strong>等机制，显著优化了 I/O 操作的性能。它使得开发者可以轻松编写高并发的 I/O 密集型应用，同时保持代码的简洁性和可维护性<a href="./@ref.html">1</a><a href="./@ref.html">55</a><a href="./@ref.html">56</a>。</p><h2 id="java虚拟线程的forkjoinpool调度器是如何工作的" tabindex="-1">Java虚拟线程的ForkJoinPool调度器是如何工作的 <a class="header-anchor" href="#java虚拟线程的forkjoinpool调度器是如何工作的" aria-label="Permalink to “Java虚拟线程的ForkJoinPool调度器是如何工作的”">​</a></h2><p>Java 虚拟线程的调度器是基于 <code>ForkJoinPool</code> 实现的，它负责管理虚拟线程的执行和调度。以下是 <code>ForkJoinPool</code> 调度器的工作原理及其在虚拟线程中的应用：</p><hr><h3 id="_1-forkjoinpool-的基本原理" tabindex="-1"><strong>1. ForkJoinPool 的基本原理</strong> <a class="header-anchor" href="#_1-forkjoinpool-的基本原理" aria-label="Permalink to “1. ForkJoinPool 的基本原理”">​</a></h3><p><code>ForkJoinPool</code> 是 Java 并发框架中的一种线程池，专门用于执行<strong>分治任务</strong>（Divide-and-Conquer Tasks）。它的核心特点是：</p><ul><li><strong>工作窃取（Work-Stealing）</strong>：每个工作线程都有自己的任务队列，当某个线程的任务队列为空时，它会从其他线程的队列中“窃取”任务来执行。这种机制可以平衡线程之间的负载，提高资源利用率。</li><li><strong>分治任务</strong>：任务可以分解为多个子任务，子任务可以并行执行，最后将结果合并。</li></ul><hr><h3 id="_2-虚拟线程的调度器" tabindex="-1"><strong>2. 虚拟线程的调度器</strong> <a class="header-anchor" href="#_2-虚拟线程的调度器" aria-label="Permalink to “2. 虚拟线程的调度器”">​</a></h3><p>虚拟线程的调度器是基于 <code>ForkJoinPool</code> 的，但它对 <code>ForkJoinPool</code> 进行了扩展和优化，以支持虚拟线程的轻量级调度。以下是调度器的工作机制：</p><h4 id="_1-虚拟线程的挂起与恢复" tabindex="-1"><strong>(1) 虚拟线程的挂起与恢复</strong> <a class="header-anchor" href="#_1-虚拟线程的挂起与恢复" aria-label="Permalink to “(1) 虚拟线程的挂起与恢复”">​</a></h4><ul><li>当虚拟线程执行 I/O 操作或其他阻塞操作时，虚拟线程会被<strong>挂起</strong>，并释放底层的平台线程。</li><li>当 I/O 操作完成或任务可以继续执行时，虚拟线程会被重新调度到 <code>ForkJoinPool</code> 中，由某个平台线程继续执行。</li></ul><h4 id="_2-任务队列与工作窃取" tabindex="-1"><strong>(2) 任务队列与工作窃取</strong> <a class="header-anchor" href="#_2-任务队列与工作窃取" aria-label="Permalink to “(2) 任务队列与工作窃取”">​</a></h4><ul><li>虚拟线程的任务被存储在 <code>ForkJoinPool</code> 的任务队列中。</li><li>当平台线程空闲时，它会从队列中获取任务（虚拟线程）并执行。</li><li>如果某个平台线程的任务队列为空，它会从其他线程的队列中“窃取”任务，从而避免线程闲置。</li></ul><h4 id="_3-轻量级调度" tabindex="-1"><strong>(3) 轻量级调度</strong> <a class="header-anchor" href="#_3-轻量级调度" aria-label="Permalink to “(3) 轻量级调度”">​</a></h4><ul><li>虚拟线程的调度由 JVM 负责，调度开销极低。</li><li>虚拟线程的上下文切换比传统线程快得多，因为它不需要操作系统的介入。</li></ul><hr><h3 id="_3-调度器的配置" tabindex="-1"><strong>3. 调度器的配置</strong> <a class="header-anchor" href="#_3-调度器的配置" aria-label="Permalink to “3. 调度器的配置”">​</a></h3><p>虚拟线程的调度器默认使用 <code>ForkJoinPool</code>，但可以通过 JVM 参数进行调整：</p><ul><li><strong>线程池大小</strong>：默认情况下，<code>ForkJoinPool</code> 的线程数等于 CPU 核心数。可以通过 <code>-Djdk.virtualThreadScheduler.parallelism</code> 参数进行调整。</li><li><strong>任务队列大小</strong>：可以通过 <code>-Djdk.virtualThreadScheduler.maxPoolSize</code> 参数设置任务队列的最大容量。</li></ul><hr><h3 id="_4-虚拟线程与平台线程的关系" tabindex="-1"><strong>4. 虚拟线程与平台线程的关系</strong> <a class="header-anchor" href="#_4-虚拟线程与平台线程的关系" aria-label="Permalink to “4. 虚拟线程与平台线程的关系”">​</a></h3><ul><li>虚拟线程是轻量级的，由 JVM 管理。</li><li>平台线程是操作系统的线程，虚拟线程最终由平台线程执行。</li><li>一个平台线程可以同时执行多个虚拟线程，通过挂起和恢复机制实现切换。</li></ul><hr><h3 id="_5-示例" tabindex="-1"><strong>5. 示例</strong> <a class="header-anchor" href="#_5-示例" aria-label="Permalink to “5. 示例”">​</a></h3><p>以下是一个虚拟线程的示例，展示了虚拟线程的调度和执行：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startVirtualThread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Virtual Thread 1: Start&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模拟 I/O 操作，虚拟线程会被挂起</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(InterruptedException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Virtual Thread 1: End&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startVirtualThread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Virtual Thread 2: Start&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模拟 I/O 操作，虚拟线程会被挂起</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(InterruptedException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Virtual Thread 2: End&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span></code></pre></div><p>在上述代码中：</p><ul><li>两个虚拟线程由 <code>ForkJoinPool</code> 调度器管理。</li><li>当虚拟线程执行 <code>Thread.sleep()</code> 时，虚拟线程会被挂起，平台线程可以继续执行其他任务。</li></ul><hr><h3 id="总结-8" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结-8" aria-label="Permalink to “总结”">​</a></h3><p>Java 虚拟线程的调度器基于 <code>ForkJoinPool</code>，通过<strong>工作窃取</strong>和<strong>轻量级调度</strong>机制，高效地管理虚拟线程的执行。它使得虚拟线程在执行 I/O 操作时可以被挂起，从而释放平台线程资源，提高系统的并发性能和资源利用率。虚拟线程的引入为 Java 提供了更简洁、更高效的高并发编程模型。</p><h2 id="java虚拟线程与其他编程语言的异步编程模型相比有什么优势" tabindex="-1">Java虚拟线程与其他编程语言的异步编程模型相比有什么优势 <a class="header-anchor" href="#java虚拟线程与其他编程语言的异步编程模型相比有什么优势" aria-label="Permalink to “Java虚拟线程与其他编程语言的异步编程模型相比有什么优势”">​</a></h2><p>Java 虚拟线程（Virtual Threads）是 JDK 21 引入的一项新特性，它通过轻量级线程模型显著提升了并发性能，特别适合处理 I/O 密集型任务。与其他编程语言的异步编程模型相比，Java 虚拟线程具有以下优势：</p><hr><h3 id="_1-轻量级与高并发" tabindex="-1"><strong>1. 轻量级与高并发</strong> <a class="header-anchor" href="#_1-轻量级与高并发" aria-label="Permalink to “1. 轻量级与高并发”">​</a></h3><ul><li><strong>虚拟线程的轻量级特性</strong>：虚拟线程由 JVM 管理，创建和销毁的成本极低，每个虚拟线程仅占用极少的内存资源。这使得 Java 应用程序可以轻松创建数百万个虚拟线程，而不会像传统线程那样消耗大量系统资源<a href="./@ref.html">18</a>。</li><li><strong>对比其他语言的异步模型</strong>：例如，Go 语言的协程（Goroutine）虽然也很轻量，但其调度器由 Go 运行时管理，而 Java 虚拟线程的调度器基于 <code>ForkJoinPool</code>，能够更好地与 JVM 生态集成<a href="./@ref.html">41</a>。</li></ul><hr><h3 id="_2-非阻塞与高效-i-o-处理" tabindex="-1"><strong>2. 非阻塞与高效 I/O 处理</strong> <a class="header-anchor" href="#_2-非阻塞与高效-i-o-处理" aria-label="Permalink to “2. 非阻塞与高效 I/O 处理”">​</a></h3><ul><li><strong>非阻塞 I/O 操作</strong>：虚拟线程在执行 I/O 操作时会被挂起，释放底层的平台线程，从而避免线程资源的浪费。当 I/O 操作完成后，虚拟线程会被重新调度，继续执行任务。这种方式显著提高了 CPU 利用率<a href="./@ref.html">18</a><a href="./@ref.html">24</a>。</li><li><strong>对比其他语言的异步模型</strong>：例如，JavaScript 的异步模型依赖于事件循环和回调函数，代码结构复杂且容易陷入“回调地狱”。而 Java 虚拟线程的代码编写方式与传统同步代码一致，简化了开发逻辑<a href="./@ref.html">1</a><a href="./@ref.html">24</a>。</li></ul><hr><h3 id="_3-简化异步编程" tabindex="-1"><strong>3. 简化异步编程</strong> <a class="header-anchor" href="#_3-简化异步编程" aria-label="Permalink to “3. 简化异步编程”">​</a></h3><ul><li><strong>同步代码风格</strong>：虚拟线程允许开发者以同步的方式编写异步代码，无需使用复杂的回调或 <code>Future</code>/<code>Promise</code> 机制。这种方式不仅提高了代码的可读性，还降低了调试和维护的难度<a href="./@ref.html">1</a><a href="./@ref.html">24</a>。</li><li><strong>对比其他语言的异步模型</strong>：例如，Python 的 <code>asyncio</code> 或 C# 的 <code>async/await</code> 虽然也提供了同步风格的异步编程，但其底层实现依赖于事件循环，而 Java 虚拟线程的调度器更高效且与 JVM 深度集成<a href="./@ref.html">24</a><a href="./@ref.html">41</a>。</li></ul><hr><h3 id="_4-与现有生态的无缝集成" tabindex="-1"><strong>4. 与现有生态的无缝集成</strong> <a class="header-anchor" href="#_4-与现有生态的无缝集成" aria-label="Permalink to “4. 与现有生态的无缝集成”">​</a></h3><ul><li><strong>兼容现有 API</strong>：虚拟线程与 Java 现有的并发工具（如 <code>CompletableFuture</code>、<code>ExecutorService</code> ）无缝集成，开发者无需重写代码即可享受虚拟线程带来的性能提升<a href="./@ref.html">1</a><a href="./@ref.html">18</a>。</li><li><strong>对比其他语言的异步模型</strong>：例如，Rust 的异步编程模型需要依赖特定的运行时（如 <code>tokio</code>），而 Java 虚拟线程直接由 JVM 支持，无需额外的运行时环境<a href="./@ref.html">41</a>。</li></ul><hr><h3 id="_5-高效的上下文切换" tabindex="-1"><strong>5. 高效的上下文切换</strong> <a class="header-anchor" href="#_5-高效的上下文切换" aria-label="Permalink to “5. 高效的上下文切换”">​</a></h3><ul><li><strong>低开销的上下文切换</strong>：虚拟线程的上下文切换由 JVM 管理，开销极低。相比之下，传统线程的上下文切换需要操作系统的介入，成本较高<a href="./@ref.html">24</a><a href="./@ref.html">41</a>。</li><li><strong>对比其他语言的异步模型</strong>：例如，Go 的协程虽然上下文切换成本也很低，但 Java 虚拟线程在 JVM 生态中的集成度更高，更适合复杂的 Java 应用场景<a href="./@ref.html">41</a>。</li></ul><hr><h3 id="_6-结构化并发支持" tabindex="-1"><strong>6. 结构化并发支持</strong> <a class="header-anchor" href="#_6-结构化并发支持" aria-label="Permalink to “6. 结构化并发支持”">​</a></h3><ul><li><strong>结构化并发</strong>：JDK 21 引入了结构化并发（Structured Concurrency），使得多线程编程更加清晰和易于管理。虚拟线程与结构化并发结合，可以更好地控制线程的生命周期，避免资源泄漏<a href="./@ref.html">18</a><a href="./@ref.html">38</a>。</li><li><strong>对比其他语言的异步模型</strong>：例如，C++ 的异步编程模型缺乏类似的结构化并发支持，开发者需要手动管理线程和任务的生命周期<a href="./@ref.html">38</a>。</li></ul><hr><h3 id="总结-9" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结-9" aria-label="Permalink to “总结”">​</a></h3><p>Java 虚拟线程在轻量级、非阻塞 I/O、简化异步编程、与现有生态集成、上下文切换效率和结构化并发等方面具有显著优势。与其他编程语言的异步模型相比，虚拟线程不仅提供了更高的并发性能，还简化了开发流程，降低了代码复杂性，特别适合处理 I/O 密集型任务和高并发场景<a href="./@ref.html">1</a><a href="./@ref.html">18</a><a href="./@ref.html">24</a><a href="./@ref.html">41</a>。</p><h2 id="java虚拟线程技术对现有应用程序的性能提升有多大影响" tabindex="-1">Java虚拟线程技术对现有应用程序的性能提升有多大影响 <a class="header-anchor" href="#java虚拟线程技术对现有应用程序的性能提升有多大影响" aria-label="Permalink to “Java虚拟线程技术对现有应用程序的性能提升有多大影响”">​</a></h2><p>Java 虚拟线程技术（Virtual Threads）是 JDK 21 引入的一项重要特性，旨在显著提升现有应用程序的性能，尤其是在高并发和 I/O 密集型场景下。以下是虚拟线程技术对现有应用程序性能提升的主要影响及其实际应用案例：</p><hr><h3 id="_1-性能提升的核心机制" tabindex="-1"><strong>1. 性能提升的核心机制</strong> <a class="header-anchor" href="#_1-性能提升的核心机制" aria-label="Permalink to “1. 性能提升的核心机制”">​</a></h3><p>虚拟线程通过以下机制提升性能：</p><ul><li><strong>轻量级线程</strong>：虚拟线程由 JVM 管理，创建和销毁的开销极低，允许应用程序轻松创建数百万个线程，而不会像传统线程那样消耗大量系统资源<a href="./@ref.html">1</a><a href="./@ref.html">11</a>。</li><li><strong>非阻塞 I/O</strong>：虚拟线程在执行 I/O 操作时会被挂起，释放底层平台线程，从而避免线程资源的浪费。当 I/O 操作完成后，虚拟线程会被重新调度，继续执行任务。这种方式显著提高了 CPU 利用率<a href="./@ref.html">1</a><a href="./@ref.html">18</a>。</li><li><strong>高效调度</strong>：虚拟线程的调度器基于 <code>ForkJoinPool</code>，采用 FIFO 模式，能够高效地管理虚拟线程的挂起和恢复，减少上下文切换的开销<a href="./@ref.html">18</a>。</li></ul><hr><h3 id="_2-性能提升的具体表现" tabindex="-1"><strong>2. 性能提升的具体表现</strong> <a class="header-anchor" href="#_2-性能提升的具体表现" aria-label="Permalink to “2. 性能提升的具体表现”">​</a></h3><ul><li><strong>I/O 密集型任务</strong>：虚拟线程特别适合处理大量 I/O 阻塞任务，如网络请求、文件读写和数据库查询。在这些场景中，虚拟线程的性能提升尤为显著。例如，在测试中，虚拟线程处理 100,000 个任务的耗时仅为传统线程池的一半<a href="./@ref.html">1</a><a href="./@ref.html">59</a>。</li><li><strong>高并发场景</strong>：虚拟线程允许应用程序同时处理大量并发请求，而不会因为线程数量限制而出现性能瓶颈。这对于 Web 服务器、微服务等需要处理大量并发请求的应用场景非常有利<a href="./@ref.html">11</a><a href="./@ref.html">18</a>。</li><li><strong>资源利用率</strong>：虚拟线程通过减少线程阻塞和上下文切换，提高了 CPU 和内存的利用率，从而提升了整体系统的吞吐量<a href="./@ref.html">11</a><a href="./@ref.html">18</a>。</li></ul><hr><h3 id="_3-实际应用案例" tabindex="-1"><strong>3. 实际应用案例</strong> <a class="header-anchor" href="#_3-实际应用案例" aria-label="Permalink to “3. 实际应用案例”">​</a></h3><ul><li><strong>文件读取优化</strong>：在处理百万级数据文件读取任务时，使用虚拟线程可以将任务耗时从数分钟减少到数秒，显著提升了处理效率<a href="./@ref.html">31</a>。</li><li><strong>Web 服务性能提升</strong>：在 Spring Boot 3 中使用虚拟线程后，Web 服务的并发处理能力大幅提升，能够同时处理更多请求，响应时间显著缩短<a href="./@ref.html">31</a>。</li><li><strong>数据库查询优化</strong>：在需要频繁进行数据库查询的应用中，虚拟线程通过非阻塞 I/O 机制，减少了线程等待时间，提高了查询效率<a href="./@ref.html">11</a><a href="./@ref.html">18</a>。</li></ul><hr><h3 id="_4-适用场景与限制" tabindex="-1"><strong>4. 适用场景与限制</strong> <a class="header-anchor" href="#_4-适用场景与限制" aria-label="Permalink to “4. 适用场景与限制”">​</a></h3><ul><li><strong>适用场景</strong>： <ul><li>I/O 密集型任务（如网络请求、文件读写、数据库查询）。</li><li>高并发场景（如 Web 服务器、微服务）。</li><li>需要处理大量短生命周期任务的场景<a href="./@ref.html">11</a><a href="./@ref.html">18</a>。</li></ul></li><li><strong>限制</strong>： <ul><li>虚拟线程在计算密集型任务中的性能提升有限，因为这类任务本身不涉及大量 I/O 阻塞<a href="./@ref.html">11</a><a href="./@ref.html">18</a>。</li><li>虚拟线程的性能提升依赖于底层平台线程的数量和调度器的配置，需要根据具体应用场景进行调优<a href="./@ref.html">18</a>。</li></ul></li></ul><hr><h3 id="_5-总结-1" tabindex="-1"><strong>5. 总结</strong> <a class="header-anchor" href="#_5-总结-1" aria-label="Permalink to “5. 总结”">​</a></h3><p>Java 虚拟线程技术通过轻量级线程、非阻塞 I/O 和高效调度机制，显著提升了现有应用程序的性能，特别是在 I/O 密集型和高并发场景下。实际应用案例表明，虚拟线程可以将任务处理时间减少 50% 以上，并大幅提高系统的吞吐量和资源利用率<a href="./@ref.html">1</a><a href="./@ref.html">11</a><a href="./@ref.html">18</a>。然而，在计算密集型任务中，虚拟线程的性能提升有限，开发者需要根据具体应用场景合理选择使用虚拟线程。</p><h2 id="java虚拟线程技术在实际项目中面临哪些挑战" tabindex="-1">Java虚拟线程技术在实际项目中面临哪些挑战 <a class="header-anchor" href="#java虚拟线程技术在实际项目中面临哪些挑战" aria-label="Permalink to “Java虚拟线程技术在实际项目中面临哪些挑战”">​</a></h2><p>Java 虚拟线程技术（Virtual Threads）在 JDK 21 中正式引入，虽然它显著提升了并发性能，但在实际项目中仍面临一些挑战。以下是主要挑战及其分析：</p><hr><h3 id="_1-兼容性问题" tabindex="-1"><strong>1. 兼容性问题</strong> <a class="header-anchor" href="#_1-兼容性问题" aria-label="Permalink to “1. 兼容性问题”">​</a></h3><ul><li><strong>现有代码库的适配</strong>：虚拟线程虽然兼容传统的线程 API，但并非所有现有代码都能无缝迁移。例如，依赖于线程本地存储（ThreadLocal）或线程池行为的代码可能需要调整<a href="./@ref.html">1</a>。</li><li><strong>第三方库的支持</strong>：许多第三方库（如数据库驱动、网络框架）尚未完全适配虚拟线程，可能导致性能瓶颈或意外行为<a href="./@ref.html">2</a>。</li></ul><hr><h3 id="_2-调试与监控复杂性" tabindex="-1"><strong>2. 调试与监控复杂性</strong> <a class="header-anchor" href="#_2-调试与监控复杂性" aria-label="Permalink to “2. 调试与监控复杂性”">​</a></h3><ul><li><strong>线程堆栈的可读性</strong>：虚拟线程的堆栈信息与传统线程不同，可能导致调试工具（如调试器、日志分析工具）无法准确显示线程状态<a href="./@ref.html">1</a>。</li><li><strong>监控工具的支持</strong>：现有的监控工具（如 JFR、JMC）可能无法完全支持虚拟线程的跟踪和分析，增加了排查问题的难度<a href="./@ref.html">2</a>。</li></ul><hr><h3 id="_3-资源管理挑战" tabindex="-1"><strong>3. 资源管理挑战</strong> <a class="header-anchor" href="#_3-资源管理挑战" aria-label="Permalink to “3. 资源管理挑战”">​</a></h3><ul><li><strong>内存占用</strong>：虽然虚拟线程比传统线程更轻量，但在极端高并发场景下（如数百万个虚拟线程），仍可能占用大量内存，需要优化内存管理策略<a href="./@ref.html">1</a>。</li><li><strong>线程池配置</strong>：虚拟线程的调度依赖于 <code>ForkJoinPool</code>，其默认配置可能不适用于所有场景，需要根据具体需求调整线程池参数<a href="./@ref.html">2</a>。</li></ul><hr><h3 id="_4-性能瓶颈" tabindex="-1"><strong>4. 性能瓶颈</strong> <a class="header-anchor" href="#_4-性能瓶颈" aria-label="Permalink to “4. 性能瓶颈”">​</a></h3><ul><li><strong>计算密集型任务</strong>：虚拟线程在 I/O 密集型任务中表现优异，但在计算密集型任务中性能提升有限，甚至可能因频繁切换上下文而降低效率<a href="./@ref.html">1</a>。</li><li><strong>锁竞争问题</strong>：虚拟线程的高并发特性可能加剧锁竞争问题，导致性能下降<a href="./@ref.html">2</a>。</li></ul><hr><h3 id="_5-学习曲线与最佳实践" tabindex="-1"><strong>5. 学习曲线与最佳实践</strong> <a class="header-anchor" href="#_5-学习曲线与最佳实践" aria-label="Permalink to “5. 学习曲线与最佳实践”">​</a></h3><ul><li><strong>开发者的学习成本</strong>：虚拟线程引入了新的编程模型和概念（如结构化并发），开发者需要重新学习并掌握最佳实践<a href="./@ref.html">1</a>。</li><li><strong>缺乏成熟案例</strong>：虚拟线程技术较新，实际项目中的应用案例较少，缺乏成熟的实践经验和优化方案<a href="./@ref.html">2</a>。</li></ul><hr><h3 id="_6-与现有生态的集成" tabindex="-1"><strong>6. 与现有生态的集成</strong> <a class="header-anchor" href="#_6-与现有生态的集成" aria-label="Permalink to “6. 与现有生态的集成”">​</a></h3><ul><li><strong>数据库连接池</strong>：虚拟线程的高并发能力可能使数据库连接池成为瓶颈，需要优化连接池配置或使用异步数据库驱动<a href="./@ref.html">1</a>。</li><li><strong>网络框架适配</strong>：某些网络框架（如 Netty）可能需要调整以充分利用虚拟线程的性能优势<a href="./@ref.html">2</a>。</li></ul><hr><h3 id="_7-线程安全问题" tabindex="-1"><strong>7. 线程安全问题</strong> <a class="header-anchor" href="#_7-线程安全问题" aria-label="Permalink to “7. 线程安全问题”">​</a></h3><ul><li><strong>共享资源的并发访问</strong>：虚拟线程的高并发特性可能加剧线程安全问题（如竞争条件、死锁），需要更精细的同步机制<a href="./@ref.html">1</a>。</li><li><strong>线程本地存储的滥用</strong>：过度依赖 <code>ThreadLocal</code> 可能导致内存泄漏或性能问题，需谨慎使用<a href="./@ref.html">2</a>。</li></ul><hr><h3 id="总结-10" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结-10" aria-label="Permalink to “总结”">​</a></h3><p>Java 虚拟线程技术在实际项目中面临兼容性、调试、资源管理、性能瓶颈、学习曲线、生态集成和线程安全等多方面的挑战。尽管它显著提升了并发性能，但开发者需要根据具体场景进行优化和调整，以充分发挥其潜力。随着技术的成熟和生态的完善，这些挑战将逐步得到解决<a href="./@ref.html">1</a><a href="./@ref.html">2</a> 。</p><h2 id="java虚拟线程技术未来可能会带来哪些新的编程范式" tabindex="-1">Java虚拟线程技术未来可能会带来哪些新的编程范式 <a class="header-anchor" href="#java虚拟线程技术未来可能会带来哪些新的编程范式" aria-label="Permalink to “Java虚拟线程技术未来可能会带来哪些新的编程范式”">​</a></h2><p>Java 虚拟线程技术（Virtual Threads）的引入不仅显著提升了并发性能，还可能催生一些新的编程范式和实践，进一步简化并发编程并提高开发效率。以下是未来可能出现的几种新编程范式：</p><hr><h3 id="_1-结构化并发-structured-concurrency" tabindex="-1"><strong>1. 结构化并发（Structured Concurrency）</strong> <a class="header-anchor" href="#_1-结构化并发-structured-concurrency" aria-label="Permalink to “1. 结构化并发（Structured Concurrency）”">​</a></h3><p>结构化并发是一种通过显式控制线程生命周期来简化并发编程的范式。虚拟线程与结构化并发结合，可以更清晰地管理任务和线程的父子关系，避免线程泄漏和资源浪费。</p><ul><li><p><strong>示例</strong>：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> scope </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> StructuredTaskScope&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    scope.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fork</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> task1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    scope.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fork</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> task2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    scope.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在 <code>StructuredTaskScope</code> 中，所有任务的生命周期被限制在作用域内，作用域结束时所有任务都会被取消或完成。</p></li><li><p><strong>优势</strong>：</p><ul><li>避免线程泄漏。</li><li>简化并发任务的管理和调试。</li></ul></li></ul><hr><h3 id="_2-无回调的异步编程" tabindex="-1"><strong>2. 无回调的异步编程</strong> <a class="header-anchor" href="#_2-无回调的异步编程" aria-label="Permalink to “2. 无回调的异步编程”">​</a></h3><p>虚拟线程允许开发者以同步的方式编写异步代码，无需使用复杂的回调机制或 <code>Future</code>/<code>Promise</code>。这种范式使得异步编程更加直观和易于维护。</p><ul><li><p><strong>示例</strong>：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startVirtualThread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetchDataFromNetwork</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 非阻塞 I/O 操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></li><li><p><strong>优势</strong>：</p><ul><li>代码更易读、更易维护。</li><li>避免回调地狱（Callback Hell）。</li></ul></li></ul><hr><h3 id="_3-事件驱动与反应式编程的简化" tabindex="-1"><strong>3. 事件驱动与反应式编程的简化</strong> <a class="header-anchor" href="#_3-事件驱动与反应式编程的简化" aria-label="Permalink to “3. 事件驱动与反应式编程的简化”">​</a></h3><p>虚拟线程可以与事件驱动和反应式编程模型结合，简化复杂的事件处理逻辑。开发者可以以同步的方式编写事件处理器，而无需手动管理线程和回调。</p><ul><li><p><strong>示例</strong>：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">eventBus.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;event&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, event </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startVirtualThread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handleEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></li><li><p><strong>优势</strong>：</p><ul><li>简化事件驱动和反应式编程的复杂性。</li><li>提高代码的可读性和可维护性。</li></ul></li></ul><hr><h3 id="_4-轻量级任务并发" tabindex="-1"><strong>4. 轻量级任务并发</strong> <a class="header-anchor" href="#_4-轻量级任务并发" aria-label="Permalink to “4. 轻量级任务并发”">​</a></h3><p>虚拟线程的轻量级特性使得开发者可以更自由地分解任务，将复杂任务拆分为多个小任务并行执行，而无需担心线程开销。</p><ul><li><p><strong>示例</strong>：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; threads </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IntStream.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mapToObj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startVirtualThread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> processTask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i)))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">threads.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Thread</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">join);</span></span></code></pre></div></li><li><p><strong>优势</strong>：</p><ul><li>提高任务并发度。</li><li>更高效地利用系统资源。</li></ul></li></ul><hr><h3 id="_5-微服务与云原生架构的优化" tabindex="-1"><strong>5. 微服务与云原生架构的优化</strong> <a class="header-anchor" href="#_5-微服务与云原生架构的优化" aria-label="Permalink to “5. 微服务与云原生架构的优化”">​</a></h3><p>虚拟线程的高并发性能使得它在微服务和云原生架构中具有显著优势。开发者可以更高效地处理大量并发请求，而无需依赖复杂的线程池配置。</p><ul><li><p><strong>示例</strong>：</p><ul><li>在 Spring Boot 3 中，虚拟线程可以显著提升 Web 服务的并发处理能力，减少响应时间。</li><li>在云原生应用中，虚拟线程可以更高效地处理高并发请求，降低资源消耗。</li></ul></li><li><p><strong>优势</strong>：</p><ul><li>提高微服务的性能和可扩展性。</li><li>简化云原生应用的并发管理。</li></ul></li></ul><hr><h3 id="_6-更高效的批处理与流处理" tabindex="-1"><strong>6. 更高效的批处理与流处理</strong> <a class="header-anchor" href="#_6-更高效的批处理与流处理" aria-label="Permalink to “6. 更高效的批处理与流处理”">​</a></h3><p>虚拟线程可以显著提升批处理和流处理任务的性能，特别是在涉及大量 I/O 操作的场景中。</p><ul><li><p><strong>示例</strong>：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; results </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Files.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lines</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Paths.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;data.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parallel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(line </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> processLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(line))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Collectors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span></code></pre></div></li><li><p><strong>优势</strong>：</p><ul><li>提高批处理和流处理任务的效率。</li><li>简化并发任务的管理。</li></ul></li></ul><hr><h3 id="_7-更友好的并发调试与监控" tabindex="-1"><strong>7. 更友好的并发调试与监控</strong> <a class="header-anchor" href="#_7-更友好的并发调试与监控" aria-label="Permalink to “7. 更友好的并发调试与监控”">​</a></h3><p>虚拟线程的引入使得并发调试和监控更加直观。开发者可以更容易地跟踪虚拟线程的执行状态，定位并发问题。</p><ul><li><p><strong>示例</strong>：</p><ul><li>使用 JVM 工具（如 JFR）监控虚拟线程的状态。</li><li>通过日志记录虚拟线程的执行路径。</li></ul></li><li><p><strong>优势</strong>：</p><ul><li>简化并发调试和监控。</li><li>提高开发效率。</li></ul></li></ul><hr><h3 id="总结-11" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结-11" aria-label="Permalink to “总结”">​</a></h3><p>Java 虚拟线程技术的引入不仅提升了并发性能，还可能催生多种新的编程范式，如结构化并发、无回调的异步编程、事件驱动与反应式编程的简化、轻量级任务并发等。这些范式将显著简化并发编程，提高代码的可读性、可维护性和性能，同时为微服务、云原生架构和批处理等场景提供更高效的解决方案。随着虚拟线程技术的普及，Java 生态将迎来更多创新和优化。</p><h1 id="java" tabindex="-1">java <a class="header-anchor" href="#java" aria-label="Permalink to “java”">​</a></h1><h2 id="学习资料" tabindex="-1">学习资料 <a class="header-anchor" href="#学习资料" aria-label="Permalink to “学习资料”">​</a></h2><ul><li><a href="https://www.cyc2018.xyz" target="_blank" rel="noreferrer">CS-Notes面试笔记</a></li><li><a href="https://cloud.macrozheng.com/foreword/mall_swarm_video.html" target="_blank" rel="noreferrer">mall-swarm视频教程</a></li></ul><h2 id="basic" tabindex="-1">basic <a class="header-anchor" href="#basic" aria-label="Permalink to “basic”">​</a></h2><h3 id="java-array-转-list" tabindex="-1">java array 转 list <a class="header-anchor" href="#java-array-转-list" aria-label="Permalink to “java array 转 list”">​</a></h3><p>在Java中，你可以使用<code>Arrays.asList()</code>方法将数组转换为列表。这是一个简单的方法来创建一个固定大小的<code>List</code>。如果你需要一个能够改变大小的<code>List</code> ，你需要使用<code>new ArrayList&lt;&gt;(Arrays.asList(array))</code>来创建一个新的<code>ArrayList</code>实例。</p><p>以下是两种情况的代码示例：</p><h4 id="创建一个固定大小的列表" tabindex="-1">创建一个固定大小的列表 <a class="header-anchor" href="#创建一个固定大小的列表" aria-label="Permalink to “创建一个固定大小的列表”">​</a></h4><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.Arrays;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.List;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArrayToListExample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] array </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Arrays.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(array);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(list); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: [a, b, c]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="创建一个可变大小的列表" tabindex="-1">创建一个可变大小的列表 <a class="header-anchor" href="#创建一个可变大小的列表" aria-label="Permalink to “创建一个可变大小的列表”">​</a></h4><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.ArrayList;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.Arrays;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.List;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArrayToArrayListExample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] array </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; arrayList </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ArrayList&lt;&gt;(Arrays.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(array));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 现在可以添加或删除元素了</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        arrayList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;d&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arrayList); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: [a, b, c, d]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>请注意，当你使用<code>Arrays.asList()</code>时，它返回的是一个受数组支持的固定大小的列表。这意味着你不能添加或移除元素（除非你将其转换为像<code>ArrayList</code> 这样的可调整大小的列表），但是你可以修改已经存在的元素。如果你尝试对固定大小的列表执行添加或移除操作，将会抛出<code>UnsupportedOperationException</code>异常。</p><h3 id="java-怎么用二进制打印int" tabindex="-1">java， 怎么用二进制打印int <a class="header-anchor" href="#java-怎么用二进制打印int" aria-label="Permalink to “java， 怎么用二进制打印int”">​</a></h3><p>在Java中，可以使用<code>Integer.toBinaryString()</code>方法来将一个<code>int</code>类型的数值转换为二进制字符串表示。此方法返回的是一个不带前导零的字符串，也就是说它不会打印出完整的32位（对于<code>int</code> 类型），如果需要显示所有位，包括前导零，则需要额外处理。</p><p>以下是一些例子：</p><h4 id="使用-integer-tobinarystring" tabindex="-1">使用 <code>Integer.toBinaryString()</code> <a class="header-anchor" href="#使用-integer-tobinarystring" aria-label="Permalink to “使用 Integer.toBinaryString()”">​</a></h4><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BinaryPrintExample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String binaryString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Integer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toBinaryString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;The binary representation of &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; is: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> binaryString);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="打印包含前导零的完整32位" tabindex="-1">打印包含前导零的完整32位 <a class="header-anchor" href="#打印包含前导零的完整32位" aria-label="Permalink to “打印包含前导零的完整32位”">​</a></h4><p>如果你想要打印出完整的32位二进制数，包括前导的0，你可以使用<code>String.format()</code>或者<code>BitSet</code>，但最简单的方法是用<code>String.format()</code>配合循环补足前导零：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FullBinaryPrintExample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Convert to binary string and ensure it&#39;s 32 bits long with leading zeros</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String binaryString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;%32s&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Integer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toBinaryString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39; &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;The full 32-bit binary representation of &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; is: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> binaryString);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>上面的代码中，<code>%32s</code>指定了格式化后的字符串总长度为32，不足的部分用空格填充，然后我们用<code>replace(&#39; &#39;, &#39;0&#39;)</code>把所有的空格替换成&#39;0&#39;。</p><h4 id="使用位运算手动构建二进制字符串" tabindex="-1">使用位运算手动构建二进制字符串 <a class="header-anchor" href="#使用位运算手动构建二进制字符串" aria-label="Permalink to “使用位运算手动构建二进制字符串”">​</a></h4><p>如果你想自己实现这个功能，你也可以使用位运算来构建二进制字符串：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ManualBinaryPrintExample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        StringBuilder binaryString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StringBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 31</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> k </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((k </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                binaryString.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                binaryString.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;The manually constructed 32-bit binary representation of &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; is: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> binaryString.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这段代码通过逐位检查整数的每一位是否为1，并相应地添加&quot;1&quot;或&quot;0&quot;到<code>StringBuilder</code>对象中，最终构建出完整的32位二进制字符串。</p><h2 id="concurrent" tabindex="-1">concurrent <a class="header-anchor" href="#concurrent" aria-label="Permalink to “concurrent”">​</a></h2><h2 id="每一个java的版本的主要更新" tabindex="-1">每一个java的版本的主要更新 <a class="header-anchor" href="#每一个java的版本的主要更新" aria-label="Permalink to “每一个java的版本的主要更新”">​</a></h2><p>以下是Java主要版本的主要更新内容：</p><h3 id="java-1-0-1996" tabindex="-1">Java 1.0 (1996) <a class="header-anchor" href="#java-1-0-1996" aria-label="Permalink to “Java 1.0 (1996)”">​</a></h3><ul><li><strong>初始版本</strong>：包含核心API和基础功能，如AWT、线程、IO等。</li></ul><h3 id="java-1-1-1997" tabindex="-1">Java 1.1 (1997) <a class="header-anchor" href="#java-1-1-1997" aria-label="Permalink to “Java 1.1 (1997)”">​</a></h3><ul><li><strong>JDBC</strong>：支持数据库连接。</li><li><strong>RMI</strong>：支持远程方法调用。</li><li><strong>内部类</strong>：引入内部类。</li><li><strong>JavaBeans</strong>：引入组件模型。</li></ul><h3 id="java-1-2-1998" tabindex="-1">Java 1.2 (1998) <a class="header-anchor" href="#java-1-2-1998" aria-label="Permalink to “Java 1.2 (1998)”">​</a></h3><ul><li><strong>集合框架</strong>：引入集合框架（如List、Set、Map）。</li><li><strong>Swing</strong>：引入新的GUI库。</li><li><strong>JIT编译器</strong>：引入即时编译器提升性能。</li></ul><h3 id="java-1-3-2000" tabindex="-1">Java 1.3 (2000) <a class="header-anchor" href="#java-1-3-2000" aria-label="Permalink to “Java 1.3 (2000)”">​</a></h3><ul><li><strong>HotSpot JVM</strong>：引入HotSpot虚拟机。</li><li><strong>JNDI</strong>：支持命名和目录服务。</li></ul><h3 id="java-1-4-2002" tabindex="-1">Java 1.4 (2002) <a class="header-anchor" href="#java-1-4-2002" aria-label="Permalink to “Java 1.4 (2002)”">​</a></h3><ul><li><strong>正则表达式</strong>：引入正则表达式支持。</li><li><strong>NIO</strong>：引入非阻塞IO。</li><li><strong>日志API</strong>：引入日志功能。</li></ul><h3 id="java-5-2004" tabindex="-1">Java 5 (2004) <a class="header-anchor" href="#java-5-2004" aria-label="Permalink to “Java 5 (2004)”">​</a></h3><ul><li><strong>泛型</strong>：引入泛型支持。</li><li><strong>注解</strong>：引入注解功能。</li><li><strong>自动装箱/拆箱</strong>：支持基本类型与包装类的自动转换。</li><li><strong>枚举</strong>：引入枚举类型。</li><li><strong>并发工具</strong>：引入<code>java.util.concurrent</code>包。</li></ul><h3 id="java-6-2006" tabindex="-1">Java 6 (2006) <a class="header-anchor" href="#java-6-2006" aria-label="Permalink to “Java 6 (2006)”">​</a></h3><ul><li><strong>脚本引擎</strong>：支持脚本语言（如JavaScript）。</li><li><strong>JDBC 4.0</strong>：增强数据库连接功能。</li><li><strong>JAX-WS</strong>：支持Web服务。</li></ul><h3 id="java-7-2011" tabindex="-1">Java 7 (2011) <a class="header-anchor" href="#java-7-2011" aria-label="Permalink to “Java 7 (2011)”">​</a></h3><ul><li><strong>try-with-resources</strong>：自动资源管理。</li><li><strong>NIO.2</strong>：增强文件IO操作。</li><li><strong>钻石操作符</strong>：简化泛型实例化。</li><li><strong>多异常捕获</strong>：支持一次捕获多个异常。</li></ul><h3 id="java-8-2014" tabindex="-1">Java 8 (2014) <a class="header-anchor" href="#java-8-2014" aria-label="Permalink to “Java 8 (2014)”">​</a></h3><ul><li><strong>Lambda表达式</strong>：引入函数式编程。</li><li><strong>Stream API</strong>：支持流式数据处理。</li><li><strong>默认方法</strong>：接口支持默认方法。</li><li><strong>新的日期时间API</strong>：引入<code>java.time</code>包。</li></ul><h3 id="java-9-2017" tabindex="-1">Java 9 (2017) <a class="header-anchor" href="#java-9-2017" aria-label="Permalink to “Java 9 (2017)”">​</a></h3><ul><li><strong>模块系统</strong>：引入模块化系统（Jigsaw）。</li><li><strong>JShell</strong>：引入交互式编程工具。</li><li><strong>集合工厂方法</strong>：简化集合创建。</li></ul><h3 id="java-10-2018" tabindex="-1">Java 10 (2018) <a class="header-anchor" href="#java-10-2018" aria-label="Permalink to “Java 10 (2018)”">​</a></h3><ul><li><strong>局部变量类型推断</strong>：引入<code>var</code>关键字。</li><li><strong>G1垃圾回收器</strong>：并行全堆回收。</li></ul><h3 id="java-11-2018" tabindex="-1">Java 11 (2018) <a class="header-anchor" href="#java-11-2018" aria-label="Permalink to “Java 11 (2018)”">​</a></h3><ul><li><strong>HTTP Client API</strong>：标准化HTTP客户端。</li><li><strong>局部变量语法扩展</strong>：支持Lambda表达式中的<code>var</code>。</li><li><strong>移除模块</strong>：移除Java EE和CORBA模块。</li></ul><h3 id="java-12-2019" tabindex="-1">Java 12 (2019) <a class="header-anchor" href="#java-12-2019" aria-label="Permalink to “Java 12 (2019)”">​</a></h3><ul><li><strong>Switch表达式</strong>：增强<code>switch</code>语句。</li><li><strong>JVM常量API</strong>：引入常量API。</li></ul><h3 id="java-13-2019" tabindex="-1">Java 13 (2019) <a class="header-anchor" href="#java-13-2019" aria-label="Permalink to “Java 13 (2019)”">​</a></h3><ul><li><strong>文本块</strong>：支持多行字符串。</li><li><strong>动态CDS归档</strong>：优化类数据共享。</li></ul><h3 id="java-14-2020" tabindex="-1">Java 14 (2020) <a class="header-anchor" href="#java-14-2020" aria-label="Permalink to “Java 14 (2020)”">​</a></h3><ul><li><strong>Records</strong>：引入记录类。</li><li><strong>Pattern Matching for instanceof</strong>：增强<code>instanceof</code>操作符。</li></ul><h3 id="java-15-2020" tabindex="-1">Java 15 (2020) <a class="header-anchor" href="#java-15-2020" aria-label="Permalink to “Java 15 (2020)”">​</a></h3><ul><li><strong>Sealed Classes</strong>：引入密封类。</li><li><strong>文本块</strong>：正式支持多行字符串。</li></ul><h3 id="java-16-2021" tabindex="-1">Java 16 (2021) <a class="header-anchor" href="#java-16-2021" aria-label="Permalink to “Java 16 (2021)”">​</a></h3><ul><li><strong>Records</strong>：正式支持记录类。</li><li><strong>Pattern Matching for instanceof</strong>：正式支持模式匹配。</li></ul><h3 id="java-17-2021" tabindex="-1">Java 17 (2021) <a class="header-anchor" href="#java-17-2021" aria-label="Permalink to “Java 17 (2021)”">​</a></h3><ul><li><strong>Sealed Classes</strong>：正式支持密封类。</li><li><strong>移除RMI激活系统</strong>：移除过时功能。</li></ul><h3 id="java-18-2022" tabindex="-1">Java 18 (2022) <a class="header-anchor" href="#java-18-2022" aria-label="Permalink to “Java 18 (2022)”">​</a></h3><ul><li><strong>简单Web服务器</strong>：引入简单HTTP服务器。</li><li><strong>UTF-8默认字符集</strong>：默认使用UTF-8编码。</li></ul><h3 id="java-19-2022" tabindex="-1">Java 19 (2022) <a class="header-anchor" href="#java-19-2022" aria-label="Permalink to “Java 19 (2022)”">​</a></h3><ul><li><strong>虚拟线程</strong>：引入虚拟线程（预览）。</li><li><strong>结构化并发</strong>：简化多线程编程（孵化器）。</li></ul><h3 id="java-20-2023" tabindex="-1">Java 20 (2023) <a class="header-anchor" href="#java-20-2023" aria-label="Permalink to “Java 20 (2023)”">​</a></h3><ul><li><strong>Scoped Values</strong>：引入作用域值（预览）。</li><li><strong>Record Patterns</strong>：引入记录模式（预览）。</li></ul><h3 id="java-21-2023" tabindex="-1">Java 21 (2023) <a class="header-anchor" href="#java-21-2023" aria-label="Permalink to “Java 21 (2023)”">​</a></h3><ul><li><strong>虚拟线程</strong>：正式支持虚拟线程。</li><li><strong>字符串模板</strong>：引入字符串模板（预览）。</li></ul><h3 id="总结-12" tabindex="-1">总结 <a class="header-anchor" href="#总结-12" aria-label="Permalink to “总结”">​</a></h3><p>Java每个版本都带来了新特性和改进，从基础功能到高级特性，不断提升开发效率和性能。</p><h2 id="面试java的时候可能会问到有没有了解最新的技术-这个我该怎么准备-提前了解哪些知识" tabindex="-1">面试java的时候可能会问到有没有了解最新的技术，这个我该怎么准备，提前了解哪些知识 <a class="header-anchor" href="#面试java的时候可能会问到有没有了解最新的技术-这个我该怎么准备-提前了解哪些知识" aria-label="Permalink to “面试java的时候可能会问到有没有了解最新的技术，这个我该怎么准备，提前了解哪些知识”">​</a></h2><p>在Java面试中，面试官可能会询问你对最新技术的了解，尤其是Java的最新版本和相关生态技术的发展。为了应对这类问题，你可以从以下几个方面进行准备：</p><hr><h3 id="_1-java最新版本特性" tabindex="-1">1. <strong>Java最新版本特性</strong> <a class="header-anchor" href="#_1-java最新版本特性" aria-label="Permalink to “1. Java最新版本特性”">​</a></h3><p>Java的每个版本都会引入新特性，了解这些特性不仅能展现你的技术敏锐度，还能体现你对语言发展的关注。以下是Java 17及之后版本的重要特性：</p><ul><li><strong>Java 17 (LTS)</strong>： <ul><li><strong>密封类（Sealed Classes）</strong>：限制类的继承，增强代码的安全性。</li><li><strong>模式匹配（Pattern Matching）</strong>：简化<code>instanceof</code>的使用，减少冗余代码。</li><li><strong>文本块（Text Blocks）</strong>：简化多行字符串的处理。</li></ul></li><li><strong>Java 21</strong>： <ul><li><strong>虚拟线程（Virtual Threads）</strong>：轻量级线程，显著提升并发性能。</li><li><strong>结构化并发（Structured Concurrency）</strong>：简化多线程编程，提升代码可维护性。</li></ul></li></ul><hr><h3 id="_2-微服务与云原生技术" tabindex="-1">2. <strong>微服务与云原生技术</strong> <a class="header-anchor" href="#_2-微服务与云原生技术" aria-label="Permalink to “2. 微服务与云原生技术”">​</a></h3><p>微服务和云原生是当前Java开发的热门方向，面试官可能会问到相关技术栈：</p><ul><li><strong>Spring Cloud</strong>：了解服务发现（Eureka）、配置中心（Spring Cloud Config）、负载均衡（Ribbon）等。</li><li><strong>Docker与Kubernetes</strong>：掌握容器化部署和编排工具的使用场景。</li><li><strong>服务网格（Service Mesh）</strong>：了解Istio或Linkerd在微服务中的作用。</li></ul><hr><h3 id="_3-数据库与缓存技术" tabindex="-1">3. <strong>数据库与缓存技术</strong> <a class="header-anchor" href="#_3-数据库与缓存技术" aria-label="Permalink to “3. 数据库与缓存技术”">​</a></h3><p>数据库和缓存是Java开发中的核心组件，面试官可能会问到最新趋势：</p><ul><li><strong>NoSQL数据库</strong>：了解MongoDB、Cassandra等非关系型数据库的使用场景。</li><li><strong>Redis</strong>：掌握Redis在缓存、分布式锁、消息队列中的应用。</li><li><strong>NewSQL</strong>：了解TiDB、CockroachDB等分布式数据库的特点。</li></ul><hr><h3 id="_4-性能优化与jvm调优" tabindex="-1">4. <strong>性能优化与JVM调优</strong> <a class="header-anchor" href="#_4-性能优化与jvm调优" aria-label="Permalink to “4. 性能优化与JVM调优”">​</a></h3><p>JVM调优是Java开发中的高级技能，面试官可能会问到相关实践：</p><ul><li><strong>垃圾回收器</strong>：了解G1、ZGC、Shenandoah等新型垃圾回收器的特点。</li><li><strong>性能监控工具</strong>：掌握JProfiler、VisualVM等工具的使用。</li><li><strong>内存模型</strong>：理解JVM内存分区（堆、栈、方法区）及优化策略。</li></ul><hr><h3 id="_5-前沿技术与趋势" tabindex="-1">5. <strong>前沿技术与趋势</strong> <a class="header-anchor" href="#_5-前沿技术与趋势" aria-label="Permalink to “5. 前沿技术与趋势”">​</a></h3><ul><li><strong>响应式编程</strong>：了解Spring WebFlux和Project Reactor的使用场景。</li><li><strong>AI与大数据</strong>：了解Java在机器学习（如DL4J）和大数据处理（如Apache Flink）中的应用。</li><li><strong>低代码/无代码平台</strong>：了解Java在低代码开发中的角色。</li></ul><hr><h3 id="_6-实践与项目结合" tabindex="-1">6. <strong>实践与项目结合</strong> <a class="header-anchor" href="#_6-实践与项目结合" aria-label="Permalink to “6. 实践与项目结合”">​</a></h3><ul><li><strong>项目中的应用</strong>：如果你在实际项目中使用过上述技术，可以结合项目经验进行说明。例如，如何在项目中利用虚拟线程提升并发性能，或如何使用Redis优化缓存策略。</li><li><strong>学习资源</strong>：关注技术博客、官方文档、GitHub开源项目，保持对最新技术的敏感度。</li></ul><hr><h3 id="_7-面试中的表达技巧" tabindex="-1">7. <strong>面试中的表达技巧</strong> <a class="header-anchor" href="#_7-面试中的表达技巧" aria-label="Permalink to “7. 面试中的表达技巧”">​</a></h3><ul><li><strong>结构化回答</strong>：使用STAR法则（情境、任务、行动、结果）描述你对新技术的理解和应用。</li><li><strong>展现学习能力</strong>：如果对某些技术不熟悉，可以表达出学习的意愿和计划。</li></ul><hr><p>通过以上准备，你可以在面试中展现出对最新技术的深刻理解和实际应用能力，从而提升竞争力。如果需要更详细的学习资源或具体技术点的深入解析，可以参考相关文档或技术社区。</p><h1 id="collection" tabindex="-1">collection <a class="header-anchor" href="#collection" aria-label="Permalink to “collection”">​</a></h1><h2 id="collection-和-collections-有什么区别" tabindex="-1">Collection 和 Collections 有什么区别？ <a class="header-anchor" href="#collection-和-collections-有什么区别" aria-label="Permalink to “Collection 和 Collections 有什么区别？”">​</a></h2><p><code>Collection</code> 和 <code>Collections</code> 是 Java 中两个不同的概念，主要区别体现在它们的定义、性质和使用方式上。以下是详细对比：</p><hr><h3 id="_1-定义与性质" tabindex="-1"><strong>1. 定义与性质</strong> <a class="header-anchor" href="#_1-定义与性质" aria-label="Permalink to “1. 定义与性质”">​</a></h3><ul><li><p><strong>Collection</strong></p><ul><li><strong>定义</strong>：<code>Collection</code> 是 Java 集合框架中的一个接口，表示一组对象的集合。它是所有集合类的父接口，为集合操作提供了基本的规范。</li><li><strong>性质</strong>：<code>Collection</code> 是一个抽象的概念，定义了集合的基本操作，如添加（<code>add</code>）、删除（<code>remove</code>）、遍历（<code>iterator</code>）等。常见的实现类包括 <code>List</code>、<code>Set</code> 等<a href="./@ref.html">1</a><a href="./@ref.html">2</a>。</li></ul></li><li><p><strong>Collections</strong></p><ul><li><strong>定义</strong>：<code>Collections</code> 是 Java 提供的一个工具类，包含了一系列对集合进行操作的静态方法。</li><li><strong>性质</strong>：<code>Collections</code> 是一个具体的类，不能被实例化。它提供了许多实用的静态方法，用于对集合进行排序、查找、替换、复制、同步等操作<a href="./@ref.html">1</a><a href="./@ref.html">2</a><a href="./@ref.html">3</a>。</li></ul></li></ul><hr><h3 id="_2-功能与使用" tabindex="-1"><strong>2. 功能与使用</strong> <a class="header-anchor" href="#_2-功能与使用" aria-label="Permalink to “2. 功能与使用”">​</a></h3><ul><li><p><strong>Collection</strong></p><ul><li><strong>功能</strong>：<code>Collection</code> 接口定义了集合的基本操作，如添加、删除、遍历等。这些操作是所有集合类必须实现的方法<a href="./@ref.html">2</a>。</li><li><strong>使用</strong>：通常需要创建一个实现了 <code>Collection</code> 接口的集合类对象（如 <code>ArrayList</code>、<code>HashSet</code>），然后调用其提供的方法来操作集合中的元素<a href="./@ref.html">2</a>。</li></ul></li><li><p><strong>Collections</strong></p><ul><li><strong>功能</strong>：<code>Collections</code> 类提供了许多实用的静态方法，如排序（<code>sort</code>）、查找（<code>max</code>、<code>min</code>）、替换（<code>replaceAll</code>）、复制（<code>copy</code> ）、同步（<code>synchronizedCollection</code>）等<a href="./@ref.html">2</a><a href="./@ref.html">3</a>。</li><li><strong>使用</strong>：由于 <code>Collections</code> 是一个工具类，其方法都是静态的，因此可以直接通过类名调用。例如，<code>Collections.sort(list)</code> 可以对列表进行排序，<code>Collections.max(list)</code> 可以查找集合中的最大值<a href="./@ref.html">2</a><a href="./@ref.html">3</a>。</li></ul></li></ul><hr><h3 id="_3-示例代码" tabindex="-1"><strong>3. 示例代码</strong> <a class="header-anchor" href="#_3-示例代码" aria-label="Permalink to “3. 示例代码”">​</a></h3><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.ArrayList;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.Collections;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.List;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 创建一个 ArrayList 集合</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 使用 Collections 类的 sort 方法对集合进行排序</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Collections.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(list);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 遍历集合并打印元素</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Integer num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 使用 Collections 类的 max 方法获取集合中的最大值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Integer max </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Collections.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(list);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Max value: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> max);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 使用 Collections 类的 unmodifiableList 方法创建一个不可修改的集合</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; unmodifiableList </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Collections.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unmodifiableList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(list);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 尝试修改不可修改的集合会抛出 UnsupportedOperationException 异常</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // unmodifiableList.add(4);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 会抛出异常</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在上述代码中，<code>Collection</code> 接口用于定义集合的基本行为，而 <code>Collections</code> 类提供了对集合进行排序、查找等操作的静态方法<a href="./@ref.html">2</a>。</p><hr><h3 id="_4-总结" tabindex="-1"><strong>4. 总结</strong> <a class="header-anchor" href="#_4-总结" aria-label="Permalink to “4. 总结”">​</a></h3><ul><li><strong>Collection 是一个接口</strong>：它定义了集合的基本操作和行为规范，是 Java 集合框架的基础<a href="./@ref.html">1</a><a href="./@ref.html">2</a>。</li><li><strong>Collections 是一个工具类</strong>：它提供了许多实用的静态方法，用于对集合进行各种操作<a href="./@ref.html">2</a><a href="./@ref.html">3</a>。<br> 在实际开发中，应根据具体需求选择合适的集合类或接口。如果需要定义一个自定义的集合类，可以继承或实现 <code>Collection</code> 接口；如果需要对集合进行排序、查找等操作，可以使用 <code>Collections</code> 类提供的静态方法<a href="./@ref.html">2</a>。</li></ul><h2 id="arrays-sort-和-collections-sort-的区别" tabindex="-1">Arrays.sort 和 Collections.sort 的区别 <a class="header-anchor" href="#arrays-sort-和-collections-sort-的区别" aria-label="Permalink to “Arrays.sort 和 Collections.sort 的区别”">​</a></h2><p><code>Arrays.sort</code> 和 <code>Collections.sort</code> 是 Java 中用于排序的两个常用方法，它们的主要区别体现在 <strong>适用对象</strong>、<strong>底层实现</strong> 和 <strong>使用场景</strong> 上。以下是详细对比：</p><hr><h3 id="_1-适用对象" tabindex="-1"><strong>1. 适用对象</strong> <a class="header-anchor" href="#_1-适用对象" aria-label="Permalink to “1. 适用对象”">​</a></h3><ul><li><p><strong>Arrays.sort</strong></p><ul><li>用于对 <strong>数组</strong> 进行排序，支持基本数据类型（如 <code>int[]</code>、<code>double[]</code>）和对象数组（如 <code>String[]</code>、<code>Integer[]</code>）。</li><li>示例：<div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Arrays.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr);</span></span></code></pre></div></li></ul></li><li><p><strong>Collections.sort</strong></p><ul><li>用于对 <strong>集合</strong>（如 <code>List</code>）进行排序，仅支持实现了 <code>List</code> 接口的集合（如 <code>ArrayList</code>、<code>LinkedList</code>）。</li><li>示例：<div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Arrays.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Collections.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(list);</span></span></code></pre></div></li></ul></li></ul><hr><h3 id="_2-底层实现" tabindex="-1"><strong>2. 底层实现</strong> <a class="header-anchor" href="#_2-底层实现" aria-label="Permalink to “2. 底层实现”">​</a></h3><ul><li><p><strong>Arrays.sort</strong></p><ul><li>对于 <strong>基本数据类型</strong>，使用 <strong>双轴快速排序</strong>（Dual-Pivot Quicksort），性能高效但不稳定。</li><li>对于 <strong>对象数组</strong>，使用 <strong>归并排序</strong>（Merge Sort）或 <strong>TimSort</strong>，保证稳定性<a href="./@ref.html">2</a><a href="./@ref.html">3</a>。</li></ul></li><li><p><strong>Collections.sort</strong></p><ul><li>底层调用 <code>Arrays.sort</code>，但针对集合的特性进行了封装。对于 <code>List</code>，使用 <strong>TimSort</strong>，保证稳定性<a href="./@ref.html">2</a><a href="./@ref.html">3</a>。</li></ul></li></ul><hr><h3 id="_3-排序规则" tabindex="-1"><strong>3. 排序规则</strong> <a class="header-anchor" href="#_3-排序规则" aria-label="Permalink to “3. 排序规则”">​</a></h3><ul><li><p><strong>默认排序</strong></p><ul><li>两者都支持默认的 <strong>自然排序</strong>（基于 <code>Comparable</code> 接口）。</li><li>示例：<div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Arrays.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 默认升序</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Collections.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(list); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 默认升序</span></span></code></pre></div></li></ul></li><li><p><strong>自定义排序</strong></p><ul><li>两者都支持通过 <code>Comparator</code> 接口实现自定义排序。</li><li>示例：<div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Arrays.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr, Comparator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reverseOrder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 降序</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Collections.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(list, Comparator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reverseOrder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 降序</span></span></code></pre></div></li></ul></li></ul><hr><h3 id="_4-性能与稳定性" tabindex="-1"><strong>4. 性能与稳定性</strong> <a class="header-anchor" href="#_4-性能与稳定性" aria-label="Permalink to “4. 性能与稳定性”">​</a></h3><ul><li><p><strong>性能</strong></p><ul><li><code>Arrays.sort</code> 在处理基本数据类型时性能更高，因为直接操作数组；<code>Collections.sort</code> 需要先将集合转换为数组，排序后再转换回集合，性能稍低<a href="./@ref.html">3</a>。</li></ul></li><li><p><strong>稳定性</strong></p><ul><li><code>Arrays.sort</code> 对对象数组和 <code>Collections.sort</code> 对集合的排序都是 <strong>稳定</strong> 的（即相等元素的相对顺序不变）<a href="./@ref.html">3</a>。</li></ul></li></ul><hr><h3 id="_5-使用场景" tabindex="-1"><strong>5. 使用场景</strong> <a class="header-anchor" href="#_5-使用场景" aria-label="Permalink to “5. 使用场景”">​</a></h3><ul><li><p><strong>Arrays.sort</strong></p><ul><li>适用于需要对 <strong>数组</strong> 进行排序的场景，尤其是基本数据类型数组。</li></ul></li><li><p><strong>Collections.sort</strong></p><ul><li>适用于需要对 <strong>集合</strong>（如 <code>List</code>）进行排序的场景，特别是需要自定义排序规则时。</li></ul></li></ul><hr><h3 id="总结-13" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结-13" aria-label="Permalink to “总结”">​</a></h3><table tabindex="0"><thead><tr><th>特性</th><th>Arrays.sort</th><th>Collections.sort</th></tr></thead><tbody><tr><td><strong>适用对象</strong></td><td>数组（基本数据类型、对象数组）</td><td>集合（如 <code>List</code>）</td></tr><tr><td><strong>底层实现</strong></td><td>基本类型：快速排序；对象：归并排序/TimSort</td><td>调用 <code>Arrays.sort</code>，使用 TimSort</td></tr><tr><td><strong>默认排序</strong></td><td>自然排序（升序）</td><td>自然排序（升序）</td></tr><tr><td><strong>自定义排序</strong></td><td>支持 <code>Comparator</code></td><td>支持 <code>Comparator</code></td></tr><tr><td><strong>性能</strong></td><td>较高</td><td>稍低（需转换集合）</td></tr><tr><td><strong>稳定性</strong></td><td>对象数组稳定，基本类型不稳定</td><td>稳定</td></tr><tr><td><strong>使用场景</strong></td><td>数组排序</td><td>集合排序</td></tr></tbody></table><p>根据具体需求选择合适的排序方法：<strong>数组排序用 <code>Arrays.sort</code>，集合排序用 <code>Collections.sort</code></strong><a href="./@ref.html">1</a><a href="./@ref.html">2</a><a href="./@ref.html">3</a>。</p><h1 id="i-o模型" tabindex="-1">I/O模型 <a class="header-anchor" href="#i-o模型" aria-label="Permalink to “I/O模型”">​</a></h1><h2 id="select、poll和epoll的区别" tabindex="-1">select、poll和epoll的区别 <a class="header-anchor" href="#select、poll和epoll的区别" aria-label="Permalink to “select、poll和epoll的区别”">​</a></h2><p><code>select</code>、<code>poll</code> 和 <code>epoll</code> 都是用于实现 I/O 多路复用的机制，允许单个进程或线程同时监控多个文件描述符（如套接字），并在其中任何一个就绪时通知程序进行读写操作。尽管它们的功能相似，但在实现方式、性能和适用场景上有显著区别。以下是它们的详细对比：</p><hr><h3 id="_1-select" tabindex="-1">1. <strong>select</strong> <a class="header-anchor" href="#_1-select" aria-label="Permalink to “1. select”">​</a></h3><ul><li><strong>定义</strong>：<code>select</code> 是最早的 I/O 多路复用机制，通过一个系统调用监控多个文件描述符的状态。</li><li><strong>特点</strong>： <ul><li>使用 <code>fd_set</code> 数据结构来存储文件描述符集合。</li><li>每次调用 <code>select</code> 时，需要将 <code>fd_set</code> 从用户态拷贝到内核态，并在内核中遍历所有文件描述符。</li><li>支持的文件描述符数量有限，默认是 1024 个。</li><li>超时精度较低，使用的是 <code>struct timeval</code> 结构。</li></ul></li><li><strong>优点</strong>： <ul><li>跨平台支持较好，几乎在所有操作系统上都可用。</li></ul></li><li><strong>缺点</strong>： <ul><li>文件描述符数量受限。</li><li>每次调用都需要重新设置 <code>fd_set</code>，且需要从用户态拷贝到内核态，开销较大。</li><li>内核需要遍历所有文件描述符，效率较低<a href="./@ref.html">1</a><a href="./@ref.html">3</a>。</li></ul></li></ul><hr><h3 id="_2-poll" tabindex="-1">2. <strong>poll</strong> <a class="header-anchor" href="#_2-poll" aria-label="Permalink to “2. poll”">​</a></h3><ul><li><strong>定义</strong>：<code>poll</code> 是对 <code>select</code> 的改进，使用 <code>pollfd</code> 结构来管理文件描述符集合。</li><li><strong>特点</strong>： <ul><li>使用 <code>pollfd</code> 数组存储文件描述符及其关注的事件。</li><li>没有文件描述符数量的限制（基于链表实现）。</li><li>每次调用 <code>poll</code> 时，需要将 <code>pollfd</code> 数组从用户态拷贝到内核态，并在内核中遍历所有文件描述符。</li><li>超时精度较高，使用的是毫秒级超时。</li></ul></li><li><strong>优点</strong>： <ul><li>文件描述符数量不受限制。</li><li>事件类型更丰富（如 <code>POLLIN</code>、<code>POLLOUT</code> 等）。</li></ul></li><li><strong>缺点</strong>： <ul><li>每次调用需要拷贝 <code>pollfd</code> 数组，开销较大。</li><li>内核仍需遍历所有文件描述符，效率较低<a href="./@ref.html">1</a><a href="./@ref.html">3</a>。</li></ul></li></ul><hr><h3 id="_3-epoll" tabindex="-1">3. <strong>epoll</strong> <a class="header-anchor" href="#_3-epoll" aria-label="Permalink to “3. epoll”">​</a></h3><ul><li><strong>定义</strong>：<code>epoll</code> 是 Linux 特有的高效 I/O 多路复用机制，专为处理大量文件描述符设计。</li><li><strong>特点</strong>： <ul><li>使用事件驱动模型，通过 <code>epoll_create</code>、<code>epoll_ctl</code> 和 <code>epoll_wait</code> 三个函数实现。</li><li>文件描述符只需在 <code>epoll_ctl</code> 时拷贝一次到内核，后续调用 <code>epoll_wait</code> 时无需重复拷贝。</li><li>内核通过回调机制通知就绪的文件描述符，无需遍历所有文件描述符。</li><li>支持水平触发（LT）和边缘触发（ET）模式： <ul><li><strong>水平触发（LT）</strong>：只要文件描述符就绪，就会持续通知。</li><li><strong>边缘触发（ET）</strong>：仅在状态变化时通知一次，需一次性处理所有数据。</li></ul></li></ul></li><li><strong>优点</strong>： <ul><li>文件描述符数量不受限制。</li><li>性能高效，尤其适合高并发场景。</li><li>事件通知机制更灵活。</li></ul></li><li><strong>缺点</strong>： <ul><li>仅支持 Linux 系统，跨平台性差<a href="./@ref.html">1</a><a href="./@ref.html">2</a><a href="./@ref.html">3</a>。</li></ul></li></ul><hr><h3 id="对比总结" tabindex="-1">对比总结 <a class="header-anchor" href="#对比总结" aria-label="Permalink to “对比总结”">​</a></h3><table tabindex="0"><thead><tr><th>特性</th><th>select</th><th>poll</th><th>epoll</th></tr></thead><tbody><tr><td>文件描述符数量</td><td>有限（默认 1024）</td><td>无限制</td><td>无限制</td></tr><tr><td>数据结构</td><td><code>fd_set</code></td><td><code>pollfd</code> 数组</td><td>事件表（红黑树 + 就绪链表）</td></tr><tr><td>拷贝开销</td><td>每次调用需拷贝 <code>fd_set</code></td><td>每次调用需拷贝 <code>pollfd</code> 数组</td><td>仅 <code>epoll_ctl</code> 时拷贝一次</td></tr><tr><td>内核遍历方式</td><td>遍历所有文件描述符</td><td>遍历所有文件描述符</td><td>回调机制，无需遍历</td></tr><tr><td>事件通知机制</td><td>水平触发</td><td>水平触发</td><td>支持水平触发和边缘触发</td></tr><tr><td>适用场景</td><td>低并发、跨平台场景</td><td>中低并发场景</td><td>高并发场景（如 Web 服务器）</td></tr><tr><td>跨平台性</td><td>跨平台支持</td><td>跨平台支持</td><td>仅支持 Linux</td></tr></tbody></table><hr><h3 id="总结-14" tabindex="-1">总结 <a class="header-anchor" href="#总结-14" aria-label="Permalink to “总结”">​</a></h3><ul><li><strong><code>select</code></strong>：适合低并发场景，跨平台支持好，但性能较差。</li><li><strong><code>poll</code></strong>：解决了 <code>select</code> 的文件描述符数量限制问题，但仍存在性能瓶颈。</li><li><strong><code>epoll</code></strong>：性能最优，适合高并发场景，但仅支持 Linux 系统<a href="./@ref.html">1</a><a href="./@ref.html">2</a><a href="./@ref.html">3</a>。</li></ul><h2 id="提供一个java异步i-o的例子" tabindex="-1">提供一个java异步I/O的例子 <a class="header-anchor" href="#提供一个java异步i-o的例子" aria-label="Permalink to “提供一个java异步I/O的例子”">​</a></h2><p>以下是一个使用 Java 异步 I/O（AIO）的代码示例，展示了如何通过 <code>AsynchronousFileChannel</code> 进行异步文件读取操作：</p><h3 id="示例代码-异步文件读取" tabindex="-1">示例代码：异步文件读取 <a class="header-anchor" href="#示例代码-异步文件读取" aria-label="Permalink to “示例代码：异步文件读取”">​</a></h3><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.io.IOException;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.nio.ByteBuffer;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.nio.channels.AsynchronousFileChannel;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.nio.file.Path;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.nio.file.Paths;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.nio.file.StandardOpenOption;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.concurrent.Future;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AsyncFileReadExample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 打开异步文件通道</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Path path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Paths.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;example.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            AsynchronousFileChannel fileChannel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AsynchronousFileChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path, StandardOpenOption.READ);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 分配缓冲区</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ByteBuffer buffer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ByteBuffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">allocate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 发起异步读取操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Future&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; future </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fileChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buffer, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 继续执行其他任务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;异步读取操作已发起，继续执行其他任务...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 等待读取操作完成</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">future.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isDone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;等待读取操作完成...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模拟其他任务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 获取读取结果</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bytesRead </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> future.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 切换缓冲区为读模式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remaining</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;读取到的数据: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 关闭通道</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            fileChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Exception </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="代码说明-1" tabindex="-1">代码说明 <a class="header-anchor" href="#代码说明-1" aria-label="Permalink to “代码说明”">​</a></h3><ol><li><p><strong>打开异步文件通道</strong>：</p><ul><li>使用 <code>AsynchronousFileChannel.open()</code> 打开文件通道，并指定 <code>StandardOpenOption.READ</code> 以允许读取操作<a href="./@ref.html">1</a>。</li></ul></li><li><p><strong>分配缓冲区</strong>：</p><ul><li>使用 <code>ByteBuffer.allocate()</code> 分配一个缓冲区，用于存储读取的数据<a href="./@ref.html">1</a>。</li></ul></li><li><p><strong>发起异步读取操作</strong>：</p><ul><li>调用 <code>fileChannel.read()</code> 发起异步读取操作，返回一个 <code>Future&lt;Integer&gt;</code> 对象，表示读取操作的完成状态<a href="./@ref.html">1</a>。</li></ul></li><li><p><strong>继续执行其他任务</strong>：</p><ul><li>在等待读取操作完成的过程中，可以继续执行其他任务，体现了异步 I/O 的非阻塞特性<a href="./@ref.html">1</a>。</li></ul></li><li><p><strong>等待读取操作完成</strong>：</p><ul><li>使用 <code>future.isDone()</code> 检查读取操作是否完成，并通过 <code>future.get()</code> 获取读取的字节数<a href="./@ref.html">1</a>。</li></ul></li><li><p><strong>处理读取结果</strong>：</p><ul><li>将缓冲区中的数据转换为字符串并输出<a href="./@ref.html">1</a>。</li></ul></li><li><p><strong>关闭通道</strong>：</p><ul><li>使用 <code>fileChannel.close()</code> 关闭异步文件通道<a href="./@ref.html">1</a>。</li></ul></li></ol><h3 id="异步-i-o-的优势" tabindex="-1">异步 I/O 的优势 <a class="header-anchor" href="#异步-i-o-的优势" aria-label="Permalink to “异步 I/O 的优势”">​</a></h3><ul><li><strong>非阻塞</strong>：发起 I/O 操作后，线程可以继续执行其他任务，无需等待 I/O 操作完成<a href="./@ref.html">1</a>。</li><li><strong>高性能</strong>：适合高并发场景，能够充分利用系统资源<a href="./@ref.html">1</a>。</li></ul><h3 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to “参考”">​</a></h3><ul><li><a href="./@ref.html">1</a>: Java 异步 I/O 示例，<a href="https://www.cnblogs.com/robothy/p/15734643.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/robothy/p/15734643.html</a></li><li><a href="./@ref.html">2</a>: 使用 Java NIO 进行异步 I/O 编程，<a href="https://baijiahao.baidu.com/s?id=1768046800211280021" target="_blank" rel="noreferrer">https://baijiahao.baidu.com/s?id=1768046800211280021</a></li><li><a href="./@ref.html">4</a>: Java 异步 I/O（AIO）：解析与实例，<a href="https://m.blog.csdn.net/DxProgram/article/details/133594390" target="_blank" rel="noreferrer">https://m.blog.csdn.net/DxProgram/article/details/133594390</a></li></ul><h2 id="在java中非阻塞io就是io多路复用吗" tabindex="-1">在java中非阻塞IO就是IO多路复用吗 <a class="header-anchor" href="#在java中非阻塞io就是io多路复用吗" aria-label="Permalink to “在java中非阻塞IO就是IO多路复用吗”">​</a></h2><p>在 Java 中，<strong>非阻塞 I/O（Non-blocking I/O）</strong> 和 <strong>I/O 多路复用（I/O Multiplexing）</strong> 是两个相关但不同的概念。它们都用于提高 I/O 操作的效率和性能，但实现方式和应用场景有所不同。</p><hr><h3 id="_1-非阻塞-i-o-non-blocking-i-o" tabindex="-1">1. <strong>非阻塞 I/O（Non-blocking I/O）</strong> <a class="header-anchor" href="#_1-非阻塞-i-o-non-blocking-i-o" aria-label="Permalink to “1. 非阻塞 I/O（Non-blocking I/O）”">​</a></h3><p>非阻塞 I/O 是一种 I/O 模型，其核心特点是当进行 I/O 操作时，如果数据没有准备好，I/O 操作会立即返回，而不是阻塞线程等待数据就绪。线程可以继续执行其他任务，稍后再尝试执行 I/O 操作。</p><ul><li><p><strong>特点</strong>：</p><ul><li>通过 <code>Channel.configureBlocking(false)</code> 将通道设置为非阻塞模式。</li><li>线程不会被阻塞，可以同时处理多个 I/O 操作。</li><li>需要不断轮询检查 I/O 操作是否完成，可能会消耗 CPU 资源。</li></ul></li><li><p><strong>示例</strong>： 在 Java NIO 中，<code>SocketChannel</code> 和 <code>ServerSocketChannel</code> 可以设置为非阻塞模式。例如：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SocketChannel socketChannel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SocketChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">socketChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">socketChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> InetSocketAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre></div></li></ul><hr><h3 id="_2-i-o-多路复用-i-o-multiplexing" tabindex="-1">2. <strong>I/O 多路复用（I/O Multiplexing）</strong> <a class="header-anchor" href="#_2-i-o-多路复用-i-o-multiplexing" aria-label="Permalink to “2. I/O 多路复用（I/O Multiplexing）”">​</a></h3><p>I/O 多路复用是一种机制，通过一个线程同时监控多个 I/O 通道（Channel），当某个通道有 I/O 事件就绪时，通知应用程序进行处理。Java NIO 中的 <code>Selector</code> 是实现 I/O 多路复用的核心组件。</p><ul><li><p><strong>特点</strong>：</p><ul><li>使用 <code>Selector</code> 监控多个 <code>Channel</code> 的 I/O 事件（如可读、可写、连接等）。</li><li>单线程可以高效地管理多个 I/O 通道，适合高并发场景。</li><li>避免了非阻塞 I/O 中轮询的开销，提高了资源利用率。</li></ul></li><li><p><strong>示例</strong>：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Selector selector </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Selector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ServerSocketChannel serverChannel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ServerSocketChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">serverChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">serverChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(selector, SelectionKey.OP_ACCEPT);</span></span></code></pre></div></li></ul><hr><h3 id="_3-非阻塞-i-o-与-i-o-多路复用的关系" tabindex="-1">3. <strong>非阻塞 I/O 与 I/O 多路复用的关系</strong> <a class="header-anchor" href="#_3-非阻塞-i-o-与-i-o-多路复用的关系" aria-label="Permalink to “3. 非阻塞 I/O 与 I/O 多路复用的关系”">​</a></h3><ul><li><strong>非阻塞 I/O 是 I/O 多路复用的基础</strong>：I/O 多路复用依赖于通道的非阻塞模式。只有将通道设置为非阻塞模式，<code>Selector</code> 才能有效地监控多个通道的 I/O 事件。</li><li><strong>I/O 多路复用是对非阻塞 I/O 的优化</strong>：非阻塞 I/O 需要不断轮询检查 I/O 操作是否完成，而 I/O 多路复用通过 <code>Selector</code> 实现了事件驱动机制，避免了轮询的开销<a href="./@ref.html">1</a><a href="./@ref.html">2</a><a href="./@ref.html">5</a>。</li></ul><hr><h3 id="_4-总结-1" tabindex="-1">4. <strong>总结</strong> <a class="header-anchor" href="#_4-总结-1" aria-label="Permalink to “4. 总结”">​</a></h3><ul><li><strong>非阻塞 I/O</strong> 是一种 I/O 模型，强调 I/O 操作不会阻塞线程，适用于简单的 I/O 场景。</li><li><strong>I/O 多路复用</strong> 是一种机制，通过 <code>Selector</code> 高效管理多个非阻塞 I/O 通道，适合高并发场景。</li><li>在 Java 中，I/O 多路复用通常基于非阻塞 I/O 实现，但两者并非等同<a href="./@ref.html">1</a><a href="./@ref.html">2</a><a href="./@ref.html">5</a>。</li></ul><h2 id="在java中selector算非阻塞还是多路复用" tabindex="-1">在java中selector算非阻塞还是多路复用 <a class="header-anchor" href="#在java中selector算非阻塞还是多路复用" aria-label="Permalink to “在java中selector算非阻塞还是多路复用”">​</a></h2><p>在 Java 中，<code>Selector</code> 既是 <strong>非阻塞 I/O</strong> 的实现机制，也是 <strong>I/O 多路复用</strong> 的核心组件。它结合了这两种技术，使得单线程可以高效地管理多个 I/O 通道。以下是详细解释：</p><hr><h3 id="_1-selector-是非阻塞-i-o-的实现" tabindex="-1">1. <strong><code>Selector</code> 是非阻塞 I/O 的实现</strong> <a class="header-anchor" href="#_1-selector-是非阻塞-i-o-的实现" aria-label="Permalink to “1. Selector 是非阻塞 I/O 的实现”">​</a></h3><p>非阻塞 I/O 的核心特点是，当进行 I/O 操作时，如果数据没有准备好，操作会立即返回，而不是阻塞线程等待数据就绪。在 Java 中，<code>Selector</code> 依赖于 <code>Channel</code> 的非阻塞模式。</p><ul><li><strong>非阻塞模式</strong>：在使用 <code>Selector</code> 时，必须将 <code>Channel</code> 设置为非阻塞模式：<div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">channel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div>这样，<code>Channel</code> 的 I/O 操作（如 <code>read</code>、<code>write</code>）不会阻塞线程，而是立即返回结果（可能是 0 或 <code>-1</code>）。</li><li><strong>事件驱动</strong>：<code>Selector</code> 通过监听 <code>Channel</code> 的 I/O 事件（如可读、可写、连接等），实现了非阻塞的事件驱动模型。</li></ul><hr><h3 id="_2-selector-是-i-o-多路复用的核心" tabindex="-1">2. <strong><code>Selector</code> 是 I/O 多路复用的核心</strong> <a class="header-anchor" href="#_2-selector-是-i-o-多路复用的核心" aria-label="Permalink to “2. Selector 是 I/O 多路复用的核心”">​</a></h3><p>I/O 多路复用是一种机制，通过一个线程同时监控多个 I/O 通道，当某个通道有事件就绪时，通知应用程序进行处理。<code>Selector</code> 是 Java 中实现 I/O 多路复用的核心组件。</p><ul><li><strong>多路复用机制</strong>：<code>Selector</code> 使用底层的系统调用（如 Linux 的 <code>epoll</code>、Windows 的 <code>IOCP</code>）监控多个 <code>Channel</code>。当某个 <code>Channel</code> 的 I/O 事件就绪时，<code>Selector</code> 会将其标记为“就绪状态”，并通过 <code>selectedKeys()</code> 返回这些 <code>Channel</code> 的集合。</li><li><strong>单线程管理多通道</strong>：通过 <code>Selector</code>，单线程可以同时管理成千上万的 <code>Channel</code>，避免了传统阻塞 I/O 中每个连接需要一个线程的开销。</li></ul><hr><h3 id="_3-selector-的工作原理" tabindex="-1">3. <strong><code>Selector</code> 的工作原理</strong> <a class="header-anchor" href="#_3-selector-的工作原理" aria-label="Permalink to “3. Selector 的工作原理”">​</a></h3><p><code>Selector</code> 的工作流程如下：</p><ol><li><strong>创建 <code>Selector</code></strong>：<div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Selector selector </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Selector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div></li><li><strong>将 <code>Channel</code> 注册到 <code>Selector</code></strong>：<div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">channel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SelectionKey key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> channel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(selector, SelectionKey.OP_READ);</span></span></code></pre></div>这里指定了感兴趣的事件（如 <code>OP_READ</code>、<code>OP_WRITE</code>）。</li><li><strong>轮询就绪事件</strong>：<div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> readyChannels </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> selector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Set&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SelectionKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; selectedKeys </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> selector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">selectedKeys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (SelectionKey key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> selectedKeys) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isReadable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 处理读事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isWritable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 处理写事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><strong>处理事件</strong>：根据 <code>SelectionKey</code> 的类型，执行相应的 I/O 操作。</li></ol><hr><h3 id="_4-总结-2" tabindex="-1">4. <strong>总结</strong> <a class="header-anchor" href="#_4-总结-2" aria-label="Permalink to “4. 总结”">​</a></h3><ul><li><strong><code>Selector</code> 是非阻塞 I/O 的实现</strong>：它依赖于 <code>Channel</code> 的非阻塞模式，确保 I/O 操作不会阻塞线程。</li><li><strong><code>Selector</code> 是 I/O 多路复用的核心</strong>：它通过监控多个 <code>Channel</code> 的 I/O 事件，实现了单线程管理多通道的高效机制。</li></ul><p>因此，<code>Selector</code> 既是非阻塞 I/O 的实现，也是 I/O 多路复用的核心组件<a href="./@ref.html">1</a><a href="./@ref.html">2</a><a href="./@ref.html">3</a>。</p><h1 id="socket" tabindex="-1">socket <a class="header-anchor" href="#socket" aria-label="Permalink to “socket”">​</a></h1><h2 id="我有这样一个开发场景-服务端需要和多个客户端进行tcp连接-服务端会发送指令给客户端-客户端会返回指令执行结果-客户端会定时返回心跳报文上报状态-客户端会不定时上报事件报文。我该怎么实现上述功能" tabindex="-1">我有这样一个开发场景，服务端需要和多个客户端进行tcp连接，服务端会发送指令给客户端，客户端会返回指令执行结果；客户端会定时返回心跳报文上报状态；客户端会不定时上报事件报文。我该怎么实现上述功能？ <a class="header-anchor" href="#我有这样一个开发场景-服务端需要和多个客户端进行tcp连接-服务端会发送指令给客户端-客户端会返回指令执行结果-客户端会定时返回心跳报文上报状态-客户端会不定时上报事件报文。我该怎么实现上述功能" aria-label="Permalink to “我有这样一个开发场景，服务端需要和多个客户端进行tcp连接，服务端会发送指令给客户端，客户端会返回指令执行结果；客户端会定时返回心跳报文上报状态；客户端会不定时上报事件报文。我该怎么实现上述功能？”">​</a></h2><p>要实现上述功能，可以按照以下步骤进行设计和开发：</p><h3 id="_1-服务端设计" tabindex="-1">1. 服务端设计 <a class="header-anchor" href="#_1-服务端设计" aria-label="Permalink to “1. 服务端设计”">​</a></h3><h4 id="_1-1-建立tcp连接" tabindex="-1">1.1 建立TCP连接 <a class="header-anchor" href="#_1-1-建立tcp连接" aria-label="Permalink to “1.1 建立TCP连接”">​</a></h4><ul><li>使用一个主线程监听指定端口，接受客户端的连接请求。</li><li>为每个客户端连接创建一个独立的线程或使用I/O多路复用（如<code>select</code>、<code>poll</code>、<code>epoll</code>）处理多个连接。</li></ul><h4 id="_1-2-指令发送" tabindex="-1">1.2 指令发送 <a class="header-anchor" href="#_1-2-指令发送" aria-label="Permalink to “1.2 指令发送”">​</a></h4><ul><li>服务端根据需要向特定客户端发送指令，指令可以封装成特定的协议格式（如JSON、XML或自定义二进制格式）。</li><li>通过客户端的TCP连接发送指令，并等待客户端返回执行结果。</li></ul><h4 id="_1-3-处理客户端返回" tabindex="-1">1.3 处理客户端返回 <a class="header-anchor" href="#_1-3-处理客户端返回" aria-label="Permalink to “1.3 处理客户端返回”">​</a></h4><ul><li>接收客户端返回的指令执行结果，解析并处理。</li><li>如果在一定时间内未收到响应，可以进行超时重发或标记客户端为不可用。</li></ul><h4 id="_1-4-心跳处理" tabindex="-1">1.4 心跳处理 <a class="header-anchor" href="#_1-4-心跳处理" aria-label="Permalink to “1.4 心跳处理”">​</a></h4><ul><li>接收客户端定时发送的心跳报文，更新客户端的状态和最后活跃时间。</li><li>如果长时间未收到心跳，可以认为客户端断开连接，进行清理。</li></ul><h4 id="_1-5-事件处理" tabindex="-1">1.5 事件处理 <a class="header-anchor" href="#_1-5-事件处理" aria-label="Permalink to “1.5 事件处理”">​</a></h4><ul><li>接收客户端不定时发送的事件报文，解析并处理。</li><li>事件报文可能包含重要信息，需要及时处理。</li></ul><h3 id="_2-客户端设计" tabindex="-1">2. 客户端设计 <a class="header-anchor" href="#_2-客户端设计" aria-label="Permalink to “2. 客户端设计”">​</a></h3><h4 id="_2-1-连接服务端" tabindex="-1">2.1 连接服务端 <a class="header-anchor" href="#_2-1-连接服务端" aria-label="Permalink to “2.1 连接服务端”">​</a></h4><ul><li>客户端启动时，主动连接服务端的指定IP和端口。</li><li>连接成功后，进入主循环等待服务端指令。</li></ul><h4 id="_2-2-指令执行" tabindex="-1">2.2 指令执行 <a class="header-anchor" href="#_2-2-指令执行" aria-label="Permalink to “2.2 指令执行”">​</a></h4><ul><li>接收服务端发送的指令，解析并执行。</li><li>执行完成后，将结果封装成协议格式，通过TCP连接返回给服务端。</li></ul><h4 id="_2-3-心跳发送" tabindex="-1">2.3 心跳发送 <a class="header-anchor" href="#_2-3-心跳发送" aria-label="Permalink to “2.3 心跳发送”">​</a></h4><ul><li>定时（如每30秒）向服务端发送心跳报文，报文可以简单包含客户端ID和当前状态。</li><li>心跳报文用于告知服务端客户端仍然存活。</li></ul><h4 id="_2-4-事件上报" tabindex="-1">2.4 事件上报 <a class="header-anchor" href="#_2-4-事件上报" aria-label="Permalink to “2.4 事件上报”">​</a></h4><ul><li>当客户端检测到某些事件发生时，主动将事件信息封装成协议格式，通过TCP连接发送给服务端。</li></ul><h3 id="_3-协议设计" tabindex="-1">3. 协议设计 <a class="header-anchor" href="#_3-协议设计" aria-label="Permalink to “3. 协议设计”">​</a></h3><p>为了确保服务端和客户端之间的通信有序，需要设计一个简单的通信协议。例如：</p><ul><li><p><strong>指令格式</strong>：</p><ul><li>指令类型（1字节）</li><li>指令长度（2字节）</li><li>指令数据（可变长度）</li></ul></li><li><p><strong>返回结果格式</strong>：</p><ul><li>返回码（1字节）</li><li>返回长度（2字节）</li><li>返回数据（可变长度）</li></ul></li><li><p><strong>心跳报文格式</strong>：</p><ul><li>心跳标识（1字节）</li><li>客户端ID（4字节）</li></ul></li><li><p><strong>事件报文格式</strong>：</p><ul><li>事件类型（1字节）</li><li>事件长度（2字节）</li><li>事件数据（可变长度）</li></ul></li></ul><h3 id="_4-实现示例" tabindex="-1">4. 实现示例 <a class="header-anchor" href="#_4-实现示例" aria-label="Permalink to “4. 实现示例”">​</a></h3><h4 id="服务端示例-python伪代码" tabindex="-1">服务端示例（Python伪代码） <a class="header-anchor" href="#服务端示例-python伪代码" aria-label="Permalink to “服务端示例（Python伪代码）”">​</a></h4><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> socket</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> threading</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handle_client</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(conn, addr):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> conn.recv(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            break</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 解析和处理数据</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 发送响应</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        conn.send(response)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    conn.close()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> socket.socket(socket.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AF_INET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, socket.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SOCK_STREAM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.bind((</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;0.0.0.0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12345</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.listen(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    conn, addr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> server.accept()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    threading.Thread(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">handle_client, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(conn, addr)).start()</span></span></code></pre></div><h4 id="客户端示例-python伪代码" tabindex="-1">客户端示例（Python伪代码） <a class="header-anchor" href="#客户端示例-python伪代码" aria-label="Permalink to “客户端示例（Python伪代码）”">​</a></h4><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> socket</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> time</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> socket.socket(socket.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AF_INET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, socket.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SOCK_STREAM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">client.connect((</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;server_ip&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12345</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> send_heartbeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        time.sleep(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        client.send(heartbeat_message)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> monitor_events</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        event </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> detect_event()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            client.send(event_message)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 启动心跳和事件监控线程</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">threading.Thread(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">send_heartbeat).start()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">threading.Thread(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">monitor_events).start()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.recv(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 解析和处理指令</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        client.send(response)</span></span></code></pre></div><h3 id="_5-注意事项" tabindex="-1">5. 注意事项 <a class="header-anchor" href="#_5-注意事项" aria-label="Permalink to “5. 注意事项”">​</a></h3><ul><li><strong>并发处理</strong>：服务端需要处理多个客户端连接，确保并发处理能力。</li><li><strong>异常处理</strong>：网络连接可能不稳定，需要处理各种异常情况（如连接断开、超时等）。</li><li><strong>安全性</strong>：考虑使用SSL/TLS加密通信，防止数据被窃听或篡改。</li><li><strong>性能优化</strong>：根据实际需求，选择合适的I/O模型（如异步I/O）和协议格式，优化性能。</li></ul><p>通过以上设计和实现，可以满足服务端与多个客户端之间的TCP通信需求。</p><h2 id="如果我使用io多路复用来实现-给我一个java版本代码示例" tabindex="-1">如果我使用IO多路复用来实现，给我一个java版本代码示例 <a class="header-anchor" href="#如果我使用io多路复用来实现-给我一个java版本代码示例" aria-label="Permalink to “如果我使用IO多路复用来实现，给我一个java版本代码示例”">​</a></h2><p>使用I/O多路复用（如Java NIO）可以更高效地处理多个客户端连接。以下是一个基于Java NIO的示例代码，展示了如何实现服务端与多个客户端的TCP通信，包括指令发送、心跳处理和事件上报。</p><h3 id="服务端代码示例" tabindex="-1">服务端代码示例 <a class="header-anchor" href="#服务端代码示例" aria-label="Permalink to “服务端代码示例”">​</a></h3><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.io.IOException;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.net.InetSocketAddress;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.nio.ByteBuffer;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.nio.channels.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.Iterator;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.Set;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NIOServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PORT </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 12345</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BUFFER_SIZE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 创建Selector</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Selector selector </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Selector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 创建ServerSocketChannel并绑定端口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ServerSocketChannel serverSocketChannel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ServerSocketChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        serverSocketChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> InetSocketAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PORT));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        serverSocketChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        serverSocketChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(selector, SelectionKey.OP_ACCEPT);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Server started on port &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PORT);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 阻塞等待就绪的Channel</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            selector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Set&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SelectionKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; selectedKeys </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> selector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">selectedKeys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Iterator&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SelectionKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; iterator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> selectedKeys.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">iterator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasNext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                SelectionKey key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isAcceptable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    // 接受客户端连接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    ServerSocketChannel serverChannel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (ServerSocketChannel) key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">channel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    SocketChannel clientChannel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> serverChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(selector, SelectionKey.OP_READ);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Client connected: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRemoteAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isReadable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    // 读取客户端数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    SocketChannel clientChannel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (SocketChannel) key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">channel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    ByteBuffer buffer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ByteBuffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">allocate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BUFFER_SIZE);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bytesRead </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buffer);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (bytesRead </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                        // 客户端断开连接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Client disconnected: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRemoteAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (bytesRead </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                        // 处理接收到的数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                        byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remaining</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        String message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Received from client: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                        // 根据消息类型处理</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (message.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;HEARTBEAT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Heartbeat received from client: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRemoteAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (message.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;EVENT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Event received from client: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRemoteAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                            // 发送指令响应</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            String response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ACK: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            ByteBuffer responseBuffer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ByteBuffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(responseBuffer);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h3 id="客户端代码示例" tabindex="-1">客户端代码示例 <a class="header-anchor" href="#客户端代码示例" aria-label="Permalink to “客户端代码示例”">​</a></h3><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.io.IOException;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.net.InetSocketAddress;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.nio.ByteBuffer;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.nio.channels.SocketChannel;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.Scanner;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.concurrent.Executors;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.concurrent.ScheduledExecutorService;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.concurrent.TimeUnit;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NIOClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String SERVER_IP </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;localhost&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SERVER_PORT </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 12345</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BUFFER_SIZE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 连接服务器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        SocketChannel socketChannel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SocketChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        socketChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> InetSocketAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SERVER_IP, SERVER_PORT));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        socketChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Connected to server at &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SERVER_IP </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SERVER_PORT);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 定时发送心跳</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ScheduledExecutorService scheduler </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Executors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newScheduledThreadPool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        scheduler.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scheduleAtFixedRate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                String heartbeat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;HEARTBEAT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                ByteBuffer buffer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ByteBuffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(heartbeat.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                socketChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buffer);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Sent heartbeat to server&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (IOException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, TimeUnit.SECONDS);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 监听服务器指令</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ByteBuffer buffer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ByteBuffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">allocate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BUFFER_SIZE);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bytesRead </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> socketChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buffer);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (bytesRead </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                        byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remaining</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        String message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Received from server: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (IOException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 模拟事件上报</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Scanner scanner </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Scanner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(System.in);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Enter an event to send (or &#39;exit&#39; to quit):&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            String input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> scanner.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;exit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equalsIgnoreCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            String event </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;EVENT: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> input;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ByteBuffer buffer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ByteBuffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            socketChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buffer);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Sent event to server: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 关闭连接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        socketChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        scheduler.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shutdown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Disconnected from server&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h3 id="代码说明-2" tabindex="-1">代码说明 <a class="header-anchor" href="#代码说明-2" aria-label="Permalink to “代码说明”">​</a></h3><ol><li><p><strong>服务端</strong>：</p><ul><li>使用<code>Selector</code>监听多个客户端连接。</li><li>处理客户端连接、读取数据、发送响应。</li><li>根据接收到的消息类型（心跳、事件、指令）进行相应处理。</li></ul></li><li><p><strong>客户端</strong>：</p><ul><li>连接服务端并定时发送心跳报文。</li><li>监听服务端指令并打印响应。</li><li>支持用户输入模拟事件上报。</li></ul></li><li><p><strong>协议</strong>：</p><ul><li>使用简单的字符串协议，例如： <ul><li>心跳报文：<code>HEARTBEAT</code></li><li>事件报文：<code>EVENT: &lt;event_data&gt;</code></li><li>指令响应：<code>ACK: &lt;message&gt;</code></li></ul></li></ul></li><li><p><strong>并发</strong>：</p><ul><li>使用<code>ScheduledExecutorService</code>定时发送心跳。</li><li>使用单独的线程监听服务端指令。</li></ul></li></ol><hr><h3 id="运行方式" tabindex="-1">运行方式 <a class="header-anchor" href="#运行方式" aria-label="Permalink to “运行方式”">​</a></h3><ol><li>启动服务端：<code>java NIOServer</code></li><li>启动一个或多个客户端：<code>java NIOClient</code></li><li>在客户端输入事件内容，观察服务端和客户端的日志输出。</li></ol><hr><h3 id="扩展建议" tabindex="-1">扩展建议 <a class="header-anchor" href="#扩展建议" aria-label="Permalink to “扩展建议”">​</a></h3><ul><li><strong>协议优化</strong>：可以使用更复杂的协议（如JSON或自定义二进制协议）来封装数据。</li><li><strong>异常处理</strong>：增加对网络异常、超时等的处理逻辑。</li><li><strong>性能优化</strong>：根据实际需求调整缓冲区大小、线程池配置等。</li></ul><h2 id="我有一个服务端-需要连接多个服务端进行tcp连接-给我一个java的代码示例" tabindex="-1">我有一个服务端，需要连接多个服务端进行tcp连接，给我一个java的代码示例 <a class="header-anchor" href="#我有一个服务端-需要连接多个服务端进行tcp连接-给我一个java的代码示例" aria-label="Permalink to “我有一个服务端，需要连接多个服务端进行tcp连接，给我一个java的代码示例”">​</a></h2><p>以下是基于Java NIO的实现示例，展示了一个服务端如何连接多个服务端并进行TCP通信。该示例使用了<code>Selector</code>实现I/O多路复用，能够高效处理多个连接。</p><h3 id="代码示例" tabindex="-1">代码示例 <a class="header-anchor" href="#代码示例" aria-label="Permalink to “代码示例”">​</a></h3><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.io.IOException;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.net.InetSocketAddress;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.nio.ByteBuffer;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.nio.channels.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.Iterator;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.Set;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MultiServerConnector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BUFFER_SIZE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 创建Selector</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Selector selector </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Selector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 连接多个服务端</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        connectToServers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(selector, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]{</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;127.0.0.1:8081&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;127.0.0.1:8082&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Connected to multiple servers.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 阻塞等待就绪的Channel</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            selector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Set&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SelectionKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; selectedKeys </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> selector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">selectedKeys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Iterator&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SelectionKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; iterator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> selectedKeys.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">iterator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasNext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                SelectionKey key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isConnectable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    // 处理连接完成事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    SocketChannel clientChannel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (SocketChannel) key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">channel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isConnectionPending</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">finishConnect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(selector, SelectionKey.OP_READ);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Connected to server: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRemoteAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isReadable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    // 处理读取事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    SocketChannel clientChannel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (SocketChannel) key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">channel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    ByteBuffer buffer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ByteBuffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">allocate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BUFFER_SIZE);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bytesRead </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buffer);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (bytesRead </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                        // 服务端断开连接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Server disconnected: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRemoteAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (bytesRead </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                        // 处理接收到的数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                        byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remaining</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        String message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Received from server: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 连接多个服务端</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> connectToServers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Selector </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">selector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">serverAddresses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (String address </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> serverAddresses) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] parts </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> address.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">split</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            String host </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> parts[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> port </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Integer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(parts[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 创建SocketChannel并连接服务端</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            SocketChannel clientChannel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SocketChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> InetSocketAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(host, port));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(selector, SelectionKey.OP_CONNECT);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h3 id="代码说明-3" tabindex="-1">代码说明 <a class="header-anchor" href="#代码说明-3" aria-label="Permalink to “代码说明”">​</a></h3><ol><li><p><strong><code>Selector</code></strong>：</p><ul><li>使用<code>Selector</code>监听多个服务端的连接和读取事件，实现I/O多路复用<a href="./@ref.html">1</a><a href="./@ref.html">2</a>。</li></ul></li><li><p><strong>连接多个服务端</strong>：</p><ul><li>在<code>connectToServers</code>方法中，遍历服务端地址列表，创建<code>SocketChannel</code>并连接服务端。</li><li>将<code>SocketChannel</code>注册到<code>Selector</code>，监听<code>OP_CONNECT</code>事件。</li></ul></li><li><p><strong>处理连接完成事件</strong>：</p><ul><li>当<code>SocketChannel</code>连接成功时，触发<code>OP_CONNECT</code>事件，调用<code>finishConnect</code>完成连接，并注册<code>OP_READ</code>事件以监听数据读取。</li></ul></li><li><p><strong>处理读取事件</strong>：</p><ul><li>当服务端发送数据时，触发<code>OP_READ</code>事件，读取数据并处理。</li></ul></li><li><p><strong>异常处理</strong>：</p><ul><li>如果服务端断开连接，关闭<code>SocketChannel</code>并清理资源。</li></ul></li></ol><hr><h3 id="运行方式-1" tabindex="-1">运行方式 <a class="header-anchor" href="#运行方式-1" aria-label="Permalink to “运行方式”">​</a></h3><ol><li>启动多个服务端，分别监听<code>8081</code>和<code>8082</code>端口。</li><li>运行<code>MultiServerConnector</code>，它将连接这些服务端并处理数据。</li></ol><hr><h3 id="参考-1" tabindex="-1">参考 <a class="header-anchor" href="#参考-1" aria-label="Permalink to “参考”">​</a></h3><ul><li>使用<code>Selector</code>实现I/O多路复用<a href="./@ref.html">1</a><a href="./@ref.html">2</a>。</li><li>连接多个服务端的最佳实践<a href="./@ref.html">3</a>。</li></ul><hr><h3 id="扩展建议-1" tabindex="-1">扩展建议 <a class="header-anchor" href="#扩展建议-1" aria-label="Permalink to “扩展建议”">​</a></h3><ul><li><strong>心跳机制</strong>：可以定时向服务端发送心跳报文，检测连接状态<a href="./@ref.html">1</a>。</li><li><strong>协议设计</strong>：使用更复杂的协议（如JSON或自定义二进制协议）封装数据<a href="./@ref.html">2</a>。</li><li><strong>异常重连</strong>：在连接断开时实现自动重连机制<a href="./@ref.html">3</a>。</li></ul><h2 id="我在tcp连接的过程中-可能会新增连接-修改连接信息-ip或端口号-或者删除连接-这个该怎么实现" tabindex="-1">我在tcp连接的过程中，可能会新增连接，修改连接信息（ip或端口号）或者删除连接，这个该怎么实现 <a class="header-anchor" href="#我在tcp连接的过程中-可能会新增连接-修改连接信息-ip或端口号-或者删除连接-这个该怎么实现" aria-label="Permalink to “我在tcp连接的过程中，可能会新增连接，修改连接信息（ip或端口号）或者删除连接，这个该怎么实现”">​</a></h2><p>为了支持在TCP连接过程中动态新增连接、修改连接信息（如IP或端口号）或删除连接，可以使用以下设计思路：</p><hr><h3 id="设计思路" tabindex="-1">设计思路 <a class="header-anchor" href="#设计思路" aria-label="Permalink to “设计思路”">​</a></h3><ol><li><p><strong>连接管理</strong>：</p><ul><li>使用一个<code>Map</code>来管理所有连接，键为连接的唯一标识（如<code>ip:port</code>），值为<code>SocketChannel</code>。</li><li>提供方法来新增、修改和删除连接。</li></ul></li><li><p><strong>动态更新连接</strong>：</p><ul><li>新增连接：创建新的<code>SocketChannel</code>并注册到<code>Selector</code>。</li><li>修改连接信息：先关闭旧的<code>SocketChannel</code>，然后使用新的IP和端口创建新的连接。</li><li>删除连接：关闭<code>SocketChannel</code>并从<code>Map</code>中移除。</li></ul></li><li><p><strong>线程安全</strong>：</p><ul><li>使用<code>ConcurrentHashMap</code>管理连接，确保多线程操作的安全性。</li><li>在修改连接信息时，使用同步机制（如<code>synchronized</code>）避免竞争条件。</li></ul></li><li><p><strong>事件处理</strong>：</p><ul><li>使用<code>Selector</code>监听所有连接的读写事件。</li><li>在事件循环中处理连接的新增、修改和删除操作。</li></ul></li></ol><hr><h3 id="代码实现" tabindex="-1">代码实现 <a class="header-anchor" href="#代码实现" aria-label="Permalink to “代码实现”">​</a></h3><p>以下是完整的Java实现示例：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.io.IOException;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.net.InetSocketAddress;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.nio.ByteBuffer;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.nio.channels.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.Iterator;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.Map;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.Set;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.concurrent.ConcurrentHashMap;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DynamicTCPConnector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BUFFER_SIZE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Selector selector;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Map&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SocketChannel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; connections;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DynamicTCPConnector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.selector </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Selector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.connections </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConcurrentHashMap&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Dynamic TCP Connector started.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            selector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Set&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SelectionKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; selectedKeys </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> selector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">selectedKeys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Iterator&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SelectionKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; iterator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> selectedKeys.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">iterator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasNext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                SelectionKey key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isConnectable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    // 处理连接完成事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    SocketChannel clientChannel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (SocketChannel) key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">channel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isConnectionPending</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">finishConnect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(selector, SelectionKey.OP_READ);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Connected to server: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRemoteAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isReadable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    // 处理读取事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    SocketChannel clientChannel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (SocketChannel) key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">channel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    ByteBuffer buffer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ByteBuffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">allocate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BUFFER_SIZE);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bytesRead </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buffer);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (bytesRead </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                        // 服务端断开连接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Server disconnected: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRemoteAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                        removeConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(clientChannel);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (bytesRead </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                        // 处理接收到的数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                        byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remaining</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        String message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Received from server: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 新增连接</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> addConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ip </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> port;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (connections.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">containsKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Connection already exists: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        SocketChannel clientChannel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SocketChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> InetSocketAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ip, port));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(selector, SelectionKey.OP_CONNECT);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        connections.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key, clientChannel);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Added new connection: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 修改连接信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> updateConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">oldIp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> oldPort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">newIp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> newPort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String oldKey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> oldIp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> oldPort;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String newKey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newIp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newPort;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">connections.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">containsKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(oldKey)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Connection not found: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> oldKey);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 关闭旧连接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        SocketChannel oldChannel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> connections.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(oldKey);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        oldChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        connections.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(oldKey);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 创建新连接</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        addConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(newIp, newPort);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Updated connection from &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> oldKey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; to &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newKey);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 删除连接</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> removeConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SocketChannel </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">channel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Map.Entry&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SocketChannel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; entry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> connections.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">entrySet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (entry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(channel)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            connections.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Removed connection: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        DynamicTCPConnector connector </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DynamicTCPConnector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 启动事件循环</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                connector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (IOException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 示例：动态管理连接</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 新增连接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            connector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;127.0.0.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8081</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            connector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;127.0.0.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8082</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 修改连接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            connector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;127.0.0.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8081</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;127.0.0.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8083</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 删除连接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (SocketChannel channel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> connector.connections.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                connector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(channel);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (InterruptedException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h3 id="代码说明-4" tabindex="-1">代码说明 <a class="header-anchor" href="#代码说明-4" aria-label="Permalink to “代码说明”">​</a></h3><ol><li><p><strong><code>DynamicTCPConnector</code>类</strong>：</p><ul><li>使用<code>Selector</code>监听所有连接的读写事件。</li><li>使用<code>ConcurrentHashMap</code>管理所有连接。</li></ul></li><li><p><strong>动态管理连接</strong>：</p><ul><li><code>addConnection</code>：新增连接。</li><li><code>updateConnection</code>：修改连接信息（先关闭旧连接，再创建新连接）。</li><li><code>removeConnection</code>：删除连接。</li></ul></li><li><p><strong>事件处理</strong>：</p><ul><li>处理连接完成事件（<code>OP_CONNECT</code>）。</li><li>处理读取事件（<code>OP_READ</code>）。</li></ul></li><li><p><strong>线程安全</strong>：</p><ul><li>使用<code>ConcurrentHashMap</code>确保多线程操作的安全性。</li></ul></li></ol><hr><h3 id="运行方式-2" tabindex="-1">运行方式 <a class="header-anchor" href="#运行方式-2" aria-label="Permalink to “运行方式”">​</a></h3><ol><li>启动多个服务端，分别监听<code>8081</code>、<code>8082</code>和<code>8083</code>端口。</li><li>运行<code>DynamicTCPConnector</code>，它将动态管理连接并与服务端通信。</li></ol><hr><h3 id="扩展建议-2" tabindex="-1">扩展建议 <a class="header-anchor" href="#扩展建议-2" aria-label="Permalink to “扩展建议”">​</a></h3><ul><li><strong>心跳机制</strong>：可以定时向服务端发送心跳报文，检测连接状态。</li><li><strong>异常重连</strong>：在连接断开时实现自动重连机制。</li><li><strong>日志记录</strong>：记录连接的新增、修改和删除操作，便于排查问题。</li></ul><h2 id="使用-socketchannel-的-close-方法-是否会导致tcp连接还在传输数据的时候意外断开的情况" tabindex="-1">使用 socketChannel 的 close 方法，是否会导致tcp连接还在传输数据的时候意外断开的情况 <a class="header-anchor" href="#使用-socketchannel-的-close-方法-是否会导致tcp连接还在传输数据的时候意外断开的情况" aria-label="Permalink to “使用 socketChannel 的 close 方法，是否会导致tcp连接还在传输数据的时候意外断开的情况”">​</a></h2><p>使用 <code>SocketChannel</code> 的 <code>close</code> 方法时，<strong>不会</strong>导致 TCP 连接在传输数据时意外断开。<code>close</code> 方法会按照 TCP 协议的正常流程关闭连接，确保数据传输的完整性。以下是详细说明：</p><hr><h3 id="_1-socketchannel-close-的行为" tabindex="-1">1. <strong><code>SocketChannel.close</code> 的行为</strong> <a class="header-anchor" href="#_1-socketchannel-close-的行为" aria-label="Permalink to “1. SocketChannel.close 的行为”">​</a></h3><p>当调用 <code>SocketChannel.close</code> 方法时，底层 TCP 协议会执行以下操作：</p><ul><li>如果连接处于数据传输状态，<code>close</code> 会触发 TCP 的<strong>四次挥手</strong>过程，确保双方都能正常关闭连接。</li><li><code>close</code> 方法会发送 <code>FIN</code> 报文给对方，表示本方不再发送数据，但仍可以接收对方的数据，直到对方也发送 <code>FIN</code> 报文<a href="./@ref.html">1</a><a href="./@ref.html">5</a>。</li></ul><hr><h3 id="_2-数据传输中的关闭" tabindex="-1">2. <strong>数据传输中的关闭</strong> <a class="header-anchor" href="#_2-数据传输中的关闭" aria-label="Permalink to “2. 数据传输中的关闭”">​</a></h3><p>如果在数据传输过程中调用 <code>close</code> 方法，TCP 协议会确保以下行为：</p><ul><li>已经发送的数据会继续传输，直到对方确认接收。</li><li>对方可以继续发送数据，直到本方也发送 <code>FIN</code> 报文。</li><li>只有在双方都完成数据传输并确认后，连接才会完全关闭<a href="./@ref.html">2</a><a href="./@ref.html">5</a>。</li></ul><p>因此，<code>close</code> 方法不会导致数据意外丢失或连接意外断开。</p><hr><h3 id="_3-异常情况" tabindex="-1">3. <strong>异常情况</strong> <a class="header-anchor" href="#_3-异常情况" aria-label="Permalink to “3. 异常情况”">​</a></h3><p>在以下异常情况下，<code>close</code> 方法可能会导致连接异常断开：</p><ul><li><strong>网络故障</strong>：如果网络在关闭过程中发生故障，可能导致 <code>FIN</code> 报文无法送达对方，从而触发超时重传机制<a href="./@ref.html">2</a>。</li><li><strong>进程崩溃</strong>：如果调用 <code>close</code> 的进程突然崩溃，操作系统会强制关闭连接，可能导致数据未完全传输<a href="./@ref.html">2</a>。</li></ul><hr><h3 id="_4-最佳实践" tabindex="-1">4. <strong>最佳实践</strong> <a class="header-anchor" href="#_4-最佳实践" aria-label="Permalink to “4. 最佳实践”">​</a></h3><p>为了避免意外情况，建议在调用 <code>close</code> 方法前：</p><ul><li>确保所有数据都已发送并确认（例如，调用 <code>SocketChannel.finishConnect</code> 或检查 <code>SocketChannel.write</code> 的返回值）<a href="./@ref.html">1</a><a href="./@ref.html">4</a>。</li><li>使用 <code>SocketChannel.shutdownOutput</code> 先关闭输出流，确保对方知道本方不再发送数据，然后再调用 <code>close</code><a href="./@ref.html">5</a>。</li></ul><hr><h3 id="总结-15" tabindex="-1">总结 <a class="header-anchor" href="#总结-15" aria-label="Permalink to “总结”">​</a></h3><p><code>SocketChannel.close</code> 方法会按照 TCP 协议的正常流程关闭连接，<strong>不会</strong>导致数据传输时意外断开。但在网络故障或进程崩溃等异常情况下，可能会导致连接异常关闭。因此，建议在关闭连接前确保数据传输完成，并遵循 TCP 关闭的最佳实践<a href="./@ref.html">1</a><a href="./@ref.html">2</a><a href="./@ref.html">5</a>。</p><h2 id="我还需要实现对特定连接发送命令报文" tabindex="-1">我还需要实现对特定连接发送命令报文 <a class="header-anchor" href="#我还需要实现对特定连接发送命令报文" aria-label="Permalink to “我还需要实现对特定连接发送命令报文”">​</a></h2><p>为了实现向特定连接发送命令报文，可以在现有的 <code>DynamicTCPConnector</code> 基础上增加以下功能：</p><ol><li><strong>查找特定连接</strong>：根据连接的标识（如 <code>ip:port</code>）查找对应的 <code>SocketChannel</code>。</li><li><strong>发送命令报文</strong>：通过 <code>SocketChannel.write</code> 方法向特定连接发送数据。</li><li><strong>线程安全</strong>：确保在发送数据时，连接不会被意外关闭或修改。</li></ol><p>以下是完整的实现示例：</p><hr><h3 id="代码实现-1" tabindex="-1">代码实现 <a class="header-anchor" href="#代码实现-1" aria-label="Permalink to “代码实现”">​</a></h3><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.io.IOException;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.net.InetSocketAddress;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.nio.ByteBuffer;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.nio.channels.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.Iterator;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.Map;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.Set;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.concurrent.ConcurrentHashMap;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DynamicTCPConnector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BUFFER_SIZE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Selector selector;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Map&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SocketChannel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; connections;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DynamicTCPConnector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.selector </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Selector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.connections </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConcurrentHashMap&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Dynamic TCP Connector started.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            selector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Set&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SelectionKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; selectedKeys </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> selector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">selectedKeys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Iterator&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SelectionKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; iterator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> selectedKeys.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">iterator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasNext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                SelectionKey key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isConnectable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    // 处理连接完成事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    SocketChannel clientChannel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (SocketChannel) key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">channel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isConnectionPending</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">finishConnect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(selector, SelectionKey.OP_READ);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Connected to server: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRemoteAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isReadable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    // 处理读取事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    SocketChannel clientChannel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (SocketChannel) key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">channel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    ByteBuffer buffer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ByteBuffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">allocate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BUFFER_SIZE);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bytesRead </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buffer);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (bytesRead </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                        // 服务端断开连接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Server disconnected: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRemoteAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                        removeConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(clientChannel);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (bytesRead </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                        // 处理接收到的数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                        byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remaining</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        String message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Received from server: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 新增连接</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> addConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ip </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> port;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (connections.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">containsKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Connection already exists: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        SocketChannel clientChannel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SocketChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> InetSocketAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ip, port));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(selector, SelectionKey.OP_CONNECT);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        connections.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key, clientChannel);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Added new connection: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 修改连接信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> updateConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">oldIp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> oldPort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">newIp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> newPort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String oldKey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> oldIp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> oldPort;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String newKey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newIp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newPort;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">connections.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">containsKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(oldKey)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Connection not found: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> oldKey);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 关闭旧连接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        SocketChannel oldChannel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> connections.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(oldKey);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        oldChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        connections.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(oldKey);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 创建新连接</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        addConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(newIp, newPort);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Updated connection from &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> oldKey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; to &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newKey);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 删除连接</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> removeConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SocketChannel </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">channel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Map.Entry&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SocketChannel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; entry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> connections.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">entrySet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (entry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(channel)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            connections.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Removed connection: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 向特定连接发送命令报文</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sendCommand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ip </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> port;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        SocketChannel clientChannel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> connections.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (clientChannel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Connection not found: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isConnected</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Connection is not active: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 发送命令报文</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ByteBuffer buffer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ByteBuffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(command.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buffer);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Sent command to &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> command);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        DynamicTCPConnector connector </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DynamicTCPConnector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 启动事件循环</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                connector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (IOException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 示例：动态管理连接</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 新增连接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            connector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;127.0.0.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8081</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            connector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;127.0.0.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8082</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 向特定连接发送命令</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            connector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sendCommand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;127.0.0.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8081</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;COMMAND: START&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            connector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sendCommand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;127.0.0.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8082</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;COMMAND: STOP&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 修改连接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            connector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;127.0.0.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8081</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;127.0.0.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8083</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 删除连接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (SocketChannel channel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> connector.connections.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                connector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(channel);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (InterruptedException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h3 id="代码说明-5" tabindex="-1">代码说明 <a class="header-anchor" href="#代码说明-5" aria-label="Permalink to “代码说明”">​</a></h3><ol><li><p><strong><code>sendCommand</code> 方法</strong>：</p><ul><li>根据 <code>ip</code> 和 <code>port</code> 查找对应的 <code>SocketChannel</code>。</li><li>检查连接是否处于活动状态。</li><li>使用 <code>SocketChannel.write</code> 发送命令报文。</li></ul></li><li><p><strong>线程安全</strong>：</p><ul><li>使用 <code>ConcurrentHashMap</code> 管理连接，确保多线程操作的安全性。</li><li>在发送数据时，连接不会被意外关闭或修改。</li></ul></li><li><p><strong>动态管理连接</strong>：</p><ul><li>支持新增、修改和删除连接。</li><li>使用 <code>Selector</code> 监听所有连接的读写事件。</li></ul></li></ol><hr><h3 id="运行方式-3" tabindex="-1">运行方式 <a class="header-anchor" href="#运行方式-3" aria-label="Permalink to “运行方式”">​</a></h3><ol><li>启动多个服务端，分别监听 <code>8081</code>、<code>8082</code> 和 <code>8083</code> 端口。</li><li>运行 <code>DynamicTCPConnector</code>，它将动态管理连接并向特定连接发送命令报文。</li></ol><hr><h3 id="扩展建议-3" tabindex="-1">扩展建议 <a class="header-anchor" href="#扩展建议-3" aria-label="Permalink to “扩展建议”">​</a></h3><ul><li><strong>超时重试</strong>：在发送命令时，如果连接不可用，可以加入重试机制。</li><li><strong>日志记录</strong>：记录命令发送的结果，便于排查问题。</li><li><strong>协议设计</strong>：使用更复杂的协议（如 JSON 或自定义二进制协议）封装命令报文。</li></ul><h2 id="发送完命令之后我需要等待收到一个回复的报文-命令执行才算完成" tabindex="-1">发送完命令之后我需要等待收到一个回复的报文，命令执行才算完成 <a class="header-anchor" href="#发送完命令之后我需要等待收到一个回复的报文-命令执行才算完成" aria-label="Permalink to “发送完命令之后我需要等待收到一个回复的报文，命令执行才算完成”">​</a></h2><p>为了在发送命令后等待接收回复报文，可以扩展 <code>sendCommand</code> 方法，使其支持同步等待回复。以下是实现思路和代码示例：</p><hr><h3 id="设计思路-1" tabindex="-1">设计思路 <a class="header-anchor" href="#设计思路-1" aria-label="Permalink to “设计思路”">​</a></h3><ol><li><p><strong>发送命令</strong>：</p><ul><li>向特定连接发送命令报文。</li><li>使用 <code>SocketChannel.write</code> 发送数据。</li></ul></li><li><p><strong>等待回复</strong>：</p><ul><li>在发送命令后，阻塞等待接收回复报文。</li><li>使用 <code>Selector</code> 监听 <code>OP_READ</code> 事件，等待对方发送数据。</li></ul></li><li><p><strong>超时机制</strong>：</p><ul><li>如果在一定时间内未收到回复，抛出超时异常。</li></ul></li><li><p><strong>线程安全</strong>：</p><ul><li>确保在等待回复时，连接不会被意外关闭或修改。</li></ul></li></ol><hr><h3 id="代码实现-2" tabindex="-1">代码实现 <a class="header-anchor" href="#代码实现-2" aria-label="Permalink to “代码实现”">​</a></h3><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.io.IOException;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.net.InetSocketAddress;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.nio.ByteBuffer;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.nio.channels.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.Iterator;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.Map;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.Set;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.concurrent.ConcurrentHashMap;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DynamicTCPConnector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BUFFER_SIZE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> REPLY_TIMEOUT </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 等待回复的超时时间（毫秒）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Selector selector;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Map&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SocketChannel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; connections;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DynamicTCPConnector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.selector </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Selector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.connections </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConcurrentHashMap&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Dynamic TCP Connector started.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            selector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Set&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SelectionKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; selectedKeys </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> selector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">selectedKeys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Iterator&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SelectionKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; iterator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> selectedKeys.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">iterator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasNext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                SelectionKey key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isConnectable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    // 处理连接完成事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    SocketChannel clientChannel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (SocketChannel) key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">channel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isConnectionPending</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">finishConnect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(selector, SelectionKey.OP_READ);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Connected to server: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRemoteAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isReadable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    // 处理读取事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    SocketChannel clientChannel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (SocketChannel) key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">channel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    ByteBuffer buffer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ByteBuffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">allocate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BUFFER_SIZE);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bytesRead </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buffer);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (bytesRead </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                        // 服务端断开连接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Server disconnected: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRemoteAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                        removeConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(clientChannel);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (bytesRead </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                        // 处理接收到的数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                        byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remaining</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        String message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Received from server: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                        // 唤醒等待回复的线程</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                        synchronized</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (clientChannel) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">notifyAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 新增连接</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> addConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ip </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> port;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (connections.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">containsKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Connection already exists: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        SocketChannel clientChannel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SocketChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> InetSocketAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ip, port));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(selector, SelectionKey.OP_CONNECT);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        connections.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key, clientChannel);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Added new connection: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 修改连接信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> updateConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">oldIp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> oldPort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">newIp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> newPort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String oldKey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> oldIp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> oldPort;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String newKey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newIp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newPort;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">connections.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">containsKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(oldKey)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Connection not found: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> oldKey);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 关闭旧连接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        SocketChannel oldChannel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> connections.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(oldKey);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        oldChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        connections.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(oldKey);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 创建新连接</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        addConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(newIp, newPort);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Updated connection from &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> oldKey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; to &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newKey);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 删除连接</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> removeConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SocketChannel </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">channel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Map.Entry&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SocketChannel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; entry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> connections.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">entrySet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (entry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(channel)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            connections.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Removed connection: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 向特定连接发送命令报文并等待回复</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sendCommand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IOException, InterruptedException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ip </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> port;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        SocketChannel clientChannel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> connections.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (clientChannel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IOException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Connection not found: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isConnected</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IOException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Connection is not active: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 发送命令报文</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ByteBuffer buffer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ByteBuffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(command.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buffer);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Sent command to &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> command);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 等待回复</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        synchronized</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (clientChannel) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(REPLY_TIMEOUT);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 读取回复</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bytesRead </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buffer);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (bytesRead </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IOException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Connection closed by server: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (bytesRead </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remaining</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IOException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;No reply received from server: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        DynamicTCPConnector connector </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DynamicTCPConnector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 启动事件循环</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                connector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (IOException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 示例：动态管理连接</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 新增连接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            connector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;127.0.0.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8081</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            connector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;127.0.0.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8082</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 向特定连接发送命令并等待回复</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            String reply </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> connector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sendCommand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;127.0.0.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8081</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;COMMAND: START&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Received reply: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reply);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 修改连接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            connector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;127.0.0.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8081</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;127.0.0.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8083</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 删除连接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (SocketChannel channel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> connector.connections.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                connector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(channel);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (InterruptedException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h3 id="代码说明-6" tabindex="-1">代码说明 <a class="header-anchor" href="#代码说明-6" aria-label="Permalink to “代码说明”">​</a></h3><ol><li><p><strong><code>sendCommand</code> 方法</strong>：</p><ul><li>发送命令报文后，使用 <code>wait</code> 方法阻塞等待回复。</li><li>在收到回复后，使用 <code>notifyAll</code> 唤醒等待的线程。</li><li>如果超时未收到回复，抛出异常。</li></ul></li><li><p><strong>线程安全</strong>：</p><ul><li>使用 <code>synchronized</code> 确保在等待回复时，连接不会被意外关闭或修改。</li></ul></li><li><p><strong>超时机制</strong>：</p><ul><li>如果超过 <code>REPLY_TIMEOUT</code> 时间未收到回复，抛出超时异常。</li></ul></li></ol><hr><h3 id="运行方式-4" tabindex="-1">运行方式 <a class="header-anchor" href="#运行方式-4" aria-label="Permalink to “运行方式”">​</a></h3><ol><li>启动多个服务端，分别监听 <code>8081</code>、<code>8082</code> 和 <code>8083</code> 端口。</li><li>运行 <code>DynamicTCPConnector</code>，它将动态管理连接、发送命令并等待回复。</li></ol><hr><h3 id="扩展建议-4" tabindex="-1">扩展建议 <a class="header-anchor" href="#扩展建议-4" aria-label="Permalink to “扩展建议”">​</a></h3><ul><li><strong>更复杂的协议</strong>：可以使用 JSON 或自定义二进制协议封装命令和回复。</li><li><strong>重试机制</strong>：在超时或连接失败时，加入重试逻辑。</li><li><strong>日志记录</strong>：记录命令发送和回复的详细信息，便于排查问题。</li></ul><h2 id="如果连接的tcp数量很多-使用一个selector接收有点慢-该怎么优化" tabindex="-1">如果连接的tcp数量很多，使用一个selector接收有点慢，该怎么优化 <a class="header-anchor" href="#如果连接的tcp数量很多-使用一个selector接收有点慢-该怎么优化" aria-label="Permalink to “如果连接的tcp数量很多，使用一个selector接收有点慢，该怎么优化”">​</a></h2><p>当使用一个 <code>Selector</code> 处理大量 TCP 连接时，可能会遇到性能瓶颈。以下是优化建议和具体实现思路：</p><hr><h3 id="_1-优化思路" tabindex="-1">1. <strong>优化思路</strong> <a class="header-anchor" href="#_1-优化思路" aria-label="Permalink to “1. 优化思路”">​</a></h3><h4 id="_1-1-使用多个-selector" tabindex="-1">1.1 <strong>使用多个 Selector</strong> <a class="header-anchor" href="#_1-1-使用多个-selector" aria-label="Permalink to “1.1 使用多个 Selector”">​</a></h4><ul><li>将连接分散到多个 <code>Selector</code> 中，每个 <code>Selector</code> 负责处理一部分连接。</li><li>可以通过线程池管理多个 <code>Selector</code>，每个线程运行一个 <code>Selector</code> 的事件循环<a href="./@ref.html">3</a>。</li></ul><h4 id="_1-2-分离连接处理和数据处理" tabindex="-1">1.2 <strong>分离连接处理和数据处理</strong> <a class="header-anchor" href="#_1-2-分离连接处理和数据处理" aria-label="Permalink to “1.2 分离连接处理和数据处理”">​</a></h4><ul><li>使用一个 <code>Selector</code> 专门处理新连接（<code>ACCEPT</code> 事件），另一个或多个 <code>Selector</code> 处理已连接通道的读写事件（<code>READ</code> 和 <code>WRITE</code> 事件）。</li><li>这种方式可以避免单个 <code>Selector</code> 处理过多事件导致的性能下降<a href="./@ref.html">3</a>。</li></ul><h4 id="_1-3-调整缓冲区大小" tabindex="-1">1.3 <strong>调整缓冲区大小</strong> <a class="header-anchor" href="#_1-3-调整缓冲区大小" aria-label="Permalink to “1.3 调整缓冲区大小”">​</a></h4><ul><li>根据网络带宽和时延调整 TCP 缓冲区大小（<code>tcp_wmem</code> 和 <code>tcp_rmem</code>），确保缓冲区大小与带宽时延积（BDP）匹配，以充分利用网络性能<a href="./@ref.html">1</a>。</li></ul><h4 id="_1-4-使用非阻塞-i-o" tabindex="-1">1.4 <strong>使用非阻塞 I/O</strong> <a class="header-anchor" href="#_1-4-使用非阻塞-i-o" aria-label="Permalink to “1.4 使用非阻塞 I/O”">​</a></h4><ul><li>确保所有 <code>Channel</code> 都设置为非阻塞模式（<code>configureBlocking(false)</code>），避免阻塞操作影响 <code>Selector</code> 的效率<a href="./@ref.html">3</a>。</li></ul><h4 id="_1-5-减少事件处理的耗时" tabindex="-1">1.5 <strong>减少事件处理的耗时</strong> <a class="header-anchor" href="#_1-5-减少事件处理的耗时" aria-label="Permalink to “1.5 减少事件处理的耗时”">​</a></h4><ul><li>避免在事件处理逻辑中执行耗时操作（如数据库查询、复杂计算等），可以将这些操作委托给线程池处理。</li></ul><hr><h3 id="_2-实现示例" tabindex="-1">2. <strong>实现示例</strong> <a class="header-anchor" href="#_2-实现示例" aria-label="Permalink to “2. 实现示例”">​</a></h3><p>以下是一个使用多个 <code>Selector</code> 优化大量 TCP 连接的示例：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.io.IOException;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.net.InetSocketAddress;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.nio.ByteBuffer;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.nio.channels.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.Iterator;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.Set;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.concurrent.ExecutorService;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.concurrent.Executors;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MultiSelectorServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PORT </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SELECTOR_THREADS </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 4 个 Selector</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ExecutorService selectorPool </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Executors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newFixedThreadPool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SELECTOR_THREADS);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 创建主 Selector，专门处理 ACCEPT 事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Selector acceptSelector </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Selector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ServerSocketChannel serverChannel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ServerSocketChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        serverChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        serverChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> InetSocketAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PORT));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        serverChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(acceptSelector, SelectionKey.OP_ACCEPT);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 启动多个 Selector 线程处理读写事件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SELECTOR_THREADS; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            selectorPool.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">submit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EventLoop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 主线程运行 ACCEPT 事件循环</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            acceptSelector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Set&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SelectionKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; keys </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> acceptSelector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">selectedKeys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Iterator&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SelectionKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; iterator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> keys.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">iterator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasNext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                SelectionKey key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isAcceptable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    // 接受新连接并分配给一个 EventLoop</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    ServerSocketChannel server </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (ServerSocketChannel) key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">channel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    SocketChannel clientChannel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    // 将新连接分配给一个 EventLoop</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    EventLoop.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assignChannel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(clientChannel);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // EventLoop 类，处理读写事件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EventLoop</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Runnable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Selector selector;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EventLoop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.selector </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Selector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> assignChannel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SocketChannel </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">channel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 将新连接注册到某个 EventLoop 的 Selector</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            EventLoop eventLoop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (EventLoop) selectorPool.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">submit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EventLoop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            channel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(eventLoop.selector, SelectionKey.OP_READ);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    selector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    Set&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SelectionKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; keys </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> selector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">selectedKeys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    Iterator&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SelectionKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; iterator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> keys.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">iterator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasNext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        SelectionKey key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isReadable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                            // 处理读事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            SocketChannel channel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (SocketChannel) key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">channel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            ByteBuffer buffer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ByteBuffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">allocate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                            int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bytesRead </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> channel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buffer);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (bytesRead </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                channel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (bytesRead </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remaining</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Received: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (IOException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h3 id="_3-优化建议" tabindex="-1">3. <strong>优化建议</strong> <a class="header-anchor" href="#_3-优化建议" aria-label="Permalink to “3. 优化建议”">​</a></h3><ol><li><p><strong>动态调整 Selector 数量</strong>：</p><ul><li>根据连接的负载情况动态调整 <code>Selector</code> 的数量，避免资源浪费<a href="./@ref.html">3</a>。</li></ul></li><li><p><strong>使用更高效的 I/O 模型</strong>：</p><ul><li>如果 <code>Selector</code> 仍然无法满足性能需求，可以考虑使用更高效的 I/O 模型，如 Linux 的 <code>epoll</code> 或 Windows 的 <code>IOCP</code>。</li></ul></li><li><p><strong>监控和调优</strong>：</p><ul><li>使用工具（如 <code>netstat</code>、<code>ss</code>）监控连接状态，调整系统参数（如 <code>tcp_max_syn_backlog</code>、<code>somaxconn</code>）以优化 TCP 连接处理能力<a href="./@ref.html">1</a>。</li></ul></li></ol><hr><h3 id="_4-参考外部资料" tabindex="-1">4. <strong>参考外部资料</strong> <a class="header-anchor" href="#_4-参考外部资料" aria-label="Permalink to “4. 参考外部资料”">​</a></h3><ul><li><a href="./@ref.html">1</a>：优化 TCP 缓冲区大小和滑动窗口。</li><li><a href="./@ref.html">3</a>：使用多个 <code>Selector</code> 和线程池处理大量连接。</li></ul><p>通过以上优化措施，可以有效提升 <code>Selector</code> 处理大量 TCP 连接的性能。</p><h2 id="如果我需要维护100个tcp连接-使用一个selector够吗" tabindex="-1">如果我需要维护100个tcp连接，使用一个selector够吗 <a class="header-anchor" href="#如果我需要维护100个tcp连接-使用一个selector够吗" aria-label="Permalink to “如果我需要维护100个tcp连接，使用一个selector够吗”">​</a></h2><p>维护100个TCP连接时，使用单个<code>Selector</code>是可行的，但可能会遇到性能瓶颈，尤其是在连接数量进一步增加或网络负载较高的情况下。以下是详细分析和优化建议：</p><hr><h3 id="_1-单个-selector-的局限性" tabindex="-1">1. <strong>单个 <code>Selector</code> 的局限性</strong> <a class="header-anchor" href="#_1-单个-selector-的局限性" aria-label="Permalink to “1. 单个 Selector 的局限性”">​</a></h3><ul><li><strong>事件处理延迟</strong>：单个<code>Selector</code>需要轮询所有注册的<code>Channel</code>，随着连接数量增加，事件处理的延迟可能会增加。</li><li><strong>单线程瓶颈</strong>：如果所有连接的事件处理都由一个线程完成，CPU 和 I/O 资源可能无法充分利用，尤其是在多核系统上。</li><li><strong>扩展性差</strong>：当连接数量进一步增加（如1000个以上），单个<code>Selector</code>的性能可能无法满足需求。</li></ul><hr><h3 id="_2-优化方案" tabindex="-1">2. <strong>优化方案</strong> <a class="header-anchor" href="#_2-优化方案" aria-label="Permalink to “2. 优化方案”">​</a></h3><h4 id="_2-1-使用多个-selector" tabindex="-1">2.1 <strong>使用多个 <code>Selector</code></strong> <a class="header-anchor" href="#_2-1-使用多个-selector" aria-label="Permalink to “2.1 使用多个 Selector”">​</a></h4><ul><li>将连接分散到多个<code>Selector</code>中，每个<code>Selector</code>负责处理一部分连接。可以通过线程池管理多个<code>Selector</code>，每个线程运行一个<code>Selector</code>的事件循环。</li><li>示例：<div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Selector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] selectors </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> Selector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 4 个 Selector</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> selectors.length; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    selectors[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Selector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li>将连接均匀分配到不同的<code>Selector</code>中，例如通过哈希算法将连接分配到特定的<code>Selector</code>。</li></ul><h4 id="_2-2-分离连接处理和数据处理" tabindex="-1">2.2 <strong>分离连接处理和数据处理</strong> <a class="header-anchor" href="#_2-2-分离连接处理和数据处理" aria-label="Permalink to “2.2 分离连接处理和数据处理”">​</a></h4><ul><li>使用一个<code>Selector</code>专门处理新连接（<code>ACCEPT</code>事件），另一个或多个<code>Selector</code>处理已连接通道的读写事件（<code>READ</code>和<code>WRITE</code>事件）。</li><li>示例：<div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Selector acceptSelector </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Selector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ServerSocketChannel serverChannel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ServerSocketChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">serverChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">serverChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> InetSocketAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PORT));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">serverChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(acceptSelector, SelectionKey.OP_ACCEPT);</span></span></code></pre></div></li></ul><h4 id="_2-3-调整缓冲区大小" tabindex="-1">2.3 <strong>调整缓冲区大小</strong> <a class="header-anchor" href="#_2-3-调整缓冲区大小" aria-label="Permalink to “2.3 调整缓冲区大小”">​</a></h4><ul><li>根据网络带宽和时延调整 TCP 缓冲区大小（<code>tcp_wmem</code> 和 <code>tcp_rmem</code>），确保缓冲区大小与带宽时延积（BDP）匹配，以充分利用网络性能。</li></ul><h4 id="_2-4-使用非阻塞-i-o" tabindex="-1">2.4 <strong>使用非阻塞 I/O</strong> <a class="header-anchor" href="#_2-4-使用非阻塞-i-o" aria-label="Permalink to “2.4 使用非阻塞 I/O”">​</a></h4><ul><li>确保所有<code>Channel</code>都设置为非阻塞模式（<code>configureBlocking(false)</code>），避免阻塞操作影响<code>Selector</code>的效率。</li></ul><h4 id="_2-5-减少事件处理的耗时" tabindex="-1">2.5 <strong>减少事件处理的耗时</strong> <a class="header-anchor" href="#_2-5-减少事件处理的耗时" aria-label="Permalink to “2.5 减少事件处理的耗时”">​</a></h4><ul><li>避免在事件处理逻辑中执行耗时操作（如数据库查询、复杂计算等），可以将这些操作委托给线程池处理。</li></ul><hr><h3 id="_3-参考外部资料" tabindex="-1">3. <strong>参考外部资料</strong> <a class="header-anchor" href="#_3-参考外部资料" aria-label="Permalink to “3. 参考外部资料”">​</a></h3><ul><li><strong>单个 <code>Selector</code> 的性能瓶颈</strong>：单个<code>Selector</code>在处理大量连接时，可能会因为轮询和单线程限制导致性能下降<a href="./@ref.html">2</a>。</li><li><strong>使用多个 <code>Selector</code> 的优化</strong>：通过将连接分散到多个<code>Selector</code>中，可以充分利用多核 CPU 和 I/O 资源<a href="./@ref.html">3</a>。</li><li><strong>分离连接处理和数据处理</strong>：将新连接和已连接通道的事件处理分离，可以提高系统的扩展性和性能<a href="./@ref.html">4</a>。</li></ul><hr><h3 id="_4-示例代码-1" tabindex="-1">4. <strong>示例代码</strong> <a class="header-anchor" href="#_4-示例代码-1" aria-label="Permalink to “4. 示例代码”">​</a></h3><p>以下是使用多个<code>Selector</code>的示例代码：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.nio.channels.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.concurrent.ExecutorService;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.concurrent.Executors;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MultiSelectorServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PORT </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SELECTOR_THREADS </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 4 个 Selector</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ExecutorService selectorPool </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Executors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newFixedThreadPool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SELECTOR_THREADS);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 创建主 Selector，专门处理 ACCEPT 事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Selector acceptSelector </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Selector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ServerSocketChannel serverChannel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ServerSocketChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        serverChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        serverChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> InetSocketAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PORT));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        serverChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(acceptSelector, SelectionKey.OP_ACCEPT);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 启动多个 Selector 线程处理读写事件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SELECTOR_THREADS; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            selectorPool.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">submit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EventLoop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 主线程运行 ACCEPT 事件循环</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            acceptSelector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Set&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SelectionKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; keys </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> acceptSelector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">selectedKeys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Iterator&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SelectionKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; iterator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> keys.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">iterator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasNext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                SelectionKey key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isAcceptable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    // 接受新连接并分配给一个 EventLoop</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    ServerSocketChannel server </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (ServerSocketChannel) key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">channel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    SocketChannel clientChannel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    // 将新连接分配给一个 EventLoop</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    EventLoop.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assignChannel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(clientChannel);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h3 id="_5-总结-2" tabindex="-1">5. <strong>总结</strong> <a class="header-anchor" href="#_5-总结-2" aria-label="Permalink to “5. 总结”">​</a></h3><p>对于维护100个TCP连接，单个<code>Selector</code>可以满足需求，但在高负载或连接数量进一步增加时，建议使用多个<code>Selector</code>、分离连接处理和数据处理等优化措施，以提高系统性能和扩展性。</p><h2 id="在java中-一个tcp连接使用一个socket-连接多个tcp-这样占用很多内存吗" tabindex="-1">在java中，一个tcp连接使用一个socket，连接多个tcp，这样占用很多内存吗 <a class="header-anchor" href="#在java中-一个tcp连接使用一个socket-连接多个tcp-这样占用很多内存吗" aria-label="Permalink to “在java中，一个tcp连接使用一个socket，连接多个tcp，这样占用很多内存吗”">​</a></h2><p>在Java中，每个TCP连接确实会使用一个Socket，而每个Socket都会占用一定的内存。具体的内存消耗取决于多个因素，包括操作系统内核的实现、缓冲区的大小以及其他相关的数据结构。</p><p>根据搜索结果，每个TCP连接（即一个Socket）在内核中会涉及多个数据结构，例如 <code>struct tcp_sock</code>、<code>struct file</code>、<code>struct dentry</code> 等。这些结构的内存占用总和大约在3KB左右。此外，如果使用了 <code>epoll</code> 等事件处理机制，每个连接还会额外占用一些内存（例如 <code>epitem</code> 对象，大小为128字节）<a href="./@ref.html">3</a>。</p><p>对于接收和发送缓冲区，如果没有数据传输，它们不会占用内存。只有当有数据在缓冲区中等待处理时，才会占用内存。默认情况下，接收和发送缓冲区的最小大小各为4KB，因此每个连接在数据传输时可能会额外占用8KB的内存<a href="./@ref.html">3</a>。</p><p>总的来说，一个TCP连接在不传输数据时，占用的内存大约为3KB左右；在传输数据时，可能会增加到10KB以上。因此，连接多个TCP连接确实会占用较多的内存，尤其是在高并发的情况下。例如，10万个TCP连接在不传输数据时，大约会占用300MB的内存；在传输数据时，可能会占用超过1GB的内存<a href="./@ref.html">3</a> 。</p><p>如果需要支持大量并发连接，可以通过调整内核参数（如 <code>tcp_rmem</code>、<code>tcp_wmem</code> 和 <code>tcp_mem</code>）来优化内存使用<a href="./@ref.html">3</a> 。此外，在Java中，可以通过优化代码和合理设置缓冲区大小来减少内存占用<a href="./@ref.html">1</a>。</p><p>综上所述，连接多个TCP连接确实会占用较多内存，特别是在高并发场景下。通过优化系统和代码，可以有效地管理和减少内存消耗。</p><h2 id="在java中创建线程的内存开销" tabindex="-1">在java中创建线程的内存开销 <a class="header-anchor" href="#在java中创建线程的内存开销" aria-label="Permalink to “在java中创建线程的内存开销”">​</a></h2><p>在Java中，创建线程确实会带来一定的内存开销。以下是关于Java线程内存开销的详细说明：</p><h3 id="_1-线程栈的内存开销" tabindex="-1">1. <strong>线程栈的内存开销</strong> <a class="header-anchor" href="#_1-线程栈的内存开销" aria-label="Permalink to “1. 线程栈的内存开销”">​</a></h3><p>Java线程的线程栈区别于堆，它不受Java程序直接控制，而是由操作系统管理。默认情况下，每个线程的线程栈大小为1MB。这意味着如果创建了1024个线程，仅线程栈就会占用1GB的内存。这种内存消耗在高并发场景下可能会迅速耗尽系统资源，导致程序崩溃<a href="./@ref.html">1</a><a href="./@ref.html">4</a> 。</p><p>然而，实际内存占用可能比默认值低，因为操作系统会以延迟分配的方式分配内存页面（例如在第一次使用时分配），因此每个线程栈实际占用的内存可能在80KB到200KB之间<a href="./@ref.html">2</a>。</p><h3 id="_2-其他内存开销" tabindex="-1">2. <strong>其他内存开销</strong> <a class="header-anchor" href="#_2-其他内存开销" aria-label="Permalink to “2. 其他内存开销”">​</a></h3><p>除了线程栈，线程的创建和运行还会带来其他内存开销，包括：</p><ul><li><strong>线程控制块（TCB）</strong>：操作系统为每个线程维护的数据结构，用于管理线程的状态和上下文。</li><li><strong>本地内存</strong>：JVM本身也会为线程分配一些本地内存，用于管理线程的元数据和资源<a href="./@ref.html">2</a>。</li></ul><h3 id="_3-线程创建和销毁的开销" tabindex="-1">3. <strong>线程创建和销毁的开销</strong> <a class="header-anchor" href="#_3-线程创建和销毁的开销" aria-label="Permalink to “3. 线程创建和销毁的开销”">​</a></h3><p>频繁创建和销毁线程会带来额外的性能开销，包括：</p><ul><li><strong>系统调用</strong>：创建线程需要操作系统介入，分配资源和初始化数据结构。</li><li><strong>上下文切换</strong>：线程切换时，CPU缓存会被清空，内存页面可能需要换入换出，这些操作都会影响性能<a href="./@ref.html">1</a><a href="./@ref.html">6</a>。</li></ul><h3 id="_4-线程池的优化" tabindex="-1">4. <strong>线程池的优化</strong> <a class="header-anchor" href="#_4-线程池的优化" aria-label="Permalink to “4. 线程池的优化”">​</a></h3><p>为了减少线程创建和销毁的开销，Java中通常使用线程池（如<code>ThreadPoolExecutor</code>）来管理线程。线程池通过复用线程资源，显著降低了内存和性能开销。线程池的主要优点包括：</p><ul><li><strong>资源复用</strong>：线程池中的线程可以重复使用，避免了频繁创建和销毁线程的开销。</li><li><strong>内存控制</strong>：线程池可以限制最大线程数，防止内存被过多占用<a href="./@ref.html">1</a><a href="./@ref.html">3</a>。</li></ul><h3 id="_5-如何减少线程内存开销" tabindex="-1">5. <strong>如何减少线程内存开销</strong> <a class="header-anchor" href="#_5-如何减少线程内存开销" aria-label="Permalink to “5. 如何减少线程内存开销”">​</a></h3><ul><li><strong>调整线程栈大小</strong>：通过JVM参数<code>-Xss</code>可以设置线程栈的大小，例如<code>-Xss256k</code>将线程栈大小设置为256KB。</li><li><strong>使用线程池</strong>：通过线程池管理线程，避免频繁创建和销毁线程。</li><li><strong>优化任务设计</strong>：将任务拆分为更小的可并行单元，充分利用线程池的并发能力<a href="./@ref.html">2</a><a href="./@ref.html">3</a>。</li></ul><h3 id="总结-16" tabindex="-1">总结 <a class="header-anchor" href="#总结-16" aria-label="Permalink to “总结”">​</a></h3><p>在Java中，每个线程默认会占用1MB的线程栈内存（实际可能为80KB到200KB），加上其他内存开销，创建大量线程可能会导致内存耗尽。通过使用线程池和优化线程栈大小，可以有效减少内存开销，提升系统性能<a href="./@ref.html">1</a><a href="./@ref.html">2</a><a href="./@ref.html">3</a> 。</p><h2 id="java中的selector使用的是select还是epoll" tabindex="-1">java中的selector使用的是select还是epoll <a class="header-anchor" href="#java中的selector使用的是select还是epoll" aria-label="Permalink to “java中的selector使用的是select还是epoll”">​</a></h2><p>在Java中，<code>Selector</code>的实现依赖于底层操作系统的支持，具体使用的是<code>select</code>还是<code>epoll</code>取决于操作系统和JDK的实现。</p><p>在Linux系统中，Java NIO的<code>Selector</code>通常使用的是<code>epoll</code>模型。这是因为<code>epoll</code>在处理大量连接时性能优于<code>select</code>，尤其是在高并发场景下。<code>epoll</code> 基于事件驱动，能够高效地管理大量文件描述符，而不会像<code>select</code>那样随着文件描述符数量的增加而性能下降<a href="./@ref.html">1</a><a href="./@ref.html">5</a><a href="./@ref.html">6</a>。</p><p>具体来说，Java的<code>Selector</code>是通过<code>SelectorProvider</code>来创建的。在Linux系统中，<code>SelectorProvider</code>会返回一个<code>EPollSelectorProvider</code>，这意味着<code>Selector</code> 的底层实现是基于<code>epoll</code>的。而在Windows系统中，<code>Selector</code>的实现则是基于<code>select</code>的，因为Windows不支持<code>epoll</code><a href="./@ref.html">6</a>。</p><p>总结：</p><ul><li><strong>Linux系统</strong>：Java的<code>Selector</code>使用的是<code>epoll</code>模型，性能更优<a href="./@ref.html">1</a><a href="./@ref.html">5</a><a href="./@ref.html">6</a>。</li><li><strong>Windows系统</strong>：Java的<code>Selector</code>使用的是<code>select</code>模型<a href="./@ref.html">6</a>。</li></ul><p>因此，Java中的<code>Selector</code>具体使用<code>select</code>还是<code>epoll</code>取决于操作系统和JDK的实现。</p><h1 id="selector" tabindex="-1">selector <a class="header-anchor" href="#selector" aria-label="Permalink to “selector”">​</a></h1><h2 id="java-selector-的原理" tabindex="-1">java selector 的原理 <a class="header-anchor" href="#java-selector-的原理" aria-label="Permalink to “java selector 的原理”">​</a></h2><p>Java 中的 <code>Selector</code> 是 Java NIO（非阻塞 I/O）的核心组件之一，用于实现 I/O 多路复用。它的主要作用是通过单个线程管理多个 <code>Channel</code>，监控这些 <code>Channel</code> 上的 I/O 事件（如读、写、连接等），从而提高系统的并发性能。以下是 <code>Selector</code> 的工作原理和关键点：</p><hr><h3 id="_1-selector-的核心功能" tabindex="-1">1. <strong>Selector 的核心功能</strong> <a class="header-anchor" href="#_1-selector-的核心功能" aria-label="Permalink to “1. Selector 的核心功能”">​</a></h3><p><code>Selector</code> 允许单个线程同时监控多个 <code>Channel</code> 的 I/O 事件。通过注册 <code>Channel</code> 到 <code>Selector</code> 并指定感兴趣的事件（如 <code>OP_READ</code>、<code>OP_WRITE</code>、<code>OP_ACCEPT</code> 等），程序可以在事件就绪时进行处理，而不需要为每个 <code>Channel</code> 创建单独的线程<a href="./@ref.html">1</a>。</p><hr><h3 id="_2-selector-的工作流程" tabindex="-1">2. <strong>Selector 的工作流程</strong> <a class="header-anchor" href="#_2-selector-的工作流程" aria-label="Permalink to “2. Selector 的工作流程”">​</a></h3><ol><li><p><strong>创建 Selector</strong><br> 通过 <code>Selector.open()</code> 方法创建一个 <code>Selector</code> 实例。底层会根据操作系统的不同选择适当的实现（如 Linux 使用 <code>epoll</code>，Windows 使用 <code>select</code> ）<a href="./@ref.html">2</a><a href="./@ref.html">6</a>。</p></li><li><p><strong>注册 Channel</strong><br> 将 <code>Channel</code> 注册到 <code>Selector</code>，并指定感兴趣的事件。例如：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">channel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 必须设置为非阻塞模式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SelectionKey key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> channel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(selector, SelectionKey.OP_READ);</span></span></code></pre></div><p>注册后会返回一个 <code>SelectionKey</code>，用于跟踪 <code>Channel</code> 和事件的状态<a href="./@ref.html">1</a>。</p></li><li><p><strong>事件监听</strong><br> 调用 <code>Selector.select()</code> 方法，该方法会阻塞，直到至少有一个 <code>Channel</code> 的事件就绪。返回后，可以通过 <code>selectedKeys()</code> 获取就绪的 <code>SelectionKey</code> 集合<a href="./@ref.html">1</a><a href="./@ref.html">2</a>。</p></li><li><p><strong>事件处理</strong><br> 遍历 <code>selectedKeys()</code>，根据事件类型（如 <code>OP_READ</code>、<code>OP_WRITE</code>）进行相应的 I/O 操作。处理完成后，需要手动移除 <code>SelectionKey</code>，否则下次 <code>select()</code> 会重复处理<a href="./@ref.html">1</a>。</p></li><li><p><strong>关闭资源</strong><br> 当 <code>Selector</code> 或 <code>Channel</code> 不再使用时，需要调用 <code>close()</code> 方法释放资源<a href="./@ref.html">1</a>。</p></li></ol><hr><h3 id="_3-selector-的底层实现" tabindex="-1">3. <strong>Selector 的底层实现</strong> <a class="header-anchor" href="#_3-selector-的底层实现" aria-label="Permalink to “3. Selector 的底层实现”">​</a></h3><ul><li><p><strong>Linux 系统</strong>：<code>Selector</code> 的底层通常使用 <code>epoll</code> 实现。<code>epoll</code> 基于事件驱动，通过红黑树管理文件描述符，并通过就绪队列高效地返回就绪事件<a href="./@ref.html">3</a><a href="./@ref.html">6</a>。</p><ul><li><strong>红黑树</strong>：存储所有被监控的文件描述符（<code>fd</code>）。</li><li><strong>就绪队列</strong>：存放已就绪的事件。</li><li><strong>性能优势</strong>：<code>epoll</code> 避免了 <code>select</code> 和 <code>poll</code> 的线性扫描问题，时间复杂度为 O(1)，适合高并发场景<a href="./@ref.html">3</a>。</li></ul></li><li><p><strong>Windows 系统</strong>：<code>Selector</code> 的底层使用 <code>select</code> 实现，性能相对较低<a href="./@ref.html">6</a>。</p></li></ul><hr><h3 id="_4-selector-的优点" tabindex="-1">4. <strong>Selector 的优点</strong> <a class="header-anchor" href="#_4-selector-的优点" aria-label="Permalink to “4. Selector 的优点”">​</a></h3><ul><li><strong>单线程管理多 Channel</strong>：减少了线程切换的开销，适合处理大量低流量的连接<a href="./@ref.html">1</a><a href="./@ref.html">4</a>。</li><li><strong>高效的事件通知</strong>：通过事件驱动机制，避免轮询带来的性能损耗<a href="./@ref.html">3</a>。</li><li><strong>资源占用少</strong>：相比于为每个 <code>Channel</code> 创建线程，<code>Selector</code> 的资源消耗更小<a href="./@ref.html">4</a>。</li></ul><hr><h3 id="_5-selector-的注意事项" tabindex="-1">5. <strong>Selector 的注意事项</strong> <a class="header-anchor" href="#_5-selector-的注意事项" aria-label="Permalink to “5. Selector 的注意事项”">​</a></h3><ul><li><strong>非阻塞模式</strong>：注册到 <code>Selector</code> 的 <code>Channel</code> 必须设置为非阻塞模式<a href="./@ref.html">1</a>。</li><li><strong>事件处理</strong>：处理完事件后，需要手动移除 <code>SelectionKey</code>，否则会导致重复处理<a href="./@ref.html">1</a>。</li><li><strong>线程安全</strong>：<code>Selector</code> 本身是线程安全的，但 <code>selectedKeys()</code> 返回的集合不是，多线程访问时需要同步<a href="./@ref.html">1</a>。</li></ul><hr><h3 id="_6-与-select-poll-epoll-的关系" tabindex="-1">6. <strong>与 select/poll/epoll 的关系</strong> <a class="header-anchor" href="#_6-与-select-poll-epoll-的关系" aria-label="Permalink to “6. 与 select/poll/epoll 的关系”">​</a></h3><ul><li><strong>select</strong>：线性扫描所有文件描述符，性能较差，适合低并发场景<a href="./@ref.html">6</a>。</li><li><strong>poll</strong>：与 <code>select</code> 类似，但没有文件描述符数量限制<a href="./@ref.html">6</a>。</li><li><strong>epoll</strong>：基于事件驱动，性能最优，适合高并发场景，是 Linux 下 <code>Selector</code> 的默认实现<a href="./@ref.html">3</a><a href="./@ref.html">6</a>。</li></ul><hr><h3 id="_7-示例代码" tabindex="-1">7. <strong>示例代码</strong> <a class="header-anchor" href="#_7-示例代码" aria-label="Permalink to “7. 示例代码”">​</a></h3><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Selector selector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Selector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ServerSocketChannel serverChannel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ServerSocketChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        serverChannel.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> InetSocketAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        serverChannel.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        configureBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        serverChannel.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(selector,SelectionKey.OP_ACCEPT);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        selector.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SelectionKey</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">selectedKeys</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">selector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">selectedKeys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Iterator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SelectionKey</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">selectedKeys.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">iterator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(iter.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        hasNext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        SelectionKey key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        isAcceptable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 处理连接事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        isReadable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 处理读事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        iter.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span></code></pre></div><hr><p>通过上述机制，<code>Selector</code> 能够高效地管理多个 <code>Channel</code>，提升 I/O 操作的性能，特别适合高并发的网络应用<a href="./@ref.html">1</a><a href="./@ref.html">3</a><a href="./@ref.html">6</a>。</p><h2 id="selector中事件是由谁产生的" tabindex="-1">selector中事件是由谁产生的？ <a class="header-anchor" href="#selector中事件是由谁产生的" aria-label="Permalink to “selector中事件是由谁产生的？”">​</a></h2><p>在 Java 的 <code>Selector</code> 机制中，事件是由 <strong>注册到 <code>Selector</code> 的 <code>Channel</code></strong> 产生的。具体来说，当 <code>Channel</code> 上发生了与注册事件相关的 I/O 操作时，<code>Selector</code> 会检测到这些事件并将其标记为就绪状态。以下是详细说明：</p><hr><h3 id="_1-事件的产生" tabindex="-1">1. <strong>事件的产生</strong> <a class="header-anchor" href="#_1-事件的产生" aria-label="Permalink to “1. 事件的产生”">​</a></h3><ul><li><strong><code>Channel</code> 是事件的来源</strong><br> 每个 <code>Channel</code>（如 <code>SocketChannel</code>、<code>ServerSocketChannel</code>）都可以注册到 <code>Selector</code>，并指定感兴趣的事件类型（如 <code>OP_READ</code>、<code>OP_WRITE</code>、<code>OP_ACCEPT</code> 、<code>OP_CONNECT</code>）。当 <code>Channel</code> 上发生了这些事件时，<code>Selector</code> 会将其标记为就绪状态。</li><li><strong>事件类型</strong><ul><li><code>OP_ACCEPT</code>：由 <code>ServerSocketChannel</code> 产生，表示有新的客户端连接请求。</li><li><code>OP_CONNECT</code>：由 <code>SocketChannel</code> 产生，表示客户端已成功连接到服务器。</li><li><code>OP_READ</code>：由 <code>SocketChannel</code> 产生，表示通道中有数据可读。</li><li><code>OP_WRITE</code>：由 <code>SocketChannel</code> 产生，表示通道已准备好写入数据。</li></ul></li></ul><hr><h3 id="_2-事件的检测" tabindex="-1">2. <strong>事件的检测</strong> <a class="header-anchor" href="#_2-事件的检测" aria-label="Permalink to “2. 事件的检测”">​</a></h3><ul><li><strong><code>Selector</code> 负责检测事件</strong><br><code>Selector</code> 通过调用 <code>select()</code> 方法，检测所有注册的 <code>Channel</code> 是否有就绪的事件。如果有，<code>select()</code> 会返回就绪事件的数量，并将这些事件存储在 <code>selectedKeys()</code> 集合中。</li><li><strong>事件的处理</strong><br> 程序通过遍历 <code>selectedKeys()</code> 集合，获取每个 <code>SelectionKey</code>（包含了事件和对应的 <code>Channel</code>），并根据事件类型进行相应的处理。</li></ul><hr><h3 id="_3-事件的触发机制" tabindex="-1">3. <strong>事件的触发机制</strong> <a class="header-anchor" href="#_3-事件的触发机制" aria-label="Permalink to “3. 事件的触发机制”">​</a></h3><ul><li><strong>底层操作系统通知</strong><br><code>Selector</code> 的底层实现依赖于操作系统的 I/O 多路复用机制（如 Linux 的 <code>epoll</code> 或 Windows 的 <code>select</code>）。当 <code>Channel</code> 上的 I/O 操作就绪时，操作系统会通知 <code>Selector</code>，<code>Selector</code> 再将事件传递给应用程序。</li><li><strong>非阻塞模式</strong><br> 注册到 <code>Selector</code> 的 <code>Channel</code> 必须设置为非阻塞模式，否则无法正常工作。非阻塞模式确保了 <code>Channel</code> 在 I/O 操作未就绪时不会阻塞，而是由 <code>Selector</code> 统一管理。</li></ul><hr><h3 id="_4-示例" tabindex="-1">4. <strong>示例</strong> <a class="header-anchor" href="#_4-示例" aria-label="Permalink to “4. 示例”">​</a></h3><p>以下代码展示了 <code>Selector</code> 如何检测和处理事件：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Selector selector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Selector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ServerSocketChannel serverChannel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ServerSocketChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        serverChannel.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> InetSocketAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        serverChannel.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        configureBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        serverChannel.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(selector,SelectionKey.OP_ACCEPT);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        selector.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 检测事件</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SelectionKey</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">selectedKeys</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">selector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">selectedKeys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Iterator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SelectionKey</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">selectedKeys.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">iterator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(iter.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        hasNext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        SelectionKey key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        isAcceptable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 处理连接事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        isReadable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 处理读事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        iter.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 移除已处理的事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span></code></pre></div><hr><h3 id="总结-17" tabindex="-1">总结 <a class="header-anchor" href="#总结-17" aria-label="Permalink to “总结”">​</a></h3><p><code>Selector</code> 中的事件是由 <strong>注册到 <code>Selector</code> 的 <code>Channel</code></strong> 产生的，<code>Selector</code> 负责检测这些事件并将其传递给应用程序进行处理。底层操作系统的 I/O 多路复用机制（如 <code>epoll</code> 或 <code>select</code>）是事件通知的关键<a href="./@ref.html">1</a><a href="./@ref.html">4</a>。</p><h2 id="java的selector的使用过程中概念总结一下" tabindex="-1">java的selector的使用过程中概念总结一下 <a class="header-anchor" href="#java的selector的使用过程中概念总结一下" aria-label="Permalink to “java的selector的使用过程中概念总结一下”">​</a></h2><p>在 Java NIO 中，<code>Selector</code> 是一个关键组件，用于实现非阻塞 I/O 操作，允许单个线程管理多个 <code>Channel</code>，从而提高并发性能。以下是 <code>Selector</code> 的核心概念和使用方法的总结：</p><hr><h3 id="_1-selector-的作用" tabindex="-1">1. <strong>Selector 的作用</strong> <a class="header-anchor" href="#_1-selector-的作用" aria-label="Permalink to “1. Selector 的作用”">​</a></h3><ul><li><strong>多路复用</strong>：<code>Selector</code> 可以监控多个 <code>Channel</code> 的 I/O 事件（如读、写、连接、接受等），并通过单个线程处理这些事件，减少线程数量，降低系统资源消耗。</li><li><strong>非阻塞模式</strong>：<code>Selector</code> 只能与非阻塞的 <code>Channel</code> 一起使用，避免线程阻塞，提高效率<a href="./@ref.html">1</a><a href="./@ref.html">3</a>。</li></ul><hr><h3 id="_2-核心概念" tabindex="-1">2. <strong>核心概念</strong> <a class="header-anchor" href="#_2-核心概念" aria-label="Permalink to “2. 核心概念”">​</a></h3><ul><li><strong>Channel</strong>：表示一个 I/O 操作的通道，如 <code>SocketChannel</code>（用于客户端）和 <code>ServerSocketChannel</code>（用于服务器端）。必须设置为非阻塞模式才能与 <code>Selector</code> 一起使用<a href="./@ref.html">1</a><a href="./@ref.html">3</a>。</li><li><strong>SelectionKey</strong>：当 <code>Channel</code> 注册到 <code>Selector</code> 时，会返回一个 <code>SelectionKey</code>，它包含了以下信息： <ul><li><strong>Interest Set</strong>：表示 <code>Channel</code> 感兴趣的事件（如 <code>OP_READ</code>、<code>OP_WRITE</code> 等）。</li><li><strong>Ready Set</strong>：表示 <code>Channel</code> 已就绪的事件。</li><li><strong>Channel</strong> 和 <strong>Selector</strong>：与 <code>SelectionKey</code> 关联的 <code>Channel</code> 和 <code>Selector</code>。</li><li><strong>附加对象</strong>：可以通过 <code>attach()</code> 方法将任意对象附加到 <code>SelectionKey</code>，用于存储与 <code>Channel</code> 相关的额外信息<a href="./@ref.html">1</a><a href="./@ref.html">3</a><a href="./@ref.html">4</a>。</li></ul></li></ul><hr><h3 id="_3-selector-的使用步骤" tabindex="-1">3. <strong>Selector 的使用步骤</strong> <a class="header-anchor" href="#_3-selector-的使用步骤" aria-label="Permalink to “3. Selector 的使用步骤”">​</a></h3><ol><li><p><strong>创建 Selector</strong><br> 通过 <code>Selector.open()</code> 方法创建一个 <code>Selector</code> 实例<a href="./@ref.html">1</a><a href="./@ref.html">3</a>：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Selector selector </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Selector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div></li><li><p><strong>注册 Channel</strong><br> 将 <code>Channel</code> 注册到 <code>Selector</code>，并指定感兴趣的事件：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">channel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 必须设置为非阻塞模式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SelectionKey key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> channel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(selector, SelectionKey.OP_READ);</span></span></code></pre></div><p>支持的事件类型包括：</p><ul><li><code>OP_ACCEPT</code>：接受连接（仅用于 <code>ServerSocketChannel</code>）。</li><li><code>OP_CONNECT</code>：连接完成。</li><li><code>OP_READ</code>：数据可读。</li><li><code>OP_WRITE</code>：数据可写<a href="./@ref.html">1</a><a href="./@ref.html">3</a>。</li></ul></li><li><p><strong>事件监听</strong><br> 调用 <code>Selector.select()</code> 方法，该方法会阻塞，直到至少有一个 <code>Channel</code> 的事件就绪。返回后，可以通过 <code>selectedKeys()</code> 获取就绪的 <code>SelectionKey</code> 集合<a href="./@ref.html">1</a><a href="./@ref.html">3</a>：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> readyChannels </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> selector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Set&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SelectionKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; selectedKeys </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> selector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">selectedKeys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div></li><li><p><strong>事件处理</strong><br> 遍历 <code>selectedKeys()</code>，根据事件类型进行相应的 I/O 操作，处理完成后需手动移除 <code>SelectionKey</code>，避免重复处理<a href="./@ref.html">1</a><a href="./@ref.html">3</a>：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Iterator&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SelectionKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; iterator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> selectedKeys.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">iterator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasNext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    SelectionKey key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isAcceptable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 处理连接事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isReadable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 处理读事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 移除已处理的 key</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>关闭资源</strong><br> 当不再需要 <code>Selector</code> 或 <code>Channel</code> 时，调用 <code>close()</code> 方法释放资源<a href="./@ref.html">3</a><a href="./@ref.html">4</a>：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">selector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">channel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div></li></ol><hr><h3 id="_4-selector-的优势" tabindex="-1">4. <strong>Selector 的优势</strong> <a class="header-anchor" href="#_4-selector-的优势" aria-label="Permalink to “4. Selector 的优势”">​</a></h3><ul><li><strong>减少线程数量</strong>：通过单线程管理多个 <code>Channel</code>，减少线程切换的开销。</li><li><strong>高效的事件驱动</strong>：基于事件通知机制，避免轮询带来的性能损耗。</li><li><strong>适用于高并发场景</strong>：如 Web 服务器、聊天服务器等<a href="./@ref.html">1</a><a href="./@ref.html">3</a><a href="./@ref.html">4</a>。</li></ul><hr><h3 id="_5-注意事项-1" tabindex="-1">5. <strong>注意事项</strong> <a class="header-anchor" href="#_5-注意事项-1" aria-label="Permalink to “5. 注意事项”">​</a></h3><ul><li><strong>非阻塞模式</strong>：注册到 <code>Selector</code> 的 <code>Channel</code> 必须设置为非阻塞模式。</li><li><strong>线程安全</strong>：<code>Selector</code> 本身是线程安全的，但 <code>selectedKeys()</code> 返回的集合不是，多线程访问时需要同步。</li><li><strong>资源管理</strong>：确保在不使用时关闭 <code>Selector</code> 和 <code>Channel</code>，避免资源泄漏<a href="./@ref.html">3</a><a href="./@ref.html">4</a>。</li></ul><hr><h3 id="_6-与底层机制的关系" tabindex="-1">6. <strong>与底层机制的关系</strong> <a class="header-anchor" href="#_6-与底层机制的关系" aria-label="Permalink to “6. 与底层机制的关系”">​</a></h3><ul><li><strong>Linux 系统</strong>：<code>Selector</code> 的底层通常使用 <code>epoll</code>，性能最优。</li><li><strong>Windows 系统</strong>：<code>Selector</code> 的底层使用 <code>select</code>，性能相对较低<a href="./@ref.html">1</a><a href="./@ref.html">3</a>。</li></ul><hr><p>通过以上机制，<code>Selector</code> 能够高效地管理多个 <code>Channel</code>，提升 I/O 操作的性能，特别适合高并发的网络应用<a href="./@ref.html">1</a><a href="./@ref.html">3</a><a href="./@ref.html">4</a>。</p><h1 id="reactor" tabindex="-1">reactor <a class="header-anchor" href="#reactor" aria-label="Permalink to “reactor”">​</a></h1><h2 id="reference" tabindex="-1">reference <a class="header-anchor" href="#reference" aria-label="Permalink to “reference”">​</a></h2><ul><li><a href="https://cloud.tencent.com/developer/article/1811347" target="_blank" rel="noreferrer">五分钟快速理解 Reactor 模型</a><ul><li>1、线程模型1：传统阻塞 I/O 服务模型</li><li>2、线程模型2：Reactor 模式 <ul><li>I/O 复用 + 线程</li></ul></li><li>Reactor 模式中的两个关键组成 <ul><li>Reactor</li><li>Handler</li></ul></li><li>Reactor 的实现 <ul><li>单 Reactor 单线程</li><li>单 Reactor 多线程</li><li>主从 Reactor 多线程</li></ul></li></ul></li></ul><h2 id="给我举一个-reactor-模式的例子" tabindex="-1">给我举一个 reactor 模式的例子 <a class="header-anchor" href="#给我举一个-reactor-模式的例子" aria-label="Permalink to “给我举一个 reactor 模式的例子”">​</a></h2><p>以下是一个基于 <strong>Reactor 模式</strong> 的简单示例，使用 Java NIO 实现了一个非阻塞的服务器。这个示例展示了 Reactor 模式的核心思想：通过事件驱动机制，使用一个主线程（Reactor）监听多个 I/O 事件，并将事件分发给对应的处理器（Handler）进行处理。</p><hr><h3 id="示例代码-reactor-模式服务器" tabindex="-1">示例代码：Reactor 模式服务器 <a class="header-anchor" href="#示例代码-reactor-模式服务器" aria-label="Permalink to “示例代码：Reactor 模式服务器”">​</a></h3><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.io.IOException;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.net.InetSocketAddress;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.nio.ByteBuffer;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.nio.channels.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.Iterator;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.Set;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ReactorServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 创建 Selector（事件多路复用器）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Selector selector </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Selector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 创建 ServerSocketChannel 并绑定端口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ServerSocketChannel serverSocketChannel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ServerSocketChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        serverSocketChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> InetSocketAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        serverSocketChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置为非阻塞模式</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 将 ServerSocketChannel 注册到 Selector，监听 ACCEPT 事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        serverSocketChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(selector, SelectionKey.OP_ACCEPT);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Server started on port 8080...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 事件循环</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            selector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 阻塞等待事件发生</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Set&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SelectionKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; selectedKeys </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> selector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">selectedKeys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Iterator&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SelectionKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; iterator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> selectedKeys.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">iterator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasNext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                SelectionKey key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isAcceptable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    // 处理连接事件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    handleAccept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key, selector);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isReadable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    // 处理读事件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    handleRead</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 处理连接事件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handleAccept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SelectionKey </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Selector </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">selector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ServerSocketChannel serverChannel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (ServerSocketChannel) key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">channel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        SocketChannel clientChannel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> serverChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置为非阻塞模式</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 将客户端通道注册到 Selector，监听 READ 事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(selector, SelectionKey.OP_READ);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Client connected: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRemoteAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 处理读事件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handleRead</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SelectionKey </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        SocketChannel clientChannel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (SocketChannel) key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">channel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ByteBuffer buffer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ByteBuffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">allocate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bytesRead </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buffer);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (bytesRead </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 客户端断开连接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Client disconnected: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRemoteAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (bytesRead </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 切换为读模式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">limit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Received: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 回显数据给客户端</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            clientChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ByteBuffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h3 id="代码说明-7" tabindex="-1">代码说明 <a class="header-anchor" href="#代码说明-7" aria-label="Permalink to “代码说明”">​</a></h3><ol><li><p><strong>Reactor</strong>：</p><ul><li><code>Selector</code> 是 Reactor 的核心组件，用于监听多个 <code>Channel</code> 的 I/O 事件。</li><li>主线程通过 <code>selector.select()</code> 阻塞等待事件发生，然后遍历 <code>selectedKeys</code> 处理事件。</li></ul></li><li><p><strong>事件处理</strong>：</p><ul><li><strong>连接事件</strong>（<code>OP_ACCEPT</code>）：当有客户端连接时，<code>handleAccept</code> 方法会接受连接，并将客户端通道注册到 <code>Selector</code>，监听 <code>OP_READ</code> 事件。</li><li><strong>读事件</strong>（<code>OP_READ</code>）：当客户端发送数据时，<code>handleRead</code> 方法会读取数据并回显给客户端。</li></ul></li><li><p><strong>非阻塞模式</strong>：</p><ul><li>所有的 <code>Channel</code> 都被设置为非阻塞模式（<code>configureBlocking(false)</code>），确保 I/O 操作不会阻塞线程。</li></ul></li></ol><hr><h3 id="reactor-模式的核心组件12" tabindex="-1">Reactor 模式的核心组件<a href="./@ref.html">1</a><a href="./@ref.html">2</a> <a class="header-anchor" href="#reactor-模式的核心组件12" aria-label="Permalink to “Reactor 模式的核心组件12”">​</a></h3><ol><li><strong>Reactor</strong>：负责监听和分发事件，是事件循环的核心。</li><li><strong>Handler</strong>：事件处理器，用于处理 Reactor 分发的事件。</li><li><strong>Acceptor</strong>：用于接受新的连接请求。</li><li><strong>Event Demultiplexer</strong>（<code>Selector</code>）：用于等待多个 I/O 事件的发生。</li></ol><hr><h3 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to “应用场景”">​</a></h3><p>Reactor 模式适合以下场景<a href="./@ref.html">5</a>：</p><ul><li>高性能网络服务器（如 HTTP 服务器、聊天服务器）。</li><li>实时通信系统（如推送服务）。</li><li>分布式消息队列（如 Kafka）。</li><li>游戏服务器。</li></ul><hr><p>通过这个示例，你可以看到 Reactor 模式如何通过事件驱动机制高效地处理多个 I/O 事件，适合高并发场景。</p><h1 id="响应式编程" tabindex="-1">响应式编程 <a class="header-anchor" href="#响应式编程" aria-label="Permalink to “响应式编程”">​</a></h1><h2 id="reference-1" tabindex="-1">reference <a class="header-anchor" href="#reference-1" aria-label="Permalink to “reference”">​</a></h2><ul><li><a href="https://www.zhihu.com/question/626744453/answer/3303246849" target="_blank" rel="noreferrer">Java 虚拟线程对响应式编程开发有什么影响?</a></li></ul><h2 id="什么是响应式编程" tabindex="-1">什么是响应式编程 <a class="header-anchor" href="#什么是响应式编程" aria-label="Permalink to “什么是响应式编程”">​</a></h2><p><strong>响应式编程（Reactive Programming）</strong>是一种面向<strong>数据流</strong>和<strong>变化传播</strong> 的声明式编程范式。它允许开发者方便地表达静态或动态的数据流，并自动将数据流中的变化传播到相关计算模型中<a href="./@ref.html">3</a><a href="./@ref.html">4</a>。</p><h3 id="核心概念" tabindex="-1">核心概念 <a class="header-anchor" href="#核心概念" aria-label="Permalink to “核心概念”">​</a></h3><ol><li><strong>数据流</strong>：响应式编程的核心是数据流，即数据的变化和流动。例如，在电子表格中，单元格的值会随着其他单元格的变化而自动更新<a href="./@ref.html">3</a><a href="./@ref.html">4</a>。</li><li><strong>变化传播</strong>：当数据流中的某个值发生变化时，依赖该值的计算会自动更新，而不需要显式调用<a href="./@ref.html">3</a><a href="./@ref.html">4</a>。</li><li><strong>声明式</strong>：开发者只需声明数据流和计算逻辑，而无需关注具体的执行细节<a href="./@ref.html">3</a>。</li></ol><h3 id="响应式编程的特点" tabindex="-1">响应式编程的特点 <a class="header-anchor" href="#响应式编程的特点" aria-label="Permalink to “响应式编程的特点”">​</a></h3><ul><li><strong>可应答性（Responsive）</strong>：系统能够及时响应请求，保持快速和一致的响应时间<a href="./@ref.html">1</a><a href="./@ref.html">4</a>。</li><li><strong>弹性（Resilient）</strong>：系统在出现故障时仍能提供响应，例如返回错误页面而不是直接崩溃<a href="./@ref.html">1</a><a href="./@ref.html">4</a>。</li><li><strong>可伸缩性（Elastic）</strong>：系统能够根据负载动态调整资源，例如在高负载时扩容，低负载时释放资源<a href="./@ref.html">1</a><a href="./@ref.html">4</a>。</li><li><strong>消息驱动（Message Driven）</strong>：系统通过异步消息传递实现高效的资源利用和故障隔离<a href="./@ref.html">1</a><a href="./@ref.html">4</a>。</li></ul><h3 id="应用场景-1" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景-1" aria-label="Permalink to “应用场景”">​</a></h3><ul><li><strong>用户界面</strong>：响应式编程最初用于简化用户界面和实时系统动画的开发<a href="./@ref.html">3</a><a href="./@ref.html">4</a>。</li><li><strong>实时数据处理</strong>：如金融交易系统、实时监控系统等<a href="./@ref.html">1</a>。</li><li><strong>高并发服务器</strong>：通过异步和非阻塞的方式处理大量并发请求<a href="./@ref.html">2</a>。</li></ul><h3 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to “优点”">​</a></h3><ul><li><strong>高效利用资源</strong>：通过异步和非阻塞的方式减少线程阻塞，提高 CPU 和内存的利用率<a href="./@ref.html">1</a><a href="./@ref.html">5</a>。</li><li><strong>简化并发编程</strong>：开发者无需手动管理线程和同步问题<a href="./@ref.html">1</a><a href="./@ref.html">2</a>。</li><li><strong>更好的扩展性</strong>：系统能够根据负载动态调整资源<a href="./@ref.html">1</a><a href="./@ref.html">4</a>。</li></ul><h3 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to “缺点”">​</a></h3><ul><li><strong>复杂性</strong>：响应式编程的代码可能难以理解和调试，尤其是对于不熟悉异步编程的开发者<a href="./@ref.html">5</a>。</li><li><strong>学习成本高</strong>：需要理解数据流、背压（Backpressure）等概念<a href="./@ref.html">1</a><a href="./@ref.html">2</a>。</li></ul><h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to “示例”">​</a></h3><p>在命令式编程中，表达式 <code>a = b + c</code> 只会计算一次，而在响应式编程中，<code>a</code> 的值会随着 <code>b</code> 和 <code>c</code> 的变化而自动更新<a href="./@ref.html">3</a><a href="./@ref.html">4</a>。</p><h3 id="总结-18" tabindex="-1">总结 <a class="header-anchor" href="#总结-18" aria-label="Permalink to “总结”">​</a></h3><p>响应式编程是一种以数据流为核心的编程范式，适合处理高并发、实时性和动态变化的场景。尽管它具有一定的复杂性，但在现代高并发和实时系统中，响应式编程提供了高效且灵活的解决方案<a href="./@ref.html">1</a><a href="./@ref.html">3</a><a href="./@ref.html">4</a>。</p><h2 id="在springboot中有哪些响应式编程的运用" tabindex="-1">在springboot中有哪些响应式编程的运用 <a class="header-anchor" href="#在springboot中有哪些响应式编程的运用" aria-label="Permalink to “在springboot中有哪些响应式编程的运用”">​</a></h2><p>在 Spring Boot 中，响应式编程主要通过 <strong>Spring WebFlux</strong> 和 <strong>Project Reactor</strong> 来实现。以下是 Spring Boot 中响应式编程的主要应用场景和实现方式：</p><hr><h3 id="_1-响应式-web-开发-spring-webflux" tabindex="-1">1. <strong>响应式 Web 开发（Spring WebFlux）</strong> <a class="header-anchor" href="#_1-响应式-web-开发-spring-webflux" aria-label="Permalink to “1. 响应式 Web 开发（Spring WebFlux）”">​</a></h3><p>Spring WebFlux 是 Spring Framework 5.0 引入的响应式 Web 框架，支持异步非阻塞的请求处理，适合高并发场景<a href="./@ref.html">1</a><a href="./@ref.html">2</a>。</p><h4 id="核心特性" tabindex="-1">核心特性： <a class="header-anchor" href="#核心特性" aria-label="Permalink to “核心特性：”">​</a></h4><ul><li><strong>非阻塞 I/O</strong>：使用异步非阻塞模型处理请求，提高并发能力。</li><li><strong>Reactive Streams 支持</strong>：基于 Reactor 实现，支持背压（Backpressure）机制。</li><li><strong>函数式编程</strong>：提供函数式 API（如 Router Functions）来定义路由和处理逻辑。</li></ul><h4 id="示例代码-2" tabindex="-1">示例代码： <a class="header-anchor" href="#示例代码-2" aria-label="Permalink to “示例代码：”">​</a></h4><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RestController</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GetMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/users&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Flux&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAllUsers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Flux.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">just</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;John&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Jane&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在这个示例中，<code>Flux</code> 用于返回多个用户数据<a href="./@ref.html">2</a>。</p><hr><h3 id="_2-响应式数据库访问" tabindex="-1">2. <strong>响应式数据库访问</strong> <a class="header-anchor" href="#_2-响应式数据库访问" aria-label="Permalink to “2. 响应式数据库访问”">​</a></h3><p>Spring Boot 支持通过 <strong>Spring Data R2DBC</strong> 和 <strong>Spring Data MongoDB Reactive</strong> 实现响应式数据库访问<a href="./@ref.html">2</a><a href="./@ref.html">5</a>。</p><h4 id="核心特性-1" tabindex="-1">核心特性： <a class="header-anchor" href="#核心特性-1" aria-label="Permalink to “核心特性：”">​</a></h4><ul><li><strong>非阻塞数据库操作</strong>：通过异步方式访问数据库，避免线程阻塞。</li><li><strong>Reactive Repository</strong>：提供响应式的 CRUD 操作接口。</li></ul><h4 id="示例代码-3" tabindex="-1">示例代码： <a class="header-anchor" href="#示例代码-3" aria-label="Permalink to “示例代码：”">​</a></h4><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Repository</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserRepository</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ReactiveCrudRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Service</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UserRepository userRepository;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Flux&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAllUsers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userRepository.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在这个示例中，<code>ReactiveCrudRepository</code> 用于实现响应式的数据库查询<a href="./@ref.html">2</a>。</p><hr><h3 id="_3-响应式消息传递" tabindex="-1">3. <strong>响应式消息传递</strong> <a class="header-anchor" href="#_3-响应式消息传递" aria-label="Permalink to “3. 响应式消息传递”">​</a></h3><p>Spring Boot 支持通过 <strong>Spring Cloud Stream</strong> 和 <strong>Reactive Kafka</strong> 实现响应式消息传递<a href="./@ref.html">5</a>。</p><h4 id="核心特性-2" tabindex="-1">核心特性： <a class="header-anchor" href="#核心特性-2" aria-label="Permalink to “核心特性：”">​</a></h4><ul><li><strong>异步消息处理</strong>：通过非阻塞方式处理消息队列中的数据。</li><li><strong>背压支持</strong>：根据消费者能力动态调整消息处理速度。</li></ul><h4 id="示例代码-4" tabindex="-1">示例代码： <a class="header-anchor" href="#示例代码-4" aria-label="Permalink to “示例代码：”">​</a></h4><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Consumer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Flux</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">processMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> messages</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">messages</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doOnNext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Received: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">message))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span></code></pre></div><p>在这个示例中，<code>Flux</code> 用于处理消息流<a href="./@ref.html">5</a>。</p><hr><h3 id="_4-响应式安全-spring-security-reactive" tabindex="-1">4. <strong>响应式安全（Spring Security Reactive）</strong> <a class="header-anchor" href="#_4-响应式安全-spring-security-reactive" aria-label="Permalink to “4. 响应式安全（Spring Security Reactive）”">​</a></h3><p>Spring Boot 支持通过 <strong>Spring Security Reactive</strong> 实现响应式的安全控制<a href="./@ref.html">5</a>。</p><h4 id="核心特性-3" tabindex="-1">核心特性： <a class="header-anchor" href="#核心特性-3" aria-label="Permalink to “核心特性：”">​</a></h4><ul><li><strong>非阻塞认证和授权</strong>：通过异步方式处理用户认证和权限校验。</li><li><strong>响应式上下文</strong>：支持在响应式环境中传递安全上下文。</li></ul><h4 id="示例代码-5" tabindex="-1">示例代码： <a class="header-anchor" href="#示例代码-5" aria-label="Permalink to “示例代码：”">​</a></h4><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SecurityWebFilterChain </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">securityWebFilterChain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ServerHttpSecurity http){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">authorizeExchange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(exchanges</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">exchanges.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">anyExchange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">authenticated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">httpBasic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withDefaults</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span></code></pre></div><p>在这个示例中，<code>ServerHttpSecurity</code> 用于配置响应式安全规则<a href="./@ref.html">5</a>。</p><hr><h3 id="_5-响应式测试" tabindex="-1">5. <strong>响应式测试</strong> <a class="header-anchor" href="#_5-响应式测试" aria-label="Permalink to “5. 响应式测试”">​</a></h3><p>Spring Boot 提供对响应式组件的测试支持，包括 <code>WebTestClient</code> 和 <code>StepVerifier</code><a href="./@ref.html">5</a>。</p><h4 id="示例代码-6" tabindex="-1">示例代码： <a class="header-anchor" href="#示例代码-6" aria-label="Permalink to “示例代码：”">​</a></h4><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> testGetAllUsers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        webTestClient.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uri</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/users&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exchange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">expectStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isOk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">expectBodyList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(User.class).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span></code></pre></div><p>在这个示例中，<code>WebTestClient</code> 用于测试响应式 Web 接口<a href="./@ref.html">5</a>。</p><hr><h3 id="_6-响应式流处理" tabindex="-1">6. <strong>响应式流处理</strong> <a class="header-anchor" href="#_6-响应式流处理" aria-label="Permalink to “6. 响应式流处理”">​</a></h3><p>通过 <strong>Project Reactor</strong>，Spring Boot 支持对数据流进行处理，包括转换、过滤、合并等操作<a href="./@ref.html">1</a><a href="./@ref.html">3</a>。</p><h4 id="示例代码-7" tabindex="-1">示例代码： <a class="header-anchor" href="#示例代码-7" aria-label="Permalink to “示例代码：”">​</a></h4><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Flux&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; numbers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Flux.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">just</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>在这个示例中，<code>Flux</code> 用于对数据流进行过滤和转换<a href="./@ref.html">3</a>。</p><hr><h3 id="总结-19" tabindex="-1">总结 <a class="header-anchor" href="#总结-19" aria-label="Permalink to “总结”">​</a></h3><p>在 Spring Boot 中，响应式编程的应用主要包括：</p><ol><li>响应式 Web 开发（Spring WebFlux）。</li><li>响应式数据库访问（Spring Data R2DBC、Spring Data MongoDB Reactive）。</li><li>响应式消息传递（Spring Cloud Stream、Reactive Kafka）。</li><li>响应式安全（Spring Security Reactive）。</li><li>响应式测试（WebTestClient、StepVerifier）。</li><li>响应式流处理（Project Reactor）。</li></ol><p>这些技术共同构成了 Spring Boot 的响应式编程生态，适合构建高并发、低延迟的现代应用<a href="./@ref.html">1</a><a href="./@ref.html">2</a><a href="./@ref.html">5</a>。</p><h2 id="响应式数据库访问和传统的数据库访问有什么区别" tabindex="-1">响应式数据库访问和传统的数据库访问有什么区别 <a class="header-anchor" href="#响应式数据库访问和传统的数据库访问有什么区别" aria-label="Permalink to “响应式数据库访问和传统的数据库访问有什么区别”">​</a></h2><p>响应式数据库访问与传统数据库访问的主要区别在于它们的编程模型、性能特点以及适用场景。以下是两者的详细对比：</p><hr><h3 id="_1-编程模型" tabindex="-1">1. <strong>编程模型</strong> <a class="header-anchor" href="#_1-编程模型" aria-label="Permalink to “1. 编程模型”">​</a></h3><ul><li><p><strong>传统数据库访问</strong>：</p><ul><li>基于 <strong>阻塞式 I/O</strong>，使用 JDBC（Java Database Connectivity）进行数据库操作。</li><li>每个数据库操作都会阻塞当前线程，直到操作完成<a href="./@ref.html">1</a>。</li><li>适合同步编程模型，代码逻辑直观，但并发能力有限<a href="./@ref.html">3</a>。</li></ul></li><li><p><strong>响应式数据库访问</strong>：</p><ul><li>基于 <strong>非阻塞 I/O</strong>，使用 R2DBC（Reactive Relational Database Connectivity）进行数据库操作。</li><li>数据库操作不会阻塞线程，而是通过异步方式处理，线程可以继续执行其他任务<a href="./@ref.html">1</a><a href="./@ref.html">2</a>。</li><li>适合异步和响应式编程模型，代码复杂度较高，但并发能力强<a href="./@ref.html">3</a>。</li></ul></li></ul><hr><h3 id="_2-性能特点" tabindex="-1">2. <strong>性能特点</strong> <a class="header-anchor" href="#_2-性能特点" aria-label="Permalink to “2. 性能特点”">​</a></h3><ul><li><p><strong>传统数据库访问</strong>：</p><ul><li>在高并发场景下，线程阻塞会导致资源浪费，性能瓶颈明显<a href="./@ref.html">1</a>。</li><li>每个连接都需要一个独立的线程，线程创建和切换开销较大<a href="./@ref.html">3</a>。</li></ul></li><li><p><strong>响应式数据库访问</strong>：</p><ul><li>非阻塞模型能够高效利用线程资源，支持更高的并发量<a href="./@ref.html">2</a>。</li><li>通过事件驱动和异步处理，减少线程阻塞，提升系统吞吐量<a href="./@ref.html">1</a><a href="./@ref.html">3</a>。</li></ul></li></ul><hr><h3 id="_3-适用场景-1" tabindex="-1">3. <strong>适用场景</strong> <a class="header-anchor" href="#_3-适用场景-1" aria-label="Permalink to “3. 适用场景”">​</a></h3><ul><li><p><strong>传统数据库访问</strong>：</p><ul><li>适合低并发、简单业务逻辑的场景，如传统的企业应用、小型网站<a href="./@ref.html">7</a>。</li><li>对事务一致性要求高的场景，如银行系统、财务系统<a href="./@ref.html">7</a>。</li></ul></li><li><p><strong>响应式数据库访问</strong>：</p><ul><li>适合高并发、I/O 密集型场景，如实时数据处理、大规模在线服务<a href="./@ref.html">2</a><a href="./@ref.html">3</a>。</li><li>对延迟敏感的场景，如实时通信、流媒体服务<a href="./@ref.html">6</a>。</li></ul></li></ul><hr><h3 id="_4-技术实现" tabindex="-1">4. <strong>技术实现</strong> <a class="header-anchor" href="#_4-技术实现" aria-label="Permalink to “4. 技术实现”">​</a></h3><ul><li><p><strong>传统数据库访问</strong>：</p><ul><li>使用 JDBC，基于阻塞式 API，开发简单但性能受限<a href="./@ref.html">1</a>。</li><li>支持 ACID 事务，适合强一致性要求的场景<a href="./@ref.html">7</a>。</li></ul></li><li><p><strong>响应式数据库访问</strong>：</p><ul><li>使用 R2DBC，基于 Reactive Streams 规范，支持非阻塞操作<a href="./@ref.html">1</a><a href="./@ref.html">2</a>。</li><li>支持异步事务处理，但事务管理复杂度较高<a href="./@ref.html">3</a>。</li></ul></li></ul><hr><h3 id="_5-优缺点对比" tabindex="-1">5. <strong>优缺点对比</strong> <a class="header-anchor" href="#_5-优缺点对比" aria-label="Permalink to “5. 优缺点对比”">​</a></h3><table tabindex="0"><thead><tr><th><strong>特性</strong></th><th><strong>传统数据库访问</strong></th><th><strong>响应式数据库访问</strong></th></tr></thead><tbody><tr><td><strong>编程复杂度</strong></td><td>简单，同步编程模型</td><td>复杂，异步编程模型</td></tr><tr><td><strong>并发能力</strong></td><td>低，受限于线程数量</td><td>高，非阻塞模型支持高并发</td></tr><tr><td><strong>资源利用率</strong></td><td>低，线程阻塞导致资源浪费</td><td>高，线程非阻塞，资源利用率高</td></tr><tr><td><strong>适用场景</strong></td><td>低并发、强一致性场景</td><td>高并发、低延迟场景</td></tr><tr><td><strong>事务支持</strong></td><td>支持 ACID 事务，实现简单</td><td>支持异步事务，实现复杂</td></tr><tr><td><strong>技术生态</strong></td><td>成熟，工具和文档丰富</td><td>较新，工具和文档仍在完善中<a href="./@ref.html">2</a><a href="./@ref.html">3</a></td></tr></tbody></table><hr><h3 id="总结-20" tabindex="-1">总结 <a class="header-anchor" href="#总结-20" aria-label="Permalink to “总结”">​</a></h3><p>响应式数据库访问和传统数据库访问的主要区别在于：</p><ol><li><strong>编程模型</strong>：传统数据库访问是阻塞式同步模型，而响应式数据库访问是非阻塞异步模型<a href="./@ref.html">1</a><a href="./@ref.html">2</a>。</li><li><strong>性能</strong>：响应式数据库访问在高并发场景下性能更优，资源利用率更高<a href="./@ref.html">3</a>。</li><li><strong>适用场景</strong>：传统数据库访问适合低并发、强一致性场景，响应式数据库访问适合高并发、低延迟场景<a href="./@ref.html">6</a><a href="./@ref.html">7</a>。</li></ol><p>根据具体业务需求选择合适的数据库访问方式，可以显著提升系统性能和开发效率。</p><h2 id="一个请求在非响应式的后端服务中的处理响应和响应式的后端服务中的处理的过程比较" tabindex="-1">一个请求在非响应式的后端服务中的处理响应和响应式的后端服务中的处理的过程比较 <a class="header-anchor" href="#一个请求在非响应式的后端服务中的处理响应和响应式的后端服务中的处理的过程比较" aria-label="Permalink to “一个请求在非响应式的后端服务中的处理响应和响应式的后端服务中的处理的过程比较”">​</a></h2><p>在处理请求时，<strong>非响应式后端服务</strong> 和 <strong>响应式后端服务</strong> 的工作机制和性能表现有显著差异。以下是两者的处理过程和比较：</p><hr><h3 id="_1-非响应式后端服务的处理过程" tabindex="-1">1. <strong>非响应式后端服务的处理过程</strong> <a class="header-anchor" href="#_1-非响应式后端服务的处理过程" aria-label="Permalink to “1. 非响应式后端服务的处理过程”">​</a></h3><p>非响应式后端服务通常采用 <strong>同步阻塞模型</strong>，其处理请求的过程如下：</p><h4 id="处理流程" tabindex="-1">处理流程： <a class="header-anchor" href="#处理流程" aria-label="Permalink to “处理流程：”">​</a></h4><ol><li><strong>接收请求</strong>：客户端发送请求到服务器，服务器接收请求并分配一个线程处理。</li><li><strong>阻塞处理</strong>：线程会阻塞等待 I/O 操作完成（如数据库查询、文件读取等）。</li><li><strong>执行逻辑</strong>：线程执行业务逻辑，处理请求数据。</li><li><strong>返回响应</strong>：处理完成后，线程将结果返回给客户端。</li><li><strong>释放资源</strong>：线程释放资源，等待下一个请求。</li></ol><h4 id="特点" tabindex="-1">特点： <a class="header-anchor" href="#特点" aria-label="Permalink to “特点：”">​</a></h4><ul><li><strong>同步阻塞</strong>：每个请求需要一个独立的线程，线程在 I/O 操作时会阻塞，导致资源浪费。</li><li><strong>并发能力有限</strong>：线程数量受限于线程池大小，高并发时容易达到瓶颈。</li><li><strong>简单直观</strong>：代码逻辑简单，适合低并发、简单业务场景<a href="./@ref.html">1</a><a href="./@ref.html">2</a>。</li></ul><h4 id="示例-1" tabindex="-1">示例： <a class="header-anchor" href="#示例-1" aria-label="Permalink to “示例：”">​</a></h4><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RestController</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NonReactiveController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GetMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 阻塞式数据库查询</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> database.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h3 id="_2-响应式后端服务的处理过程" tabindex="-1">2. <strong>响应式后端服务的处理过程</strong> <a class="header-anchor" href="#_2-响应式后端服务的处理过程" aria-label="Permalink to “2. 响应式后端服务的处理过程”">​</a></h3><p>响应式后端服务采用 <strong>异步非阻塞模型</strong>，其处理请求的过程如下：</p><h4 id="处理流程-1" tabindex="-1">处理流程： <a class="header-anchor" href="#处理流程-1" aria-label="Permalink to “处理流程：”">​</a></h4><ol><li><strong>接收请求</strong>：客户端发送请求到服务器，服务器接收请求并分派给事件循环处理。</li><li><strong>非阻塞处理</strong>：事件循环不会阻塞等待 I/O 操作，而是注册回调函数，继续处理其他请求。</li><li><strong>执行逻辑</strong>：当 I/O 操作完成时，事件循环触发回调函数，执行业务逻辑。</li><li><strong>返回响应</strong>：处理完成后，事件循环将结果返回给客户端。</li><li><strong>复用资源</strong>：事件循环继续处理其他请求，资源利用率高。</li></ol><h4 id="特点-1" tabindex="-1">特点： <a class="header-anchor" href="#特点-1" aria-label="Permalink to “特点：”">​</a></h4><ul><li><strong>异步非阻塞</strong>：线程不会阻塞在 I/O 操作上，可以处理更多请求。</li><li><strong>高并发能力</strong>：通过事件驱动模型，支持更高的并发量。</li><li><strong>复杂但高效</strong>：代码逻辑复杂，但适合高并发、I/O 密集型场景<a href="./@ref.html">1</a><a href="./@ref.html">3</a>。</li></ul><h4 id="示例-2" tabindex="-1">示例： <a class="header-anchor" href="#示例-2" aria-label="Permalink to “示例：”">​</a></h4><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RestController</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ReactiveController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GetMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Mono&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 非阻塞式数据库查询</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> database.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">queryReactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h3 id="_3-两者的比较" tabindex="-1">3. <strong>两者的比较</strong> <a class="header-anchor" href="#_3-两者的比较" aria-label="Permalink to “3. 两者的比较”">​</a></h3><table tabindex="0"><thead><tr><th><strong>特性</strong></th><th><strong>非响应式后端服务</strong></th><th><strong>响应式后端服务</strong></th></tr></thead><tbody><tr><td><strong>模型</strong></td><td>同步阻塞</td><td>异步非阻塞</td></tr><tr><td><strong>线程使用</strong></td><td>每个请求需要一个独立线程</td><td>一个线程可以处理多个请求</td></tr><tr><td><strong>并发能力</strong></td><td>低，受限于线程数量</td><td>高，支持高并发</td></tr><tr><td><strong>资源利用率</strong></td><td>低，线程阻塞导致资源浪费</td><td>高，线程非阻塞，资源利用率高</td></tr><tr><td><strong>代码复杂度</strong></td><td>简单，直观</td><td>复杂，需要理解异步编程</td></tr><tr><td><strong>适用场景</strong></td><td>低并发、简单业务逻辑</td><td>高并发、I/O 密集型任务</td></tr></tbody></table><hr><h3 id="_4-总结-3" tabindex="-1">4. <strong>总结</strong> <a class="header-anchor" href="#_4-总结-3" aria-label="Permalink to “4. 总结”">​</a></h3><ul><li><strong>非响应式后端服务</strong>：适合低并发、简单业务场景，代码简单但性能有限。</li><li><strong>响应式后端服务</strong>：适合高并发、I/O 密集型场景，性能优异但代码复杂度较高。</li></ul><p>根据具体需求选择合适的技术栈，可以显著提升系统的性能和开发效率<a href="./@ref.html">1</a><a href="./@ref.html">3</a>。</p><h2 id="可以举一个具体的例子来详细说明吗-一个线程在从处理开始到结束-每个时刻所进行的任务" tabindex="-1">可以举一个具体的例子来详细说明吗？一个线程在从处理开始到结束，每个时刻所进行的任务 <a class="header-anchor" href="#可以举一个具体的例子来详细说明吗-一个线程在从处理开始到结束-每个时刻所进行的任务" aria-label="Permalink to “可以举一个具体的例子来详细说明吗？一个线程在从处理开始到结束，每个时刻所进行的任务”">​</a></h2><p>好的！下面通过一个具体的例子，详细说明一个线程在响应式服务中如何从处理开始到结束，每个时刻所执行的任务。我们将使用 <strong>Spring WebFlux</strong> 作为响应式框架，并结合一个简单的 HTTP 请求处理场景来说明。</p><hr><h3 id="场景描述" tabindex="-1"><strong>场景描述</strong> <a class="header-anchor" href="#场景描述" aria-label="Permalink to “场景描述”">​</a></h3><p>我们有一个简单的用户服务，提供以下功能：</p><ol><li>根据用户 ID 查询用户信息（<code>/users/{id}</code>）。</li><li>查询用户信息时，需要从数据库中异步获取数据。</li><li>查询完成后，将结果返回给客户端。</li></ol><p>假设我们使用 <strong>MongoDB</strong> 作为数据库，并通过 <strong>ReactiveMongoRepository</strong> 实现异步数据库操作。</p><hr><h3 id="代码实现-3" tabindex="-1"><strong>代码实现</strong> <a class="header-anchor" href="#代码实现-3" aria-label="Permalink to “代码实现”">​</a></h3><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RestController</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UserRepository userRepository;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GetMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/users/{id}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Mono&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getUserById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PathVariable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 1. 接收请求，开始处理</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Thread: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">currentThread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; - 开始处理请求&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 2. 异步查询数据库</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Mono&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; userMono </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userRepository.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doOnNext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Thread: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">currentThread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; - 查询到用户: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 3. 返回结果</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userMono</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doOnSuccess</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Thread: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">currentThread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; - 请求处理完成&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h3 id="线程执行过程" tabindex="-1"><strong>线程执行过程</strong> <a class="header-anchor" href="#线程执行过程" aria-label="Permalink to “线程执行过程”">​</a></h3><p>假设客户端发起一个请求 <code>GET /users/123</code>，以下是一个线程（假设为 <code>Thread-1</code>）在处理该请求时的具体执行过程：</p><h4 id="时刻-1-接收请求" tabindex="-1"><strong>时刻 1：接收请求</strong> <a class="header-anchor" href="#时刻-1-接收请求" aria-label="Permalink to “时刻 1：接收请求”">​</a></h4><ul><li>线程 <code>Thread-1</code> 接收到客户端请求，开始执行 <code>getUserById</code> 方法。</li><li>日志输出：<div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>Thread: Thread-1 - 开始处理请求</span></span></code></pre></div></li></ul><h4 id="时刻-2-发起异步数据库查询" tabindex="-1"><strong>时刻 2：发起异步数据库查询</strong> <a class="header-anchor" href="#时刻-2-发起异步数据库查询" aria-label="Permalink to “时刻 2：发起异步数据库查询”">​</a></h4><ul><li>线程 <code>Thread-1</code> 调用 <code>userRepository.findById(id)</code>，这是一个<strong>非阻塞</strong>操作。</li><li>线程不会等待数据库查询结果，而是立即返回一个 <code>Mono&lt;User&gt;</code> 对象。</li><li>数据库查询任务被提交到<strong>事件循环</strong>中，由底层的异步 I/O 线程池处理。</li></ul><h4 id="时刻-3-线程释放" tabindex="-1"><strong>时刻 3：线程释放</strong> <a class="header-anchor" href="#时刻-3-线程释放" aria-label="Permalink to “时刻 3：线程释放”">​</a></h4><ul><li>线程 <code>Thread-1</code> 完成任务后，立即被释放，可以继续处理其他请求。</li><li>此时，<code>Thread-1</code> 不再与当前请求关联，而是可以处理其他客户端请求。</li></ul><h4 id="时刻-4-数据库查询完成" tabindex="-1"><strong>时刻 4：数据库查询完成</strong> <a class="header-anchor" href="#时刻-4-数据库查询完成" aria-label="Permalink to “时刻 4：数据库查询完成”">​</a></h4><ul><li>数据库查询完成后，事件循环将结果传递给 <code>Mono&lt;User&gt;</code> 的订阅者。</li><li>日志输出：<div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>Thread: nioEventLoopGroup-2-1 - 查询到用户: User(id=123, name=John)</span></span></code></pre></div><blockquote><p>注意：这里的线程是 <code>nioEventLoopGroup-2-1</code>，它是 Netty 的 I/O 线程池中的线程，负责处理异步任务。</p></blockquote></li></ul><h4 id="时刻-5-返回结果" tabindex="-1"><strong>时刻 5：返回结果</strong> <a class="header-anchor" href="#时刻-5-返回结果" aria-label="Permalink to “时刻 5：返回结果”">​</a></h4><ul><li>结果被包装到 <code>Mono&lt;User&gt;</code> 中，返回给客户端。</li><li>日志输出：<div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>Thread: nioEventLoopGroup-2-1 - 请求处理完成</span></span></code></pre></div></li></ul><hr><h3 id="线程任务总结" tabindex="-1"><strong>线程任务总结</strong> <a class="header-anchor" href="#线程任务总结" aria-label="Permalink to “线程任务总结”">​</a></h3><table tabindex="0"><thead><tr><th>时刻</th><th>线程名称</th><th>任务描述</th></tr></thead><tbody><tr><td>1</td><td><code>Thread-1</code></td><td>接收请求，开始处理。</td></tr><tr><td>2</td><td><code>Thread-1</code></td><td>发起异步数据库查询，立即返回 <code>Mono&lt;User&gt;</code>，线程释放。</td></tr><tr><td>3</td><td><code>Thread-1</code></td><td>线程被释放，可以处理其他请求。</td></tr><tr><td>4</td><td><code>nioEventLoopGroup-2-1</code></td><td>数据库查询完成，处理结果并触发 <code>Mono&lt;User&gt;</code> 的订阅者。</td></tr><tr><td>5</td><td><code>nioEventLoopGroup-2-1</code></td><td>将结果返回给客户端，完成请求处理。</td></tr></tbody></table><hr><h3 id="关键点" tabindex="-1"><strong>关键点</strong> <a class="header-anchor" href="#关键点" aria-label="Permalink to “关键点”">​</a></h3><ol><li><strong>非阻塞</strong>：线程不会因为等待数据库查询而阻塞，而是立即返回并处理其他请求。</li><li><strong>异步 I/O</strong>：数据库查询等 I/O 操作由底层的异步线程池（如 Netty 的 <code>EventLoopGroup</code>）处理。</li><li><strong>线程复用</strong>：一个线程可以同时处理多个请求，提高了并发性能。</li><li><strong>事件驱动</strong>：通过事件循环机制，任务完成后会自动触发回调，无需线程主动轮询。</li></ol><hr><h3 id="总结-21" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结-21" aria-label="Permalink to “总结”">​</a></h3><p>在这个例子中，一个线程（<code>Thread-1</code>）在接收到请求后，发起异步数据库查询并立即释放，继续处理其他请求。数据库查询完成后，由另一个线程（<code>nioEventLoopGroup-2-1</code> ）处理结果并返回给客户端。通过这种非阻塞和事件驱动的方式，一个线程可以高效地处理多个请求，显著提升了系统的并发能力。</p><h2 id="在响应式编程中-它的并发量会收到数据库连接池大小的限制-那这不是和阻塞式的服务一样吗" tabindex="-1">在响应式编程中，它的并发量会收到数据库连接池大小的限制，那这不是和阻塞式的服务一样吗 <a class="header-anchor" href="#在响应式编程中-它的并发量会收到数据库连接池大小的限制-那这不是和阻塞式的服务一样吗" aria-label="Permalink to “在响应式编程中，它的并发量会收到数据库连接池大小的限制，那这不是和阻塞式的服务一样吗”">​</a></h2><p>在响应式编程中，虽然并发量理论上受到数据库连接池大小的限制，但这与阻塞式服务有本质区别。以下是详细分析：</p><hr><h3 id="_1-响应式编程与阻塞式服务的区别" tabindex="-1"><strong>1. 响应式编程与阻塞式服务的区别</strong> <a class="header-anchor" href="#_1-响应式编程与阻塞式服务的区别" aria-label="Permalink to “1. 响应式编程与阻塞式服务的区别”">​</a></h3><ul><li><p><strong>阻塞式服务</strong>：</p><ul><li>在阻塞式模型中，每个请求通常会占用一个线程，并且线程在等待数据库查询或其他 I/O 操作完成时会被阻塞。这意味着线程资源被浪费，无法处理其他请求。</li><li>当数据库连接池耗尽时，新的请求必须等待，直到有连接被释放。这种等待是<strong>同步阻塞</strong>的，导致系统吞吐量下降<a href="./@ref.html">1</a><a href="./@ref.html">18</a>。</li></ul></li><li><p><strong>响应式编程</strong>：</p><ul><li>响应式模型采用<strong>非阻塞</strong>和<strong>事件驱动</strong>的方式。线程不会因为等待 I/O 操作而阻塞，而是可以继续处理其他请求。</li><li>当数据库连接池耗尽时，新的请求不会被立即拒绝，而是被放入队列中等待。由于线程是非阻塞的，系统仍然可以处理其他任务（如计算、缓存操作等），直到数据库连接可用<a href="./@ref.html">11</a><a href="./@ref.html">27</a>。</li></ul></li></ul><hr><h3 id="_2-数据库连接池的限制" tabindex="-1"><strong>2. 数据库连接池的限制</strong> <a class="header-anchor" href="#_2-数据库连接池的限制" aria-label="Permalink to “2. 数据库连接池的限制”">​</a></h3><ul><li>在响应式编程中，数据库连接池的大小确实会影响系统的并发能力。如果连接池过小，可能会导致请求排队等待连接，从而影响响应时间。</li><li>但响应式编程的优势在于： <ul><li><strong>资源高效利用</strong>：线程不会被阻塞，可以处理其他任务，而不是空闲等待。</li><li><strong>背压机制</strong>：响应式框架（如 Reactor）支持背压（Backpressure），可以根据消费者的处理能力动态调整数据流，避免系统过载<a href="./@ref.html">18</a><a href="./@ref.html">27</a>。</li><li><strong>异步操作</strong>：即使连接池耗尽，响应式服务仍然可以通过异步队列处理请求，而不是直接阻塞<a href="./@ref.html">11</a><a href="./@ref.html">29</a>。</li></ul></li></ul><hr><h3 id="_3-如何优化连接池与响应式编程的结合" tabindex="-1"><strong>3. 如何优化连接池与响应式编程的结合</strong> <a class="header-anchor" href="#_3-如何优化连接池与响应式编程的结合" aria-label="Permalink to “3. 如何优化连接池与响应式编程的结合”">​</a></h3><ul><li><p><strong>合理配置连接池</strong>：</p><ul><li>根据应用的并发量和数据库性能，设置合适的连接池大小。例如，<code>minimumIdle</code> 和 <code>maximumPoolSize</code> 需要根据实际负载进行调整<a href="./@ref.html">1</a><a href="./@ref.html">38</a>。</li><li>使用高性能连接池（如 HikariCP）以减少连接获取的开销<a href="./@ref.html">1</a>。</li></ul></li><li><p><strong>异步数据库驱动</strong>：</p><ul><li>使用支持响应式编程的数据库驱动（如 R2DBC），避免传统 JDBC 的阻塞问题<a href="./@ref.html">11</a><a href="./@ref.html">27</a>。</li></ul></li><li><p><strong>缓存与负载均衡</strong>：</p><ul><li>通过缓存减少对数据库的直接访问，降低连接池的压力。</li><li>使用负载均衡将请求分发到多个服务实例，进一步提高并发能力<a href="./@ref.html">43</a>。</li></ul></li></ul><hr><h3 id="_4-总结-4" tabindex="-1"><strong>4. 总结</strong> <a class="header-anchor" href="#_4-总结-4" aria-label="Permalink to “4. 总结”">​</a></h3><p>虽然响应式编程中数据库连接池的大小限制了并发量，但由于其<strong>非阻塞</strong>和<strong>事件驱动</strong> 的特性，系统仍然能够高效利用资源，避免线程浪费。这与阻塞式服务的同步等待有本质区别。通过合理配置连接池、使用异步数据库驱动以及引入缓存和负载均衡，可以进一步优化响应式服务的并发性能<a href="./@ref.html">1</a><a href="./@ref.html">11</a><a href="./@ref.html">27</a><a href="./@ref.html">38</a> 。</p><h2 id="在阻塞式的io中-数据库的处理线程就是处理请求的那个线程吗" tabindex="-1">在阻塞式的IO中，数据库的处理线程就是处理请求的那个线程吗 <a class="header-anchor" href="#在阻塞式的io中-数据库的处理线程就是处理请求的那个线程吗" aria-label="Permalink to “在阻塞式的IO中，数据库的处理线程就是处理请求的那个线程吗”">​</a></h2><p>在阻塞式IO模型中，<strong>数据库的处理线程通常就是处理请求的那个线程</strong>。以下是详细说明：</p><hr><h3 id="_1-阻塞式io的工作机制" tabindex="-1"><strong>1. 阻塞式IO的工作机制</strong> <a class="header-anchor" href="#_1-阻塞式io的工作机制" aria-label="Permalink to “1. 阻塞式IO的工作机制”">​</a></h3><p>在阻塞式IO中，线程在执行IO操作（如数据库查询）时会被阻塞，直到操作完成。这意味着：</p><ul><li>当线程发起一个数据库查询请求时，它会一直等待数据库返回结果，期间无法执行其他任务。</li><li>处理请求的线程与执行数据库操作的线程是同一个线程<a href="./@ref.html">1</a><a href="./@ref.html">46</a>。</li></ul><hr><h3 id="_2-具体流程" tabindex="-1"><strong>2. 具体流程</strong> <a class="header-anchor" href="#_2-具体流程" aria-label="Permalink to “2. 具体流程”">​</a></h3><p>以处理一个HTTP请求为例：</p><ol><li><strong>接收请求</strong>：线程接收客户端请求，开始处理。</li><li><strong>发起数据库查询</strong>：线程向数据库发起查询请求，并进入阻塞状态，等待数据库返回结果。</li><li><strong>数据库操作完成</strong>：数据库返回查询结果，线程恢复执行。</li><li><strong>返回响应</strong>：线程将数据库结果封装为响应，返回给客户端<a href="./@ref.html">46</a><a href="./@ref.html">49</a>。</li></ol><p>在这个过程中，<strong>处理请求的线程和数据库操作的线程是同一个线程</strong>。</p><hr><h3 id="_3-阻塞式io的线程模型" tabindex="-1"><strong>3. 阻塞式IO的线程模型</strong> <a class="header-anchor" href="#_3-阻塞式io的线程模型" aria-label="Permalink to “3. 阻塞式IO的线程模型”">​</a></h3><p>在传统的阻塞式IO服务模型中：</p><ul><li>每个请求都会分配一个独立的线程来处理。</li><li>如果请求涉及数据库操作，该线程会一直阻塞，直到数据库操作完成<a href="./@ref.html">34</a><a href="./@ref.html">41</a>。</li></ul><p>这种模型的缺点是：</p><ul><li>线程在等待数据库操作时会浪费资源，无法处理其他请求。</li><li>当并发请求量较大时，线程数量会急剧增加，导致系统资源耗尽<a href="./@ref.html">34</a><a href="./@ref.html">49</a>。</li></ul><hr><h3 id="_4-与响应式模型的区别" tabindex="-1"><strong>4. 与响应式模型的区别</strong> <a class="header-anchor" href="#_4-与响应式模型的区别" aria-label="Permalink to “4. 与响应式模型的区别”">​</a></h3><p>在响应式编程模型中：</p><ul><li>线程不会因为等待数据库操作而阻塞，而是继续处理其他请求。</li><li>数据库操作完成后，通过回调机制通知线程处理结果<a href="./@ref.html">34</a><a href="./@ref.html">41</a>。</li></ul><hr><h3 id="总结-22" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结-22" aria-label="Permalink to “总结”">​</a></h3><p>在阻塞式IO中，<strong>数据库的处理线程就是处理请求的那个线程</strong> 。这种模型虽然简单，但在高并发场景下效率较低，因为线程会因等待IO操作而阻塞，无法充分利用系统资源。相比之下，响应式编程模型通过非阻塞和事件驱动的方式，能够更好地处理高并发请求<a href="./@ref.html">1</a><a href="./@ref.html">34</a><a href="./@ref.html">41</a>。</p><h2 id="在使用-r2dbc-时-处理数据库操作的线程如何设置" tabindex="-1">在使用 R2DBC 时，处理数据库操作的线程如何设置 <a class="header-anchor" href="#在使用-r2dbc-时-处理数据库操作的线程如何设置" aria-label="Permalink to “在使用 R2DBC 时，处理数据库操作的线程如何设置”">​</a></h2><p>在使用 R2DBC（Reactive Relational Database Connectivity）时，处理数据库操作的线程设置主要依赖于<strong>非阻塞</strong>和<strong>事件驱动</strong> 的机制，而不是传统的线程池模型。以下是关于如何设置和处理线程的详细说明：</p><hr><h3 id="_1-r2dbc-的线程模型" tabindex="-1"><strong>1. R2DBC 的线程模型</strong> <a class="header-anchor" href="#_1-r2dbc-的线程模型" aria-label="Permalink to “1. R2DBC 的线程模型”">​</a></h3><p>R2DBC 是基于反应式编程的数据库访问规范，其核心特点是<strong>非阻塞</strong>和<strong>异步</strong>。这意味着：</p><ul><li>线程不会因为等待数据库操作而阻塞，而是可以继续处理其他任务。</li><li>数据库操作（如查询、更新）由底层的异步 I/O 线程（如 Netty 的 <code>EventLoopGroup</code>）处理，而不是传统的阻塞式线程池。</li></ul><hr><h3 id="_2-如何设置线程" tabindex="-1"><strong>2. 如何设置线程</strong> <a class="header-anchor" href="#_2-如何设置线程" aria-label="Permalink to “2. 如何设置线程”">​</a></h3><p>在 R2DBC 中，线程的设置主要通过以下方式实现：</p><h4 id="_1-使用连接池配置" tabindex="-1"><strong>(1) 使用连接池配置</strong> <a class="header-anchor" href="#_1-使用连接池配置" aria-label="Permalink to “(1) 使用连接池配置”">​</a></h4><p>R2DBC 支持连接池（如 <code>r2dbc-pool</code>），可以通过配置连接池参数来优化线程的使用。例如：</p><ul><li><strong>初始连接数</strong>：<code>initialSize</code>，设置连接池启动时创建的连接数量。</li><li><strong>最大连接数</strong>：<code>maxSize</code>，设置连接池允许的最大连接数量。</li><li><strong>最大空闲时间</strong>：<code>maxIdleTime</code>，设置连接在空闲时的最大存活时间。</li><li><strong>获取连接超时时间</strong>：<code>maxAcquireTime</code>，设置从连接池获取连接的最大等待时间。</li></ul><p>示例配置：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ConnectionPoolConfiguration poolConfiguration</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ConnectionPoolConfiguration.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(connectionFactory)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initialSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 初始连接数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">maxSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 最大连接数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">maxIdleTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Duration.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ofMinutes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 最大空闲时间</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">maxAcquireTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Duration.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ofSeconds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取连接超时时间</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ConnectionPool connectionPool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConnectionPool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(poolConfiguration);</span></span></code></pre></div><p><a href="./@ref.html">1</a></p><h4 id="_2-使用异步-i-o-线程" tabindex="-1"><strong>(2) 使用异步 I/O 线程</strong> <a class="header-anchor" href="#_2-使用异步-i-o-线程" aria-label="Permalink to “(2) 使用异步 I/O 线程”">​</a></h4><p>R2DBC 依赖于底层的异步 I/O 框架（如 Netty），默认情况下，数据库操作由 Netty 的 <code>EventLoopGroup</code> 线程处理。这些线程是非阻塞的，能够高效处理多个并发请求。</p><p>如果需要调整 Netty 的线程池大小，可以通过以下方式配置：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">EventLoopGroup eventLoopGroup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NioEventLoopGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置线程数为 4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ConnectionFactoryOptions options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ConnectionFactoryOptions.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">option</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(EventLoopGroup.class,eventLoopGroup)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><hr><h3 id="_3-线程处理的流程" tabindex="-1"><strong>3. 线程处理的流程</strong> <a class="header-anchor" href="#_3-线程处理的流程" aria-label="Permalink to “3. 线程处理的流程”">​</a></h3><p>以下是 R2DBC 处理数据库操作时线程的典型流程：</p><ol><li><strong>接收请求</strong>：请求由应用线程（如 WebFlux 的线程）接收。</li><li><strong>提交数据库操作</strong>：应用线程将数据库操作提交给 R2DBC 的 <code>ConnectionFactory</code>，然后立即释放，继续处理其他请求。</li><li><strong>异步执行</strong>：数据库操作由 Netty 的 <code>EventLoopGroup</code> 线程执行，结果通过回调机制返回。</li><li><strong>返回结果</strong>：结果由 Netty 线程返回给客户端。</li></ol><hr><h3 id="_4-与传统阻塞式模型的区别" tabindex="-1"><strong>4. 与传统阻塞式模型的区别</strong> <a class="header-anchor" href="#_4-与传统阻塞式模型的区别" aria-label="Permalink to “4. 与传统阻塞式模型的区别”">​</a></h3><ul><li><strong>阻塞式模型</strong>：每个数据库操作会占用一个线程，线程在等待数据库响应时会被阻塞，导致资源浪费。</li><li><strong>R2DBC 模型</strong>：线程不会被阻塞，数据库操作由异步 I/O 线程处理，线程资源利用率更高。</li></ul><hr><h3 id="_5-优化建议" tabindex="-1"><strong>5. 优化建议</strong> <a class="header-anchor" href="#_5-优化建议" aria-label="Permalink to “5. 优化建议”">​</a></h3><ul><li><strong>合理配置连接池</strong>：根据应用的并发量和数据库性能，设置合适的连接池参数（如 <code>maxSize</code>、<code>maxIdleTime</code> 等）<a href="./@ref.html">1</a>。</li><li><strong>使用异步数据库驱动</strong>：确保使用支持 R2DBC 的数据库驱动（如 <code>r2dbc-mysql</code>、<code>r2dbc-postgres</code>），以避免阻塞问题<a href="./@ref.html">13</a>。</li><li><strong>监控线程池性能</strong>：通过监控工具（如 Micrometer）观察线程池的使用情况，及时调整配置<a href="./@ref.html">39</a>。</li></ul><hr><h3 id="总结-23" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结-23" aria-label="Permalink to “总结”">​</a></h3><p>在 R2DBC 中，处理数据库操作的线程主要由底层的异步 I/O 线程（如 Netty 的 <code>EventLoopGroup</code>）负责，而不是传统的阻塞式线程池。通过合理配置连接池和优化异步 I/O 线程，可以显著提升系统的并发性能和资源利用率。</p><h1 id="mono" tabindex="-1">Mono <a class="header-anchor" href="#mono" aria-label="Permalink to “Mono”">​</a></h1><h2 id="在java的响应式中-mono是什么" tabindex="-1">在java的响应式中，mono是什么 <a class="header-anchor" href="#在java的响应式中-mono是什么" aria-label="Permalink to “在java的响应式中，mono是什么”">​</a></h2><p>在 Java 的响应式编程中，<strong>Mono</strong> 是 <strong>Reactor</strong> 库中的一个核心类，用于表示一个 <strong>异步的、单值的数据流</strong>。它代表了一个可能包含 <strong>零个或一个元素</strong> 的序列，通常用于处理返回单个结果或没有结果的异步操作。</p><h3 id="mono-的主要特点" tabindex="-1"><strong>Mono 的主要特点</strong> <a class="header-anchor" href="#mono-的主要特点" aria-label="Permalink to “Mono 的主要特点”">​</a></h3><ol><li><strong>单值流</strong>：Mono 用于表示最多包含一个元素的流，适合处理单个结果或空值的场景。</li><li><strong>异步非阻塞</strong>：Mono 的操作是非阻塞的，适合处理 I/O 密集型任务，如数据库查询、网络请求等。</li><li><strong>丰富的操作符</strong>：Mono 提供了多种操作符（如 <code>map</code>、<code>flatMap</code>、<code>filter</code> 等），可以对数据进行转换和处理。</li><li><strong>背压支持</strong>：Mono 遵循 Reactive Streams 规范，支持背压机制，确保生产者和消费者之间的速率平衡。</li></ol><h3 id="mono-的常见使用场景" tabindex="-1"><strong>Mono 的常见使用场景</strong> <a class="header-anchor" href="#mono-的常见使用场景" aria-label="Permalink to “Mono 的常见使用场景”">​</a></h3><ol><li><strong>数据库查询</strong>：查询单个记录或返回单个结果的操作。</li><li><strong>网络请求</strong>：发送 HTTP 请求并接收单个响应。</li><li><strong>任务执行</strong>：执行异步任务并返回单个结果。</li></ol><h3 id="mono-的示例代码" tabindex="-1"><strong>Mono 的示例代码</strong> <a class="header-anchor" href="#mono-的示例代码" aria-label="Permalink to “Mono 的示例代码”">​</a></h3><p>以下是一个简单的 Mono 使用示例：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reactor.core.publisher.Mono;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MonoExample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 创建一个包含单个值的 Mono</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Mono&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; mono </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Mono.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">just</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, Mono!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 订阅并处理 Mono 中的值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        mono.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Received: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在这个示例中，<code>Mono.just</code> 创建了一个包含单个值的 Mono，<code>subscribe</code> 方法用于订阅并处理 Mono 中的值。</p><h3 id="mono-的操作符" tabindex="-1"><strong>Mono 的操作符</strong> <a class="header-anchor" href="#mono-的操作符" aria-label="Permalink to “Mono 的操作符”">​</a></h3><p>Mono 提供了多种操作符来处理数据，例如：</p><ul><li><strong><code>map</code></strong>：对 Mono 中的值进行转换。</li><li><strong><code>flatMap</code></strong>：将 Mono 中的值转换为另一个 Mono。</li><li><strong><code>filter</code></strong>：过滤 Mono 中的值。</li></ul><p>示例：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Mono&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; mono</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Mono.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">just</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        mono.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Result: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result));</span></span></code></pre></div><h3 id="mono-与-flux-的区别" tabindex="-1"><strong>Mono 与 Flux 的区别</strong> <a class="header-anchor" href="#mono-与-flux-的区别" aria-label="Permalink to “Mono 与 Flux 的区别”">​</a></h3><ul><li><strong>Mono</strong>：用于处理 <strong>单个值或空值</strong> 的异步序列。</li><li><strong>Flux</strong>：用于处理 <strong>多个值</strong> 的异步序列，适合流式数据或集合操作<a href="./@ref.html">4</a>。</li></ul><h3 id="总结-24" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结-24" aria-label="Permalink to “总结”">​</a></h3><p>Mono 是 Java 响应式编程中用于处理 <strong>单值异步操作</strong> 的核心类，适合处理单个结果或空值的场景。它通过异步非阻塞的机制和丰富的操作符，能够高效地处理 I/O 密集型任务，并支持背压机制，确保系统的稳定性<a href="./@ref.html">1</a><a href="./@ref.html">4</a>。</p><h2 id="mono-是如何实现非阻塞的" tabindex="-1">Mono 是如何实现非阻塞的 <a class="header-anchor" href="#mono-是如何实现非阻塞的" aria-label="Permalink to “Mono 是如何实现非阻塞的”">​</a></h2><p><strong>Mono</strong> 是 <strong>Reactor</strong> 库中的一个核心类，用于表示一个 <strong>异步的、单值的数据流</strong>。它通过 <strong>事件驱动</strong> 和 <strong>回调机制</strong> 实现了非阻塞的特性。以下是 Mono 实现非阻塞的具体机制：</p><hr><h3 id="_1-事件驱动模型" tabindex="-1">1. <strong>事件驱动模型</strong> <a class="header-anchor" href="#_1-事件驱动模型" aria-label="Permalink to “1. 事件驱动模型”">​</a></h3><p>Mono 基于 <strong>事件驱动模型</strong>，其核心思想是：</p><ul><li><strong>事件源</strong>：Mono 本身是一个事件源，表示一个可能产生单值或空值的异步操作。</li><li><strong>观察者</strong>：通过 <code>subscribe</code> 方法订阅 Mono 的观察者，会在事件发生时被通知。</li><li><strong>事件循环</strong>：Mono 的操作由事件循环驱动，线程不会阻塞在 I/O 操作上，而是继续处理其他任务。</li></ul><p>这种模型使得 Mono 能够高效处理异步操作，避免线程阻塞<a href="./@ref.html">1</a>。</p><hr><h3 id="_2-回调机制" tabindex="-1">2. <strong>回调机制</strong> <a class="header-anchor" href="#_2-回调机制" aria-label="Permalink to “2. 回调机制”">​</a></h3><p>Mono 通过 <strong>回调机制</strong> 实现非阻塞：</p><ul><li><strong>订阅触发执行</strong>：Mono 的异步操作只有在被订阅时才会执行。例如：<div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Mono.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">just</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Received: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value));</span></span></code></pre></div>这里的 <code>subscribe</code> 方法触发了 Mono 的执行，并通过回调函数处理结果。</li><li><strong>异步通知</strong>：当 Mono 的异步操作完成时，会通过回调函数通知观察者，线程不会阻塞在等待结果上<a href="./@ref.html">1</a>。</li></ul><hr><h3 id="_3-非阻塞-i-o" tabindex="-1">3. <strong>非阻塞 I/O</strong> <a class="header-anchor" href="#_3-非阻塞-i-o" aria-label="Permalink to “3. 非阻塞 I/O”">​</a></h3><p>Mono 内部的操作是 <strong>非阻塞 I/O</strong> 的，例如数据库查询、网络请求等：</p><ul><li><strong>异步操作</strong>：Mono 将 I/O 操作封装为异步任务，线程不会阻塞在 I/O 操作上。</li><li><strong>回调处理</strong>：当 I/O 操作完成时，Mono 通过回调机制将结果传递给观察者<a href="./@ref.html">1</a><a href="./@ref.html">2</a>。</li></ul><hr><h3 id="_4-线程调度" tabindex="-1">4. <strong>线程调度</strong> <a class="header-anchor" href="#_4-线程调度" aria-label="Permalink to “4. 线程调度”">​</a></h3><p>Mono 使用 <strong>Reactor 调度器（Scheduler）</strong> 控制任务的执行线程：</p><ul><li><strong>事件循环线程</strong>：负责监听事件和分发任务。</li><li><strong>工作线程</strong>：通过调度器（如 <code>Schedulers.parallel()</code>）执行异步任务。</li><li><strong>线程复用</strong>：由于线程不会阻塞，少量线程可以高效处理大量并发请求<a href="./@ref.html">1</a><a href="./@ref.html">2</a>。</li></ul><hr><h3 id="_5-背压支持" tabindex="-1">5. <strong>背压支持</strong> <a class="header-anchor" href="#_5-背压支持" aria-label="Permalink to “5. 背压支持”">​</a></h3><p>Mono 遵循 <strong>Reactive Streams 规范</strong>，支持 <strong>背压（Backpressure）</strong> 机制：</p><ul><li><strong>速率控制</strong>：当生产者（Mono）和消费者（观察者）的速率不匹配时，背压机制会调节数据流速率，避免系统过载<a href="./@ref.html">1</a>。</li></ul><hr><h3 id="_6-示例代码" tabindex="-1">6. <strong>示例代码</strong> <a class="header-anchor" href="#_6-示例代码" aria-label="Permalink to “6. 示例代码”">​</a></h3><p>以下是一个简单的 Mono 非阻塞示例：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Mono.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromCallable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 模拟一个耗时操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Result&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribeOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Schedulers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parallel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 指定线程池</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Received: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result));</span></span></code></pre></div><p>在这个示例中：</p><ul><li><code>fromCallable</code> 封装了一个耗时操作，但不会阻塞线程。</li><li><code>subscribeOn</code> 指定了任务执行的线程池。</li><li><code>subscribe</code> 触发任务执行，并通过回调处理结果<a href="./@ref.html">1</a><a href="./@ref.html">2</a>。</li></ul><hr><h3 id="总结-25" tabindex="-1">总结 <a class="header-anchor" href="#总结-25" aria-label="Permalink to “总结”">​</a></h3><p>Mono 通过 <strong>事件驱动模型</strong>、<strong>回调机制</strong>、<strong>非阻塞 I/O</strong> 和 <strong>线程调度</strong> 实现了非阻塞的特性。它的核心设计使得线程不会阻塞在异步操作上，从而高效处理高并发请求，适合 I/O 密集型任务<a href="./@ref.html">1</a><a href="./@ref.html">2</a>。</p>`,1160)])])}const o=i(h,[["render",t]]);export{g as __pageData,o as default};
