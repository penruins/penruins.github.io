import{_ as i,c as a,o as n,af as h}from"./chunks/framework.Bhntpte7.js";const g=JSON.parse('{"title":"java 密码学","description":"","frontmatter":{"date":"","draft":false,"title":"java 密码学"},"headers":[],"relativePath":"computer-science/java/java-密码学.md","filePath":"computer-science/java/java-密码学.md"}'),t={name:"computer-science/java/java-密码学.md"};function l(e,s,k,p,r,E){return n(),a("div",null,[...s[0]||(s[0]=[h(`<h2 id="在java中如何使用aes加密算法" tabindex="-1">在java中如何使用AES加密算法 <a class="header-anchor" href="#在java中如何使用aes加密算法" aria-label="Permalink to “在java中如何使用AES加密算法”">​</a></h2><p>在 Java 中使用 AES 加密算法可以通过 <code>javax.crypto</code> 包中的类实现。以下是详细的步骤和示例代码：</p><hr><h3 id="_1-导入必要的包" tabindex="-1"><strong>1. 导入必要的包</strong> <a class="header-anchor" href="#_1-导入必要的包" aria-label="Permalink to “1. 导入必要的包”">​</a></h3><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> javax.crypto.Cipher;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> javax.crypto.KeyGenerator;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> javax.crypto.SecretKey;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> javax.crypto.spec.SecretKeySpec;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.Base64;</span></span></code></pre></div><hr><h3 id="_2-生成-aes-密钥" tabindex="-1"><strong>2. 生成 AES 密钥</strong> <a class="header-anchor" href="#_2-生成-aes-密钥" aria-label="Permalink to “2. 生成 AES 密钥”">​</a></h3><p>AES 密钥可以通过 <code>KeyGenerator</code> 生成，支持 128 位、192 位和 256 位密钥长度。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SecretKey </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generateKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> keySize)throws Exception{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        KeyGenerator keyGen</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">KeyGenerator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;AES&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        keyGen.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(keySize); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 128, 192, 或 256</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> keyGen.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generateKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span></code></pre></div><hr><h3 id="_3-加密方法" tabindex="-1"><strong>3. 加密方法</strong> <a class="header-anchor" href="#_3-加密方法" aria-label="Permalink to “3. 加密方法”">​</a></h3><p>使用 <code>Cipher</code> 类进行加密，并指定加密模式和填充方式（如 <code>AES/CBC/PKCS5Padding</code>）。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encrypt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String data,SecretKey secretKey)throws Exception{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Cipher cipher</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Cipher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;AES/ECB/PKCS5Padding&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 默认模式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cipher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Cipher.ENCRYPT_MODE,secretKey);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]encryptedBytes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cipher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doFinal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Base64.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getEncoder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encodeToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(encryptedBytes); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回 Base64 编码的密文</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span></code></pre></div><hr><h3 id="_4-解密方法" tabindex="-1"><strong>4. 解密方法</strong> <a class="header-anchor" href="#_4-解密方法" aria-label="Permalink to “4. 解密方法”">​</a></h3><p>使用相同的密钥和模式进行解密。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decrypt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String encryptedData,SecretKey secretKey)throws Exception{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Cipher cipher</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Cipher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;AES/ECB/PKCS5Padding&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cipher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Cipher.DECRYPT_MODE,secretKey);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]decodedBytes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base64.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDecoder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(encryptedData);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]decryptedBytes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cipher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doFinal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(decodedBytes);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(decryptedBytes); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回解密后的明文</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span></code></pre></div><hr><h3 id="_5-完整示例" tabindex="-1"><strong>5. 完整示例</strong> <a class="header-anchor" href="#_5-完整示例" aria-label="Permalink to “5. 完整示例”">​</a></h3><p>以下是一个完整的示例，包括生成密钥、加密和解密：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AESExample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        SecretKey secretKey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generateKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">128</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 生成 128 位密钥</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Secret Key (Base64): &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Base64.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getEncoder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encodeToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(secretKey.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getEncoded</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String originalText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, AES!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Original Text: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> originalText);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String encryptedText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> encrypt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(originalText, secretKey);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Encrypted Text: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> encryptedText);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String decryptedText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> decrypt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(encryptedText, secretKey);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Decrypted Text: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> decryptedText);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SecretKey </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generateKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> keySize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        KeyGenerator keyGen </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KeyGenerator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;AES&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        keyGen.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(keySize);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> keyGen.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generateKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encrypt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, SecretKey </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">secretKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Cipher cipher </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Cipher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;AES/ECB/PKCS5Padding&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cipher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Cipher.ENCRYPT_MODE, secretKey);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] encryptedBytes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cipher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doFinal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Base64.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getEncoder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encodeToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(encryptedBytes);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decrypt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">encryptedData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, SecretKey </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">secretKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Cipher cipher </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Cipher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;AES/ECB/PKCS5Padding&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cipher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Cipher.DECRYPT_MODE, secretKey);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] decodedBytes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Base64.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDecoder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(encryptedData);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] decryptedBytes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cipher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doFinal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(decodedBytes);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(decryptedBytes);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h3 id="_6-注意事项" tabindex="-1"><strong>6. 注意事项</strong> <a class="header-anchor" href="#_6-注意事项" aria-label="Permalink to “6. 注意事项”">​</a></h3><ol><li><strong>密钥管理</strong>：密钥应安全存储，避免硬编码在代码中。</li><li><strong>加密模式</strong>：默认使用 <code>ECB</code> 模式，但安全性较低，建议使用 <code>CBC</code> 模式并指定初始化向量（IV）。</li><li><strong>填充方式</strong>：常用 <code>PKCS5Padding</code>，确保明文长度符合 AES 分组要求。</li><li><strong>异常处理</strong>：在实际应用中，应妥善处理可能抛出的异常（如 <code>NoSuchAlgorithmException</code>、<code>InvalidKeyException</code> 等）。</li></ol><hr><p>通过以上步骤，你可以在 Java 中轻松实现 AES 加密和解密。如果需要更安全的模式（如 <code>CBC</code>），请参考相关文档<a href="./@ref.html">1</a><a href="./@ref.html">2</a><a href="./@ref.html">3</a>。</p><h2 id="在java中如何使用rsa算法进行加解密" tabindex="-1">在Java中如何使用RSA算法进行加解密 <a class="header-anchor" href="#在java中如何使用rsa算法进行加解密" aria-label="Permalink to “在Java中如何使用RSA算法进行加解密”">​</a></h2><p>在 Java 中使用 RSA 算法进行加解密可以通过 <code>java.security</code> 和 <code>javax.crypto</code> 包中的类实现。以下是详细的步骤和示例代码：</p><hr><h3 id="_1-生成-rsa-密钥对" tabindex="-1"><strong>1. 生成 RSA 密钥对</strong> <a class="header-anchor" href="#_1-生成-rsa-密钥对" aria-label="Permalink to “1. 生成 RSA 密钥对”">​</a></h3><p>首先，需要生成 RSA 的公钥和私钥对：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.security.KeyPair;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.security.KeyPairGenerator;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.security.NoSuchAlgorithmException;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.security.interfaces.RSAPrivateKey;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.security.interfaces.RSAPublicKey;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.Base64;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RSAKeyGenerator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NoSuchAlgorithmException {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 创建 KeyPairGenerator 实例，指定算法为 RSA</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        KeyPairGenerator keyPairGenerator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KeyPairGenerator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;RSA&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        keyPairGenerator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2048</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置密钥长度为 2048 位</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 生成密钥对</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        KeyPair keyPair </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> keyPairGenerator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generateKeyPair</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        RSAPublicKey publicKey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (RSAPublicKey) keyPair.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getPublic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        RSAPrivateKey privateKey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (RSAPrivateKey) keyPair.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getPrivate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 将密钥转换为 Base64 编码的字符串</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String publicKeyStr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Base64.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getEncoder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encodeToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(publicKey.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getEncoded</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String privateKeyStr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Base64.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getEncoder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encodeToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(privateKey.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getEncoded</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;公钥: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> publicKeyStr);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;私钥: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> privateKeyStr);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h3 id="_2-使用公钥加密" tabindex="-1"><strong>2. 使用公钥加密</strong> <a class="header-anchor" href="#_2-使用公钥加密" aria-label="Permalink to “2. 使用公钥加密”">​</a></h3><p>使用公钥对数据进行加密：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> javax.crypto.Cipher;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.security.KeyFactory;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.security.PublicKey;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.security.spec.X509EncodedKeySpec;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.Base64;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RSAEncryptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encrypt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">publicKeyStr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 将 Base64 编码的公钥字符串转换为 PublicKey 对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] publicKeyBytes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Base64.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDecoder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(publicKeyStr);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        X509EncodedKeySpec keySpec </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> X509EncodedKeySpec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(publicKeyBytes);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        KeyFactory keyFactory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KeyFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;RSA&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        PublicKey publicKey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> keyFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generatePublic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(keySpec);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 使用公钥初始化 Cipher 对象进行加密</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Cipher cipher </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Cipher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;RSA&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cipher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Cipher.ENCRYPT_MODE, publicKey);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 加密数据并返回 Base64 编码的密文</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] encryptedBytes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cipher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doFinal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Base64.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getEncoder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encodeToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(encryptedBytes);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String publicKeyStr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 替换为生成的公钥</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, RSA!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String encryptedData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> encrypt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data, publicKeyStr);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;加密后的数据: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> encryptedData);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h3 id="_3-使用私钥解密" tabindex="-1"><strong>3. 使用私钥解密</strong> <a class="header-anchor" href="#_3-使用私钥解密" aria-label="Permalink to “3. 使用私钥解密”">​</a></h3><p>使用私钥对加密数据进行解密：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> javax.crypto.Cipher;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.security.KeyFactory;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.security.PrivateKey;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.security.spec.PKCS8EncodedKeySpec;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.Base64;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RSADecryptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decrypt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">encryptedData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">privateKeyStr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 将 Base64 编码的私钥字符串转换为 PrivateKey 对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] privateKeyBytes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Base64.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDecoder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(privateKeyStr);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        PKCS8EncodedKeySpec keySpec </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PKCS8EncodedKeySpec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(privateKeyBytes);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        KeyFactory keyFactory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KeyFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;RSA&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        PrivateKey privateKey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> keyFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generatePrivate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(keySpec);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 使用私钥初始化 Cipher 对象进行解密</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Cipher cipher </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Cipher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;RSA&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cipher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Cipher.DECRYPT_MODE, privateKey);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 解密数据并返回明文</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] decryptedBytes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cipher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doFinal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Base64.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDecoder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(encryptedData));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(decryptedBytes);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String privateKeyStr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgE...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 替换为生成的私钥</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String encryptedData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;加密后的数据&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 替换为加密后的数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String decryptedData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> decrypt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(encryptedData, privateKeyStr);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;解密后的数据: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> decryptedData);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h3 id="_4-注意事项" tabindex="-1"><strong>4. 注意事项</strong> <a class="header-anchor" href="#_4-注意事项" aria-label="Permalink to “4. 注意事项”">​</a></h3><ol><li><strong>密钥长度</strong>：建议使用 2048 位或更长的密钥，以确保安全性<a href="./@ref.html">1</a>。</li><li><strong>加密数据大小</strong>：RSA 加密的数据长度受密钥长度限制，通常用于加密对称密钥或小数据块<a href="./@ref.html">3</a>。</li><li><strong>填充模式</strong>：默认使用 <code>PKCS1Padding</code>，也可以选择 <code>OAEPPadding</code> 等更安全的填充模式<a href="./@ref.html">3</a>。</li></ol><p>通过以上步骤，你可以在 Java 中实现 RSA 算法的加解密功能。</p><h2 id="公钥只能用来加密-私钥只能用来解密吗" tabindex="-1">公钥只能用来加密，私钥只能用来解密吗？ <a class="header-anchor" href="#公钥只能用来加密-私钥只能用来解密吗" aria-label="Permalink to “公钥只能用来加密，私钥只能用来解密吗？”">​</a></h2><p>公钥和私钥的使用不仅仅是“公钥加密，私钥解密”，它们的功能取决于具体的应用场景。以下是公钥和私钥的主要用途：</p><hr><h3 id="_1-公钥加密-私钥解密" tabindex="-1"><strong>1. 公钥加密，私钥解密</strong> <a class="header-anchor" href="#_1-公钥加密-私钥解密" aria-label="Permalink to “1. 公钥加密，私钥解密”">​</a></h3><ul><li><strong>用途</strong>：用于数据加密，确保数据的机密性。</li><li><strong>场景</strong>：当A想向B发送加密消息时，A使用B的公钥加密数据，B收到后用自己的私钥解密。由于只有B持有私钥，因此只有B能解密消息，确保了消息的安全性<a href="./@ref.html">1</a><a href="./@ref.html">2</a>。</li></ul><hr><h3 id="_2-私钥签名-公钥验签" tabindex="-1"><strong>2. 私钥签名，公钥验签</strong> <a class="header-anchor" href="#_2-私钥签名-公钥验签" aria-label="Permalink to “2. 私钥签名，公钥验签”">​</a></h3><ul><li><strong>用途</strong>：用于数字签名，确保数据的完整性和身份认证。</li><li><strong>场景</strong>：当A想向B发送一条消息并证明消息确实来自A时，A会用私钥对消息进行签名，B收到后用A的公钥验证签名。由于只有A持有私钥，因此B可以确认消息确实来自A，且未被篡改<a href="./@ref.html">1</a><a href="./@ref.html">2</a><a href="./@ref.html">5</a>。</li></ul><hr><h3 id="_3-私钥加密-公钥解密" tabindex="-1"><strong>3. 私钥加密，公钥解密</strong> <a class="header-anchor" href="#_3-私钥加密-公钥解密" aria-label="Permalink to “3. 私钥加密，公钥解密”">​</a></h3><ul><li><strong>用途</strong>：用于身份认证或特定场景的加密。</li><li><strong>场景</strong>：在某些特殊情况下（如密钥交换），私钥也可以用于加密，公钥用于解密。例如，在TLS/SSL协议中，服务器可能会用私钥加密某些信息，客户端用公钥解密以验证服务器的身份<a href="./@ref.html">5</a>。</li></ul><hr><h3 id="总结" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结" aria-label="Permalink to “总结”">​</a></h3><p>公钥和私钥的功能是灵活的，具体使用方式取决于应用场景：</p><ul><li><strong>公钥加密，私钥解密</strong>：确保数据机密性。</li><li><strong>私钥签名，公钥验签</strong>：确保数据完整性和身份认证。</li><li><strong>私钥加密，公钥解密</strong>：用于特定场景的身份认证或密钥交换。</li></ul><p>因此，公钥和私钥的使用并不仅限于“公钥加密，私钥解密”，而是根据需求灵活应用的<a href="./@ref.html">1</a><a href="./@ref.html">2</a><a href="./@ref.html">5</a>。</p><h2 id="对称加密中的加密模式是什么" tabindex="-1">对称加密中的加密模式是什么 <a class="header-anchor" href="#对称加密中的加密模式是什么" aria-label="Permalink to “对称加密中的加密模式是什么”">​</a></h2><p>对称加密中的加密模式是指将明文分组加密的方式，用于处理长度不固定的明文数据。常见的加密模式包括以下五种：</p><hr><h3 id="_1-ecb-electronic-code-book-电子密码本模式" tabindex="-1"><strong>1. ECB（Electronic Code Book，电子密码本模式）</strong> <a class="header-anchor" href="#_1-ecb-electronic-code-book-电子密码本模式" aria-label="Permalink to “1. ECB（Electronic Code Book，电子密码本模式）”">​</a></h3><ul><li><strong>特点</strong>： <ul><li>简单快速，支持并行计算。</li><li>相同的明文会生成相同的密文，容易被破解。</li><li>最后一个分组需要填充。</li></ul></li><li><strong>缺点</strong>： <ul><li>安全性较低，容易受到密码本重放攻击。</li><li>不推荐使用<a href="./@ref.html">1</a><a href="./@ref.html">3</a>。</li></ul></li></ul><hr><h3 id="_2-cbc-cipher-block-chaining-密码分组链接模式" tabindex="-1"><strong>2. CBC（Cipher Block Chaining，密码分组链接模式）</strong> <a class="header-anchor" href="#_2-cbc-cipher-block-chaining-密码分组链接模式" aria-label="Permalink to “2. CBC（Cipher Block Chaining，密码分组链接模式）”">​</a></h3><ul><li><strong>特点</strong>： <ul><li>每个明文分组在加密前会与前一个密文分组进行异或操作。</li><li>需要初始化向量（IV），且加解密时 IV 必须相同。</li><li>最后一个分组需要填充。</li></ul></li><li><strong>优点</strong>： <ul><li>安全性较高，密文无规律。</li></ul></li><li><strong>缺点</strong>： <ul><li>不支持并行加密，解密支持并行<a href="./@ref.html">1</a><a href="./@ref.html">3</a>。</li></ul></li></ul><hr><h3 id="_3-cfb-cipher-feedback-密文反馈模式" tabindex="-1"><strong>3. CFB（Cipher Feedback，密文反馈模式）</strong> <a class="header-anchor" href="#_3-cfb-cipher-feedback-密文反馈模式" aria-label="Permalink to “3. CFB（Cipher Feedback，密文反馈模式）”">​</a></h3><ul><li><strong>特点</strong>： <ul><li>将分组密码转换为流密码，按位或按字节加密。</li><li>需要初始化向量（IV），且加解密时 IV 必须相同。</li><li>不需要填充。</li></ul></li><li><strong>优点</strong>： <ul><li>支持并行解密。</li></ul></li><li><strong>缺点</strong>： <ul><li>不支持并行加密，存在错误扩散<a href="./@ref.html">1</a><a href="./@ref.html">3</a>。</li></ul></li></ul><hr><h3 id="_4-ofb-output-feedback-输出反馈模式" tabindex="-1"><strong>4. OFB（Output Feedback，输出反馈模式）</strong> <a class="header-anchor" href="#_4-ofb-output-feedback-输出反馈模式" aria-label="Permalink to “4. OFB（Output Feedback，输出反馈模式）”">​</a></h3><ul><li><strong>特点</strong>： <ul><li>将分组密码转换为流密码，按位或按字节加密。</li><li>需要初始化向量（IV），且加解密时 IV 必须相同。</li><li>不需要填充。</li></ul></li><li><strong>优点</strong>： <ul><li>加密和解密使用相同结构。</li></ul></li><li><strong>缺点</strong>： <ul><li>不支持并行运算，存在错误扩散<a href="./@ref.html">1</a><a href="./@ref.html">3</a>。</li></ul></li></ul><hr><h3 id="_5-ctr-counter-计数器模式" tabindex="-1"><strong>5. CTR（Counter，计数器模式）</strong> <a class="header-anchor" href="#_5-ctr-counter-计数器模式" aria-label="Permalink to “5. CTR（Counter，计数器模式）”">​</a></h3><ul><li><strong>特点</strong>： <ul><li>将分组密码转换为流密码，按位或按字节加密。</li><li>不需要初始化向量（IV），使用计数器生成密钥流。</li><li>不需要填充。</li></ul></li><li><strong>优点</strong>： <ul><li>支持并行加密和解密，效率高。</li><li>安全性高，推荐使用<a href="./@ref.html">1</a><a href="./@ref.html">3</a>。</li></ul></li></ul><hr><h3 id="总结-1" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结-1" aria-label="Permalink to “总结”">​</a></h3><ul><li><strong>推荐模式</strong>：CBC 和 CTR 模式，尤其是 CTR 模式，因其高效性和安全性<a href="./@ref.html">1</a><a href="./@ref.html">3</a>。</li><li><strong>不推荐模式</strong>：ECB 模式，因其安全性较低<a href="./@ref.html">1</a><a href="./@ref.html">3</a>。</li></ul><p>以上五种模式各有特点，具体选择应根据应用场景和安全需求决定<a href="./@ref.html">1</a><a href="./@ref.html">3</a>。</p><h2 id="aes中的填充方式有哪些" tabindex="-1">AES中的填充方式有哪些？ <a class="header-anchor" href="#aes中的填充方式有哪些" aria-label="Permalink to “AES中的填充方式有哪些？”">​</a></h2><p>AES（Advanced Encryption Standard）中的填充方式主要用于将明文数据填充到符合AES分组长度（128位）的整数倍，以便进行加密。以下是常见的填充方式：</p><h3 id="_1-pkcs7-padding" tabindex="-1">1. <strong>PKCS7 Padding</strong> <a class="header-anchor" href="#_1-pkcs7-padding" aria-label="Permalink to “1. PKCS7 Padding”">​</a></h3><ul><li><strong>描述</strong>：在明文末尾添加填充字节，填充字节的值等于需要填充的字节数。例如，如果需要填充5个字节，则填充值为<code>05 05 05 05 05</code>。</li><li><strong>特点</strong>：适用于任意块大小（1~255字节），是AES中最常用的填充方式<a href="./@ref.html">1</a><a href="./@ref.html">2</a>。</li></ul><h3 id="_2-pkcs5-padding" tabindex="-1">2. <strong>PKCS5 Padding</strong> <a class="header-anchor" href="#_2-pkcs5-padding" aria-label="Permalink to “2. PKCS5 Padding”">​</a></h3><ul><li><strong>描述</strong>：与PKCS7类似，但块大小固定为8字节。在AES中，由于块大小为16字节，PKCS5与PKCS7的效果相同<a href="./@ref.html">1</a><a href="./@ref.html">2</a>。</li></ul><h3 id="_3-no-padding" tabindex="-1">3. <strong>No Padding</strong> <a class="header-anchor" href="#_3-no-padding" aria-label="Permalink to “3. No Padding”">​</a></h3><ul><li><strong>描述</strong>：不进行任何填充，要求明文长度必须是分组长度的整数倍。如果明文长度不符合要求，则会抛出异常。</li><li><strong>特点</strong>：适用于明文长度已知且为分组大小整数倍的场景<a href="./@ref.html">1</a><a href="./@ref.html">2</a>。</li></ul><h3 id="_4-iso10126-padding" tabindex="-1">4. <strong>ISO10126 Padding</strong> <a class="header-anchor" href="#_4-iso10126-padding" aria-label="Permalink to “4. ISO10126 Padding”">​</a></h3><ul><li><strong>描述</strong>：在明文末尾填充随机字节，最后一个字节为填充的数量数。例如，如果需要填充5个字节，则填充格式为<code>XX XX XX XX 05</code>，其中<code>XX</code>为随机字节。</li><li><strong>特点</strong>：填充值随机，安全性较高<a href="./@ref.html">1</a><a href="./@ref.html">2</a>。</li></ul><h3 id="_5-iso7816-4-padding" tabindex="-1">5. <strong>ISO7816-4 Padding</strong> <a class="header-anchor" href="#_5-iso7816-4-padding" aria-label="Permalink to “5. ISO7816-4 Padding”">​</a></h3><ul><li><strong>描述</strong>：在明文末尾填充<code>0x80</code>，后面补<code>0x00</code>，直到分组长度。例如，如果需要填充5个字节，则填充格式为<code>80 00 00 00 00</code>。</li><li><strong>特点</strong>：适用于特定场景，如智能卡应用<a href="./@ref.html">1</a><a href="./@ref.html">2</a>。</li></ul><h3 id="_6-zero-byte-padding" tabindex="-1">6. <strong>Zero Byte Padding</strong> <a class="header-anchor" href="#_6-zero-byte-padding" aria-label="Permalink to “6. Zero Byte Padding”">​</a></h3><ul><li><strong>描述</strong>：在明文末尾填充<code>0x00</code>，直到分组长度。例如，如果需要填充5个字节，则填充格式为<code>00 00 00 00 00</code>。</li><li><strong>特点</strong>：简单易用，但无法区分填充和原始数据<a href="./@ref.html">1</a><a href="./@ref.html">2</a>。</li></ul><h3 id="_7-x923-padding" tabindex="-1">7. <strong>X923 Padding</strong> <a class="header-anchor" href="#_7-x923-padding" aria-label="Permalink to “7. X923 Padding”">​</a></h3><ul><li><strong>描述</strong>：在明文末尾填充<code>0x00</code>，最后一个字节为填充的数量数。例如，如果需要填充5个字节，则填充格式为<code>00 00 00 00 05</code>。</li><li><strong>特点</strong>：与PKCS7类似，但填充值为<code>0x00</code><a href="./@ref.html">1</a><a href="./@ref.html">2</a>。</li></ul><h3 id="_8-tbc-padding-trailing-bit-compliment" tabindex="-1">8. <strong>TBC Padding (Trailing-Bit-Compliment)</strong> <a class="header-anchor" href="#_8-tbc-padding-trailing-bit-compliment" aria-label="Permalink to “8. TBC Padding (Trailing-Bit-Compliment)”">​</a></h3><ul><li><strong>描述</strong>：根据明文的最后一位进行填充。如果最后一位为<code>1</code>，则填充<code>0x00</code>；如果最后一位为<code>0</code>，则填充<code>0xFF</code>。</li><li><strong>特点</strong>：适用于特定场景，如某些协议要求<a href="./@ref.html">1</a><a href="./@ref.html">2</a>。</li></ul><h3 id="_9-pkcs1-padding" tabindex="-1">9. <strong>PKCS1 Padding</strong> <a class="header-anchor" href="#_9-pkcs1-padding" aria-label="Permalink to “9. PKCS1 Padding”">​</a></h3><ul><li><strong>描述</strong>：主要用于RSA加密，填充格式为<code>00 + BT + PS + 00 + D</code>，其中<code>BT</code>为处理模式，<code>PS</code>为填充字节。</li><li><strong>特点</strong>：适用于RSA加密，不常用于AES<a href="./@ref.html">2</a>。</li></ul><h3 id="总结-2" tabindex="-1">总结 <a class="header-anchor" href="#总结-2" aria-label="Permalink to “总结”">​</a></h3><p>AES中的填充方式多样，常见的包括 <strong>PKCS7</strong>、<strong>PKCS5</strong>、<strong>No Padding</strong>、<strong>ISO10126</strong> 等。选择填充方式时需根据具体应用场景和安全性需求进行权衡<a href="./@ref.html">1</a><a href="./@ref.html">2</a>。</p>`,103)])])}const y=i(t,[["render",l]]);export{g as __pageData,y as default};
