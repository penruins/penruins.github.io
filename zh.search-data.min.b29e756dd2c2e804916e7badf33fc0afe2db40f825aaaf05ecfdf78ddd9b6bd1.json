[{"id":0,"href":"/zh/post/others/about-me/","title":"about me","section":"Others","content":" about me # 家乡 云南昆明 骑行 Strava 电影 douban 观影记录 研究各种提升效率的小工具 vim 双拼 raspberry pi ios shortcut "},{"id":1,"href":"/zh/zh/post/others/about-me/","title":"about me","section":"Others","content":" about me # 家乡 云南昆明 骑行 Strava 电影 douban 观影记录 研究各种提升效率的小工具 vim 双拼 raspberry pi ios shortcut "},{"id":2,"href":"/zh/post/computer-science/java/java/","title":"java","section":"Java","content":" java # 学习资料 # CS-Notes面试笔记 mall-swarm视频教程 basic # java array 转 list # 在Java中，你可以使用Arrays.asList()方法将数组转换为列表。这是一个简单的方法来创建一个固定大小的List。如果你需要一个能够改变大小的List，你需要使用new ArrayList\u0026lt;\u0026gt;(Arrays.asList(array))来创建一个新的ArrayList实例。\n以下是两种情况的代码示例：\n创建一个固定大小的列表 # import java.util.Arrays; import java.util.List; public class ArrayToListExample { public static void main(String[] args) { String[] array = {\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;}; List\u0026lt;String\u0026gt; list = Arrays.asList(array); System.out.println(list); // 输出: [a, b, c] } } 创建一个可变大小的列表 # import java.util.ArrayList; import java.util.Arrays; import java.util.List; public class ArrayToArrayListExample { public static void main(String[] args) { String[] array = {\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;}; List\u0026lt;String\u0026gt; arrayList = new ArrayList\u0026lt;\u0026gt;(Arrays.asList(array)); // 现在可以添加或删除元素了 arrayList.add(\u0026#34;d\u0026#34;); System.out.println(arrayList); // 输出: [a, b, c, d] } } 请注意，当你使用Arrays.asList()时，它返回的是一个受数组支持的固定大小的列表。这意味着你不能添加或移除元素（除非你将其转换为像ArrayList这样的可调整大小的列表），但是你可以修改已经存在的元素。如果你尝试对固定大小的列表执行添加或移除操作，将会抛出UnsupportedOperationException异常。\njava， 怎么用二进制打印int # 在Java中，可以使用Integer.toBinaryString()方法来将一个int类型的数值转换为二进制字符串表示。此方法返回的是一个不带前导零的字符串，也就是说它不会打印出完整的32位（对于int类型），如果需要显示所有位，包括前导零，则需要额外处理。\n以下是一些例子：\n使用 Integer.toBinaryString() # public class BinaryPrintExample { public static void main(String[] args) { int number = 42; String binaryString = Integer.toBinaryString(number); System.out.println(\u0026#34;The binary representation of \u0026#34; + number + \u0026#34; is: \u0026#34; + binaryString); } } 打印包含前导零的完整32位 # 如果你想要打印出完整的32位二进制数，包括前导的0，你可以使用String.format()或者BitSet，但最简单的方法是用String.format()配合循环补足前导零：\npublic class FullBinaryPrintExample { public static void main(String[] args) { int number = 42; // Convert to binary string and ensure it\u0026#39;s 32 bits long with leading zeros String binaryString = String.format(\u0026#34;%32s\u0026#34;, Integer.toBinaryString(number)).replace(\u0026#39; \u0026#39;, \u0026#39;0\u0026#39;); System.out.println(\u0026#34;The full 32-bit binary representation of \u0026#34; + number + \u0026#34; is: \u0026#34; + binaryString); } } 上面的代码中，%32s指定了格式化后的字符串总长度为32，不足的部分用空格填充，然后我们用replace(' ', '0')把所有的空格替换成'0\u0026rsquo;。\n使用位运算手动构建二进制字符串 # 如果你想自己实现这个功能，你也可以使用位运算来构建二进制字符串：\npublic class ManualBinaryPrintExample { public static void main(String[] args) { int number = 42; StringBuilder binaryString = new StringBuilder(); for (int i = 31; i \u0026gt;= 0; i--) { int k = number \u0026gt;\u0026gt; i; if ((k \u0026amp; 1) \u0026gt; 0) { binaryString.append(\u0026#34;1\u0026#34;); } else { binaryString.append(\u0026#34;0\u0026#34;); } } System.out.println(\u0026#34;The manually constructed 32-bit binary representation of \u0026#34; + number + \u0026#34; is: \u0026#34; + binaryString.toString()); } } 这段代码通过逐位检查整数的每一位是否为1，并相应地添加\u0026quot;1\u0026quot;或\u0026quot;0\u0026quot;到StringBuilder对象中，最终构建出完整的32位二进制字符串。\nconcurrent # "},{"id":3,"href":"/zh/zh/post/computer-science/java/java/","title":"java","section":"Java","content":" java # 学习资料 # CS-Notes面试笔记 mall-swarm视频教程 basic # java array 转 list # 在Java中，你可以使用Arrays.asList()方法将数组转换为列表。这是一个简单的方法来创建一个固定大小的List。如果你需要一个能够改变大小的List，你需要使用new ArrayList\u0026lt;\u0026gt;(Arrays.asList(array))来创建一个新的ArrayList实例。\n以下是两种情况的代码示例：\n创建一个固定大小的列表 # import java.util.Arrays; import java.util.List; public class ArrayToListExample { public static void main(String[] args) { String[] array = {\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;}; List\u0026lt;String\u0026gt; list = Arrays.asList(array); System.out.println(list); // 输出: [a, b, c] } } 创建一个可变大小的列表 # import java.util.ArrayList; import java.util.Arrays; import java.util.List; public class ArrayToArrayListExample { public static void main(String[] args) { String[] array = {\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;}; List\u0026lt;String\u0026gt; arrayList = new ArrayList\u0026lt;\u0026gt;(Arrays.asList(array)); // 现在可以添加或删除元素了 arrayList.add(\u0026#34;d\u0026#34;); System.out.println(arrayList); // 输出: [a, b, c, d] } } 请注意，当你使用Arrays.asList()时，它返回的是一个受数组支持的固定大小的列表。这意味着你不能添加或移除元素（除非你将其转换为像ArrayList这样的可调整大小的列表），但是你可以修改已经存在的元素。如果你尝试对固定大小的列表执行添加或移除操作，将会抛出UnsupportedOperationException异常。\njava， 怎么用二进制打印int # 在Java中，可以使用Integer.toBinaryString()方法来将一个int类型的数值转换为二进制字符串表示。此方法返回的是一个不带前导零的字符串，也就是说它不会打印出完整的32位（对于int类型），如果需要显示所有位，包括前导零，则需要额外处理。\n以下是一些例子：\n使用 Integer.toBinaryString() # public class BinaryPrintExample { public static void main(String[] args) { int number = 42; String binaryString = Integer.toBinaryString(number); System.out.println(\u0026#34;The binary representation of \u0026#34; + number + \u0026#34; is: \u0026#34; + binaryString); } } 打印包含前导零的完整32位 # 如果你想要打印出完整的32位二进制数，包括前导的0，你可以使用String.format()或者BitSet，但最简单的方法是用String.format()配合循环补足前导零：\npublic class FullBinaryPrintExample { public static void main(String[] args) { int number = 42; // Convert to binary string and ensure it\u0026#39;s 32 bits long with leading zeros String binaryString = String.format(\u0026#34;%32s\u0026#34;, Integer.toBinaryString(number)).replace(\u0026#39; \u0026#39;, \u0026#39;0\u0026#39;); System.out.println(\u0026#34;The full 32-bit binary representation of \u0026#34; + number + \u0026#34; is: \u0026#34; + binaryString); } } 上面的代码中，%32s指定了格式化后的字符串总长度为32，不足的部分用空格填充，然后我们用replace(' ', '0')把所有的空格替换成'0\u0026rsquo;。\n使用位运算手动构建二进制字符串 # 如果你想自己实现这个功能，你也可以使用位运算来构建二进制字符串：\npublic class ManualBinaryPrintExample { public static void main(String[] args) { int number = 42; StringBuilder binaryString = new StringBuilder(); for (int i = 31; i \u0026gt;= 0; i--) { int k = number \u0026gt;\u0026gt; i; if ((k \u0026amp; 1) \u0026gt; 0) { binaryString.append(\u0026#34;1\u0026#34;); } else { binaryString.append(\u0026#34;0\u0026#34;); } } System.out.println(\u0026#34;The manually constructed 32-bit binary representation of \u0026#34; + number + \u0026#34; is: \u0026#34; + binaryString.toString()); } } 这段代码通过逐位检查整数的每一位是否为1，并相应地添加\u0026quot;1\u0026quot;或\u0026quot;0\u0026quot;到StringBuilder对象中，最终构建出完整的32位二进制字符串。\nconcurrent # "},{"id":4,"href":"/zh/post/computer-science/computer-science-recommend/","title":"推荐","section":"Computer Science","content":" 推荐 # github alex-shpak/hugo-book 这个博客就是用这个项目搭建的 hacker news 有很多关于计算机相关的文章，每天都会更新 资源下载相关 pingf/annie 可以用来下载B站视频 yt-dlp/yt-dlp 下载 youtube 视频 yutto-dev/bilili 下载 bilibili 视频(项目已经归档不再维护,目前还能用，可以使用yutto) yutto-dev/yutto 卡码笔记 代码随想录的网站，里面整理了一些计算机相关的知识点（非算法相关） segment fault blog # 阮一峰的网络日志 王垠 github # yihong0618 Large Language Model(LLM) # 通义千问 "},{"id":5,"href":"/zh/zh/post/computer-science/computer-science-recommend/","title":"推荐","section":"Computer Science","content":" 推荐 # github alex-shpak/hugo-book 这个博客就是用这个项目搭建的 hacker news 有很多关于计算机相关的文章，每天都会更新 资源下载相关 pingf/annie 可以用来下载B站视频 yt-dlp/yt-dlp 下载 youtube 视频 yutto-dev/bilili 下载 bilibili 视频(项目已经归档不再维护,目前还能用，可以使用yutto) yutto-dev/yutto 卡码笔记 代码随想录的网站，里面整理了一些计算机相关的知识点（非算法相关） segment fault blog # 阮一峰的网络日志 王垠 github # yihong0618 Large Language Model(LLM) # 通义千问 "},{"id":6,"href":"/zh/post/life/movies-log/","title":"观影记录","section":"Life","content":" 观影记录 # 2025 # 2025-01-12 敦煌 1 2025-01-12 2 2025-01-15 3 2025-01-16 4 2025-01-18 5 2025-01-20 6 `` 7 `` 8 `` 9 `` 10 `` 2025-01-11 如果国宝会说话 第四季 东京爱情故事 1 2025-01-11 2 2025-01-12 3 2025-01-13 4 2025-01-15 5 2025-01-16 6 2025-01-17 7 2025-01-18 8 2025-01-19 9 2025-01-20 10 2025-01-22 11 `` 2025-01-10 飞屋环游记 2025-01-07 如果国宝会说话 第三季 2025-01-04 如果国宝会说话 第二季 2025-01-03 辛德勒的名单（2） 2025-01-02 四重奏 1 2025-01-02 2 2025-01-03 3 2025-01-04 4 2025-01-05 5 2025-01-06 6 2025-01-07 7 2025-01-08 8 2025-01-09 9 2025-01-10 10 2025-01-10 2025-01-01 如果国宝会说话 第一季 2024 # 2024-12-01 金色梦乡 2024-11-30 Better Call Saul S04E07 2024-11-29 Better Call Saul S04E06 2024-11-28 Better Call Saul S04E05 2024-11-27 Better Call Saul S04E03-04 2024-11-26 Better Call Saul S04E01-02 2024-11-25 Better Call Saul S03E09-10 2024-11-23 热血警探 铁雨 ⭐⭐⭐⭐ 2024-11-18 东邪西毒 终极版 2024-11-17 甲方乙方 2024-11-16 正义回廊 ⭐⭐⭐⭐ 有话好好说 ⭐⭐⭐⭐ 2024-11-15 Better Call Saul S03E07 Better Call Saul S03E08 2024-11-14 Better Call Saul S03E06 2024-11-13 Better Call Saul S03E05 2024-11-12 Better Call Saul S03E04 2024-11-12 Better Call Saul S03E02 Better Call Saul S03E03 2024-10-24 哈利波特与死亡圣器 下 2024-10-23 哈利波特与死亡圣器 上 2024-10-22 哈利波特与混血王子 2024-10-20 哈利波特与凤凰社 哈利波特与火焰杯 哈利波特与阿兹卡班的囚徒 2024-10-19 哈利波特与密室 哈利波特与魔法石 2024-10-07 燃情岁月 ⭐⭐⭐⭐ 抓娃娃 2024-10-06 赛德克巴莱 2024-10-05 名侦探柯南：百万美元的五棱星 2024-10-04 年会不能停 2024-09-17 市场法则 过季 ⭐⭐⭐⭐ 完美的日子 ⭐⭐⭐⭐⭐ 2024-09-15 幽灵公主 鬼灭之刃 那田蜘蛛山篇 鬼灭之刃 柱训练篇 鬼灭之刃 锻刀村篇 2024-09-08 不要抬头 2024-08-18 一部关于咖啡的电影 2024-07-14 鬼灭之刃 游郭篇 鬼灭之刃 无限列车篇 2024-07-07 朗读者 2024-06-15 环法自行车赛：逆风飞驰 第二季 2024-06-09 江湖儿女 2024-05-19 红猪 2024-05-12 繁花 2024-05-04 极速车王 2024-05-03 大佛普拉斯 芝加哥七君子审判 2024-04-22 寻梦环游记 2024-04-21 你想活出怎样的人生 2024-04-06 黄海 逃离乌托邦 2024-04-04 坠落的审判 2024-03-15 周处除三害 2024-03-13 巾帼枭雄之义海豪情 2024-02-20 新闻女王 2024-02-18 飞驰人生2 2024-02-09 阿尔法围棋 哈利波特20周年：回到霍格沃茨 2024-02-08 三大队 2024-01-20 土拨鼠之日 2024-01-10 请回答1988 2023 # 2023年5月2日 婚姻生活 2023年4月29日 惠子，凝视 ⭐⭐⭐⭐ 2023年3月18日 黑暗荣耀 第二季 2023年3月05日 乒乓 2023年2月12日 健听女孩 2023年1月30日 黑匣子 2023年1月29日 巴斯克·斯克鲁格斯的歌谣 2023年1月27日 马拉多纳2019 2023年1月26日 马拉多纳之死 2023年1月26日 打扰伯格曼 2023年1月26日 误杀瞒天记 2023年1月26日 我即闪电 2023年1月25日 风骚律师 第六季 ⭐⭐⭐⭐⭐ 2023年1月25日 宿敌 2023年1月24日 互联网之子 2023年1月22日 互联网之子 2023年1月22日 万圣节的新娘 2023年1月22日 伊卡洛斯 2023年1月22日 老师，您能坐我旁边吗？ 2022 # 2022年10月07日 真相捕捉 第二季 2022年10月03日 黑洞 2022年09月10日 六号车厢 ⭐⭐⭐⭐ 2022年08月10日 我的天才女友 第三季 2022年07月31日 命运喜欢恶作剧 2022年07月30日 人生大事 2022年07月26日 渔业阴谋 2022年02月08日 Tinder诈骗王 2022年02月07日 亢奋 第一季 2022年02月03日 情事 2022年02月03日 火口的两人 2022年02月03日 激情 2022年02月02日 偶然与想象 2022年02月02日 东城梦魇 2022年02月01日 2020去死 2022年01月31日 瀑布 2022年01月31日 天注定 2022年01月30日 T省的 84·85年 2022年01月30日 天道 2022年01月20日 405谋杀案 2022年01月19日 背靠背，脸对脸 2022年01月18日 黑炮事件 2022年01月17日 成瘾剂量 2022年01月09日 驾驶我的车 ⭐⭐⭐⭐ 2022年01月01日 踏雪寻梅 2021 # 2021年12月26日 困在时间里的父亲 2021年11月19日 扬名立万 2021年11月13日 不老奇事 2021年10月31日 沙丘 2021年10月31日 007:无暇赴死 2021年10月16日 长津湖 2021年10月10日 吗啡 2021年09月25日 峰爆 2021年09月22日 教室里的一头牦牛 2021年09月20日 无依之地 2021年09月03日 失控玩家 2021年08月29日 让子弹飞 2021年08月15日 心灵奇旅 2021年08月10日 脸庞，村庄 2021年08月07日 沉默的真相 2021年08月02日 隐秘的角落 2021年07月31日 花束般的恋爱 2021年07月30日 热带往事 2021年07月30日 大阪直美 2021年07月26日 俗女养成记 2021年07月07日 巴萨提的颜色 2021年07月04日 真心半解 2021年06月11日 过把瘾 2021年06月08日 射雕英雄传 2021年05月27日 茶馆 2021年05月16日 人间的条件 5,6 2021年05月15日 人间的条件 3,4 2021年05月14日 热带雨 人间的条件 1,2 2021年05月13日 南海十三郎 2021年05月11日 笨鸟 2021年05月10日 无言的山丘 2021年05月09日 恐怖分子 2021年05月08日 海滩的一日 2021年05月08日 麻将 2021年05月07日 青梅竹马 盲山 万箭穿心 2021年05月06日 倒霉性爱，发狂黄片 2021年05月05日 龙争虎斗 零水日 2021年05月04日 若水 2021年05月04日 剩女 2021-04-13 盗火者：中国教育改革调查 others # 【风骚律师杂谈】我爱你——86年 "},{"id":7,"href":"/zh/zh/post/life/movies-log/","title":"观影记录","section":"Life","content":" 观影记录 # 2025 # 2025-01-12 敦煌 1 2025-01-12 2 2025-01-15 3 2025-01-16 4 2025-01-18 5 2025-01-20 6 `` 7 `` 8 `` 9 `` 10 `` 2025-01-11 如果国宝会说话 第四季 东京爱情故事 1 2025-01-11 2 2025-01-12 3 2025-01-13 4 2025-01-15 5 2025-01-16 6 2025-01-17 7 2025-01-18 8 2025-01-19 9 2025-01-20 10 2025-01-22 11 `` 2025-01-10 飞屋环游记 2025-01-07 如果国宝会说话 第三季 2025-01-04 如果国宝会说话 第二季 2025-01-03 辛德勒的名单（2） 2025-01-02 四重奏 1 2025-01-02 2 2025-01-03 3 2025-01-04 4 2025-01-05 5 2025-01-06 6 2025-01-07 7 2025-01-08 8 2025-01-09 9 2025-01-10 10 2025-01-10 2025-01-01 如果国宝会说话 第一季 2024 # 2024-12-01 金色梦乡 2024-11-30 Better Call Saul S04E07 2024-11-29 Better Call Saul S04E06 2024-11-28 Better Call Saul S04E05 2024-11-27 Better Call Saul S04E03-04 2024-11-26 Better Call Saul S04E01-02 2024-11-25 Better Call Saul S03E09-10 2024-11-23 热血警探 铁雨 ⭐⭐⭐⭐ 2024-11-18 东邪西毒 终极版 2024-11-17 甲方乙方 2024-11-16 正义回廊 ⭐⭐⭐⭐ 有话好好说 ⭐⭐⭐⭐ 2024-11-15 Better Call Saul S03E07 Better Call Saul S03E08 2024-11-14 Better Call Saul S03E06 2024-11-13 Better Call Saul S03E05 2024-11-12 Better Call Saul S03E04 2024-11-12 Better Call Saul S03E02 Better Call Saul S03E03 2024-10-24 哈利波特与死亡圣器 下 2024-10-23 哈利波特与死亡圣器 上 2024-10-22 哈利波特与混血王子 2024-10-20 哈利波特与凤凰社 哈利波特与火焰杯 哈利波特与阿兹卡班的囚徒 2024-10-19 哈利波特与密室 哈利波特与魔法石 2024-10-07 燃情岁月 ⭐⭐⭐⭐ 抓娃娃 2024-10-06 赛德克巴莱 2024-10-05 名侦探柯南：百万美元的五棱星 2024-10-04 年会不能停 2024-09-17 市场法则 过季 ⭐⭐⭐⭐ 完美的日子 ⭐⭐⭐⭐⭐ 2024-09-15 幽灵公主 鬼灭之刃 那田蜘蛛山篇 鬼灭之刃 柱训练篇 鬼灭之刃 锻刀村篇 2024-09-08 不要抬头 2024-08-18 一部关于咖啡的电影 2024-07-14 鬼灭之刃 游郭篇 鬼灭之刃 无限列车篇 2024-07-07 朗读者 2024-06-15 环法自行车赛：逆风飞驰 第二季 2024-06-09 江湖儿女 2024-05-19 红猪 2024-05-12 繁花 2024-05-04 极速车王 2024-05-03 大佛普拉斯 芝加哥七君子审判 2024-04-22 寻梦环游记 2024-04-21 你想活出怎样的人生 2024-04-06 黄海 逃离乌托邦 2024-04-04 坠落的审判 2024-03-15 周处除三害 2024-03-13 巾帼枭雄之义海豪情 2024-02-20 新闻女王 2024-02-18 飞驰人生2 2024-02-09 阿尔法围棋 哈利波特20周年：回到霍格沃茨 2024-02-08 三大队 2024-01-20 土拨鼠之日 2024-01-10 请回答1988 2023 # 2023年5月2日 婚姻生活 2023年4月29日 惠子，凝视 ⭐⭐⭐⭐ 2023年3月18日 黑暗荣耀 第二季 2023年3月05日 乒乓 2023年2月12日 健听女孩 2023年1月30日 黑匣子 2023年1月29日 巴斯克·斯克鲁格斯的歌谣 2023年1月27日 马拉多纳2019 2023年1月26日 马拉多纳之死 2023年1月26日 打扰伯格曼 2023年1月26日 误杀瞒天记 2023年1月26日 我即闪电 2023年1月25日 风骚律师 第六季 ⭐⭐⭐⭐⭐ 2023年1月25日 宿敌 2023年1月24日 互联网之子 2023年1月22日 互联网之子 2023年1月22日 万圣节的新娘 2023年1月22日 伊卡洛斯 2023年1月22日 老师，您能坐我旁边吗？ 2022 # 2022年10月07日 真相捕捉 第二季 2022年10月03日 黑洞 2022年09月10日 六号车厢 ⭐⭐⭐⭐ 2022年08月10日 我的天才女友 第三季 2022年07月31日 命运喜欢恶作剧 2022年07月30日 人生大事 2022年07月26日 渔业阴谋 2022年02月08日 Tinder诈骗王 2022年02月07日 亢奋 第一季 2022年02月03日 情事 2022年02月03日 火口的两人 2022年02月03日 激情 2022年02月02日 偶然与想象 2022年02月02日 东城梦魇 2022年02月01日 2020去死 2022年01月31日 瀑布 2022年01月31日 天注定 2022年01月30日 T省的 84·85年 2022年01月30日 天道 2022年01月20日 405谋杀案 2022年01月19日 背靠背，脸对脸 2022年01月18日 黑炮事件 2022年01月17日 成瘾剂量 2022年01月09日 驾驶我的车 ⭐⭐⭐⭐ 2022年01月01日 踏雪寻梅 2021 # 2021年12月26日 困在时间里的父亲 2021年11月19日 扬名立万 2021年11月13日 不老奇事 2021年10月31日 沙丘 2021年10月31日 007:无暇赴死 2021年10月16日 长津湖 2021年10月10日 吗啡 2021年09月25日 峰爆 2021年09月22日 教室里的一头牦牛 2021年09月20日 无依之地 2021年09月03日 失控玩家 2021年08月29日 让子弹飞 2021年08月15日 心灵奇旅 2021年08月10日 脸庞，村庄 2021年08月07日 沉默的真相 2021年08月02日 隐秘的角落 2021年07月31日 花束般的恋爱 2021年07月30日 热带往事 2021年07月30日 大阪直美 2021年07月26日 俗女养成记 2021年07月07日 巴萨提的颜色 2021年07月04日 真心半解 2021年06月11日 过把瘾 2021年06月08日 射雕英雄传 2021年05月27日 茶馆 2021年05月16日 人间的条件 5,6 2021年05月15日 人间的条件 3,4 2021年05月14日 热带雨 人间的条件 1,2 2021年05月13日 南海十三郎 2021年05月11日 笨鸟 2021年05月10日 无言的山丘 2021年05月09日 恐怖分子 2021年05月08日 海滩的一日 2021年05月08日 麻将 2021年05月07日 青梅竹马 盲山 万箭穿心 2021年05月06日 倒霉性爱，发狂黄片 2021年05月05日 龙争虎斗 零水日 2021年05月04日 若水 2021年05月04日 剩女 2021-04-13 盗火者：中国教育改革调查 others # 【风骚律师杂谈】我爱你——86年 "},{"id":8,"href":"/zh/post/computer-science/computer-science-learning-log/","title":"学习记录","section":"Computer Science","content":" 学习记录 # 2025-01-17 # 剑指Offer Book # 剑指Offer 第1章 面试的流程 1 # 1.1 面试官谈面试 1 1.2 面试的三种形式 2 1.2.1 电话面试 2 1.2.2 共享桌面远程面试 3 1.2.3 现场面试 4 1.3 面试的三个环节 5 1.3.1 行为面试环节 5 应聘者的项目经验 6 应聘者掌握的技能 7 回答“为什么跳槽” 8 1.3.2 技术面试环节 10 扎实的基础知识 10 高质量的代码 11 清晰的思路 14 优化效率的能力 15 优秀的综合能力 16 1.3.3 应聘者提问环节 17 1.4 本章小结 18 第2章 面试需要的基础知识 20 # 2.1 面试官谈基础知识 20 2.2 编程语言 22 2.2.1 C++ 22 面试题1：赋值运算符函数 24 经典的解法，适用于初级程序员 25 考虑异常安全性的解法，高级程序员必备 26 2.2.2 C# 27 面试题2：实现Singleton模式 31 不好的解法一：只适用于单线程 31 不好的解法二：可用于多线程但效率不高 32 可行的解法：同步锁前后两次判断 33 推荐的解法一：利用静态构造函数 34 推荐的解法二：按需创建实例 34 解法比较 35 2.3 数据结构 36 2.3.1 数组 36 面试题3：二维数组中的查找 38 2.3.2 字符串 42 面试题4：替换空格 44 O(n2)的解法，不足以拿到Offer 45 O(n)的解法，搞定Offer就靠它 46 2.3.3 链表 49 面试题5：从尾到头打印链表 51 2.3.4 树 53 面试题6：重建二叉树 55 2.3.5 栈和队列 58 面试题7：用两个栈实现队列 59 2.4 算法和数据操作 62 2.4.1 查找和排序 63 面试题8：旋转数组的最小数字 66 2.4.2 递归和循环 71 面试题9：斐波那契数列 73 效率很低的解法，面试官不会喜欢 73 面试官期待的实用解法 74 O(logn)但不够实用的解法 74 解法比较 75 2.4.3 位运算 77 面试题10：二进制中1的个数 78 可能引起死循环的解法 79 常规解法 79 能给面试官带来惊喜的解法 80 2.5 本章小结 82 第3章 高质量的代码 84 # 3.1 面试官谈代码质量 84 3.2 代码的规范性 86 3.3 代码的完整性 87 从3方面确保代码的完整性 87 3种错误处理的方法 88 面试题11：数值的整数次方 90 自以为题目简单的解法 90 全面但不够高效的解法，离Offer已经很近了 90 全面又高效的解法，确保能拿到Offer 92 面试题12：打印1到最大的n位数 94 跳进面试官陷阱 94 在字符串上模拟数字加法 94 把问题转换成数字排列 97 面试题13：在O(1)时间删除链表结点 99 面试题14：调整数组顺序使奇数位于偶数前面 102 只完成基本功能的解法，仅适用于初级程序员 102 考虑可扩展性的解法，能秒杀Offer 104 3.4 代码的鲁棒性 106 面试题15：链表中倒数第k个结点 107 面试题16：反转链表 112 面试题17：合并两个排序的链表 114 面试题18：树的子结构 117 3.5 本章小结 121 第4章 解决面试题的思路 123 # 4.1 面试官谈面试思路 123 面试题19：二叉树的镜像 125 4.2 画图让抽象问题形象化 125 面试题20：顺时针打印矩阵 127 4.3 举例让抽象问题具体化 131 面试题21：包含min函数的栈 132 面试题22：栈的压入、弹出序列 134 面试题23：从上往下打印二叉树 137 面试题24：二叉搜索树的后序遍历序列 140 面试题25：二叉树中和为某一值的路径 143 4.4 分解让复杂问题简单化 146 面试题26：复杂链表的复制 147 面试题27：二叉搜索树与双向链表 151 面试题28：字符串的排列 154 4.5 本章小结 158 第5章 优化时间和空间效率 160 # 5.1 面试官谈效率 160 5.2 时间效率 162 面试题29：数组中出现次数超过一半的数字 163 基于Partition函数的O(n)算法 163 利用数组特点的O(n)算法 165 解法比较 166 面试题30：最小的k个数 167 O(n)的算法，只当可以修改输入数组时可用 167 O(nlogk)的算法，适合处理海量数据 168 解法比较 169 面试题31：连续子数组的最大和 171 举例分析数组的规律 171 应用动态规划法 173 面试题32：从1到n整数中1出现的次数 174 不考虑效率的解法，想拿Offer有点难 174 明显提高效率的解法，让面试官耳目一新 175 面试题33：把数组排成最小的数 177 5.3 时间效率与空间效率的平衡 181 面试题34：丑数 182 逐个判断整数是不是丑数的解法 182 创建数组保存已经找到的丑数的解法 183 面试题35：第一个只出现一次的字符 186 面试题36：数组中的逆序对 189 面试题37：两个链表的第一个公共结点 193 5.4 本章小结 196 第6章 面试中的各项能力 198 # 6.1 面试官谈能力 198 6.2 沟通能力和学习能力 200 沟通能力 200 学习能力 200 善于学习、沟通的人也善于提问 201 6.3 知识迁移能力 203 面试题38：数字在排序数组中出现的次数 204 面试题39：二叉树的深度 207 重复遍历结点的解法，不足以打动面试官 209 只遍历结点一次的解法，正是面试官喜欢的 209 面试题40：数组中只出现一次的数字 211 面试题41：和为s的两个数字VS和为s的连续正数序列 214 面试题42：翻转单词顺序 VS左旋转字符串 218 6.4 抽象建模能力 222 面试题43：n个骰子的点数 223 基于递归求骰子点数，时间效率不够高 223 基于循环求骰子点数，时间性能好 224 面试题44：扑克牌的顺子 226 面试题45：圆圈中最后剩下的数字 228 经典的解法，用循环链表模拟圆圈 229 创新的解法，拿到Offer不在话下 230 6.5 发散思维能力 232 面试题46：求1+2+…+n 233 利用构造函数求解 234 利用虚函数求解 234 利用函数指针求解 235 利用模板类型求解 236 面试题47：不用加减乘除做加法 237 面试题48：不能被继承的类 239 常规的解法：把构造函数设为私有函数 239 新奇的解法：利用虚拟继承 240 6.6 本章小结 241 第7章 两个面试案例 243 # 7.1 案例一：（面试题49）把字符串转换成整数 244 7.2 案例二：（面试题50）树中两个结点的最低公共祖先 252 第8章 英文版新增面试题 261 # 8.1 数组 261 面试题51：数组中重复的数字 261 面试题52：构建乘积数组 263 8.2 字符串 265 面试题53：正则表达式匹配 265 面试题54：表示数值的字符串 267 面试题55：字符流中第一个不重复的字符 269 8.3 链表 270 面试题56：链表中环的入口结点 270 面试题57：删除链表中重复的结点 273 8.4 树 275 面试题58：二叉树的下一个结点 275 面试题59：对称的二叉树 277 面试题60：把二叉树打印成多行 278 面试题61：按之字形顺序打印二叉树 280 面试题62：序列化二叉树 283 面试题63：二叉搜索树的第k个结点 285 面试题64：数据流中的中位数 286 8.5 栈和队列 290 面试题65：滑动窗口的最大值 290 8.6 回溯法 294 面试题66：矩阵中的路径 294 面试题67：机器人的运动范围 296 2025-01-11 # leetcode 刷题 # 面试经典150题 # 面试经典150题 数组/字符串 # 合并两个有序数组 2025-01-12 移除元素 2025-01-11 删除有序数组中的重复项 2025-01-11 没有做出来，看的官方题解 2025-01-11 做完删除有序数组中的重复项 II之后再尝试重新解题完成 删除有序数组中的重复项 II 2025-01-11 多数元素 2025-01-12 轮转数组 2025-01-18 进阶 尽可能想出更多的解决方案，至少有 三种 不同的方法可以解决这个问题。 你可以使用空间复杂度为 O(1) 的 原地 算法解决这个问题吗？ 买卖股票的最佳时机 2025-01-11 看官方题解做出来的 2025-01-17 review 买卖股票的最佳时机 II 官方题解 理解 2025-01-17 方法一：动态规划 方法二：贪心 跳跃游戏 2025-01-17 官方题解理解 贪心 2025-01-18 跳跃游戏 II 2025-01-18 算法超时了 理解官方题解 2025-01-18 方法一：反向查找出发位置 Solution45.jump2 2025-01-18 方法二：正向查找可达到的最大位置 Solution45.jump3 H 指数 2025-01-18 Tips An easy approach is to sort the array first. What are the possible values of h-index? A faster approach is to use extra space. O(1) 时间插入、删除和获取随机元素 除自身以外数组的乘积 加油站 分发糖果 接雨水 罗马数字转整数 2025-01-12 整数转罗马数字 最后一个单词的长度 2025-01-12 最长公共前缀 2025-01-12 反转字符串中的单词 2025-01-18 进阶 如果字符串在你使用的编程语言中是一种可变数据类型，请尝试使用 O(1) 额外空间复杂度的 原地 解法。 Z 字形变换 找出字符串中第一个匹配项的下标 2025-01-12 文本左右对齐 双指针 # 验证回文串 2025-01-13 判断子序列 2025-01-13 两数之和 II - 输入有序数组 2025-01-13 运行有时候会超过时间限制 盛最多水的容器 三数之和 滑动窗口 # 长度最小的子数组 2025-01-22 无重复字符的最长子串 2025-01-22 串联所有单词的子串 2025-01-22 最小覆盖子串 矩阵 # 有效的数独 2025-01-18 螺旋矩阵 2025-01-18 旋转图像 理解官方题解 2025-01-18 方法一：使用辅助数组 2025-01-18 方法二：原地旋转 有数学公式的推导，需要自己推导一次 2025-01-18 方法三：用翻转代替旋转 有数学公式的推导，需要自己推导一次 矩阵置零 2025-01-18 生命游戏 2025-01-18 进阶 你可以使用原地算法解决本题吗？请注意，面板上所有格子需要同时被更新：你不能先更新某些格子，然后使用它们的更新后的值再更新其他格子。 本题中，我们使用二维数组来表示面板。原则上，面板是无限的，但当活细胞侵占了面板边界时会造成问题。你将如何解决这些问题？ ✅ 哈希表 # 赎金信 2025-01-13 同构字符串 2025-01-13 单词规律 2025-01-13 有效的字母异位词 2025-01-13 字母异位词分组 2025-01-16 第一遍算法超时，看了官方题解思路后实现通过 两数之和 2025-01-13 快乐数 2025-01-13 存在重复元素 II 2025-01-13 最长连续序列 2025-01-16 看了官方题解后完成 区间 # 栈 # 有效的括号 2025-01-22 简化路径 2025-01-22 最小栈 2025-01-22 理解官方题解 文字描述后完成 2025-01-22 理解官方题解 逆波兰表达式求值 2025-01-22 基本计算器 链表 # 环形链表 2025-01-20 理解官方题解 2025-01-20 方法一：哈希表 方法二：快慢指针 两数相加 2025-01-20 合并两个有序链表 2025-01-20 随机链表的复制 2025-01-20 反转链表 II 2025-01-20 K 个一组翻转链表 删除链表的倒数第 N 个结点 2025-01-20 进阶 2025-01-20 你能尝试使用一趟扫描实现吗？ 删除排序链表中的重复元素 II 2025-01-21 旋转链表 2025-01-20 分隔链表 2025-01-21 LRU 缓存 2025-01-22 理解官方题解 二叉树 # 二叉树的最大深度 2025-01-15 相同的树 2025-01-15 翻转二叉树 2025-01-15 对称二叉树 没做出来，看的官方题解 从前序与中序遍历序列构造二叉树 从中序与后序遍历序列构造二叉树 填充每个节点的下一个右侧节点指针 II 二叉树展开为链表 路径总和 求根节点到叶节点数字之和 二叉树中的最大路径和 二叉搜索树迭代器 完全二叉树的节点个数 二叉树的最近公共祖先 二叉树层次遍历 # 二叉搜索树 # 图 # 图的广度优先搜索 # 字典树 # ✅ 回溯 # 电话号码的字母组合 2025-01-15 组合 2025-01-15 全排列 2025-01-15 组合总和 2025-01-15 N 皇后 II 2025-01-15 括号生成 2025-01-15 单词搜索 2025-01-15 分治 # kadane算法 # 二分查找 # 堆 # 位运算 # 二进制求和 2025-01-16 颠倒二进制位 2025-01-16 没做出来, 参考这篇文章LeetCode 190. 颠倒二进制位 （位运算 分治） 2025-01-17 复习了一遍 2025-01-17 新增了中间值打印的代码在算法中 位1的个数 2025-01-17 只出现一次的数字 2025-01-17 只出现一次的数字 II 2025-01-17 理解了官方题解 方法2 数字范围按位与 2025-01-17 理解了官方题解 方法2 数学 # 回文数 2025-01-17 不将整数转为字符串来解决这个问题 加一 2025-01-17 阶乘后的零 2025-01-17 x 的平方根 2025-01-17 Pow(x, n) 2025-01-17 超时了 2025-01-17 看懂了官方题解 直线上最多的点数 2025-01-17 看了官方题解，但还是不太理解 一维动态规划 # 爬楼梯 2025-01-11 通过 多维动态规划 # 2025-01-09 # ✅ Spring实战 第6版 Book # 第1章 Spring 起步 1.1 什么是Spring 2025-01-09 1.2 初始化 spring 应用 2025-01-09 1.3 编写 Spring 应用 2025-01-09 1.4 俯瞰 Spring 风景线 2025-01-09 第2章 2.1 展现信息 2025-01-09 2.2 处理表单提交 2025-01-09 2.3 校验表单输入 2025-01-09 2.4 使用视图控制器 2025-01-09 2.5 选择视图模板库 2025-01-09 第3章 使用数据 3.1 2025-01-09 3.2 2025-01-11 3.3 2025-01-11 第4章 使用非关系型数据 4.1 2025-01-11 4.2 2025-01-11 第5章 保护Spring 5.1 2025-01-11 5.2 2025-01-11 5.3 2025-01-11 5.4 2025-01-11 5.5 2025-01-12 第6章 使用配置属性 6.1 2025-01-12 6.2 2025-01-12 6.3 2025-01-12 第7章 创建REST服务 7.1 2025-01-12 7.2 2025-01-12 7.3 2025-01-12 第8章 保护REST 8.1 2025-01-12 8.2 2025-01-12 8.3 2025-01-12 8.4 2025-01-12 第9章 发送异步消息 9.1 2025-01-13 9.2 2025-01-13 9.3 2025-01-13 第10章 Spring集成 10.1 2025-01-13 10.2 2025-01-13 10.3 2025-01-13 第11章 理解反应式编程 11.1 2025-01-13 11.2 2025-01-13 11.3 2025-01-13 第12章 开发反应式API 12.1 2025-01-13 12.2 2025-01-13 12.3 2025-01-13 12.4 2025-01-13 12.5 2025-01-13 第13章 反应式持久化数据 13.1 2025-01-14 13.2 2025-01-14 13.3 2025-01-14 第14章 使用RSocket 14.1 2025-01-14 14.2 2025-01-15 14.3 2025-01-15 第15章 部署Spring 15.1 2025-01-15 15.2 2025-01-15 15.3 2025-01-15 15.4 2025-01-15 第16章 管理Spring 16.1 2025-01-15 16.2 2025-01-15 16.3 2025-01-15 第17章 使用JMX监控Spring 17.1 2025-01-15 17.2 2025-01-15 17.3 2025-01-15 第18章 部署Spring 18.1 2025-01-15 18.2 2025-01-15 18.3 2025-01-15 18.4 2025-01-15 18.5 2025-01-15 JavaGuide 文档阅读 # JavaGuide 必看 面试准备 Java 计算机基础 数据库 开发工具 常用框架 Spring\u0026amp;Spring Boot MyBatis常见面试题总结 2025-01-09 太过总结性，需要看一些更基础的文章 Netty常见面试题总结 系统设计 分布式 高性能 高可用 2025-01-08 # 计算机教育中缺失的学期 # 计算机教育中缺失的学期 阮一峰博客阅读 # 阮一峰的网络日志 散文 观点与感想 算法与数学 开发者手册 理解计算机 JavaScript 计算机行业历史 周刊 创业 译文集 2025-01-05 # spring 基础知识点 视频 # B站大学终于把Spring做成动画片了，一周刷爆，2024最新版，学完即可面试，拿走不谢，学不会我退出IT圈！ 1 2025-01-05 Spring 是如何整合MyBatis管理Mapper接口的 2025-01-05 2 2025-01-06 3 2025-01-06 4 2025-01-06 5 2025-01-06 6 2025-01-06 7 2025-01-06 8 2025-01-06 9 2025-01-06 10 2025-01-06 11 (January 6, 2025 at 18:43:04 GMT+8) 12 (January 6, 2025 at 18:50:57 GMT+8) 13 (January 6, 2025 at 18:57:05 GMT+8) 14 (January 6, 2025 at 18:59:15 GMT+8) 15 2025-01-07 16 2025-01-07 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 100 2025-01-03 # 代码随想录 视频 # 代码随想录 数组 # 链表 # 哈希表 # 字符串 # 栈与队列 # 二叉树 # 1 理论基础 2025-01-09 2 递归遍历 (Leetcode 144, 145, 94) 2025-01-09 3 非递归遍历 2025-01-09 4 非递归遍历-中序 2025-01-11 5 层序遍历（广度优先搜索） 6 翻转二叉树 7 对称二叉树 8 二叉树的最大深度 9 二叉树的最小深度 10 完全二叉树节点的数量 11 平衡二叉树 12 二叉树的所有路径 13 左叶子之和 14 找左下角的值 15 路径总和 16 从中序和后序遍历序列构造二叉树 17 最大二叉树 18 合并二叉树 19 二叉搜索树中的搜索 (Leetcode 700) 2025-01-08 20 验证二叉搜索树 (Leetcode 98) 2025-01-08 21 二叉搜索树的最小绝对差 (Leetcode 530) 2025-01-08 22 二叉搜索树中的众数(Leetcode 501) 2025-01-09 23 二叉树的最近公共祖先(Leetcode 236) 2025-01-09 24 二叉搜索树的最近公共祖先 2025-01-09 25 二叉搜索树中的插入操作(Leetcode 701) 2025-01-09 26 删除二叉搜索树中的节点(Leetcode 450) 2025-01-09 27 修剪二叉搜索树 (Leetcode 669) 2025-01-09 28 将有序数组转换为二叉搜索树 (Leetcode 108) 2025-01-09 29 把二叉搜索树转换为累加树(Leetcode 538) 2025-01-09 ✅ 回溯法 # 1 理论篇 2025-01-03 2 组合问题（对应力扣题目：77.组合） 2025-01-03 3 组合问题的剪枝操作（对应力扣题目：77.组合）2025-01-03 4 回溯算法如何剪枝？| LeetCode：216.组合总和III 2025-01-03 5 LeetCode：17.电话号码的字母组合 2025-01-03 6 组合总和（对应「leetcode」力扣题目：39.组合总和） 2025-01-03 7 LeetCode:40.组合总和II 2025-01-03 8 分割回文串 2025-01-04 9 复原IP地址 2025-01-04 10 子集 （Leetcode 78） 2025-01-04 11 子集2（Leetcode 90） 2025-01-04 12 递增子序列（Leetcode 491） 2025-01-04 13 全排列（Leetcode 46） 2025-01-04 14 全排列2（Leetcode 47）2025-01-04 15 N皇后（Leetcode 51） 2025-01-05 16 解数独（Leetcode 37） 2025-01-05 ✅ 贪心算法 # 理论基础 2025-01-05 1 分发饼干 leetcode 455 2025-01-05 2 摆动序列 Leetcode 376 2025-01-05 3 最大子序和 2025-01-06 4 买卖股票最佳时机2 2025-01-06 5 跳跃游戏（Leetcode 55） 2025-01-06 6 跳跃游戏2 （Leetcode 45） 2025-01-06 这道题没听懂 7 K次取反后最大化的数组和 （Leetcode 1005） 2025-01-06 8 加油站（Leetcode 134） 2025-01-06 9 分发糖果（Leetcode 135） 2025-01-06 10 柠檬水找零（Leetcode 860） 2025-01-06 11 根据身高重建队列（Leetcode 406） 2025-01-06 12 用最少数量的箭引爆气球(Leetcode 452) 2025-01-06 13 无重叠区间(Leetcode 435) 2025-01-06 14 划分字母区间 (Leetcode 763) 2025-01-06 15 合并区间 （Leetcode 56） (January 7, 2025 at 15:18:40 GMT+8) 16 单调自增的数字（Leetcode 738）(January 7, 2025 at 15:41:59 GMT+8) 17 监督二叉树（Leetcode 968） (January 7, 2025 at 16:11:51 GMT+8) 动态规划 # 1 理论基础 (January 7, 2025 at 16:34:49 GMT+8) 2 斐波那契数列 （Leetcode 509） (January 7, 2025 at 16:46:54 GMT+8) 3 爬楼梯（Leetcode 70） (January 7, 2025 at 16:57:46 GMT+8) 4 使用最小花费爬楼梯 (Leetcode 746) 2025-01-08 5 不同路径 2025-01-08 6 不同路径2 (Leetcode 63) 2025-01-08 7 整数拆分 (Leetcode 343) 2025-01-08 这道题没太听懂 8 不同的二叉搜索树（Leetcode 96） 9 0-1背包问题理论基础 10 0-1背包问题之滚动数组 11 分割等和子集 12 最后一块石头的重量2 13 目标和 14 一和零 15 完全背包理论基础 16 零钱兑换2 17 组合综合4 18 零钱兑换 19 完全平方数 20 单词拆分 21 打家劫舍 22 打家劫舍2 23 打家劫舍3 24 买卖股票的最佳时机1 25 买卖股票的最佳时机2 26 买卖股票的最佳时机3 27 买卖股票的最佳时机4 28 买卖股票的最佳时机含冷冻期 29 买卖股票的最佳时机含手续费 30 最长递增子序列 31 最长连续递增序列 32 最长重复子数组 33 最长公共子序列 34 不相交的线 35 最大子序和 36 判断子序列 37 不同的子序列 38 两个字符串的删除操作 39 编辑距离 40 回文子串 42 最长回文子序列 单调栈 # 2024-11-14 # What I Wish Someone Told Me About Postgres 介绍了 postgresql 相关的一些知识点，可以看一看 The WIRED Guide to Protecting Yourself From Government Surveillance How a stubborn computer scientist accidentally launched the deep learning boom 可以了解到 辛顿、黄仁勋、李飞飞 的工作是如何推动神经网络的发展的 "},{"id":9,"href":"/zh/zh/post/computer-science/computer-science-learning-log/","title":"学习记录","section":"Computer Science","content":" 学习记录 # 2025-01-17 # 剑指Offer Book # 剑指Offer 第1章 面试的流程 1 # 1.1 面试官谈面试 1 1.2 面试的三种形式 2 1.2.1 电话面试 2 1.2.2 共享桌面远程面试 3 1.2.3 现场面试 4 1.3 面试的三个环节 5 1.3.1 行为面试环节 5 应聘者的项目经验 6 应聘者掌握的技能 7 回答“为什么跳槽” 8 1.3.2 技术面试环节 10 扎实的基础知识 10 高质量的代码 11 清晰的思路 14 优化效率的能力 15 优秀的综合能力 16 1.3.3 应聘者提问环节 17 1.4 本章小结 18 第2章 面试需要的基础知识 20 # 2.1 面试官谈基础知识 20 2.2 编程语言 22 2.2.1 C++ 22 面试题1：赋值运算符函数 24 经典的解法，适用于初级程序员 25 考虑异常安全性的解法，高级程序员必备 26 2.2.2 C# 27 面试题2：实现Singleton模式 31 不好的解法一：只适用于单线程 31 不好的解法二：可用于多线程但效率不高 32 可行的解法：同步锁前后两次判断 33 推荐的解法一：利用静态构造函数 34 推荐的解法二：按需创建实例 34 解法比较 35 2.3 数据结构 36 2.3.1 数组 36 面试题3：二维数组中的查找 38 2.3.2 字符串 42 面试题4：替换空格 44 O(n2)的解法，不足以拿到Offer 45 O(n)的解法，搞定Offer就靠它 46 2.3.3 链表 49 面试题5：从尾到头打印链表 51 2.3.4 树 53 面试题6：重建二叉树 55 2.3.5 栈和队列 58 面试题7：用两个栈实现队列 59 2.4 算法和数据操作 62 2.4.1 查找和排序 63 面试题8：旋转数组的最小数字 66 2.4.2 递归和循环 71 面试题9：斐波那契数列 73 效率很低的解法，面试官不会喜欢 73 面试官期待的实用解法 74 O(logn)但不够实用的解法 74 解法比较 75 2.4.3 位运算 77 面试题10：二进制中1的个数 78 可能引起死循环的解法 79 常规解法 79 能给面试官带来惊喜的解法 80 2.5 本章小结 82 第3章 高质量的代码 84 # 3.1 面试官谈代码质量 84 3.2 代码的规范性 86 3.3 代码的完整性 87 从3方面确保代码的完整性 87 3种错误处理的方法 88 面试题11：数值的整数次方 90 自以为题目简单的解法 90 全面但不够高效的解法，离Offer已经很近了 90 全面又高效的解法，确保能拿到Offer 92 面试题12：打印1到最大的n位数 94 跳进面试官陷阱 94 在字符串上模拟数字加法 94 把问题转换成数字排列 97 面试题13：在O(1)时间删除链表结点 99 面试题14：调整数组顺序使奇数位于偶数前面 102 只完成基本功能的解法，仅适用于初级程序员 102 考虑可扩展性的解法，能秒杀Offer 104 3.4 代码的鲁棒性 106 面试题15：链表中倒数第k个结点 107 面试题16：反转链表 112 面试题17：合并两个排序的链表 114 面试题18：树的子结构 117 3.5 本章小结 121 第4章 解决面试题的思路 123 # 4.1 面试官谈面试思路 123 面试题19：二叉树的镜像 125 4.2 画图让抽象问题形象化 125 面试题20：顺时针打印矩阵 127 4.3 举例让抽象问题具体化 131 面试题21：包含min函数的栈 132 面试题22：栈的压入、弹出序列 134 面试题23：从上往下打印二叉树 137 面试题24：二叉搜索树的后序遍历序列 140 面试题25：二叉树中和为某一值的路径 143 4.4 分解让复杂问题简单化 146 面试题26：复杂链表的复制 147 面试题27：二叉搜索树与双向链表 151 面试题28：字符串的排列 154 4.5 本章小结 158 第5章 优化时间和空间效率 160 # 5.1 面试官谈效率 160 5.2 时间效率 162 面试题29：数组中出现次数超过一半的数字 163 基于Partition函数的O(n)算法 163 利用数组特点的O(n)算法 165 解法比较 166 面试题30：最小的k个数 167 O(n)的算法，只当可以修改输入数组时可用 167 O(nlogk)的算法，适合处理海量数据 168 解法比较 169 面试题31：连续子数组的最大和 171 举例分析数组的规律 171 应用动态规划法 173 面试题32：从1到n整数中1出现的次数 174 不考虑效率的解法，想拿Offer有点难 174 明显提高效率的解法，让面试官耳目一新 175 面试题33：把数组排成最小的数 177 5.3 时间效率与空间效率的平衡 181 面试题34：丑数 182 逐个判断整数是不是丑数的解法 182 创建数组保存已经找到的丑数的解法 183 面试题35：第一个只出现一次的字符 186 面试题36：数组中的逆序对 189 面试题37：两个链表的第一个公共结点 193 5.4 本章小结 196 第6章 面试中的各项能力 198 # 6.1 面试官谈能力 198 6.2 沟通能力和学习能力 200 沟通能力 200 学习能力 200 善于学习、沟通的人也善于提问 201 6.3 知识迁移能力 203 面试题38：数字在排序数组中出现的次数 204 面试题39：二叉树的深度 207 重复遍历结点的解法，不足以打动面试官 209 只遍历结点一次的解法，正是面试官喜欢的 209 面试题40：数组中只出现一次的数字 211 面试题41：和为s的两个数字VS和为s的连续正数序列 214 面试题42：翻转单词顺序 VS左旋转字符串 218 6.4 抽象建模能力 222 面试题43：n个骰子的点数 223 基于递归求骰子点数，时间效率不够高 223 基于循环求骰子点数，时间性能好 224 面试题44：扑克牌的顺子 226 面试题45：圆圈中最后剩下的数字 228 经典的解法，用循环链表模拟圆圈 229 创新的解法，拿到Offer不在话下 230 6.5 发散思维能力 232 面试题46：求1+2+…+n 233 利用构造函数求解 234 利用虚函数求解 234 利用函数指针求解 235 利用模板类型求解 236 面试题47：不用加减乘除做加法 237 面试题48：不能被继承的类 239 常规的解法：把构造函数设为私有函数 239 新奇的解法：利用虚拟继承 240 6.6 本章小结 241 第7章 两个面试案例 243 # 7.1 案例一：（面试题49）把字符串转换成整数 244 7.2 案例二：（面试题50）树中两个结点的最低公共祖先 252 第8章 英文版新增面试题 261 # 8.1 数组 261 面试题51：数组中重复的数字 261 面试题52：构建乘积数组 263 8.2 字符串 265 面试题53：正则表达式匹配 265 面试题54：表示数值的字符串 267 面试题55：字符流中第一个不重复的字符 269 8.3 链表 270 面试题56：链表中环的入口结点 270 面试题57：删除链表中重复的结点 273 8.4 树 275 面试题58：二叉树的下一个结点 275 面试题59：对称的二叉树 277 面试题60：把二叉树打印成多行 278 面试题61：按之字形顺序打印二叉树 280 面试题62：序列化二叉树 283 面试题63：二叉搜索树的第k个结点 285 面试题64：数据流中的中位数 286 8.5 栈和队列 290 面试题65：滑动窗口的最大值 290 8.6 回溯法 294 面试题66：矩阵中的路径 294 面试题67：机器人的运动范围 296 2025-01-11 # leetcode 刷题 # 面试经典150题 # 面试经典150题 数组/字符串 # 合并两个有序数组 2025-01-12 移除元素 2025-01-11 删除有序数组中的重复项 2025-01-11 没有做出来，看的官方题解 2025-01-11 做完删除有序数组中的重复项 II之后再尝试重新解题完成 删除有序数组中的重复项 II 2025-01-11 多数元素 2025-01-12 轮转数组 2025-01-18 进阶 尽可能想出更多的解决方案，至少有 三种 不同的方法可以解决这个问题。 你可以使用空间复杂度为 O(1) 的 原地 算法解决这个问题吗？ 买卖股票的最佳时机 2025-01-11 看官方题解做出来的 2025-01-17 review 买卖股票的最佳时机 II 官方题解 理解 2025-01-17 方法一：动态规划 方法二：贪心 跳跃游戏 2025-01-17 官方题解理解 贪心 2025-01-18 跳跃游戏 II 2025-01-18 算法超时了 理解官方题解 2025-01-18 方法一：反向查找出发位置 Solution45.jump2 2025-01-18 方法二：正向查找可达到的最大位置 Solution45.jump3 H 指数 2025-01-18 Tips An easy approach is to sort the array first. What are the possible values of h-index? A faster approach is to use extra space. O(1) 时间插入、删除和获取随机元素 除自身以外数组的乘积 加油站 分发糖果 接雨水 罗马数字转整数 2025-01-12 整数转罗马数字 最后一个单词的长度 2025-01-12 最长公共前缀 2025-01-12 反转字符串中的单词 2025-01-18 进阶 如果字符串在你使用的编程语言中是一种可变数据类型，请尝试使用 O(1) 额外空间复杂度的 原地 解法。 Z 字形变换 找出字符串中第一个匹配项的下标 2025-01-12 文本左右对齐 双指针 # 验证回文串 2025-01-13 判断子序列 2025-01-13 两数之和 II - 输入有序数组 2025-01-13 运行有时候会超过时间限制 盛最多水的容器 三数之和 滑动窗口 # 长度最小的子数组 2025-01-22 无重复字符的最长子串 2025-01-22 串联所有单词的子串 2025-01-22 最小覆盖子串 矩阵 # 有效的数独 2025-01-18 螺旋矩阵 2025-01-18 旋转图像 理解官方题解 2025-01-18 方法一：使用辅助数组 2025-01-18 方法二：原地旋转 有数学公式的推导，需要自己推导一次 2025-01-18 方法三：用翻转代替旋转 有数学公式的推导，需要自己推导一次 矩阵置零 2025-01-18 生命游戏 2025-01-18 进阶 你可以使用原地算法解决本题吗？请注意，面板上所有格子需要同时被更新：你不能先更新某些格子，然后使用它们的更新后的值再更新其他格子。 本题中，我们使用二维数组来表示面板。原则上，面板是无限的，但当活细胞侵占了面板边界时会造成问题。你将如何解决这些问题？ ✅ 哈希表 # 赎金信 2025-01-13 同构字符串 2025-01-13 单词规律 2025-01-13 有效的字母异位词 2025-01-13 字母异位词分组 2025-01-16 第一遍算法超时，看了官方题解思路后实现通过 两数之和 2025-01-13 快乐数 2025-01-13 存在重复元素 II 2025-01-13 最长连续序列 2025-01-16 看了官方题解后完成 区间 # 栈 # 有效的括号 2025-01-22 简化路径 2025-01-22 最小栈 2025-01-22 理解官方题解 文字描述后完成 2025-01-22 理解官方题解 逆波兰表达式求值 2025-01-22 基本计算器 链表 # 环形链表 2025-01-20 理解官方题解 2025-01-20 方法一：哈希表 方法二：快慢指针 两数相加 2025-01-20 合并两个有序链表 2025-01-20 随机链表的复制 2025-01-20 反转链表 II 2025-01-20 K 个一组翻转链表 删除链表的倒数第 N 个结点 2025-01-20 进阶 2025-01-20 你能尝试使用一趟扫描实现吗？ 删除排序链表中的重复元素 II 2025-01-21 旋转链表 2025-01-20 分隔链表 2025-01-21 LRU 缓存 2025-01-22 理解官方题解 二叉树 # 二叉树的最大深度 2025-01-15 相同的树 2025-01-15 翻转二叉树 2025-01-15 对称二叉树 没做出来，看的官方题解 从前序与中序遍历序列构造二叉树 从中序与后序遍历序列构造二叉树 填充每个节点的下一个右侧节点指针 II 二叉树展开为链表 路径总和 求根节点到叶节点数字之和 二叉树中的最大路径和 二叉搜索树迭代器 完全二叉树的节点个数 二叉树的最近公共祖先 二叉树层次遍历 # 二叉搜索树 # 图 # 图的广度优先搜索 # 字典树 # ✅ 回溯 # 电话号码的字母组合 2025-01-15 组合 2025-01-15 全排列 2025-01-15 组合总和 2025-01-15 N 皇后 II 2025-01-15 括号生成 2025-01-15 单词搜索 2025-01-15 分治 # kadane算法 # 二分查找 # 堆 # 位运算 # 二进制求和 2025-01-16 颠倒二进制位 2025-01-16 没做出来, 参考这篇文章LeetCode 190. 颠倒二进制位 （位运算 分治） 2025-01-17 复习了一遍 2025-01-17 新增了中间值打印的代码在算法中 位1的个数 2025-01-17 只出现一次的数字 2025-01-17 只出现一次的数字 II 2025-01-17 理解了官方题解 方法2 数字范围按位与 2025-01-17 理解了官方题解 方法2 数学 # 回文数 2025-01-17 不将整数转为字符串来解决这个问题 加一 2025-01-17 阶乘后的零 2025-01-17 x 的平方根 2025-01-17 Pow(x, n) 2025-01-17 超时了 2025-01-17 看懂了官方题解 直线上最多的点数 2025-01-17 看了官方题解，但还是不太理解 一维动态规划 # 爬楼梯 2025-01-11 通过 多维动态规划 # 2025-01-09 # ✅ Spring实战 第6版 Book # 第1章 Spring 起步 1.1 什么是Spring 2025-01-09 1.2 初始化 spring 应用 2025-01-09 1.3 编写 Spring 应用 2025-01-09 1.4 俯瞰 Spring 风景线 2025-01-09 第2章 2.1 展现信息 2025-01-09 2.2 处理表单提交 2025-01-09 2.3 校验表单输入 2025-01-09 2.4 使用视图控制器 2025-01-09 2.5 选择视图模板库 2025-01-09 第3章 使用数据 3.1 2025-01-09 3.2 2025-01-11 3.3 2025-01-11 第4章 使用非关系型数据 4.1 2025-01-11 4.2 2025-01-11 第5章 保护Spring 5.1 2025-01-11 5.2 2025-01-11 5.3 2025-01-11 5.4 2025-01-11 5.5 2025-01-12 第6章 使用配置属性 6.1 2025-01-12 6.2 2025-01-12 6.3 2025-01-12 第7章 创建REST服务 7.1 2025-01-12 7.2 2025-01-12 7.3 2025-01-12 第8章 保护REST 8.1 2025-01-12 8.2 2025-01-12 8.3 2025-01-12 8.4 2025-01-12 第9章 发送异步消息 9.1 2025-01-13 9.2 2025-01-13 9.3 2025-01-13 第10章 Spring集成 10.1 2025-01-13 10.2 2025-01-13 10.3 2025-01-13 第11章 理解反应式编程 11.1 2025-01-13 11.2 2025-01-13 11.3 2025-01-13 第12章 开发反应式API 12.1 2025-01-13 12.2 2025-01-13 12.3 2025-01-13 12.4 2025-01-13 12.5 2025-01-13 第13章 反应式持久化数据 13.1 2025-01-14 13.2 2025-01-14 13.3 2025-01-14 第14章 使用RSocket 14.1 2025-01-14 14.2 2025-01-15 14.3 2025-01-15 第15章 部署Spring 15.1 2025-01-15 15.2 2025-01-15 15.3 2025-01-15 15.4 2025-01-15 第16章 管理Spring 16.1 2025-01-15 16.2 2025-01-15 16.3 2025-01-15 第17章 使用JMX监控Spring 17.1 2025-01-15 17.2 2025-01-15 17.3 2025-01-15 第18章 部署Spring 18.1 2025-01-15 18.2 2025-01-15 18.3 2025-01-15 18.4 2025-01-15 18.5 2025-01-15 JavaGuide 文档阅读 # JavaGuide 必看 面试准备 Java 计算机基础 数据库 开发工具 常用框架 Spring\u0026amp;Spring Boot MyBatis常见面试题总结 2025-01-09 太过总结性，需要看一些更基础的文章 Netty常见面试题总结 系统设计 分布式 高性能 高可用 2025-01-08 # 计算机教育中缺失的学期 # 计算机教育中缺失的学期 阮一峰博客阅读 # 阮一峰的网络日志 散文 观点与感想 算法与数学 开发者手册 理解计算机 JavaScript 计算机行业历史 周刊 创业 译文集 2025-01-05 # spring 基础知识点 视频 # B站大学终于把Spring做成动画片了，一周刷爆，2024最新版，学完即可面试，拿走不谢，学不会我退出IT圈！ 1 2025-01-05 Spring 是如何整合MyBatis管理Mapper接口的 2025-01-05 2 2025-01-06 3 2025-01-06 4 2025-01-06 5 2025-01-06 6 2025-01-06 7 2025-01-06 8 2025-01-06 9 2025-01-06 10 2025-01-06 11 (January 6, 2025 at 18:43:04 GMT+8) 12 (January 6, 2025 at 18:50:57 GMT+8) 13 (January 6, 2025 at 18:57:05 GMT+8) 14 (January 6, 2025 at 18:59:15 GMT+8) 15 2025-01-07 16 2025-01-07 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 100 2025-01-03 # 代码随想录 视频 # 代码随想录 数组 # 链表 # 哈希表 # 字符串 # 栈与队列 # 二叉树 # 1 理论基础 2025-01-09 2 递归遍历 (Leetcode 144, 145, 94) 2025-01-09 3 非递归遍历 2025-01-09 4 非递归遍历-中序 2025-01-11 5 层序遍历（广度优先搜索） 6 翻转二叉树 7 对称二叉树 8 二叉树的最大深度 9 二叉树的最小深度 10 完全二叉树节点的数量 11 平衡二叉树 12 二叉树的所有路径 13 左叶子之和 14 找左下角的值 15 路径总和 16 从中序和后序遍历序列构造二叉树 17 最大二叉树 18 合并二叉树 19 二叉搜索树中的搜索 (Leetcode 700) 2025-01-08 20 验证二叉搜索树 (Leetcode 98) 2025-01-08 21 二叉搜索树的最小绝对差 (Leetcode 530) 2025-01-08 22 二叉搜索树中的众数(Leetcode 501) 2025-01-09 23 二叉树的最近公共祖先(Leetcode 236) 2025-01-09 24 二叉搜索树的最近公共祖先 2025-01-09 25 二叉搜索树中的插入操作(Leetcode 701) 2025-01-09 26 删除二叉搜索树中的节点(Leetcode 450) 2025-01-09 27 修剪二叉搜索树 (Leetcode 669) 2025-01-09 28 将有序数组转换为二叉搜索树 (Leetcode 108) 2025-01-09 29 把二叉搜索树转换为累加树(Leetcode 538) 2025-01-09 ✅ 回溯法 # 1 理论篇 2025-01-03 2 组合问题（对应力扣题目：77.组合） 2025-01-03 3 组合问题的剪枝操作（对应力扣题目：77.组合）2025-01-03 4 回溯算法如何剪枝？| LeetCode：216.组合总和III 2025-01-03 5 LeetCode：17.电话号码的字母组合 2025-01-03 6 组合总和（对应「leetcode」力扣题目：39.组合总和） 2025-01-03 7 LeetCode:40.组合总和II 2025-01-03 8 分割回文串 2025-01-04 9 复原IP地址 2025-01-04 10 子集 （Leetcode 78） 2025-01-04 11 子集2（Leetcode 90） 2025-01-04 12 递增子序列（Leetcode 491） 2025-01-04 13 全排列（Leetcode 46） 2025-01-04 14 全排列2（Leetcode 47）2025-01-04 15 N皇后（Leetcode 51） 2025-01-05 16 解数独（Leetcode 37） 2025-01-05 ✅ 贪心算法 # 理论基础 2025-01-05 1 分发饼干 leetcode 455 2025-01-05 2 摆动序列 Leetcode 376 2025-01-05 3 最大子序和 2025-01-06 4 买卖股票最佳时机2 2025-01-06 5 跳跃游戏（Leetcode 55） 2025-01-06 6 跳跃游戏2 （Leetcode 45） 2025-01-06 这道题没听懂 7 K次取反后最大化的数组和 （Leetcode 1005） 2025-01-06 8 加油站（Leetcode 134） 2025-01-06 9 分发糖果（Leetcode 135） 2025-01-06 10 柠檬水找零（Leetcode 860） 2025-01-06 11 根据身高重建队列（Leetcode 406） 2025-01-06 12 用最少数量的箭引爆气球(Leetcode 452) 2025-01-06 13 无重叠区间(Leetcode 435) 2025-01-06 14 划分字母区间 (Leetcode 763) 2025-01-06 15 合并区间 （Leetcode 56） (January 7, 2025 at 15:18:40 GMT+8) 16 单调自增的数字（Leetcode 738）(January 7, 2025 at 15:41:59 GMT+8) 17 监督二叉树（Leetcode 968） (January 7, 2025 at 16:11:51 GMT+8) 动态规划 # 1 理论基础 (January 7, 2025 at 16:34:49 GMT+8) 2 斐波那契数列 （Leetcode 509） (January 7, 2025 at 16:46:54 GMT+8) 3 爬楼梯（Leetcode 70） (January 7, 2025 at 16:57:46 GMT+8) 4 使用最小花费爬楼梯 (Leetcode 746) 2025-01-08 5 不同路径 2025-01-08 6 不同路径2 (Leetcode 63) 2025-01-08 7 整数拆分 (Leetcode 343) 2025-01-08 这道题没太听懂 8 不同的二叉搜索树（Leetcode 96） 9 0-1背包问题理论基础 10 0-1背包问题之滚动数组 11 分割等和子集 12 最后一块石头的重量2 13 目标和 14 一和零 15 完全背包理论基础 16 零钱兑换2 17 组合综合4 18 零钱兑换 19 完全平方数 20 单词拆分 21 打家劫舍 22 打家劫舍2 23 打家劫舍3 24 买卖股票的最佳时机1 25 买卖股票的最佳时机2 26 买卖股票的最佳时机3 27 买卖股票的最佳时机4 28 买卖股票的最佳时机含冷冻期 29 买卖股票的最佳时机含手续费 30 最长递增子序列 31 最长连续递增序列 32 最长重复子数组 33 最长公共子序列 34 不相交的线 35 最大子序和 36 判断子序列 37 不同的子序列 38 两个字符串的删除操作 39 编辑距离 40 回文子串 42 最长回文子序列 单调栈 # 2024-11-14 # What I Wish Someone Told Me About Postgres 介绍了 postgresql 相关的一些知识点，可以看一看 The WIRED Guide to Protecting Yourself From Government Surveillance How a stubborn computer scientist accidentally launched the deep learning boom 可以了解到 辛顿、黄仁勋、李飞飞 的工作是如何推动神经网络的发展的 "},{"id":10,"href":"/zh/post/others/english-learning/","title":"English Learning","section":"Others","content":" English Learning # lite cnn 纯文字版的cnn，没有图片 lite cnn China China Daily 中国官方最大的英语新闻网站？ voa special English 这个网站听 voa special 不用翻墙 rest of world 这个网站很有设计感 China verge Hacker News 技术文章也能学习英语 南华早报 bbc China quora 国外的知乎 log # 2025-01-07 2024-12-14 “羽绒服”英语怎么说？你绝对想不到！ 2025-01-07 2025-01-06 “年会”英文怎么说？“Year Meeting”还是“Annual Party？” 都错啦！ voa special English # voa special English others # 如何利用 AI 更好地学外语 A List Of Text-Only \u0026amp; Minimalist News Sites 2022 # Monkeypox outbreak 猴痘病毒爆发 Russia-Ukraine War November A projected \u0026ldquo;red wave\u0026rdquo; fizzled, as Republicans won a slim majority in the House, and Democrats held control of the United States Senate 随着共和党在众议院赢得微弱多数，民主党控制了美国参议院，预计中的“红色浪潮”落空了 2022-11-09 Why is Apple Rosetta 2 fast? 为什么 Apple Rosetta 2 速度很快？ October Elon Musk took control of Twitter, bringing to the social media giant a brash leadership style – along with thousands of layoffs 埃隆·马斯克 （Elon Musk） 控制了 Twitter，为这家社交媒体巨头带来了傲慢的领导风格——以及数千人的裁员 September Britain\u0026rsquo;s Queen Elizabeth II died in Scotland, at the age of 96. Her son Charles succeeded her as king 英国女王伊丽莎白二世在苏格兰去世，享年 96 岁。她的儿子查理继承了她的国王之位 August The FBI conducted a search of Mar-a-Lago, the home of former president Donald Trump, and found classified materials, including documents labeled \u0026ldquo;top secret.\u0026rdquo; 联邦调查局对前总统唐纳德·特朗普的家马阿拉歌庄园进行了搜查，发现了机密材料，包括标记为“绝密”的文件。 July Former Japanese prime minister Shinzo Abe was assassinated, just two days before that country\u0026rsquo;s parliamentary elections 日本前首相安倍晋三在该国议会选举前两天被暗杀 June The Supreme Court overturned Roe v. Wade, effectively criminalizing abortion in much of the nation 最高法院推翻了罗伊诉韦德案（Roe v. Wade），实际上在全国大部分地区将堕胎定为刑事犯罪。 May A gunman in Uvalde, Texas killed 19 students and two teachers at Robb Elementary School. It was the third-deadliest school shooting in U.S. history 德克萨斯州尤瓦尔迪的一名枪手在罗布小学杀死了 19 名学生和两名教师。这是美国历史上第三致命的校园枪击事件 2021 # December In December, tornadoes ripped through the South and Midwest, killing at least 91 people \u0026hellip; 12 月，龙卷风席卷南部和中西部，造成至少 91 人死亡\u0026hellip;\u0026hellip; October October brought the welcome news that the World Health Organization had endorsed the world\u0026rsquo;s first vaccine against malaria. 10 月带来了一个可喜的消息，即世界卫生组织批准了世界上第一种疟疾疫苗 September September saw the implementation of the Texas Heartbeat Act, which bans abortions after roughly six weeks. The Supreme Court has declined to block the law, saying it\u0026rsquo;s a question for lower courts. 9 月，德克萨斯州心跳法案 （Texas Heartbeat Act） 实施，该法案禁止在大约六周后堕胎。最高法院拒绝阻止这项法律，称这是下级法院的问题 August August saw the withdrawal of American troops from Afghanistan after a two-decade war that took the lives of over 2,400 U.S. service personnel. 8 月，美国军队在经历了二十年的战争后从阿富汗撤军，这场战争夺走了 2,400 多名美国军人的生命 July July brought the 32nd Summer Olympic games to Tokyo, a year after being postponed. The U.S. topped the medal count with 113. 第 32 届夏季奥运会在推迟一年后于 7 月在东京举行。美国以 113 枚奖牌位居榜首 June June saw the partial collapse of a 12-story condominium in Surfside, Florida, killing 98 residents. 6 月，佛罗里达州瑟夫赛德 （Surfside） 的一栋 12 层公寓部分倒塌，造成 98 名居民死亡 March The container ship Ever Given ran aground in the Suez Canal in March, holding up billions in trade. The ship was freed six days later. 3 月，集装箱船 Ever Given 在苏伊士运河搁浅，阻碍了数十亿美元的贸易。六天后，这艘船被释放 February In February, the United States formally re-joined the Paris Climate Agreement, an international treaty aimed at limiting global warming. 今年 2 月，美国正式重新加入旨在限制全球变暖的国际条约《巴黎气候协定》。 Janurary In January Joe Biden was inaugurated as our 46th president … 1 月，乔·拜登就任我们的第 46 任总统\u0026hellip;\u0026hellip; 2020 # The United Kingdom left the European Union; Brexit 2019 # Global SARS-Cov-2 (COVID-19) Pandemic Hong Kong Protests in 2019. 2019 年香港抗议活动 2018 # The Yellow Vests Movement in France 法国巴黎黄背心运动 World\u0026rsquo;s longest sea-crossing bridge: Hong Kong-Zhuhai-Macao Bridge The China-US trade War Started in 2018. 2018 年开始的中美贸易战 2015 # The Legalization of Same-Sex Marriage in the United States 美国同性婚姻合法化 2014 # Catastrophic Aviation Disasters of 2014. 2014 年的灾难性航空灾难 The Annexation of Crimea by Russia 俄罗斯吞并克里米亚 2012 # The “God Particle” Is (Probably) Discovered “上帝粒子”被发现 2011 # Japan’s 2011 Tōhoku Earthquake and Tsunami 日本 2011 年东北地震和海啸 Bin Laden Killed 本·拉登被击毙 2010 # Instagram was launched Apple Inc. releasd the first tablet touch screen computer iPad 2009-2017 # Barack Obama, the 44th U.S. President. The 1st African American President of the United States 2009 # Bitcoin 比特币\n2008 # **The credit and property value bubble collapses, Wall Street and other equities markets crash, demand evaporates, and a global economic recession ensues** 信用和财产价值泡沫破灭，华尔街和其他产权投资金融市场崩盘，因市场需求蒸发，导致全球性的经济衰退 2006 # The International Astronomical Union decides to remove Pluto from the list planets of the solar system 国际天文联会决定将冥王星从太阳系中除名 Twitter was launched 2005 # Facebook Youtube 2003 # USA invades Iraq 2002 # Latin no longer used in UK legal documents USA invades Afghanistan 2001 # Sep. 11 2001 New York City World Trade Center attacked fomer # 2000 International space station 1999 Alibaba 1998 Google 1996 clone 1994 Yahoo European Union 1991 1st web page From 1991 until now. The Information Revolution An era marked by the spread of telecommunications technology, especially with personal computers, the internet, the web-based economy, social media, smart phones, and greater cross-cultural mixing. Late-stage capitalism as inequalities increased. The rise of China. Death cults terrorize the world early in this era, and extremism poses a threat to global security. The threat of global conflict remains as leadership in North Korea, China, and Russia use outdated paradigms to justify policies that prepare their nations for military conflict with neighbors ( Ukraine, Georgia, Taiwan). Anti-democratic nationalist tendencies manifest in the United States (Trump), Brazil, Hungary, Poland, Turkey, the Philippines, China, Russia, Egypt, and elsewhere. But popular people’s movements for the environment, peace, and democracy (e.g., the Arab Spring, anti-global-warming activism, Black Lives Matter, Occupy Wall Street, Anti-Iraq-War) also manifest, and win some victories. Anthropocene global climate catastrophe threatens humanity. Mass extinctions begin. 这个时代代表着电信技术的普及，特别是在个人电脑、网路、电商经济、社交媒体、智能手机、以及更广泛的跨文化融合。晚期资本主义，不平等情况增加。中国的崛起，死亡邪教在这个世界造成。恐惧，极端主义也对全球的安全构成威胁。全球性的威胁冲突仍然存在北韩、中国和俄罗斯的领导阶层，他们使用不符合时代的政策，来证明准备与邻国之间（乌克兰、乔治亚、台湾）所发生的军事冲突的正当性。反民主之民族主义者倾向表现在美国（川普）、巴西、匈牙利、波兰、土耳其、菲律宾、中国、俄罗斯、埃及和其他地方。而民众为了保护环境、和平与民主而开展的运动（例如，阿拉伯之春、反全球暖化的激进主义、黑人的生命问题、占领华尔街和伊拉克战争）也得以体现，并赢得了一些胜利。在人类世，人们正面临着全球性气候灾难的威胁，这也是大灭绝的开始。 1991 1st Gulf War, USA invades Iraq following invasion of Kuwait 第一次波斯湾战争，美国攻击伊拉克接著入侵科威特 USSR collapse 苏联体制崩溃解体 Union of Soviet Socialist Republics 苏维埃社会主义共和国联盟 1990 Hubble space telescope 哈伯太空望远镜 1989 USSR quits Eastern Europe 苏联撤离东欧 Berlin wall falls 1988 USSR quits Afghanistan 1987 DNA convicts criminals 用DNA检测方式证明罪犯的罪行 1986 Shuttle Tragedy 航天飞机悲剧 1985 Ozone layer \u0026ldquo;hole\u0026rdquo; discovered 发现臭氧层破洞 1984 String Theory accepted as a possible unifying theory in physics 弦理论被接受的原因在于它有可能会成为物理中的大统一理论 1983 The Internet is Born 互联网诞生 1981 AIDS identified 辨认出爱滋病 Acquired Immunodeficiency Syndrome 获得性免疫缺陷综合征 1979 USSR invades Afghanistan China attacks Vietnam, but is repelled 1977 MRI 核磁共振摄影 Magnetic Resonance Imaging 1973 Roe v. Wade 罗诉韦德案 1972 Nixon Goes To China 尼克松访问中国 1970 String Theory \u0026ldquo;born\u0026rdquo; 1969 1st moon walk 人类首次登陆月球 1968 King Assassinated 马丁·路德·金遇刺 1967 Arab-Israeli \u0026ldquo;6-day war\u0026rdquo; 阿拉伯和以色列之间的“六日战争\u0026quot; 1966 Martin Luther King assassination 1963 John F. Kennedy Assassinated 肯尼迪遇刺 1962 Cuban Missile Crisis 古巴导弹危机 1961 Berlin Wall Built 柏林墙建成 1958 US Launches First Satellite 美国发射第一颗卫星 1953 The Dawn of DNA 1950 Credit cards 1949 Germany divided into East \u0026amp; West 1948 State of Israel founded First transistor 晶体管 1945 USA bombs Japan with two Atomic bombs UN founded 1939-1945 World War II 1935 Spanish Civil War 西班牙内战 Mao\u0026rsquo;s long march 长征 1932 Von Neumann develops foundation for Quantum Mechanics 冯・诺伊曼建立了量子力学的基础 1931 Empire State Building Completed 帝国大厦竣工 1927 Heisenberg, Uncertainty Principle 海森堡的不确定性原理 1920-1933 U.S. Prohibition 美国禁酒时期 1920 Schrödinger Equation, Quantum Theory emerges in modern form 薛定谔方程式，为现在量子力学中的基本方程式 1914-1918 World War I From 1912 end of Imperial China and start of Balkan wars to 1991, the end of the Cold War. The Age of Conflict 冲突时代 从西元1912年中国大情帝国衰亡和巴尔干战争开始，到西元1991年的冷战结束。 An era marked by the Mexican Revolution, the Russian Revolution, the Great War (1914-1918), the Great Influenza Pandemic, the Warlord Era in China, The War of Japanese Imperial Conquest, the Second World War, the Maoist Revolution in China, various anti-colonial wars, the Cold War, and all this while technology leaped ahead with computer-controlled machine tools carrying automation to new levels. Rudimentary automobiles and aircraft of the previous era transformed to a point where humans went to the moon. Air conditioning and television and radio changed culture as people spent more time indoors. Urbanization transformed society as fewer people lived on farms in rural areas. Electrification and the demand for power created a surge in the construction of power plants and infrastructure to extract fossil fuels and Uranium ores from the earth. 这个时代看到了墨西哥革命、俄罗斯革命、第一次世界大战（西元1914-1918年）、流感大流行、中国的军阀时代、日本的帝国战争、第二次世界大战、中国的毛派革命、 各种反殖民战争、冷战，在同时科技飞速的发展，提升到用电脑控制的自动化机器的新的水平。上一个时代，基本生活里的汽车和飞机，已转变为人类有能力登陆月球。随着冷气机、电视机和广播的普及，人们花费更多的时间待在室内。城市化改变了社会，因为在农村地区居住的人口减少了。电气化和对电力的需求，掀起一股建设发电厂的热潮，和从地球上开采化石燃料和铀矿石的基础设施。 "},{"id":11,"href":"/zh/zh/post/others/english-learning/","title":"English Learning","section":"Others","content":" English Learning # lite cnn 纯文字版的cnn，没有图片 lite cnn China China Daily 中国官方最大的英语新闻网站？ voa special English 这个网站听 voa special 不用翻墙 rest of world 这个网站很有设计感 China verge Hacker News 技术文章也能学习英语 南华早报 bbc China quora 国外的知乎 log # 2025-01-07 2024-12-14 “羽绒服”英语怎么说？你绝对想不到！ 2025-01-07 2025-01-06 “年会”英文怎么说？“Year Meeting”还是“Annual Party？” 都错啦！ voa special English # voa special English others # 如何利用 AI 更好地学外语 A List Of Text-Only \u0026amp; Minimalist News Sites 2022 # Monkeypox outbreak 猴痘病毒爆发 Russia-Ukraine War November A projected \u0026ldquo;red wave\u0026rdquo; fizzled, as Republicans won a slim majority in the House, and Democrats held control of the United States Senate 随着共和党在众议院赢得微弱多数，民主党控制了美国参议院，预计中的“红色浪潮”落空了 2022-11-09 Why is Apple Rosetta 2 fast? 为什么 Apple Rosetta 2 速度很快？ October Elon Musk took control of Twitter, bringing to the social media giant a brash leadership style – along with thousands of layoffs 埃隆·马斯克 （Elon Musk） 控制了 Twitter，为这家社交媒体巨头带来了傲慢的领导风格——以及数千人的裁员 September Britain\u0026rsquo;s Queen Elizabeth II died in Scotland, at the age of 96. Her son Charles succeeded her as king 英国女王伊丽莎白二世在苏格兰去世，享年 96 岁。她的儿子查理继承了她的国王之位 August The FBI conducted a search of Mar-a-Lago, the home of former president Donald Trump, and found classified materials, including documents labeled \u0026ldquo;top secret.\u0026rdquo; 联邦调查局对前总统唐纳德·特朗普的家马阿拉歌庄园进行了搜查，发现了机密材料，包括标记为“绝密”的文件。 July Former Japanese prime minister Shinzo Abe was assassinated, just two days before that country\u0026rsquo;s parliamentary elections 日本前首相安倍晋三在该国议会选举前两天被暗杀 June The Supreme Court overturned Roe v. Wade, effectively criminalizing abortion in much of the nation 最高法院推翻了罗伊诉韦德案（Roe v. Wade），实际上在全国大部分地区将堕胎定为刑事犯罪。 May A gunman in Uvalde, Texas killed 19 students and two teachers at Robb Elementary School. It was the third-deadliest school shooting in U.S. history 德克萨斯州尤瓦尔迪的一名枪手在罗布小学杀死了 19 名学生和两名教师。这是美国历史上第三致命的校园枪击事件 2021 # December In December, tornadoes ripped through the South and Midwest, killing at least 91 people \u0026hellip; 12 月，龙卷风席卷南部和中西部，造成至少 91 人死亡\u0026hellip;\u0026hellip; October October brought the welcome news that the World Health Organization had endorsed the world\u0026rsquo;s first vaccine against malaria. 10 月带来了一个可喜的消息，即世界卫生组织批准了世界上第一种疟疾疫苗 September September saw the implementation of the Texas Heartbeat Act, which bans abortions after roughly six weeks. The Supreme Court has declined to block the law, saying it\u0026rsquo;s a question for lower courts. 9 月，德克萨斯州心跳法案 （Texas Heartbeat Act） 实施，该法案禁止在大约六周后堕胎。最高法院拒绝阻止这项法律，称这是下级法院的问题 August August saw the withdrawal of American troops from Afghanistan after a two-decade war that took the lives of over 2,400 U.S. service personnel. 8 月，美国军队在经历了二十年的战争后从阿富汗撤军，这场战争夺走了 2,400 多名美国军人的生命 July July brought the 32nd Summer Olympic games to Tokyo, a year after being postponed. The U.S. topped the medal count with 113. 第 32 届夏季奥运会在推迟一年后于 7 月在东京举行。美国以 113 枚奖牌位居榜首 June June saw the partial collapse of a 12-story condominium in Surfside, Florida, killing 98 residents. 6 月，佛罗里达州瑟夫赛德 （Surfside） 的一栋 12 层公寓部分倒塌，造成 98 名居民死亡 March The container ship Ever Given ran aground in the Suez Canal in March, holding up billions in trade. The ship was freed six days later. 3 月，集装箱船 Ever Given 在苏伊士运河搁浅，阻碍了数十亿美元的贸易。六天后，这艘船被释放 February In February, the United States formally re-joined the Paris Climate Agreement, an international treaty aimed at limiting global warming. 今年 2 月，美国正式重新加入旨在限制全球变暖的国际条约《巴黎气候协定》。 Janurary In January Joe Biden was inaugurated as our 46th president … 1 月，乔·拜登就任我们的第 46 任总统\u0026hellip;\u0026hellip; 2020 # The United Kingdom left the European Union; Brexit 2019 # Global SARS-Cov-2 (COVID-19) Pandemic Hong Kong Protests in 2019. 2019 年香港抗议活动 2018 # The Yellow Vests Movement in France 法国巴黎黄背心运动 World\u0026rsquo;s longest sea-crossing bridge: Hong Kong-Zhuhai-Macao Bridge The China-US trade War Started in 2018. 2018 年开始的中美贸易战 2015 # The Legalization of Same-Sex Marriage in the United States 美国同性婚姻合法化 2014 # Catastrophic Aviation Disasters of 2014. 2014 年的灾难性航空灾难 The Annexation of Crimea by Russia 俄罗斯吞并克里米亚 2012 # The “God Particle” Is (Probably) Discovered “上帝粒子”被发现 2011 # Japan’s 2011 Tōhoku Earthquake and Tsunami 日本 2011 年东北地震和海啸 Bin Laden Killed 本·拉登被击毙 2010 # Instagram was launched Apple Inc. releasd the first tablet touch screen computer iPad 2009-2017 # Barack Obama, the 44th U.S. President. The 1st African American President of the United States 2009 # Bitcoin 比特币\n2008 # **The credit and property value bubble collapses, Wall Street and other equities markets crash, demand evaporates, and a global economic recession ensues** 信用和财产价值泡沫破灭，华尔街和其他产权投资金融市场崩盘，因市场需求蒸发，导致全球性的经济衰退 2006 # The International Astronomical Union decides to remove Pluto from the list planets of the solar system 国际天文联会决定将冥王星从太阳系中除名 Twitter was launched 2005 # Facebook Youtube 2003 # USA invades Iraq 2002 # Latin no longer used in UK legal documents USA invades Afghanistan 2001 # Sep. 11 2001 New York City World Trade Center attacked fomer # 2000 International space station 1999 Alibaba 1998 Google 1996 clone 1994 Yahoo European Union 1991 1st web page From 1991 until now. The Information Revolution An era marked by the spread of telecommunications technology, especially with personal computers, the internet, the web-based economy, social media, smart phones, and greater cross-cultural mixing. Late-stage capitalism as inequalities increased. The rise of China. Death cults terrorize the world early in this era, and extremism poses a threat to global security. The threat of global conflict remains as leadership in North Korea, China, and Russia use outdated paradigms to justify policies that prepare their nations for military conflict with neighbors ( Ukraine, Georgia, Taiwan). Anti-democratic nationalist tendencies manifest in the United States (Trump), Brazil, Hungary, Poland, Turkey, the Philippines, China, Russia, Egypt, and elsewhere. But popular people’s movements for the environment, peace, and democracy (e.g., the Arab Spring, anti-global-warming activism, Black Lives Matter, Occupy Wall Street, Anti-Iraq-War) also manifest, and win some victories. Anthropocene global climate catastrophe threatens humanity. Mass extinctions begin. 这个时代代表着电信技术的普及，特别是在个人电脑、网路、电商经济、社交媒体、智能手机、以及更广泛的跨文化融合。晚期资本主义，不平等情况增加。中国的崛起，死亡邪教在这个世界造成。恐惧，极端主义也对全球的安全构成威胁。全球性的威胁冲突仍然存在北韩、中国和俄罗斯的领导阶层，他们使用不符合时代的政策，来证明准备与邻国之间（乌克兰、乔治亚、台湾）所发生的军事冲突的正当性。反民主之民族主义者倾向表现在美国（川普）、巴西、匈牙利、波兰、土耳其、菲律宾、中国、俄罗斯、埃及和其他地方。而民众为了保护环境、和平与民主而开展的运动（例如，阿拉伯之春、反全球暖化的激进主义、黑人的生命问题、占领华尔街和伊拉克战争）也得以体现，并赢得了一些胜利。在人类世，人们正面临着全球性气候灾难的威胁，这也是大灭绝的开始。 1991 1st Gulf War, USA invades Iraq following invasion of Kuwait 第一次波斯湾战争，美国攻击伊拉克接著入侵科威特 USSR collapse 苏联体制崩溃解体 Union of Soviet Socialist Republics 苏维埃社会主义共和国联盟 1990 Hubble space telescope 哈伯太空望远镜 1989 USSR quits Eastern Europe 苏联撤离东欧 Berlin wall falls 1988 USSR quits Afghanistan 1987 DNA convicts criminals 用DNA检测方式证明罪犯的罪行 1986 Shuttle Tragedy 航天飞机悲剧 1985 Ozone layer \u0026ldquo;hole\u0026rdquo; discovered 发现臭氧层破洞 1984 String Theory accepted as a possible unifying theory in physics 弦理论被接受的原因在于它有可能会成为物理中的大统一理论 1983 The Internet is Born 互联网诞生 1981 AIDS identified 辨认出爱滋病 Acquired Immunodeficiency Syndrome 获得性免疫缺陷综合征 1979 USSR invades Afghanistan China attacks Vietnam, but is repelled 1977 MRI 核磁共振摄影 Magnetic Resonance Imaging 1973 Roe v. Wade 罗诉韦德案 1972 Nixon Goes To China 尼克松访问中国 1970 String Theory \u0026ldquo;born\u0026rdquo; 1969 1st moon walk 人类首次登陆月球 1968 King Assassinated 马丁·路德·金遇刺 1967 Arab-Israeli \u0026ldquo;6-day war\u0026rdquo; 阿拉伯和以色列之间的“六日战争\u0026quot; 1966 Martin Luther King assassination 1963 John F. Kennedy Assassinated 肯尼迪遇刺 1962 Cuban Missile Crisis 古巴导弹危机 1961 Berlin Wall Built 柏林墙建成 1958 US Launches First Satellite 美国发射第一颗卫星 1953 The Dawn of DNA 1950 Credit cards 1949 Germany divided into East \u0026amp; West 1948 State of Israel founded First transistor 晶体管 1945 USA bombs Japan with two Atomic bombs UN founded 1939-1945 World War II 1935 Spanish Civil War 西班牙内战 Mao\u0026rsquo;s long march 长征 1932 Von Neumann develops foundation for Quantum Mechanics 冯・诺伊曼建立了量子力学的基础 1931 Empire State Building Completed 帝国大厦竣工 1927 Heisenberg, Uncertainty Principle 海森堡的不确定性原理 1920-1933 U.S. Prohibition 美国禁酒时期 1920 Schrödinger Equation, Quantum Theory emerges in modern form 薛定谔方程式，为现在量子力学中的基本方程式 1914-1918 World War I From 1912 end of Imperial China and start of Balkan wars to 1991, the end of the Cold War. The Age of Conflict 冲突时代 从西元1912年中国大情帝国衰亡和巴尔干战争开始，到西元1991年的冷战结束。 An era marked by the Mexican Revolution, the Russian Revolution, the Great War (1914-1918), the Great Influenza Pandemic, the Warlord Era in China, The War of Japanese Imperial Conquest, the Second World War, the Maoist Revolution in China, various anti-colonial wars, the Cold War, and all this while technology leaped ahead with computer-controlled machine tools carrying automation to new levels. Rudimentary automobiles and aircraft of the previous era transformed to a point where humans went to the moon. Air conditioning and television and radio changed culture as people spent more time indoors. Urbanization transformed society as fewer people lived on farms in rural areas. Electrification and the demand for power created a surge in the construction of power plants and infrastructure to extract fossil fuels and Uranium ores from the earth. 这个时代看到了墨西哥革命、俄罗斯革命、第一次世界大战（西元1914-1918年）、流感大流行、中国的军阀时代、日本的帝国战争、第二次世界大战、中国的毛派革命、 各种反殖民战争、冷战，在同时科技飞速的发展，提升到用电脑控制的自动化机器的新的水平。上一个时代，基本生活里的汽车和飞机，已转变为人类有能力登陆月球。随着冷气机、电视机和广播的普及，人们花费更多的时间待在室内。城市化改变了社会，因为在农村地区居住的人口减少了。电气化和对电力的需求，掀起一股建设发电厂的热潮，和从地球上开采化石燃料和铀矿石的基础设施。 "},{"id":12,"href":"/zh/post/life/bilibili/","title":"bilibili","section":"Life","content":" bilibili # movies # 木鱼水心 电影广角镜 world # Yooupi食途 星球研究所 世茹很如意 digital # 那岩KJMX TESTV官方频道 黄杨ME cycling # Contayu_Cycling 道长说车 club100 周四青年 艾慕葡萄 table tennis # -我是派派- computer science # TheCW PegasusWang 神州数码云基地 Koala聊开源 JavaEE之Spring框架 开源社KAIYUANSHE 美团技术团队 技术胖 代码随想录 张老师和杜老师编程课 photography # 影视飓风 music # 94不曈 bilibili-knowledge # 量子位 柴知道 other # M2档案 "},{"id":13,"href":"/zh/zh/post/life/bilibili/","title":"bilibili","section":"Life","content":" bilibili # movies # 木鱼水心 电影广角镜 world # Yooupi食途 星球研究所 世茹很如意 digital # 那岩KJMX TESTV官方频道 黄杨ME cycling # Contayu_Cycling 道长说车 club100 周四青年 艾慕葡萄 table tennis # -我是派派- computer science # TheCW PegasusWang 神州数码云基地 Koala聊开源 JavaEE之Spring框架 开源社KAIYUANSHE 美团技术团队 技术胖 代码随想录 张老师和杜老师编程课 photography # 影视飓风 music # 94不曈 bilibili-knowledge # 量子位 柴知道 other # M2档案 "},{"id":14,"href":"/zh/post/life/books/","title":"books","section":"Life","content":" books # mathematics # 组合数学 原书第5版 computer science # 软件体系结构原理、方法与实践 algorithms # 算法 第四版 剑指Offer：名企面试官精讲典型编程题 java # Head First Java Java实战（第2版） java 核心技术 java 编程的逻辑 Maven 实战 java8 实战 深入理解java虚拟机 第一行代码：Android Spring实战（第6版） spring 微服务实战 第2版 书单 Modern Java(8+)下的技术/技能升级 Java 图灵程序设计丛书·Java系列 security # 白帽子讲 web 安全 networking # http 权威指南 深入浅出https 网络是怎样连接的 cloud # 云计算通俗讲义 kubernates in action database # SQL优化最佳实践 SQL查询的艺术 artificial intelligence # 人工智能入行实战：从校园到职场 深度学习入门 Python 神经网络编程 others # 大象：Thinking in UML Redis 设计与实现 人人都懂设计模式 编程之美 ffmpeg音视频开发基础与实战 黑客与画家 economy # 股票投资入门，进阶，与实战 经济学：第18版 politics # 美国困局 history # 邓小平时代 美国十讲 资中筠 明朝那些事1 文明的进程：文明的社会发生和心理发生的研究 law # 法理学（第4版） 刑法学讲义 罗翔 health # 我们为什么睡觉 philosophy # 西方哲学史讲演录 伦理学的两个基本问题 哲学 科学 常识 古希腊文明的光芒 赵林 大问题：简明哲学导论 人类理智研究 自识与反思：近现代西方哲学的基本问题 谈谈方法 笛卡尔 第一哲学沉思集：反驳与答辩 给无神论者：宗教对世俗生活的意义 psychology # 社会心理学 戴维迈尔斯 认知心理学及其启示 自控力：斯坦福大学最受欢迎心理学课程 习惯的力量 发展心理学 精神焦虑症的自救（病理分析卷） learning science # 学习之道 练习的心态：如何培养耐心、专注和自律 为什么学生不喜欢上学 暗时间 thinking # 送你一颗子弹 2019-08-05 枪炮、病菌与钢铁：人类社会的命运 literature # 恶意 嫌疑人X的献身 伽利略的苦恼 斯通纳 少年的你，如此美丽 杀死一只知更鸟 许三观卖血记 月光落在左手上 虚无的十字架 放学后 mess # 查令十字街84号 2019-08-05 跑步圣经：我跑故我在 当我谈跑步时我在谈些什么 囚徒健身：用失传的技艺练就强大的生存实力 "},{"id":15,"href":"/zh/zh/post/life/books/","title":"books","section":"Life","content":" books # mathematics # 组合数学 原书第5版 computer science # 软件体系结构原理、方法与实践 algorithms # 算法 第四版 剑指Offer：名企面试官精讲典型编程题 java # Head First Java Java实战（第2版） java 核心技术 java 编程的逻辑 Maven 实战 java8 实战 深入理解java虚拟机 第一行代码：Android Spring实战（第6版） spring 微服务实战 第2版 书单 Modern Java(8+)下的技术/技能升级 Java 图灵程序设计丛书·Java系列 security # 白帽子讲 web 安全 networking # http 权威指南 深入浅出https 网络是怎样连接的 cloud # 云计算通俗讲义 kubernates in action database # SQL优化最佳实践 SQL查询的艺术 artificial intelligence # 人工智能入行实战：从校园到职场 深度学习入门 Python 神经网络编程 others # 大象：Thinking in UML Redis 设计与实现 人人都懂设计模式 编程之美 ffmpeg音视频开发基础与实战 黑客与画家 economy # 股票投资入门，进阶，与实战 经济学：第18版 politics # 美国困局 history # 邓小平时代 美国十讲 资中筠 明朝那些事1 文明的进程：文明的社会发生和心理发生的研究 law # 法理学（第4版） 刑法学讲义 罗翔 health # 我们为什么睡觉 philosophy # 西方哲学史讲演录 伦理学的两个基本问题 哲学 科学 常识 古希腊文明的光芒 赵林 大问题：简明哲学导论 人类理智研究 自识与反思：近现代西方哲学的基本问题 谈谈方法 笛卡尔 第一哲学沉思集：反驳与答辩 给无神论者：宗教对世俗生活的意义 psychology # 社会心理学 戴维迈尔斯 认知心理学及其启示 自控力：斯坦福大学最受欢迎心理学课程 习惯的力量 发展心理学 精神焦虑症的自救（病理分析卷） learning science # 学习之道 练习的心态：如何培养耐心、专注和自律 为什么学生不喜欢上学 暗时间 thinking # 送你一颗子弹 2019-08-05 枪炮、病菌与钢铁：人类社会的命运 literature # 恶意 嫌疑人X的献身 伽利略的苦恼 斯通纳 少年的你，如此美丽 杀死一只知更鸟 许三观卖血记 月光落在左手上 虚无的十字架 放学后 mess # 查令十字街84号 2019-08-05 跑步圣经：我跑故我在 当我谈跑步时我在谈些什么 囚徒健身：用失传的技艺练就强大的生存实力 "},{"id":16,"href":"/zh/post/life/cycling/","title":"cycling","section":"Life","content":" cycling # my log # 环滇池 # 9 2024-09-15 8 2023-11-11 7 2023-10-28 6 2023-10-22 5 2023-05-21 4 2022-12-31 3 2022-06-05 2 2022-03-20 1 2021-11-27 昆洛路-\u0026gt;彩云中路爬坡-\u0026gt;彩云北路 # 8 2025-01-07 7 2024-12-19 6 2024-12-18 5 2024-12-17 4 2024-12-13 3 2024-12-10 2 2024-12-06 1 2024-11-29 2024 # 2024-05-01 149.44km 阳宗海 2024-03-16 169.81km 环两湖失败 2023 # 2023-07-15 136.21km 梁王山 2023-04-30 150.06km 抚仙湖折返 2022 # 2022-05-28 131.56km 梁王山 2022-04-30 202.94km 抚仙湖 骑行路线 # 昆明 # 环滇池 宝花路 爬至小亭子 梁王山上坡 西山后山爬坡 松花坝水库爬坡 昭通 # 凤凰山 athlete # Tadej Pogacar # strava 2024-09-29 世锦赛冠军 2024-07-21 环法 stage 21 赛段冠军 2024-07-20 stage 20 赛段冠军 reference # pro cycling stats 自行车职业赛数据及积分排行查询 strava my_strava veloviewer "},{"id":17,"href":"/zh/zh/post/life/cycling/","title":"cycling","section":"Life","content":" cycling # my log # 环滇池 # 9 2024-09-15 8 2023-11-11 7 2023-10-28 6 2023-10-22 5 2023-05-21 4 2022-12-31 3 2022-06-05 2 2022-03-20 1 2021-11-27 昆洛路-\u0026gt;彩云中路爬坡-\u0026gt;彩云北路 # 8 2025-01-07 7 2024-12-19 6 2024-12-18 5 2024-12-17 4 2024-12-13 3 2024-12-10 2 2024-12-06 1 2024-11-29 2024 # 2024-05-01 149.44km 阳宗海 2024-03-16 169.81km 环两湖失败 2023 # 2023-07-15 136.21km 梁王山 2023-04-30 150.06km 抚仙湖折返 2022 # 2022-05-28 131.56km 梁王山 2022-04-30 202.94km 抚仙湖 骑行路线 # 昆明 # 环滇池 宝花路 爬至小亭子 梁王山上坡 西山后山爬坡 松花坝水库爬坡 昭通 # 凤凰山 athlete # Tadej Pogacar # strava 2024-09-29 世锦赛冠军 2024-07-21 环法 stage 21 赛段冠军 2024-07-20 stage 20 赛段冠军 reference # pro cycling stats 自行车职业赛数据及积分排行查询 strava my_strava veloviewer "},{"id":18,"href":"/zh/post/computer-science/database/","title":"database","section":"Computer Science","content":" database # "},{"id":19,"href":"/zh/zh/post/computer-science/database/","title":"database","section":"Computer Science","content":" database # "},{"id":20,"href":"/zh/post/computer-science/echarts/","title":"echarts","section":"Computer Science","content":" echarts # PPChart "},{"id":21,"href":"/zh/zh/post/computer-science/echarts/","title":"echarts","section":"Computer Science","content":" echarts # PPChart "},{"id":22,"href":"/zh/post/computer-science/github/","title":"github","section":"Computer Science","content":" github # Github Action # GitHub Actions 入门教程 repository # torvalds/linux CesiumGS/cesium CesiumJS is a JavaScript library for creating 3D globes and 2D maps in a web browser without a plugin. It uses WebGL for hardware-accelerated graphics, and is cross-platform, cross-browser, and tuned for dynamic-data visualization. ohmyzsh/ohmyzsh Oh My Zsh is an open source, community-driven framework for managing your zsh configuration. follow # oldratlee "},{"id":23,"href":"/zh/zh/post/computer-science/github/","title":"github","section":"Computer Science","content":" github # Github Action # GitHub Actions 入门教程 repository # torvalds/linux CesiumGS/cesium CesiumJS is a JavaScript library for creating 3D globes and 2D maps in a web browser without a plugin. It uses WebGL for hardware-accelerated graphics, and is cross-platform, cross-browser, and tuned for dynamic-data visualization. ohmyzsh/ohmyzsh Oh My Zsh is an open source, community-driven framework for managing your zsh configuration. follow # oldratlee "},{"id":24,"href":"/zh/post/life/hiking/","title":"hiking","section":"Life","content":" hiking # 2024-10-13 金铜盆 "},{"id":25,"href":"/zh/zh/post/life/hiking/","title":"hiking","section":"Life","content":" hiking # 2024-10-13 金铜盆 "},{"id":26,"href":"/zh/post/computer-science/ios/","title":"ios","section":"Computer Science","content":" ios # 一日一技：iOS抓包最简单方案 bark # Finb/Bark Bark is a push notification tool app. It\u0026rsquo;s free, simple, and secure, leveraging APNs without draining device battery. document Bark-Java-SDK Day One # Obsidian # IFTTT # 3 个非常规 Day One 使用场景 触发你的智能生活：IFTTT 入门 RSS # Inoreader Feedly "},{"id":27,"href":"/zh/zh/post/computer-science/ios/","title":"ios","section":"Computer Science","content":" ios # 一日一技：iOS抓包最简单方案 bark # Finb/Bark Bark is a push notification tool app. It\u0026rsquo;s free, simple, and secure, leveraging APNs without draining device battery. document Bark-Java-SDK Day One # Obsidian # IFTTT # 3 个非常规 Day One 使用场景 触发你的智能生活：IFTTT 入门 RSS # Inoreader Feedly "},{"id":28,"href":"/zh/post/computer-science/job/","title":"job","section":"Computer Science","content":" job # 应届生的简历 "},{"id":29,"href":"/zh/zh/post/computer-science/job/","title":"job","section":"Computer Science","content":" job # 应届生的简历 "},{"id":30,"href":"/zh/post/computer-science/java/jvm/","title":"jvm","section":"Java","content":" jvm # "},{"id":31,"href":"/zh/zh/post/computer-science/java/jvm/","title":"jvm","section":"Java","content":" jvm # "},{"id":32,"href":"/zh/post/life/life-recommend/","title":"life recommand","section":"Life","content":" life recommend # sspai 数码相关内容，还有一些偏硬核的科普，技术文章 movies # 绝命毒师 Breaking Bad 风骚律师 Better Call Saul 权力的游戏 灿烂人生 无言的山丘 人间的条件 赤足小子 婚姻生活 article # 互联网是人类历史的一段弯路吗 每天通勤骑车60公里身体会不会累垮？ books # 社会心理学 戴维迈尔斯 西方哲学史讲演录 赵林 为什么学生不喜欢上学 送你一颗子弹 刘瑜 bilibili # movies 木鱼水心 质量很高，第一个关注的电影解说up 电影广角镜 绝命毒师和风骚律师 解说的很棒 digital 那岩KJMX 科技美学 cycling 道长说车 CLUB100 Contayu_Cycling world Yooupi食途 星球研究所 economy 小Lin说 software # ios # a-Shell working copy Documents Shadowrocket Obsidian ServerCat Github 搜狗输入法 彩云天气 Actions DataJar ShellFish nPlayer HashPhotos Soor Shortcuts 小宇宙 让听播客回归简单——即刻团队新作「小宇宙」体验报告 mac # windows # wallpaper # 4k wallpapers philosophy # Philosophia 哲学社 2020-03-16 种族歧视错在哪儿 F1 # 指北集EP.01——简明Formula One观赛指北 motto # you don\u0026rsquo;t give up, then there\u0026rsquo;s no limitation.\n真的猛士，敢于直面惨淡的人生，敢于正视淋漓的鲜血。\n梦里不知身是客，一晌贪欢\n夫夷以近，则游者众；险以远，则至者少。而世之奇伟、瑰怪，非常之观，常在于险远，而人之所罕至焉，故非有志者不能至也。有志矣，不随以止也，然力不足者，亦不能至也。有志与力，而又不随以怠，至于幽暗昏惑而无物以相之，亦不能至也。然力足以至焉，于人为可讥，而在己为有悔；尽吾志也而不能至者，可以无悔矣，其孰能讥之乎？此余之所得也！\n2024-06-12\n艾柯：將來，教育目的是教人“篩選”這種藝術。再沒必要教加德滿都在哪裏，或者查理大帝之後誰是第一個法蘭西國王，因為我們隨處找到答案。不過，我們應該叫學生考查十五個網絡頁面，讓他們自己判斷哪個最差。需要教會他們“比較”這種技巧。\n2023-10-24\n"},{"id":33,"href":"/zh/zh/post/life/life-recommend/","title":"life recommand","section":"Life","content":" life recommend # sspai 数码相关内容，还有一些偏硬核的科普，技术文章 movies # 绝命毒师 Breaking Bad 风骚律师 Better Call Saul 权力的游戏 灿烂人生 无言的山丘 人间的条件 赤足小子 婚姻生活 article # 互联网是人类历史的一段弯路吗 每天通勤骑车60公里身体会不会累垮？ books # 社会心理学 戴维迈尔斯 西方哲学史讲演录 赵林 为什么学生不喜欢上学 送你一颗子弹 刘瑜 bilibili # movies 木鱼水心 质量很高，第一个关注的电影解说up 电影广角镜 绝命毒师和风骚律师 解说的很棒 digital 那岩KJMX 科技美学 cycling 道长说车 CLUB100 Contayu_Cycling world Yooupi食途 星球研究所 economy 小Lin说 software # ios # a-Shell working copy Documents Shadowrocket Obsidian ServerCat Github 搜狗输入法 彩云天气 Actions DataJar ShellFish nPlayer HashPhotos Soor Shortcuts 小宇宙 让听播客回归简单——即刻团队新作「小宇宙」体验报告 mac # windows # wallpaper # 4k wallpapers philosophy # Philosophia 哲学社 2020-03-16 种族歧视错在哪儿 F1 # 指北集EP.01——简明Formula One观赛指北 motto # you don\u0026rsquo;t give up, then there\u0026rsquo;s no limitation.\n真的猛士，敢于直面惨淡的人生，敢于正视淋漓的鲜血。\n梦里不知身是客，一晌贪欢\n夫夷以近，则游者众；险以远，则至者少。而世之奇伟、瑰怪，非常之观，常在于险远，而人之所罕至焉，故非有志者不能至也。有志矣，不随以止也，然力不足者，亦不能至也。有志与力，而又不随以怠，至于幽暗昏惑而无物以相之，亦不能至也。然力足以至焉，于人为可讥，而在己为有悔；尽吾志也而不能至者，可以无悔矣，其孰能讥之乎？此余之所得也！\n2024-06-12\n艾柯：將來，教育目的是教人“篩選”這種藝術。再沒必要教加德滿都在哪裏，或者查理大帝之後誰是第一個法蘭西國王，因為我們隨處找到答案。不過，我們應該叫學生考查十五個網絡頁面，讓他們自己判斷哪個最差。需要教會他們“比較”這種技巧。\n2023-10-24\n"},{"id":34,"href":"/zh/post/computer-science/mac/","title":"mac","section":"Computer Science","content":" mac # brew # 查看 brew 服务运行状态 brew services list mysql # 启动 brew services start mysql@8.0 使用命令行连接 mysql mysql -u root reference Macbook通过brew安装mysql8.0 mongodb # mongodb 安装 brew tap mongodb/brew brew update brew install mongodb-community@8.0 启动 mongodb brew services start mongodb-community@8.0 停止 mongodb brew services stop mongodb-community@8.0 mongodb 配置文件位置 vim /opt/homebrew/etc/mongod.conf ffmpeg # 安装 brew install ffmpeg postgresql # Homebrew 安装 postgresql yt-dlp # yt-dlp/yt-dlp 安装 brew install yt-dlp output-template yt-dlp -N 20 https://www.youtube.com/@xiaodaodalang --merge-output-format mp4 # 后台下载 nohup yt-dlp -N 20 https://www.youtube.com/@xiaodaodalang --merge-output-format mp4 \u0026amp; # 加上日期前缀 yt-dlp -N 20 -o \u0026#34;%(upload_date\u0026gt;%Y-%m-%d)s-%(title)s.%(ext)s\u0026#34; https://www.youtube.com/@xiaodaodalang --merge-output-format mp4 player # Mac下最好的视频播放器 IINA disk # DaisyDisk Hidden space 隐藏空间 如何用命令弹出硬盘 查询硬盘挂载路径 df -h 取消挂载 diskutil unmount xxxxx transmit 文件传输工具 把一个java程序配置为一个服务 # 在 macOS 中将 Java 程序配置为服务，可以通过创建一个 LaunchDaemon 或 LaunchAgent 来实现。这里我们以创建一个 LaunchDaemon 为例来说明如何操作。\n准备工作\n确保你的 Java 程序可以无交互地运行：\n你的 Java 应用应该能够从命令行启动，并且不需要用户界面或用户输入。 编写启动脚本（可选）：\n如果你的 Java 程序需要复杂的启动参数或者环境变量设置，建议先编写一个 Shell 脚本来处理这些细节。例如，你可以创建一个名为 start-myapp.sh 的脚本文件，内容如下： #!/bin/bash cd /path/to/your/app export JAVA_OPTS=\u0026#34;-Xms512m -Xmx1024m\u0026#34; exec java $JAVA_OPTS -jar your-application.jar 记得给这个脚本执行权限： chmod +x start-myapp.sh 创建 LaunchDaemon 配置文件\n创建配置文件：\n在 /Library/LaunchDaemons/ 目录下创建一个新的 .plist 文件。文件名应该包含反向域名格式的唯一标识符，例如 com.yourdomain.yourapp.plist。 使用文本编辑器创建并编辑这个文件，内容如下： \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE plist PUBLIC \u0026#34;-//Apple//DTD PLIST 1.0//EN\u0026#34; \u0026#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd\u0026#34;\u0026gt; \u0026lt;plist version=\u0026#34;1.0\u0026#34;\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;Label\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;com.yourdomain.yourapp\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;ProgramArguments\u0026lt;/key\u0026gt; \u0026lt;array\u0026gt; \u0026lt;string\u0026gt;/path/to/start-myapp.sh\u0026lt;/string\u0026gt; \u0026lt;/array\u0026gt; \u0026lt;key\u0026gt;RunAtLoad\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;key\u0026gt;KeepAlive\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;key\u0026gt;StandardOutPath\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;/path/to/yourapp.log\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;StandardErrorPath\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;/path/to/yourapp.err\u0026lt;/string\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;/plist\u0026gt; 解释： Label 是服务的唯一标识符。 ProgramArguments 指定了启动程序的命令及其参数。 RunAtLoad 设置为 true 表示系统启动时自动启动该服务。 KeepAlive 设置为 true 表示如果服务停止，则系统会自动重启它。 StandardOutPath 和 StandardErrorPath 分别指定了标准输出和错误输出的日志文件路径。 加载服务：\n将配置文件保存后，使用以下命令加载服务： sudo launchctl load /Library/LaunchDaemons/com.yourdomain.yourapp.plist 启动服务： sudo launchctl start com.yourdomain.yourapp 停止和卸载服务\n停止服务： sudo launchctl stop com.yourdomain.yourapp 卸载服务： sudo launchctl unload /Library/LaunchDaemons/com.yourdomain.yourapp.plist 以上步骤完成后，你的 Java 应用程序就会作为一个 macOS 服务运行了。如果有任何问题，可以检查指定的日志文件以获取更多信息。\n怎么查看 launchctl 服务的状态 # 在 macOS 中，你可以使用 launchctl 命令来查看服务的状态。以下是几种常见的方法来检查 launchctl 服务的状态：\n查看所有已加载的服务 使用 list 子命令可以列出所有已加载的 launchd 服务及其状态：\nsudo launchctl list 这将显示一个列表，其中包括服务的标签（Label）、进程 ID（PID）以及退出状态（LastExitStatus）。\n查看特定服务的状态 如果你只想查看某个特定服务的状态，可以使用服务的标签（Label）来过滤输出。例如，如果你的服务标签是 com.yourdomain.yourapp，可以使用以下命令：\nsudo launchctl list com.yourdomain.yourapp 查看服务的详细信息 如果你想查看更详细的信息，可以使用 print 子命令。例如：\nsudo launchctl print system/com.yourdomain.yourapp 这将显示关于该服务的详细信息，包括其配置、状态、环境变量等。\n检查服务日志 如果服务有日志输出，可以使用 log 命令来查看日志。例如：\nsudo log show --predicate \u0026#39;process == \u0026#34;yourapp\u0026#34;\u0026#39; --info --debug --last 1h 这将显示过去一小时内与 yourapp 进程相关的所有日志信息。\n示例\n假设你有一个服务标签为 com.example.myapp 的服务，你可以按以下步骤检查其状态：\n查看所有已加载的服务：\nsudo launchctl list 查看特定服务的状态：\nsudo launchctl list com.example.myapp 查看服务的详细信息：\nsudo launchctl print system/com.example.myapp 查看服务日志：\nsudo log show --predicate \u0026#39;process == \u0026#34;myapp\u0026#34;\u0026#39; --info --debug --last 1h 通过这些命令，你可以轻松地检查和管理 launchctl 服务的状态。\n怎么查看 launchctl 中一个服务的内存使用情况 # 在 macOS 中，你可以使用多种方法来查看 launchctl 服务的内存使用情况。以下是几种常见的方法：\n使用 top 命令\ntop 命令是一个实时系统监视工具，可以显示系统的整体状态，包括 CPU 和内存使用情况。你可以通过 top 命令来查找特定服务的进程 ID（PID），然后查看其内存使用情况。\n打开 top 并查找进程：\ntop 在 top 界面中查找你的服务：\n按 P 可以按 CPU 使用率排序。 按 M 可以按内存使用率排序。 查找你的服务进程，通常可以通过进程名称或部分名称来识别。 使用 ps 命令\nps 命令可以显示当前系统中运行的进程信息。你可以结合 grep 命令来查找特定服务的进程信息。\n查找服务的 PID：\nps aux | grep com.yourdomain.yourapp 这将显示与 com.yourdomain.yourapp 相关的所有进程信息。找到你的服务进程的 PID。\n查看特定进程的内存使用情况：\nps -p \u0026lt;PID\u0026gt; -o %mem,%cpu,rss 其中 \u0026lt;PID\u0026gt; 是你在上一步中找到的进程 ID。%mem 显示内存使用百分比，%cpu 显示 CPU 使用百分比，rss 显示常驻集大小（Resident Set Size，即进程占用的实际物理内存）。\n使用 activity monitor\nmacOS 自带的“活动监视器”应用程序也可以用来查看进程的内存使用情况。\n打开“活动监视器”：\n你可以通过 Spotlight 搜索（按 Cmd + Space，然后输入“活动监视器”）来打开它。 切换到“内存”标签页：\n在“活动监视器”中，选择“内存”标签页，这里会显示所有进程的内存使用情况。 查找你的服务：\n在进程列表中查找你的服务名称，查看其内存使用情况。 使用 memory_pressure 命令\nmemory_pressure 命令可以显示系统的内存压力情况，虽然它不能直接显示单个进程的内存使用情况，但可以帮助你了解系统整体的内存状况。\nmemory_pressure 示例\n假设你的服务标签是 com.example.myapp，你可以按以下步骤查看其内存使用情况：\n查找服务的 PID：\nps aux | grep com.example.myapp 假设找到的 PID 是 12345，查看该进程的内存使用情况：\nps -p 12345 -o %mem,%cpu,rss 通过这些方法，你可以轻松地查看 launchctl 服务的内存使用情况。\nmac 上抓取应用的https的包 # 在Mac上抓取应用的HTTPS流量，你需要使用网络分析工具，如Wireshark、Charles Proxy或MITMproxy。由于HTTPS加密了数据传输，直接抓包无法查看具体内容，因此通常需要设置一个代理服务器来进行中间人攻击（Man-in-the-Middle, MITM）来解密和检查HTTPS流量。\n以下是使用Charles Proxy作为例子来说明如何进行HTTPS流量的抓取：\n安装Charles Proxy:\n下载并安装Charles Proxy应用程序到你的Mac电脑上。 配置Charles SSL代理:\n打开Charles，前往Proxy -\u0026gt; SSL Proxying Settings。 在SSL Proxying标签中点击Enable SSL Proxying。 添加你想要监控的应用程序使用的域名端口对，例如对于大多数Web流量是443端口。 安装Charles的SSL证书:\n为了让Charles能够解密HTTPS流量，你需要信任它的SSL证书。 在Charles中前往Help -\u0026gt; SSL Proxying -\u0026gt; Install Charles Root Certificate。 按照提示完成证书安装，并确保系统信任此证书。 配置设备或应用以使用Charles代理:\n如果你想抓取的是Mac本地应用的流量，你需要配置该应用使用Charles作为HTTP/HTTPS代理。 对于某些应用程序，这可能需要更改系统的网络设置，或者在应用内部设置代理服务器地址为localhost或127.0.0.1，端口号通常是8888（默认的Charles监听端口）。 如果是移动设备上的应用，你需要设置设备的Wi-Fi连接使用手动HTTP代理指向运行Charles的Mac的局域网IP地址和端口。 开始抓包:\n现在你可以启动目标应用程序并开始与它交互，所有的HTTPS流量应该会通过Charles被截获，并且如果你正确设置了SSL代理，你应该能看到解密后的流量。 过滤和分析流量:\n使用Charles提供的过滤器和搜索功能来定位你感兴趣的特定请求和响应。 请注意，抓取和解密HTTPS流量可能涉及到隐私问题以及违反服务条款的风险。务必确保你有合法的权利去监视和分析这些流量。如果你是在测试自己的应用，确保遵循公司的政策和法律要求。如果你试图分析第三方应用的流量，请确保你有权这样做。\ncharles # Mac使用Charles进行HTTPS抓包 高颜值抓包工具Charles，实现Mac和IOS端抓取https请求 Configure Charles Root certificate on Mac 需要在keychains里信任证书 Charles Proxy for Mobile apps that use SSL Pinning 8 Ways to Bypass SSL Pinning in iOS questions # 2024-11-15 指纹识别及录入问题 M1 macbookPro 指纹不是识别及其慢就是识别不了，没有反应 电脑插电会有影响，不插电指纹功能是正常的 "},{"id":35,"href":"/zh/zh/post/computer-science/mac/","title":"mac","section":"Computer Science","content":" mac # brew # 查看 brew 服务运行状态 brew services list mysql # 启动 brew services start mysql@8.0 使用命令行连接 mysql mysql -u root reference Macbook通过brew安装mysql8.0 mongodb # mongodb 安装 brew tap mongodb/brew brew update brew install mongodb-community@8.0 启动 mongodb brew services start mongodb-community@8.0 停止 mongodb brew services stop mongodb-community@8.0 mongodb 配置文件位置 vim /opt/homebrew/etc/mongod.conf ffmpeg # 安装 brew install ffmpeg postgresql # Homebrew 安装 postgresql yt-dlp # yt-dlp/yt-dlp 安装 brew install yt-dlp output-template yt-dlp -N 20 https://www.youtube.com/@xiaodaodalang --merge-output-format mp4 # 后台下载 nohup yt-dlp -N 20 https://www.youtube.com/@xiaodaodalang --merge-output-format mp4 \u0026amp; # 加上日期前缀 yt-dlp -N 20 -o \u0026#34;%(upload_date\u0026gt;%Y-%m-%d)s-%(title)s.%(ext)s\u0026#34; https://www.youtube.com/@xiaodaodalang --merge-output-format mp4 player # Mac下最好的视频播放器 IINA disk # DaisyDisk Hidden space 隐藏空间 如何用命令弹出硬盘 查询硬盘挂载路径 df -h 取消挂载 diskutil unmount xxxxx transmit 文件传输工具 把一个java程序配置为一个服务 # 在 macOS 中将 Java 程序配置为服务，可以通过创建一个 LaunchDaemon 或 LaunchAgent 来实现。这里我们以创建一个 LaunchDaemon 为例来说明如何操作。\n准备工作\n确保你的 Java 程序可以无交互地运行：\n你的 Java 应用应该能够从命令行启动，并且不需要用户界面或用户输入。 编写启动脚本（可选）：\n如果你的 Java 程序需要复杂的启动参数或者环境变量设置，建议先编写一个 Shell 脚本来处理这些细节。例如，你可以创建一个名为 start-myapp.sh 的脚本文件，内容如下： #!/bin/bash cd /path/to/your/app export JAVA_OPTS=\u0026#34;-Xms512m -Xmx1024m\u0026#34; exec java $JAVA_OPTS -jar your-application.jar 记得给这个脚本执行权限： chmod +x start-myapp.sh 创建 LaunchDaemon 配置文件\n创建配置文件：\n在 /Library/LaunchDaemons/ 目录下创建一个新的 .plist 文件。文件名应该包含反向域名格式的唯一标识符，例如 com.yourdomain.yourapp.plist。 使用文本编辑器创建并编辑这个文件，内容如下： \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE plist PUBLIC \u0026#34;-//Apple//DTD PLIST 1.0//EN\u0026#34; \u0026#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd\u0026#34;\u0026gt; \u0026lt;plist version=\u0026#34;1.0\u0026#34;\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;Label\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;com.yourdomain.yourapp\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;ProgramArguments\u0026lt;/key\u0026gt; \u0026lt;array\u0026gt; \u0026lt;string\u0026gt;/path/to/start-myapp.sh\u0026lt;/string\u0026gt; \u0026lt;/array\u0026gt; \u0026lt;key\u0026gt;RunAtLoad\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;key\u0026gt;KeepAlive\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;key\u0026gt;StandardOutPath\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;/path/to/yourapp.log\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;StandardErrorPath\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;/path/to/yourapp.err\u0026lt;/string\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;/plist\u0026gt; 解释： Label 是服务的唯一标识符。 ProgramArguments 指定了启动程序的命令及其参数。 RunAtLoad 设置为 true 表示系统启动时自动启动该服务。 KeepAlive 设置为 true 表示如果服务停止，则系统会自动重启它。 StandardOutPath 和 StandardErrorPath 分别指定了标准输出和错误输出的日志文件路径。 加载服务：\n将配置文件保存后，使用以下命令加载服务： sudo launchctl load /Library/LaunchDaemons/com.yourdomain.yourapp.plist 启动服务： sudo launchctl start com.yourdomain.yourapp 停止和卸载服务\n停止服务： sudo launchctl stop com.yourdomain.yourapp 卸载服务： sudo launchctl unload /Library/LaunchDaemons/com.yourdomain.yourapp.plist 以上步骤完成后，你的 Java 应用程序就会作为一个 macOS 服务运行了。如果有任何问题，可以检查指定的日志文件以获取更多信息。\n怎么查看 launchctl 服务的状态 # 在 macOS 中，你可以使用 launchctl 命令来查看服务的状态。以下是几种常见的方法来检查 launchctl 服务的状态：\n查看所有已加载的服务 使用 list 子命令可以列出所有已加载的 launchd 服务及其状态：\nsudo launchctl list 这将显示一个列表，其中包括服务的标签（Label）、进程 ID（PID）以及退出状态（LastExitStatus）。\n查看特定服务的状态 如果你只想查看某个特定服务的状态，可以使用服务的标签（Label）来过滤输出。例如，如果你的服务标签是 com.yourdomain.yourapp，可以使用以下命令：\nsudo launchctl list com.yourdomain.yourapp 查看服务的详细信息 如果你想查看更详细的信息，可以使用 print 子命令。例如：\nsudo launchctl print system/com.yourdomain.yourapp 这将显示关于该服务的详细信息，包括其配置、状态、环境变量等。\n检查服务日志 如果服务有日志输出，可以使用 log 命令来查看日志。例如：\nsudo log show --predicate \u0026#39;process == \u0026#34;yourapp\u0026#34;\u0026#39; --info --debug --last 1h 这将显示过去一小时内与 yourapp 进程相关的所有日志信息。\n示例\n假设你有一个服务标签为 com.example.myapp 的服务，你可以按以下步骤检查其状态：\n查看所有已加载的服务：\nsudo launchctl list 查看特定服务的状态：\nsudo launchctl list com.example.myapp 查看服务的详细信息：\nsudo launchctl print system/com.example.myapp 查看服务日志：\nsudo log show --predicate \u0026#39;process == \u0026#34;myapp\u0026#34;\u0026#39; --info --debug --last 1h 通过这些命令，你可以轻松地检查和管理 launchctl 服务的状态。\n怎么查看 launchctl 中一个服务的内存使用情况 # 在 macOS 中，你可以使用多种方法来查看 launchctl 服务的内存使用情况。以下是几种常见的方法：\n使用 top 命令\ntop 命令是一个实时系统监视工具，可以显示系统的整体状态，包括 CPU 和内存使用情况。你可以通过 top 命令来查找特定服务的进程 ID（PID），然后查看其内存使用情况。\n打开 top 并查找进程：\ntop 在 top 界面中查找你的服务：\n按 P 可以按 CPU 使用率排序。 按 M 可以按内存使用率排序。 查找你的服务进程，通常可以通过进程名称或部分名称来识别。 使用 ps 命令\nps 命令可以显示当前系统中运行的进程信息。你可以结合 grep 命令来查找特定服务的进程信息。\n查找服务的 PID：\nps aux | grep com.yourdomain.yourapp 这将显示与 com.yourdomain.yourapp 相关的所有进程信息。找到你的服务进程的 PID。\n查看特定进程的内存使用情况：\nps -p \u0026lt;PID\u0026gt; -o %mem,%cpu,rss 其中 \u0026lt;PID\u0026gt; 是你在上一步中找到的进程 ID。%mem 显示内存使用百分比，%cpu 显示 CPU 使用百分比，rss 显示常驻集大小（Resident Set Size，即进程占用的实际物理内存）。\n使用 activity monitor\nmacOS 自带的“活动监视器”应用程序也可以用来查看进程的内存使用情况。\n打开“活动监视器”：\n你可以通过 Spotlight 搜索（按 Cmd + Space，然后输入“活动监视器”）来打开它。 切换到“内存”标签页：\n在“活动监视器”中，选择“内存”标签页，这里会显示所有进程的内存使用情况。 查找你的服务：\n在进程列表中查找你的服务名称，查看其内存使用情况。 使用 memory_pressure 命令\nmemory_pressure 命令可以显示系统的内存压力情况，虽然它不能直接显示单个进程的内存使用情况，但可以帮助你了解系统整体的内存状况。\nmemory_pressure 示例\n假设你的服务标签是 com.example.myapp，你可以按以下步骤查看其内存使用情况：\n查找服务的 PID：\nps aux | grep com.example.myapp 假设找到的 PID 是 12345，查看该进程的内存使用情况：\nps -p 12345 -o %mem,%cpu,rss 通过这些方法，你可以轻松地查看 launchctl 服务的内存使用情况。\nmac 上抓取应用的https的包 # 在Mac上抓取应用的HTTPS流量，你需要使用网络分析工具，如Wireshark、Charles Proxy或MITMproxy。由于HTTPS加密了数据传输，直接抓包无法查看具体内容，因此通常需要设置一个代理服务器来进行中间人攻击（Man-in-the-Middle, MITM）来解密和检查HTTPS流量。\n以下是使用Charles Proxy作为例子来说明如何进行HTTPS流量的抓取：\n安装Charles Proxy:\n下载并安装Charles Proxy应用程序到你的Mac电脑上。 配置Charles SSL代理:\n打开Charles，前往Proxy -\u0026gt; SSL Proxying Settings。 在SSL Proxying标签中点击Enable SSL Proxying。 添加你想要监控的应用程序使用的域名端口对，例如对于大多数Web流量是443端口。 安装Charles的SSL证书:\n为了让Charles能够解密HTTPS流量，你需要信任它的SSL证书。 在Charles中前往Help -\u0026gt; SSL Proxying -\u0026gt; Install Charles Root Certificate。 按照提示完成证书安装，并确保系统信任此证书。 配置设备或应用以使用Charles代理:\n如果你想抓取的是Mac本地应用的流量，你需要配置该应用使用Charles作为HTTP/HTTPS代理。 对于某些应用程序，这可能需要更改系统的网络设置，或者在应用内部设置代理服务器地址为localhost或127.0.0.1，端口号通常是8888（默认的Charles监听端口）。 如果是移动设备上的应用，你需要设置设备的Wi-Fi连接使用手动HTTP代理指向运行Charles的Mac的局域网IP地址和端口。 开始抓包:\n现在你可以启动目标应用程序并开始与它交互，所有的HTTPS流量应该会通过Charles被截获，并且如果你正确设置了SSL代理，你应该能看到解密后的流量。 过滤和分析流量:\n使用Charles提供的过滤器和搜索功能来定位你感兴趣的特定请求和响应。 请注意，抓取和解密HTTPS流量可能涉及到隐私问题以及违反服务条款的风险。务必确保你有合法的权利去监视和分析这些流量。如果你是在测试自己的应用，确保遵循公司的政策和法律要求。如果你试图分析第三方应用的流量，请确保你有权这样做。\ncharles # Mac使用Charles进行HTTPS抓包 高颜值抓包工具Charles，实现Mac和IOS端抓取https请求 Configure Charles Root certificate on Mac 需要在keychains里信任证书 Charles Proxy for Mobile apps that use SSL Pinning 8 Ways to Bypass SSL Pinning in iOS questions # 2024-11-15 指纹识别及录入问题 M1 macbookPro 指纹不是识别及其慢就是识别不了，没有反应 电脑插电会有影响，不插电指纹功能是正常的 "},{"id":36,"href":"/zh/post/life/learning-others-log/","title":"other learning","section":"Life","content":" other learning # 2025-01-07 # 美国困局：“新右翼” 的兴起与挑战 # 第1章 2025-01-07 第2章 1 (2025-01-10) 2 (2025-01-10) 3 (2025-01-10) 4 (2025-01-10) 5 (2025-01-10) 第3章 1 (2025-01-11) 2 (2025-01-11) 3 (2025-01-11) 4 (2025-01-11) 5 第4章 1 2 3 4 5 第5章 1 2 3 4 5 第6章 第7章 第8章 第9章 2025-01-04 # 清华韩秀云精品课（第一季，64集） # 清华韩秀云精品课（第一季，64集） ✅ 第一期：国外宏观经济形势 # 1 美国央行大放水 2025-01-04 2 负债率的欧洲和日本 2025-01-04 3 政府发钱刺激经济 2025-01-04 ✅ 第二期：通胀来了，该如何配置资产 # 4 通胀来了怎么办 2025-01-05 5 如何配置你的资产？2025-01-05 6 投资房产考虑什么？2025-01-05 7 投资黄金有必要吗？2025-01-06 8 炒股要注意什么？2025-01-06 ✅ 第三期：我国宏观政策走向 # 9 政府救市与共同富裕 2025-01-06 10 2022年政策与行业机会 2025-01-07 ✅ 第四期：黄金 # 11 黄金的前世今生 2025-01-07 12 美元和黄金挂钩与脱钩 2025-01-07 13 黄金的避险功能 2025-01-08 14 全世界的金库在哪里 2025-01-08 15 投资黄金该注意什么 2025-01-08 ✅ 第五期：石油 # 16 石油的前世今生 2025-01-09 17 洛克菲勒与标准石油 2025-01-09 18 美国石油反垄断 2025-01-09 19 油价为何总在波动 2025-01-11 20 欧佩克的转变 2025-01-11 21 石油的用途 2025-01-11 22 油价为何是负的 2025-01-12 23 什么是石油期货的 2025-01-12 ✅ 第六期：楼市 # 24 房价的成长史的 2025-01-12 25 楼市中看不见的手的 2025-01-13 26 市场决定资源配置的 2025-01-13 27 买房要选稀缺的 2025-01-13 28 买住宅怎么选 2025-01-15 29 买商铺和写字楼 2025-01-15 30 买房看机会成本 2025-01-15 31 买房要注意几件事 2025-01-16 32 买房还是租房好 2025-01-16 33 政府何为要调控楼市 2025-01-16 34 楼市调控还会继续吗？ 2025-01-17 35 房地产税会退出吗？ 2025-01-17 36 房地产税推出后，房价会下跌吗？ 2025-01-17 37 买房防止变成资产 2025-01-19 38 警惕房地产泡沫 2025-01-19 39 全球楼市涨跌互见 2025-01-19 第七期：股市 # 40 炒股要懂经济学 2025-01-20 41 股票是如何诞生的？ 2025-01-20 42 东印度公司的第一张股票 2025-01-20 43 英美为什么发股票 2025-01-21 44 荷兰证券交易所的诞生 2025-01-21 45 纽约证券交易所的由来 2025-01-21 46 道琼斯指数的故事 2025-01-21 47 股票价格与股价指数 2025-01-21 48 股市的投资理念 2025-01-21 49 炒股应该注意什么？ 50 参与股市的几种方式 51 郁金香泡沫 52 密西西比泡沫 53 南海泡沫 54 美国1929年股灾 55 中国2007年股市暴涨 56 中国2015年股灾 57 教你判断股市趋势 第八期：汇市 # 58 汇率的基本知识 59 人民币汇率 60 美元的霸权 61 欧元的诞生 62 人民币国际化 "},{"id":37,"href":"/zh/zh/post/life/learning-others-log/","title":"other learning","section":"Life","content":" other learning # 2025-01-07 # 美国困局：“新右翼” 的兴起与挑战 # 第1章 2025-01-07 第2章 1 (2025-01-10) 2 (2025-01-10) 3 (2025-01-10) 4 (2025-01-10) 5 (2025-01-10) 第3章 1 (2025-01-11) 2 (2025-01-11) 3 (2025-01-11) 4 (2025-01-11) 5 第4章 1 2 3 4 5 第5章 1 2 3 4 5 第6章 第7章 第8章 第9章 2025-01-04 # 清华韩秀云精品课（第一季，64集） # 清华韩秀云精品课（第一季，64集） ✅ 第一期：国外宏观经济形势 # 1 美国央行大放水 2025-01-04 2 负债率的欧洲和日本 2025-01-04 3 政府发钱刺激经济 2025-01-04 ✅ 第二期：通胀来了，该如何配置资产 # 4 通胀来了怎么办 2025-01-05 5 如何配置你的资产？2025-01-05 6 投资房产考虑什么？2025-01-05 7 投资黄金有必要吗？2025-01-06 8 炒股要注意什么？2025-01-06 ✅ 第三期：我国宏观政策走向 # 9 政府救市与共同富裕 2025-01-06 10 2022年政策与行业机会 2025-01-07 ✅ 第四期：黄金 # 11 黄金的前世今生 2025-01-07 12 美元和黄金挂钩与脱钩 2025-01-07 13 黄金的避险功能 2025-01-08 14 全世界的金库在哪里 2025-01-08 15 投资黄金该注意什么 2025-01-08 ✅ 第五期：石油 # 16 石油的前世今生 2025-01-09 17 洛克菲勒与标准石油 2025-01-09 18 美国石油反垄断 2025-01-09 19 油价为何总在波动 2025-01-11 20 欧佩克的转变 2025-01-11 21 石油的用途 2025-01-11 22 油价为何是负的 2025-01-12 23 什么是石油期货的 2025-01-12 ✅ 第六期：楼市 # 24 房价的成长史的 2025-01-12 25 楼市中看不见的手的 2025-01-13 26 市场决定资源配置的 2025-01-13 27 买房要选稀缺的 2025-01-13 28 买住宅怎么选 2025-01-15 29 买商铺和写字楼 2025-01-15 30 买房看机会成本 2025-01-15 31 买房要注意几件事 2025-01-16 32 买房还是租房好 2025-01-16 33 政府何为要调控楼市 2025-01-16 34 楼市调控还会继续吗？ 2025-01-17 35 房地产税会退出吗？ 2025-01-17 36 房地产税推出后，房价会下跌吗？ 2025-01-17 37 买房防止变成资产 2025-01-19 38 警惕房地产泡沫 2025-01-19 39 全球楼市涨跌互见 2025-01-19 第七期：股市 # 40 炒股要懂经济学 2025-01-20 41 股票是如何诞生的？ 2025-01-20 42 东印度公司的第一张股票 2025-01-20 43 英美为什么发股票 2025-01-21 44 荷兰证券交易所的诞生 2025-01-21 45 纽约证券交易所的由来 2025-01-21 46 道琼斯指数的故事 2025-01-21 47 股票价格与股价指数 2025-01-21 48 股市的投资理念 2025-01-21 49 炒股应该注意什么？ 50 参与股市的几种方式 51 郁金香泡沫 52 密西西比泡沫 53 南海泡沫 54 美国1929年股灾 55 中国2007年股市暴涨 56 中国2015年股灾 57 教你判断股市趋势 第八期：汇市 # 58 汇率的基本知识 59 人民币汇率 60 美元的霸权 61 欧元的诞生 62 人民币国际化 "},{"id":38,"href":"/zh/post/life/podcast/","title":"podcast","section":"Life","content":" podcast # 小宇宙 # 码农姐妹 经济新闻每日速递 纵横说 "},{"id":39,"href":"/zh/zh/post/life/podcast/","title":"podcast","section":"Life","content":" podcast # 小宇宙 # 码农姐妹 经济新闻每日速递 纵横说 "},{"id":40,"href":"/zh/post/life/politics/","title":"politics","section":"Life","content":" politics # 茶党 # \u0026ldquo;茶党\u0026rdquo;（Tea Party）通常指的是美国的一个政治运动，这个运动始于2009年，主要由保守派共和党支持者组成，强调减少政府开支、降低税收、限制政府权力以及遵守美国宪法。茶党的名字来源于1773年的波士顿茶叶事件，这是一个反对英国殖民统治和高税收的历史事件，象征着对政府过度干预的抗议。\n茶党成员经常组织示威活动，尤其是在经济政策和财政责任方面。他们在2010年的中期选举中对美国政治产生了显著影响，支持了多位共和党候选人的当选，这些候选人随后在美国国会中代表了更加保守的立场。\n随着时间的发展，茶党的影响力有所减弱，但它仍然是美国政治中一个重要的保守力量。如果你有关于茶党的更具体问题，欢迎继续提问。\n茶党和共和党建制派的区别是什么 # 茶党和共和党建制派是美国共和党内两个不同的政治派别，它们在政治立场、策略和目标上存在一些显著差异：\n政治立场：\n茶党：茶党通常被视为共和党内的激进派，强调极端保守的经济政策，比如大幅减税、削减政府开支、反对政府干预市场、减少债务和赤字。此外，茶党成员往往强烈反对奥巴马政府时期的医疗保健改革（即“奥巴马医改”）等政策。 共和党建制派：相比之下，建制派共和党人虽然也支持保守政策，但他们的立场相对温和，愿意与民主党合作以实现政治目标。建制派更倾向于维护共和党的传统利益，包括与大企业和精英阶层的关系。 策略和方法：\n茶党：茶党成员倾向于采取更为激进的策略，包括组织大规模抗议活动、支持极端保守的候选人、反对妥协。他们通常认为现有的政治体系已经腐败，需要彻底改革。 共和党建制派：建制派共和党人更倾向于通过传统政治渠道实现目标，如立法谈判、建立联盟和政治筹款。他们更注重保持共和党的整体稳定和长期利益。 目标：\n茶党：茶党的目标是推动共和党向更加保守的方向发展，减少政府规模和干预，保护个人自由和财产权。 共和党建制派：建制派的目标是保持共和党的主流地位，通过务实的政治策略赢得选举，维护共和党的长期利益和权力。 支持者基础：\n茶党：茶党的支持者通常是中下层中产阶级，他们对经济困境和政府过度干预感到不满，希望通过政治行动表达自己的诉求。 共和党建制派：建制派的支持者更多来自大企业和精英阶层，他们希望通过共和党的政策维护自身的经济利益。 总结来说，茶党和共和党建制派在政治立场、策略和目标上存在明显的差异，茶党更激进、更强调基层动员，而建制派则更温和、更注重政治稳定和长期利益。\n"},{"id":41,"href":"/zh/zh/post/life/politics/","title":"politics","section":"Life","content":" politics # 茶党 # \u0026ldquo;茶党\u0026rdquo;（Tea Party）通常指的是美国的一个政治运动，这个运动始于2009年，主要由保守派共和党支持者组成，强调减少政府开支、降低税收、限制政府权力以及遵守美国宪法。茶党的名字来源于1773年的波士顿茶叶事件，这是一个反对英国殖民统治和高税收的历史事件，象征着对政府过度干预的抗议。\n茶党成员经常组织示威活动，尤其是在经济政策和财政责任方面。他们在2010年的中期选举中对美国政治产生了显著影响，支持了多位共和党候选人的当选，这些候选人随后在美国国会中代表了更加保守的立场。\n随着时间的发展，茶党的影响力有所减弱，但它仍然是美国政治中一个重要的保守力量。如果你有关于茶党的更具体问题，欢迎继续提问。\n茶党和共和党建制派的区别是什么 # 茶党和共和党建制派是美国共和党内两个不同的政治派别，它们在政治立场、策略和目标上存在一些显著差异：\n政治立场：\n茶党：茶党通常被视为共和党内的激进派，强调极端保守的经济政策，比如大幅减税、削减政府开支、反对政府干预市场、减少债务和赤字。此外，茶党成员往往强烈反对奥巴马政府时期的医疗保健改革（即“奥巴马医改”）等政策。 共和党建制派：相比之下，建制派共和党人虽然也支持保守政策，但他们的立场相对温和，愿意与民主党合作以实现政治目标。建制派更倾向于维护共和党的传统利益，包括与大企业和精英阶层的关系。 策略和方法：\n茶党：茶党成员倾向于采取更为激进的策略，包括组织大规模抗议活动、支持极端保守的候选人、反对妥协。他们通常认为现有的政治体系已经腐败，需要彻底改革。 共和党建制派：建制派共和党人更倾向于通过传统政治渠道实现目标，如立法谈判、建立联盟和政治筹款。他们更注重保持共和党的整体稳定和长期利益。 目标：\n茶党：茶党的目标是推动共和党向更加保守的方向发展，减少政府规模和干预，保护个人自由和财产权。 共和党建制派：建制派的目标是保持共和党的主流地位，通过务实的政治策略赢得选举，维护共和党的长期利益和权力。 支持者基础：\n茶党：茶党的支持者通常是中下层中产阶级，他们对经济困境和政府过度干预感到不满，希望通过政治行动表达自己的诉求。 共和党建制派：建制派的支持者更多来自大企业和精英阶层，他们希望通过共和党的政策维护自身的经济利益。 总结来说，茶党和共和党建制派在政治立场、策略和目标上存在明显的差异，茶党更激进、更强调基层动员，而建制派则更温和、更注重政治稳定和长期利益。\n"},{"id":42,"href":"/zh/post/computer-science/raspberrypi/","title":"raspberry pi","section":"Computer Science","content":" raspberry pi # reference # 树莓派文档 clash # reference 为什么全局代理后， CMD 依然 Ping 不通 Google？ 树莓派 Clash 透明代理(TProxy) 在 Raspberry Pi 上运行 Clash 作为透明代理 解决 Clash Meta 中TUN模式无法上网的问题：正确配置DNS设置 解决 树莓派ping: baidu.com: 域名解析暂时失败 树莓派安装clash，实现科学上网 在 Raspberry Pi 上运行 Clash 作为透明代理 http://yacd.haishan.me yt-dlp # 使用这个工具，可以下载 youtube 视频\n后台下载命令 nohup yt-dlp -N 20 {{video_url}} --merge-output-format mp4 \u0026amp; 实时查看后台下载进度 tail -f nohup.out 停止下载 查询后台进程号 ps -aux | grep yt-dlp 杀死进程 kill -9 {{进程号}} tomcat # 树莓派安装Tomcat wget https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.36/bin/apache-tomcat-9.0.36.tar.gz tar zxvf apache-tomcat-9.0.36.tar.gz cd ~/apache-tomcat-9.0.36/bin sudo ./startup.sh dd # dd 命令是一个非常强大的工具，可以用来复制和转换文件。通过创建一个临时文件并测量其读写速度，可以测试存储介质的性能。\n打开终端：您可以通过SSH连接到您的树莓派，或者直接在树莓派上打开终端。\n测试写入速度：\n创建一个 1GB 的临时文件，并测量写入速度： sudo dd if=/dev/zero of=testfile bs=1M count=1024 conv=fdatasync 解释： if=/dev/zero：从 /dev/zero 读取数据（这是一个无限的零流）。 of=testfile：将数据写入名为 testfile 的文件。 bs=1M：每次读写 1MB 的数据块。 count=1024：写入 1024 个 1MB 的数据块，总共 1GB。 conv=fdatasync：确保所有数据都写入磁盘后再结束命令。 测试读取速度：\n读取刚刚创建的文件，并测量读取速度： sudo dd if=testfile of=/dev/null bs=1M 解释： if=testfile：从 testfile 文件读取数据。 of=/dev/null：将数据写入 /dev/null（丢弃数据）。 bs=1M：每次读取 1MB 的数据块。 删除测试文件：\n测试完成后，删除 testfile 以释放空间： sudo rm testfile iwlist # sudo iwlist wlan0 scan sudo iwlist wlan0 scan | grep SSID 定时任务 # 查看当前的定时任务 crontab -l 编辑定时任务 crontab -e 外网登录 # 如何从外网登录访问树莓派Raspberry Pi holer Wisdom wisdom-projects/holer 方式一：使用公开的holer映射或者开通holer服务，通过holer客户端软件经holer服务器实现公网访问 方式二：使用holer服务端软件搭建holer服务，通过holer客户端软件经自己服务器实现公网访问， Holer端口映射软件使用教程 cpolar # cpolar 3.3 将隧道配置为后台服务 Cpolar快速入门教程：树莓派系列 后台管理页面 http://localhost:9200 zsh: corrupt history file /home/me/.zsh_history # 怎样修复zsh历史记录错误：zsh: corrupt history file /home/me/.zsh_history cd ~ mv .zsh_history .zsh_history_bad strings -eS .zsh_history_bad \u0026gt; .zsh_history fc -R .zsh_history "},{"id":43,"href":"/zh/zh/post/computer-science/raspberrypi/","title":"raspberry pi","section":"Computer Science","content":" raspberry pi # reference # 树莓派文档 clash # reference 为什么全局代理后， CMD 依然 Ping 不通 Google？ 树莓派 Clash 透明代理(TProxy) 在 Raspberry Pi 上运行 Clash 作为透明代理 解决 Clash Meta 中TUN模式无法上网的问题：正确配置DNS设置 解决 树莓派ping: baidu.com: 域名解析暂时失败 树莓派安装clash，实现科学上网 在 Raspberry Pi 上运行 Clash 作为透明代理 http://yacd.haishan.me yt-dlp # 使用这个工具，可以下载 youtube 视频\n后台下载命令 nohup yt-dlp -N 20 {{video_url}} --merge-output-format mp4 \u0026amp; 实时查看后台下载进度 tail -f nohup.out 停止下载 查询后台进程号 ps -aux | grep yt-dlp 杀死进程 kill -9 {{进程号}} tomcat # 树莓派安装Tomcat wget https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.36/bin/apache-tomcat-9.0.36.tar.gz tar zxvf apache-tomcat-9.0.36.tar.gz cd ~/apache-tomcat-9.0.36/bin sudo ./startup.sh dd # dd 命令是一个非常强大的工具，可以用来复制和转换文件。通过创建一个临时文件并测量其读写速度，可以测试存储介质的性能。\n打开终端：您可以通过SSH连接到您的树莓派，或者直接在树莓派上打开终端。\n测试写入速度：\n创建一个 1GB 的临时文件，并测量写入速度： sudo dd if=/dev/zero of=testfile bs=1M count=1024 conv=fdatasync 解释： if=/dev/zero：从 /dev/zero 读取数据（这是一个无限的零流）。 of=testfile：将数据写入名为 testfile 的文件。 bs=1M：每次读写 1MB 的数据块。 count=1024：写入 1024 个 1MB 的数据块，总共 1GB。 conv=fdatasync：确保所有数据都写入磁盘后再结束命令。 测试读取速度：\n读取刚刚创建的文件，并测量读取速度： sudo dd if=testfile of=/dev/null bs=1M 解释： if=testfile：从 testfile 文件读取数据。 of=/dev/null：将数据写入 /dev/null（丢弃数据）。 bs=1M：每次读取 1MB 的数据块。 删除测试文件：\n测试完成后，删除 testfile 以释放空间： sudo rm testfile iwlist # sudo iwlist wlan0 scan sudo iwlist wlan0 scan | grep SSID 定时任务 # 查看当前的定时任务 crontab -l 编辑定时任务 crontab -e 外网登录 # 如何从外网登录访问树莓派Raspberry Pi holer Wisdom wisdom-projects/holer 方式一：使用公开的holer映射或者开通holer服务，通过holer客户端软件经holer服务器实现公网访问 方式二：使用holer服务端软件搭建holer服务，通过holer客户端软件经自己服务器实现公网访问， Holer端口映射软件使用教程 cpolar # cpolar 3.3 将隧道配置为后台服务 Cpolar快速入门教程：树莓派系列 后台管理页面 http://localhost:9200 zsh: corrupt history file /home/me/.zsh_history # 怎样修复zsh历史记录错误：zsh: corrupt history file /home/me/.zsh_history cd ~ mv .zsh_history .zsh_history_bad strings -eS .zsh_history_bad \u0026gt; .zsh_history fc -R .zsh_history "},{"id":44,"href":"/zh/post/computer-science/security/","title":"security","section":"Computer Science","content":" security # man-in-the-middle attack 中间人攻击 # SSL Pinning is a technique we use on the client side to avoid a man-in-the-middle attack by validating the server certificates. The developers embed (or pin) a list of trustful certificates in the client application during development and use them to compare against the server certificates during runtime.\nIf there is a mismatch between the server and the local copy of certificates, the connection will be disrupted, and no further user data will be sent to that server. This enforcement ensures that user devices communicate only with dedicated, trustful servers.\nSSL Pinning prevents a man-in-the-middle attack, which means an attacker can not intercept the traffic and modify the data. If an attacker can not intercept the traffic, the application automatically prevents many server-side vulnerabilities. Because an attacker can not perform API-level test cases, implementing SSL is very important.\nSSL pinning # reference Charles Proxy for Mobile apps that use SSL Pinning 8 Ways to Bypass SSL Pinning in iOS "},{"id":45,"href":"/zh/zh/post/computer-science/security/","title":"security","section":"Computer Science","content":" security # man-in-the-middle attack 中间人攻击 # SSL Pinning is a technique we use on the client side to avoid a man-in-the-middle attack by validating the server certificates. The developers embed (or pin) a list of trustful certificates in the client application during development and use them to compare against the server certificates during runtime.\nIf there is a mismatch between the server and the local copy of certificates, the connection will be disrupted, and no further user data will be sent to that server. This enforcement ensures that user devices communicate only with dedicated, trustful servers.\nSSL Pinning prevents a man-in-the-middle attack, which means an attacker can not intercept the traffic and modify the data. If an attacker can not intercept the traffic, the application automatically prevents many server-side vulnerabilities. Because an attacker can not perform API-level test cases, implementing SSL is very important.\nSSL pinning # reference Charles Proxy for Mobile apps that use SSL Pinning 8 Ways to Bypass SSL Pinning in iOS "},{"id":46,"href":"/zh/post/computer-science/vue/","title":"vue","section":"Computer Science","content":" vue # vuejs.org 文档 vue2 教程 Vue 2.0 在 2023 年 12 月 31 日停止更新 vue3 教程 快速上手 # 安装 node.js 使用 brew 安装 brew install node 检查 node 是否安装成功 node -v npm -v 创建 vue 项目 npm create vue@latest cd my-vue-project 修改镜像源 reference npm、yarn、pnpm 最新国内镜像源设置和常见问题解决 npm install npm run dev Local http://localhost:5173 Vue DevTools http://localhost:5173/__devtools__/ reference 如何在 macOS 上安装 Node.js "},{"id":47,"href":"/zh/zh/post/computer-science/vue/","title":"vue","section":"Computer Science","content":" vue # vuejs.org 文档 vue2 教程 Vue 2.0 在 2023 年 12 月 31 日停止更新 vue3 教程 快速上手 # 安装 node.js 使用 brew 安装 brew install node 检查 node 是否安装成功 node -v npm -v 创建 vue 项目 npm create vue@latest cd my-vue-project 修改镜像源 reference npm、yarn、pnpm 最新国内镜像源设置和常见问题解决 npm install npm run dev Local http://localhost:5173 Vue DevTools http://localhost:5173/__devtools__/ reference 如何在 macOS 上安装 Node.js "},{"id":48,"href":"/zh/post/life/goal/","title":"goal","section":"Life","content":" goal # 2025-01-12 # 过年前完成(1月24日内) 面试经典150题(一天完成5道题, 应该完成70道题左右) Spring实战 第6版 Book (读完这本书) 清华韩秀云精品课（第一季，64集）(大概应该看到56集) 美国困局：“新右翼” 的兴起与挑战 (读完这本书) OAuth 2 in Action Microservices Security in Action API Security in Action ActiveMQ in Action RabbitMQ in Depth（Manning，2017年） Alvaro Videla和Jason J.W. Williams合著的RabbitMQ in Action（Manning，2012年） Kafka in Action （Manning，2017年） Enterprise Integration Patterns（Addison-Wesley，2003年） Functional Programming in Java（Manning，2017年） Grokking Functional Programming（Manning，2021年） "},{"id":49,"href":"/zh/zh/post/life/goal/","title":"goal","section":"Life","content":" goal # 2025-01-12 # 过年前完成(1月24日内) 面试经典150题(一天完成5道题, 应该完成70道题左右) Spring实战 第6版 Book (读完这本书) 清华韩秀云精品课（第一季，64集）(大概应该看到56集) 美国困局：“新右翼” 的兴起与挑战 (读完这本书) OAuth 2 in Action Microservices Security in Action API Security in Action ActiveMQ in Action RabbitMQ in Depth（Manning，2017年） Alvaro Videla和Jason J.W. Williams合著的RabbitMQ in Action（Manning，2012年） Kafka in Action （Manning，2017年） Enterprise Integration Patterns（Addison-Wesley，2003年） Functional Programming in Java（Manning，2017年） Grokking Functional Programming（Manning，2021年） "},{"id":50,"href":"/zh/post/life/accumulation/","title":"accumulation","section":"Life","content":" accumulation # cycling # 微信读书 # 2025 85 hour, 32 min 2024 8 hour, 45 min 2023 24 hour, 48 min 2022 8 hour, 47 min 2021 1 min 2020 7 min 轻听英语 # 2025 2024 70 hour, 55 min 2023 5 hour, 36 min 2022 2 hour, 6 min 2021 1 hour, 3 min 2020 15 hour, 39 min 2019 38 hour, 42 min 2018 11 hour, 16 min 2017 7 hour, 57 min 小宇宙 # accumulation 2025-01-13 10 h, 3 min 码农姐妹 2025-01-13 3 h, 36 min 经济新闻每日速递 2025-01-13 3 h, 5 min 纵横说 2025-01-13 2 h, 9 min "},{"id":51,"href":"/zh/zh/post/life/accumulation/","title":"accumulation","section":"Life","content":" accumulation # cycling # 微信读书 # 2025 85 hour, 32 min 2024 8 hour, 45 min 2023 24 hour, 48 min 2022 8 hour, 47 min 2021 1 min 2020 7 min 轻听英语 # 2025 2024 70 hour, 55 min 2023 5 hour, 36 min 2022 2 hour, 6 min 2021 1 hour, 3 min 2020 15 hour, 39 min 2019 38 hour, 42 min 2018 11 hour, 16 min 2017 7 hour, 57 min 小宇宙 # accumulation 2025-01-13 10 h, 3 min 码农姐妹 2025-01-13 3 h, 36 min 经济新闻每日速递 2025-01-13 3 h, 5 min 纵横说 2025-01-13 2 h, 9 min "},{"id":52,"href":"/zh/post/life/coffee/","title":"coffee","section":"Life","content":" coffee # 咖啡碎碎念#1 一次探店2家上海“天花板”咖啡馆？！喝到一半老板直接开始上课？#上海VLOG（上） 科普丨意式咖啡傻傻分不清？10分钟带你全部看懂 马克西姆咖啡机 马克西姆使用评测（上）3000+价位段最值得入手半自动意式咖啡机一体机 马克西姆咖啡机评测（下）使用成本低是最好的入手理由 马克西姆咖啡机用了一年，总结出5个使用技巧 马克西姆半自动家用咖啡机，如何调试和定量出品，掌握核心2点，控制好粉重和粉液比 "},{"id":53,"href":"/zh/zh/post/life/coffee/","title":"coffee","section":"Life","content":" coffee # 咖啡碎碎念#1 一次探店2家上海“天花板”咖啡馆？！喝到一半老板直接开始上课？#上海VLOG（上） 科普丨意式咖啡傻傻分不清？10分钟带你全部看懂 马克西姆咖啡机 马克西姆使用评测（上）3000+价位段最值得入手半自动意式咖啡机一体机 马克西姆咖啡机评测（下）使用成本低是最好的入手理由 马克西姆咖啡机用了一年，总结出5个使用技巧 马克西姆半自动家用咖啡机，如何调试和定量出品，掌握核心2点，控制好粉重和粉液比 "},{"id":54,"href":"/zh/post/computer-science/algorithm/","title":"Algorithm","section":"Computer Science","content":" Algorithm # 代码随想录 面试经典150题 # 面试经典150题 数组/字符串 # 移除元素 # 2025-01-11 击败3.36% class Solution { public int removeElement(int[] nums, int val) { Arrays.sort(nums); int flagIndex = -1; int count = 0; for (int i = 0; i \u0026lt; nums.length; i++) { if (nums[i] == val \u0026amp;\u0026amp; count == 0) { flagIndex = i; count++; } else if (nums[i] == val) { count++; } } if (flagIndex != -1 \u0026amp;\u0026amp; count != 0) { for (int i = flagIndex; i \u0026lt; flagIndex + count; i++) { nums[i] = nums[nums.length - (i - flagIndex) - 1]; } } return nums.length - count; } } 一维动态规划 # 爬楼梯 # 2025-01-11 击败100% class Solution { public int climbStairs(int n) { if (n == 0) return 0; if (n == 1) return 1; if (n == 2) return 2; int[] dp = new int[n + 1]; dp[0] = 0; dp[1] = 1; dp[2] = 2; for (int i = 3; i \u0026lt;= n; i++) { dp[i] = dp[i - 1] + dp[i - 2]; } return dp[n]; } } "},{"id":55,"href":"/zh/zh/post/computer-science/algorithm/","title":"Algorithm","section":"Computer Science","content":" Algorithm # 代码随想录 面试经典150题 # 面试经典150题 数组/字符串 # 移除元素 # 2025-01-11 击败3.36% class Solution { public int removeElement(int[] nums, int val) { Arrays.sort(nums); int flagIndex = -1; int count = 0; for (int i = 0; i \u0026lt; nums.length; i++) { if (nums[i] == val \u0026amp;\u0026amp; count == 0) { flagIndex = i; count++; } else if (nums[i] == val) { count++; } } if (flagIndex != -1 \u0026amp;\u0026amp; count != 0) { for (int i = flagIndex; i \u0026lt; flagIndex + count; i++) { nums[i] = nums[nums.length - (i - flagIndex) - 1]; } } return nums.length - count; } } 一维动态规划 # 爬楼梯 # 2025-01-11 击败100% class Solution { public int climbStairs(int n) { if (n == 0) return 0; if (n == 1) return 1; if (n == 2) return 2; int[] dp = new int[n + 1]; dp[0] = 0; dp[1] = 1; dp[2] = 2; for (int i = 3; i \u0026lt;= n; i++) { dp[i] = dp[i - 1] + dp[i - 2]; } return dp[n]; } } "},{"id":56,"href":"/zh/zh/","title":"Penruins","section":"Penruins","content":" Penruins # penruins 的博客，分享技术🤖，生活🤹🏻，电影🎬，骑行🚴🏽‍♂️，English和其他一些有趣的东西(📖学习记录, ⛰️爬山)\n2025-02-05 大年初八 # mac上用safari浏览网页，可以在 screen time 中统计每个网页的浏览时长\n2025-02-04 大年初七 # 超完美地狱 ycx\n开始使用微信输入法，比搜狗输入法更简洁舒服\n开始使用 Aisten，可以用来听英语播客，它会自动生成播客字幕，并且能统计时长，有按周、按月、按年统计时长，很不错\n2025-02-03 大年初六 # 良心护士 ycx。想不通为什么他要用这样的方式杀死那么多无辜的人。\n2025-02-02 大年初五 # 网络谜踪 ycx。电影里苹果全家桶的操作太丝滑了\n2025-01-31 大年初三 # 草海一圈\n2025-01-30 大年初二 # 滇池绿道探路\nApp Store下载了DeepSeek 之后登录不上，查了一下是被攻击了还在修复中，晚一点终于登录上去了。界面和清爽，简单玩了一下\n2025-01-29 大年初一 # 置身事内：中国政府与经济发展\n人工智能入行实战：从校园到职场\n2025-01-27 # 热水袋破了被烫伤了。。。。\n2025-01-26 # 门徒 ycx\n用地图看懂世界格局\n2025-01-19 # 美国困局\n树莓派开始，玩转linux\n2025-01-18 Saturday # 使用 stream 这个app可以抓 ios app 接口的包\n2025-01-16 # Spring实战（第6版）\n2025-01-10 Friday # 卧云山环线练车 #oado\n2025-01-09 # hugo 博客自定义 toc 的深度 Is there any way I can set how deep the level is to show the TOC at right side? #52 2025-01-08 # 四重奏 E07\n2025-01-07 # 开始爬彩云中路的坡\n四重奏 E06\n如果国宝会说话 第三季 2025-01-06 # 四重奏 E05\n2025-01-05 # 四重奏 E04\n2025-01-04 # 身体恢复的差不多了，开始骑车\n四重奏 E03\n如果国宝会说话 第二季 2025-01-03 # 四重奏 E02\n2025-01-02 # 四重奏 E01\n2025-01-01 # 如果国宝会说话 第一季 2024-12-31 # 辛德勒的名单（2）\n2024-12-29 # 生病中\n2024-12-28 # 生病中\n2024-12-26 # 西安 陕西历史博物馆\n西安城墙骑车🚲\n看钟楼夜景\n2024-12-25 # 西安 翠华山\n2024-12-24 # 兵马俑\n骊山\n长恨歌表演\n2024-12-23 # 西安 大雁塔\n大唐不夜城\n2024-10-13 # 金铜盆爬山\n尽吾志也而不能至者，可以无悔矣，其孰能讥之乎？此余之所得也！\n"},{"id":57,"href":"/zh/post/books/java%E5%AE%9E%E6%88%98/","title":"Java实战","section":"Books","content":" Java实战 # Java实战（第2版） 第一部分 基础知识 # 第1章　Java 8、9、10以及11的变化　2 # 1.1 为什么要关心Java的变化 2 # 1.2 Java怎么还在变 4 # 1.2.1 Java在编程语言生态系统中的位置 5 1.2.2 流处理 6 1.2.3 用行为参数化把代码传递给方法 7 1.2.4 并行与共享的可变数据 8 1.2.5 Java需要演变 9 1.3 Java中的函数 9 # 1.3.1 方法和Lambda作为一等值 10 1.3.2 传递代码：一个例子 11 1.3.3 从传递方法到Lambda 13 1.4 流 14 # 1.5 默认方法及Java模块 17 # 1.6 来自函数式编程的其他好思想 19 # 1.7 小结 20 # 第2章　通过行为参数化传递代码　22 # 2.1 应对不断变化的需求 23 # 2.1.1 初试牛刀：筛选绿苹果 23 2.1.2 再展身手：把颜色作为参数 23 2.1.3 第三次尝试：对你能想到的每个属性做筛选 24 2.2 行为参数化 25 # 2.3 对付啰唆 30 # 2.3.1 匿名类 30 2.3.2 第五次尝试：使用匿名类 31 2.3.3 第六次尝试：使用Lambda表达式 32 2.3.4 第七次尝试：将List类型抽象化 33 2.4 真实的例子 33 # 2.4.1 用Comparator来排序 33 2.4.2 用Runnable执行代码块 34 2.4.3 通过Callable返回结果 35 2.4.4 GUI事件处理 35 2.5 小结 36 # 第3章　Lambda表达式　37 # 3.1 Lambda管中窥豹 37 # 3.2 在哪里以及如何使用Lambda 40 # 3.2.1 函数式接口 40 3.2.2 函数描述符 42 3.3 把Lambda付诸实践：环绕执行模式 44 # 3.3.1 第1 步：记得行为参数化 44 3.3.2 第2 步：使用函数式接口来传递行为 45 3.3.3 第3 步：执行一个行为 45 3.3.4 第4 步：传递Lambda 46 3.4 使用函数式接口 47 # 3.4.1 Predicate 47 3.4.2 Consumer 47 3.4.3 Function 48 3.5 类型检查、类型推断以及限制 52 # 3.5.1 类型检查 52 3.5.2 同样的Lambda，不同的函数式接口 53 3.5.3 类型推断 55 3.5.4 使用局部变量 56 3.6 方法引用 57 # 3.6.1 管中窥豹 57 3.6.2 构造函数引用 60 3.7 Lambda和方法引用实战 62 # 3.7.1 第1 步：传递代码 62 3.7.2 第2 步：使用匿名类 62 3.7.3 第3 步：使用Lambda表达式 62 3.7.4 第4 步：使用方法引用 63 3.8 复合Lambda表达式的有用方法 63 # 3.8.1 比较器复合 64 3.8.2 谓词复合 64 3.8.3 函数复合 65 3.9 数学中的类似思想 66 # 3.9.1 积分 66 3.9.2 与Java 8的Lambda联系起来 68 3.10 小结 68 # 第二部分 使用流进行函数式数据处理 # 第4章　引入流　72 # 4.1 流是什么 72 # 4.2 流简介 76 # 4.3 流与集合 78 # 4.3.1 只能遍历一次 79 4.3.2 外部迭代与内部迭代 80 4.4 流操作 82 # 4.4.1 中间操作 83 4.4.2 终端操作 84 4.4.3 使用流 84 4.5 路线图 85 # 4.6 小结 85 # 第5章　使用流　86 # 5.1 筛选 87 # 5.1.1 用谓词筛选 87 5.1.2 筛选各异的元素 87 5.2 流的切片 88 # 5.2.1 使用谓词对流进行切片 88 5.2.2 截短流 90 5.2.3 跳过元素 90 5.3 映射 91 # 5.3.1 对流中每一个元素应用函数 91 5.3.2 流的扁平化 92 5.4 查找和匹配 95 # 5.4.1 检查谓词是否至少匹配一个元素 95 5.4.2 检查谓词是否匹配所有元素 96 5.4.3 查找元素 96 5.4.4 查找第一个元素 97 5.5 归约 98 # 5.5.1 元素求和 98 5.5.2 最大值和最小值 100 5.6 付诸实践 103 # 5.6.1 领域：交易员和交易 103 5.6.2 解答 104 5.7 数值流 106 # 5.7.1 原始类型流特化 107 5.7.2 数值范围 108 5.7.3 数值流应用：勾股数 108 5.8 构建流 111 # 5.8.1 由值创建流 111 5.8.2 由可空对象创建流 111 5.8.3 由数组创建流 112 5.8.4 由文件生成流 112 5.8.5 由函数生成流：创建无限流 113 5.9 概述 116 # 5.10 小结 116 # 第6章　用流收集数据　118 # 6.1 收集器简介 119 # 6.1.1 收集器用作高级归约 119 6.1.2 预定义收集器 120 6.2 归约和汇总 121 # 6.2.1 查找流中的最大值和最小值 121 6.2.2 汇总 122 6.2.3 连接字符串 123 6.2.4 广义的归约汇总 124 6.3 分组 127 # 6.3.1 操作分组的元素 128 6.3.2 多级分组 130 6.3.3 按子组收集数据 131 6.4 分区 134 # 6.4.1 分区的优势 135 6.4.2 将数字按质数和非质数分区 136 6.5 收集器接口 138 # 6.5.1 理解Collector接口声明的方法 139 6.5.2 全部融合到一起 143 6.6 开发你自己的收集器以获得更好的性能 144 # 6.6.1 仅用质数做除数 145 6.6.2 比较收集器的性能 148 6.7 小结 150 # 第7章　并行数据处理与性能　151 # 7.1 并行流 152 # 7.1.1 将顺序流转换为并行流 52 7.1.2 测量流性能 154 7.1.3 正确使用并行流 158 7.1.4 高效使用并行流 159 7.2 分支/合并框架 161 # 7.2.1 使用RecursiveTask 161 7.2.2 使用分支/合并框架的最佳做法 164 7.2.3 工作窃取 165 7.3 Spliterator 166 # 7.3.1 拆分过程 167 7.3.2 实现你自己的Spliterator 168 7.4 小结 173 # 第三部分 使用流和Lambda进行高效编程 # 第8章　Collection API的增强功能　176 # 8.1 集合工厂 176 # 8.1.1 List工厂 177 8.1.2 Set工厂 178 8.1.3 Map工厂 179 8.2 使用List和Set 180 # 8.2.1 removeIf方法 180 8.2.2 replaceAll方法 181 8.3 使用Map 181 # 8.3.1 forEach方法 182 8.3.2 排序 182 8.3.3 getOrDefault方法 183 8.3.4 计算模式 183 8.3.5 删除模式 184 8.3.6 替换模式 185 8.3.7 merge方法 185 8.4 改进的ConcurrentHashMap 187 # 8.4.1 归约和搜索 187 8.4.2 计数 188 8.4.3 Set视图 188 8.5 小结 188 # 第9章　重构、测试和调试　189 # 9.1 为改善可读性和灵活性重构代码 189 # 9.1.1 改善代码的可读性 190 9.1.2 从匿名类到Lambda表达式的转换 190 9.1.3 从Lambda表达式到方法引用的转换 191 9.1.4 从命令式的数据处理切换到Stream 193 9.1.5 增加代码的灵活性 193 9.2 使用Lambda重构面向对象的设计模式 195 # 9.2.1 策略模式 196 9.2.2 模板方法 197 9.2.3 观察者模式 198 9.2.4 责任链模式 201 9.2.5 工厂模式 202 9.3 测试Lambda表达式 204 # 9.3.1 测试可见Lambda函数的行为 204 9.3.2 测试使用Lambda的方法的行为 205 9.3.3 将复杂的Lambda表达式分为不同的方法 205 9.3.4 高阶函数的测试 206 9.4 调试 206 # 9.4.1 查看栈跟踪 206 9.4.2 使用日志调试 208 9.5 小结 209 # 第10章　基于Lambda的领域特定语言　210 # 10.1 领域特定语言 212 # 10.1.1 DSL的优点和弊端 212 10.1.2 JVM中已提供的DSL解决方案 214 10.2 现代Java API中的小型DSL 217 # 10.2.1 把Stream API当成DSL去操作集合 219 10.2.2 将Collectors作为DSL汇总数据 220 10.3 使用Java创建DSL的模式与技巧 221 # 10.3.1 方法链接 224 10.3.2 使用嵌套函数 226 10.3.3 使用Lambda表达式的函数序列 228 10.3.4 把它们都放到一起 230 10.3.5 在DSL中使用方法引用 232 10.4 Java 8 DSL的实际应用 234 # 10.4.1 jOOQ 235 10.4.2 Cucumber 236 10.4.3 Spring Integration 238 10.5 小结 239 # 第四部分 无所不在的Java # 第11章　用Optional取代null　242 # 11.1 如何为缺失的值建模 243 # 11.1.1 采用防御式检查减少NullPointerException 243 11.1.2 null带来的种种问题 245 11.1.3 其他语言中null的替代品 245 11.2 Optional类入门 246 # 11.3 应用Optional的几种模式 248 # 11.3.1 创建Optional对象 248 11.3.2 使用map从Optional对象中提取和转换值 248 11.3.3 使用flatMap链接Optional对象 249 11.3.4 操纵由Optional对象构成的Stream 253 11.3.5 默认行为及解引用Optional对象 254 11.3.6 两个Optional对象的组合 255 11.3.7 使用filter剔除特定的值 257 11.4 使用Optional的实战示例 258 # 11.4.1 用Optional 封装可能为null的值 259 11.4.2 异常与Optional的对比 259 11.4.3 基础类型的Optional对象，以及为什么应该避免使用它们 260 11.4.4 把所有内容整合起来 260 11.5 小结 262 # 第12章　新的日期和时间API　263 # 12.1 LocalDate、LocalTime、LocalDateTime、Instant、Duration以及Period 264 # 12.1.1 使用LocalDate和LocalTime 264 12.1.2 合并日期和时间 265 12.1.3 机器的日期和时间格式 266 12.1.4 定义Duration或Period 267 12.2 操纵、解析和格式化日期 268 # 12.2.1 使用TemporalAdjuster 270 12.2.2 打印输出及解析日期–时间对象 272 12.3 处理不同的时区和历法 274 # 12.3.1 使用时区 274 12.3.2 利用和UTC/格林尼治时间的固定偏差计算时区 275 12.3.3 使用别的日历系统 276 12.4 小结 277 # 第13章　默认方法　278 # 13.1 不断演进的API 280 # 13.1.1 初始版本的API 281 13.1.2 第二版API 281 13.2 概述默认方法 283 # 13.3 默认方法的使用模式 285 # 13.3.1 可选方法 285 13.3.2 行为的多继承 286 13.4 解决冲突的规则 289 # 13.4.1 解决问题的三条规则 289 13.4.2 选择提供了最具体实现的默认方法的接口 290 13.4.3 冲突及如何显式地消除歧义 291 13.4.4 菱形继承问题 293 13.5 小结 294 # 第14章　Java模块系统　295 # 14.1 模块化的驱动力：软件的推理 295 # 14.1.1 关注点分离 295 14.1.2 信息隐藏 296 14.1.3 Java软件 296 14.2 为什么要设计Java模块系统 297 # 14.2.1 模块化的局限性 297 14.2.2 单体型的JDK 298 14.2.3 与OSGi的比较 299 14.3 Java模块：全局视图 300 # 14.4 使用Java模块系统开发应用 301 # 14.4.1 从头开始搭建一个应用 302 14.4.2 细粒度和粗粒度的模块化 303 14.4.3 Java模块系统基础 303 14.5 使用多个模块 304 # 14.5.1 exports子句 304 14.5.2 requires子句 305 14.5.3 命名 306 14.6 编译及打包 306 # 14.7 自动模块 310 # 14.8 模块声明及子句 311 # 14.8.1 requires 311 14.8.2 exports 311 14.8.3 requires的传递 311 14.8.4 exports to 312 14.8.5 open和opens 312 14.8.6 uses和provides 313 14.9 通过一个更复杂的例子了解更多 313 # 14.10 小结 314 # 第五部分 提升Java的并发性 # 第15章　CompletableFuture及反应式编程背后的概念　316 # 15.1 为支持并发而不断演进的Java 318 # 15.1.1 线程以及更高层的抽象 319 15.1.2 执行器和线程池 320 15.1.3 其他的线程抽象：非嵌套方法调用 322 15.1.4 你希望线程为你带来什么 324 15.2 同步及异步API 324 # 15.2.1 Future风格的API 326 15.2.2 反应式风格的API 327 15.2.3 有害的睡眠及其他阻塞式操作 328 15.2.4 实战验证 329 15.2.5 如何使用异步API进行异常处理 330 15.3 “线框–管道”模型 331 # 15.4 为并发而生的CompletableFuture和结合器 332 # 15.5 “发布–订阅”以及反应式编程 335 # 15.5.1 示例：对两个流求和 337 15.5.2 背压 341 15.5.3 一种简单的真实背压 341 15.6 反应式系统和反应式编程 342 # 15.7 路线图 342 # 15.8 小结 343 # 第16章　CompletableFuture：组合式异步编程　344 # 16.1 Future接口 344 # 16.1.1 Future接口的局限性 346 16.1.2 使用CompletableFuture构建异步应用 346 16.2 实现异步API 347 # 16.2.1 将同步方法转换为异步方法 348 16.2.2 错误处理 350 16.3 让你的代码免受阻塞之苦 352 # 16.3.1 使用并行流对请求进行并行操作 353 16.3.2 使用CompletableFuture发起异步请求 353 16.3.3 寻找更好的方案 355 16.3.4 使用定制的执行器 356 16.4 对多个异步任务进行流水线操作 358 # 16.4.1 实现折扣服务 358 16.4.2 使用Discount服务 359 16.4.3 构造同步和异步操作 360 16.4.4 将两个CompletableFuture对象整合起来，无论它们是否存在依赖 363 16.4.5 对Future和Completable-Future 的回顾 364 16.4.6 高效地使用超时机制 365 16.5 响应CompletableFuture的completion事件 366 # 16.5.1 对最佳价格查询器应用的优化 367 16.5.2 付诸实践 368 16.6 路线图 369 # 16.7 小结 369 # 第17章　反应式编程　370 # 17.1 反应式宣言 371 # 17.1.1 应用层的反应式编程 371 17.1.2 反应式系统 373 17.2 反应式流以及Flow API 373 # 17.2.1 Flow类 374 17.2.2 创建你的第一个反应式应用 377 17.2.3 使用Processor转换数据 381 17.2.4 为什么Java并未提供Flow API的实现 383 17.3 使用反应式库RxJava 384 # 17.3.1 创建和使用Observable 385 17.3.2 转换及整合多个Observable 392 第六部分 函数式编程以及Java未来的演进 # 第18章　函数式的思考　396 # 18.1 实现和维护系统 396 # 18.1.1 共享的可变数据 397 18.1.2 声明式编程 398 18.1.3 为什么要采用函数式编程 399 18.2 什么是函数式编程 399 # 18.2.1 函数式Java编程 400 18.2.2 引用透明性 402 18.2.3 面向对象的编程和函数式编程的对比 402 18.2.4 函数式编程实战 403 18.3 递归和迭代 405 # 18.4 小结 408 # 第19章　函数式编程的技巧　409 # 19.1 无处不在的函数 409 # 19.1.1 高阶函数 410 19.1.2 柯里化 411 19.2 持久化数据结构 412 # 19.2.1 破坏式更新和函数式更新的比较 413 19.2.2 另一个使用Tree的例子 415 19.2.3 采用函数式的方法 416 19.3 Stream的延迟计算 418 # 19.3.1 自定义的Stream 418 19.3.2 创建你自己的延迟列表 420 19.4 模式匹配 425 # 19.4.1 访问者模式 425 19.4.2 用模式匹配力挽狂澜 426 19.5 杂项 429 # 19.5.1 缓存或记忆表 429 19.5.2 “返回同样的对象”意味着什么 430 19.5.3 结合器 431 19.6 小结 432 # 第20章　面向对象和函数式编程的混合：Java和Scala的比较　433 # 20.1 Scala简介 434 # 20.1.1 你好，啤酒 434 20.1.2 基础数据结构：List、Set、Map、Tuple、Stream以及Option 436 20.2 函数 440 # 20.2.1 Scala中的一等函数 441 20.2.2 匿名函数和闭包 442 20.2.3 柯里化 443 20.3 类和trait 444 # 20.3.1 更加简洁的Scala类 445 20.3.2 Scala的trait与Java 8的接口对比 446 20.4 小结 447 # 第21章　结论以及Java的未来　448 # 21.1 回顾Java 8的语言特性 448 # 21.1.1 行为参数化（Lambda以及方法引用） 449 21.1.2 流 449 21.1.3 CompletableFuture 450 21.1.4 Optional 450 21.1.5 Flow API 451 21.1.6 默认方法 451 21.2 Java 9的模块系统 451 # 21.3 Java 10的局部变量类型推断 453 # 21.4 Java的未来 454 # 21.4.1 声明处型变 454 21.4.2 模式匹配 454 21.4.3 更加丰富的泛型形式 455 21.4.4 对不变性的更深层支持 457 21.4.5 值类型 458 21.5 让Java发展得更快 461 # 21.6 写在最后的话 462 # 附录A 其他语言特性的更新 463 附录B 其他类库的更新 467 附录C 如何以并发方式在同一个流上执行多种操作 475 附录D Lambda表达式和JVM字节码 483 "},{"id":58,"href":"/zh/zh/post/books/java%E5%AE%9E%E6%88%98/","title":"Java实战","section":"Books","content":" Java实战 # Java实战（第2版） 第一部分 基础知识 # 第1章　Java 8、9、10以及11的变化　2 # 1.1 为什么要关心Java的变化 2 # 1.2 Java怎么还在变 4 # 1.2.1 Java在编程语言生态系统中的位置 5 1.2.2 流处理 6 1.2.3 用行为参数化把代码传递给方法 7 1.2.4 并行与共享的可变数据 8 1.2.5 Java需要演变 9 1.3 Java中的函数 9 # 1.3.1 方法和Lambda作为一等值 10 1.3.2 传递代码：一个例子 11 1.3.3 从传递方法到Lambda 13 1.4 流 14 # 1.5 默认方法及Java模块 17 # 1.6 来自函数式编程的其他好思想 19 # 1.7 小结 20 # 第2章　通过行为参数化传递代码　22 # 2.1 应对不断变化的需求 23 # 2.1.1 初试牛刀：筛选绿苹果 23 2.1.2 再展身手：把颜色作为参数 23 2.1.3 第三次尝试：对你能想到的每个属性做筛选 24 2.2 行为参数化 25 # 2.3 对付啰唆 30 # 2.3.1 匿名类 30 2.3.2 第五次尝试：使用匿名类 31 2.3.3 第六次尝试：使用Lambda表达式 32 2.3.4 第七次尝试：将List类型抽象化 33 2.4 真实的例子 33 # 2.4.1 用Comparator来排序 33 2.4.2 用Runnable执行代码块 34 2.4.3 通过Callable返回结果 35 2.4.4 GUI事件处理 35 2.5 小结 36 # 第3章　Lambda表达式　37 # 3.1 Lambda管中窥豹 37 # 3.2 在哪里以及如何使用Lambda 40 # 3.2.1 函数式接口 40 3.2.2 函数描述符 42 3.3 把Lambda付诸实践：环绕执行模式 44 # 3.3.1 第1 步：记得行为参数化 44 3.3.2 第2 步：使用函数式接口来传递行为 45 3.3.3 第3 步：执行一个行为 45 3.3.4 第4 步：传递Lambda 46 3.4 使用函数式接口 47 # 3.4.1 Predicate 47 3.4.2 Consumer 47 3.4.3 Function 48 3.5 类型检查、类型推断以及限制 52 # 3.5.1 类型检查 52 3.5.2 同样的Lambda，不同的函数式接口 53 3.5.3 类型推断 55 3.5.4 使用局部变量 56 3.6 方法引用 57 # 3.6.1 管中窥豹 57 3.6.2 构造函数引用 60 3.7 Lambda和方法引用实战 62 # 3.7.1 第1 步：传递代码 62 3.7.2 第2 步：使用匿名类 62 3.7.3 第3 步：使用Lambda表达式 62 3.7.4 第4 步：使用方法引用 63 3.8 复合Lambda表达式的有用方法 63 # 3.8.1 比较器复合 64 3.8.2 谓词复合 64 3.8.3 函数复合 65 3.9 数学中的类似思想 66 # 3.9.1 积分 66 3.9.2 与Java 8的Lambda联系起来 68 3.10 小结 68 # 第二部分 使用流进行函数式数据处理 # 第4章　引入流　72 # 4.1 流是什么 72 # 4.2 流简介 76 # 4.3 流与集合 78 # 4.3.1 只能遍历一次 79 4.3.2 外部迭代与内部迭代 80 4.4 流操作 82 # 4.4.1 中间操作 83 4.4.2 终端操作 84 4.4.3 使用流 84 4.5 路线图 85 # 4.6 小结 85 # 第5章　使用流　86 # 5.1 筛选 87 # 5.1.1 用谓词筛选 87 5.1.2 筛选各异的元素 87 5.2 流的切片 88 # 5.2.1 使用谓词对流进行切片 88 5.2.2 截短流 90 5.2.3 跳过元素 90 5.3 映射 91 # 5.3.1 对流中每一个元素应用函数 91 5.3.2 流的扁平化 92 5.4 查找和匹配 95 # 5.4.1 检查谓词是否至少匹配一个元素 95 5.4.2 检查谓词是否匹配所有元素 96 5.4.3 查找元素 96 5.4.4 查找第一个元素 97 5.5 归约 98 # 5.5.1 元素求和 98 5.5.2 最大值和最小值 100 5.6 付诸实践 103 # 5.6.1 领域：交易员和交易 103 5.6.2 解答 104 5.7 数值流 106 # 5.7.1 原始类型流特化 107 5.7.2 数值范围 108 5.7.3 数值流应用：勾股数 108 5.8 构建流 111 # 5.8.1 由值创建流 111 5.8.2 由可空对象创建流 111 5.8.3 由数组创建流 112 5.8.4 由文件生成流 112 5.8.5 由函数生成流：创建无限流 113 5.9 概述 116 # 5.10 小结 116 # 第6章　用流收集数据　118 # 6.1 收集器简介 119 # 6.1.1 收集器用作高级归约 119 6.1.2 预定义收集器 120 6.2 归约和汇总 121 # 6.2.1 查找流中的最大值和最小值 121 6.2.2 汇总 122 6.2.3 连接字符串 123 6.2.4 广义的归约汇总 124 6.3 分组 127 # 6.3.1 操作分组的元素 128 6.3.2 多级分组 130 6.3.3 按子组收集数据 131 6.4 分区 134 # 6.4.1 分区的优势 135 6.4.2 将数字按质数和非质数分区 136 6.5 收集器接口 138 # 6.5.1 理解Collector接口声明的方法 139 6.5.2 全部融合到一起 143 6.6 开发你自己的收集器以获得更好的性能 144 # 6.6.1 仅用质数做除数 145 6.6.2 比较收集器的性能 148 6.7 小结 150 # 第7章　并行数据处理与性能　151 # 7.1 并行流 152 # 7.1.1 将顺序流转换为并行流 52 7.1.2 测量流性能 154 7.1.3 正确使用并行流 158 7.1.4 高效使用并行流 159 7.2 分支/合并框架 161 # 7.2.1 使用RecursiveTask 161 7.2.2 使用分支/合并框架的最佳做法 164 7.2.3 工作窃取 165 7.3 Spliterator 166 # 7.3.1 拆分过程 167 7.3.2 实现你自己的Spliterator 168 7.4 小结 173 # 第三部分 使用流和Lambda进行高效编程 # 第8章　Collection API的增强功能　176 # 8.1 集合工厂 176 # 8.1.1 List工厂 177 8.1.2 Set工厂 178 8.1.3 Map工厂 179 8.2 使用List和Set 180 # 8.2.1 removeIf方法 180 8.2.2 replaceAll方法 181 8.3 使用Map 181 # 8.3.1 forEach方法 182 8.3.2 排序 182 8.3.3 getOrDefault方法 183 8.3.4 计算模式 183 8.3.5 删除模式 184 8.3.6 替换模式 185 8.3.7 merge方法 185 8.4 改进的ConcurrentHashMap 187 # 8.4.1 归约和搜索 187 8.4.2 计数 188 8.4.3 Set视图 188 8.5 小结 188 # 第9章　重构、测试和调试　189 # 9.1 为改善可读性和灵活性重构代码 189 # 9.1.1 改善代码的可读性 190 9.1.2 从匿名类到Lambda表达式的转换 190 9.1.3 从Lambda表达式到方法引用的转换 191 9.1.4 从命令式的数据处理切换到Stream 193 9.1.5 增加代码的灵活性 193 9.2 使用Lambda重构面向对象的设计模式 195 # 9.2.1 策略模式 196 9.2.2 模板方法 197 9.2.3 观察者模式 198 9.2.4 责任链模式 201 9.2.5 工厂模式 202 9.3 测试Lambda表达式 204 # 9.3.1 测试可见Lambda函数的行为 204 9.3.2 测试使用Lambda的方法的行为 205 9.3.3 将复杂的Lambda表达式分为不同的方法 205 9.3.4 高阶函数的测试 206 9.4 调试 206 # 9.4.1 查看栈跟踪 206 9.4.2 使用日志调试 208 9.5 小结 209 # 第10章　基于Lambda的领域特定语言　210 # 10.1 领域特定语言 212 # 10.1.1 DSL的优点和弊端 212 10.1.2 JVM中已提供的DSL解决方案 214 10.2 现代Java API中的小型DSL 217 # 10.2.1 把Stream API当成DSL去操作集合 219 10.2.2 将Collectors作为DSL汇总数据 220 10.3 使用Java创建DSL的模式与技巧 221 # 10.3.1 方法链接 224 10.3.2 使用嵌套函数 226 10.3.3 使用Lambda表达式的函数序列 228 10.3.4 把它们都放到一起 230 10.3.5 在DSL中使用方法引用 232 10.4 Java 8 DSL的实际应用 234 # 10.4.1 jOOQ 235 10.4.2 Cucumber 236 10.4.3 Spring Integration 238 10.5 小结 239 # 第四部分 无所不在的Java # 第11章　用Optional取代null　242 # 11.1 如何为缺失的值建模 243 # 11.1.1 采用防御式检查减少NullPointerException 243 11.1.2 null带来的种种问题 245 11.1.3 其他语言中null的替代品 245 11.2 Optional类入门 246 # 11.3 应用Optional的几种模式 248 # 11.3.1 创建Optional对象 248 11.3.2 使用map从Optional对象中提取和转换值 248 11.3.3 使用flatMap链接Optional对象 249 11.3.4 操纵由Optional对象构成的Stream 253 11.3.5 默认行为及解引用Optional对象 254 11.3.6 两个Optional对象的组合 255 11.3.7 使用filter剔除特定的值 257 11.4 使用Optional的实战示例 258 # 11.4.1 用Optional 封装可能为null的值 259 11.4.2 异常与Optional的对比 259 11.4.3 基础类型的Optional对象，以及为什么应该避免使用它们 260 11.4.4 把所有内容整合起来 260 11.5 小结 262 # 第12章　新的日期和时间API　263 # 12.1 LocalDate、LocalTime、LocalDateTime、Instant、Duration以及Period 264 # 12.1.1 使用LocalDate和LocalTime 264 12.1.2 合并日期和时间 265 12.1.3 机器的日期和时间格式 266 12.1.4 定义Duration或Period 267 12.2 操纵、解析和格式化日期 268 # 12.2.1 使用TemporalAdjuster 270 12.2.2 打印输出及解析日期–时间对象 272 12.3 处理不同的时区和历法 274 # 12.3.1 使用时区 274 12.3.2 利用和UTC/格林尼治时间的固定偏差计算时区 275 12.3.3 使用别的日历系统 276 12.4 小结 277 # 第13章　默认方法　278 # 13.1 不断演进的API 280 # 13.1.1 初始版本的API 281 13.1.2 第二版API 281 13.2 概述默认方法 283 # 13.3 默认方法的使用模式 285 # 13.3.1 可选方法 285 13.3.2 行为的多继承 286 13.4 解决冲突的规则 289 # 13.4.1 解决问题的三条规则 289 13.4.2 选择提供了最具体实现的默认方法的接口 290 13.4.3 冲突及如何显式地消除歧义 291 13.4.4 菱形继承问题 293 13.5 小结 294 # 第14章　Java模块系统　295 # 14.1 模块化的驱动力：软件的推理 295 # 14.1.1 关注点分离 295 14.1.2 信息隐藏 296 14.1.3 Java软件 296 14.2 为什么要设计Java模块系统 297 # 14.2.1 模块化的局限性 297 14.2.2 单体型的JDK 298 14.2.3 与OSGi的比较 299 14.3 Java模块：全局视图 300 # 14.4 使用Java模块系统开发应用 301 # 14.4.1 从头开始搭建一个应用 302 14.4.2 细粒度和粗粒度的模块化 303 14.4.3 Java模块系统基础 303 14.5 使用多个模块 304 # 14.5.1 exports子句 304 14.5.2 requires子句 305 14.5.3 命名 306 14.6 编译及打包 306 # 14.7 自动模块 310 # 14.8 模块声明及子句 311 # 14.8.1 requires 311 14.8.2 exports 311 14.8.3 requires的传递 311 14.8.4 exports to 312 14.8.5 open和opens 312 14.8.6 uses和provides 313 14.9 通过一个更复杂的例子了解更多 313 # 14.10 小结 314 # 第五部分 提升Java的并发性 # 第15章　CompletableFuture及反应式编程背后的概念　316 # 15.1 为支持并发而不断演进的Java 318 # 15.1.1 线程以及更高层的抽象 319 15.1.2 执行器和线程池 320 15.1.3 其他的线程抽象：非嵌套方法调用 322 15.1.4 你希望线程为你带来什么 324 15.2 同步及异步API 324 # 15.2.1 Future风格的API 326 15.2.2 反应式风格的API 327 15.2.3 有害的睡眠及其他阻塞式操作 328 15.2.4 实战验证 329 15.2.5 如何使用异步API进行异常处理 330 15.3 “线框–管道”模型 331 # 15.4 为并发而生的CompletableFuture和结合器 332 # 15.5 “发布–订阅”以及反应式编程 335 # 15.5.1 示例：对两个流求和 337 15.5.2 背压 341 15.5.3 一种简单的真实背压 341 15.6 反应式系统和反应式编程 342 # 15.7 路线图 342 # 15.8 小结 343 # 第16章　CompletableFuture：组合式异步编程　344 # 16.1 Future接口 344 # 16.1.1 Future接口的局限性 346 16.1.2 使用CompletableFuture构建异步应用 346 16.2 实现异步API 347 # 16.2.1 将同步方法转换为异步方法 348 16.2.2 错误处理 350 16.3 让你的代码免受阻塞之苦 352 # 16.3.1 使用并行流对请求进行并行操作 353 16.3.2 使用CompletableFuture发起异步请求 353 16.3.3 寻找更好的方案 355 16.3.4 使用定制的执行器 356 16.4 对多个异步任务进行流水线操作 358 # 16.4.1 实现折扣服务 358 16.4.2 使用Discount服务 359 16.4.3 构造同步和异步操作 360 16.4.4 将两个CompletableFuture对象整合起来，无论它们是否存在依赖 363 16.4.5 对Future和Completable-Future 的回顾 364 16.4.6 高效地使用超时机制 365 16.5 响应CompletableFuture的completion事件 366 # 16.5.1 对最佳价格查询器应用的优化 367 16.5.2 付诸实践 368 16.6 路线图 369 # 16.7 小结 369 # 第17章　反应式编程　370 # 17.1 反应式宣言 371 # 17.1.1 应用层的反应式编程 371 17.1.2 反应式系统 373 17.2 反应式流以及Flow API 373 # 17.2.1 Flow类 374 17.2.2 创建你的第一个反应式应用 377 17.2.3 使用Processor转换数据 381 17.2.4 为什么Java并未提供Flow API的实现 383 17.3 使用反应式库RxJava 384 # 17.3.1 创建和使用Observable 385 17.3.2 转换及整合多个Observable 392 第六部分 函数式编程以及Java未来的演进 # 第18章　函数式的思考　396 # 18.1 实现和维护系统 396 # 18.1.1 共享的可变数据 397 18.1.2 声明式编程 398 18.1.3 为什么要采用函数式编程 399 18.2 什么是函数式编程 399 # 18.2.1 函数式Java编程 400 18.2.2 引用透明性 402 18.2.3 面向对象的编程和函数式编程的对比 402 18.2.4 函数式编程实战 403 18.3 递归和迭代 405 # 18.4 小结 408 # 第19章　函数式编程的技巧　409 # 19.1 无处不在的函数 409 # 19.1.1 高阶函数 410 19.1.2 柯里化 411 19.2 持久化数据结构 412 # 19.2.1 破坏式更新和函数式更新的比较 413 19.2.2 另一个使用Tree的例子 415 19.2.3 采用函数式的方法 416 19.3 Stream的延迟计算 418 # 19.3.1 自定义的Stream 418 19.3.2 创建你自己的延迟列表 420 19.4 模式匹配 425 # 19.4.1 访问者模式 425 19.4.2 用模式匹配力挽狂澜 426 19.5 杂项 429 # 19.5.1 缓存或记忆表 429 19.5.2 “返回同样的对象”意味着什么 430 19.5.3 结合器 431 19.6 小结 432 # 第20章　面向对象和函数式编程的混合：Java和Scala的比较　433 # 20.1 Scala简介 434 # 20.1.1 你好，啤酒 434 20.1.2 基础数据结构：List、Set、Map、Tuple、Stream以及Option 436 20.2 函数 440 # 20.2.1 Scala中的一等函数 441 20.2.2 匿名函数和闭包 442 20.2.3 柯里化 443 20.3 类和trait 444 # 20.3.1 更加简洁的Scala类 445 20.3.2 Scala的trait与Java 8的接口对比 446 20.4 小结 447 # 第21章　结论以及Java的未来　448 # 21.1 回顾Java 8的语言特性 448 # 21.1.1 行为参数化（Lambda以及方法引用） 449 21.1.2 流 449 21.1.3 CompletableFuture 450 21.1.4 Optional 450 21.1.5 Flow API 451 21.1.6 默认方法 451 21.2 Java 9的模块系统 451 # 21.3 Java 10的局部变量类型推断 453 # 21.4 Java的未来 454 # 21.4.1 声明处型变 454 21.4.2 模式匹配 454 21.4.3 更加丰富的泛型形式 455 21.4.4 对不变性的更深层支持 457 21.4.5 值类型 458 21.5 让Java发展得更快 461 # 21.6 写在最后的话 462 # 附录A 其他语言特性的更新 463 附录B 其他类库的更新 467 附录C 如何以并发方式在同一个流上执行多种操作 475 附录D Lambda表达式和JVM字节码 483 "},{"id":59,"href":"/zh/post/computer-science/linux/","title":"linux","section":"Computer Science","content":" linux # resources # 鸟哥的Linux私房菜：基础学习篇 第四版 tail # tail -f xxxx "},{"id":60,"href":"/zh/zh/post/computer-science/linux/","title":"linux","section":"Computer Science","content":" linux # resources # 鸟哥的Linux私房菜：基础学习篇 第四版 tail # tail -f xxxx "},{"id":61,"href":"/zh/post/books/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/","title":"Redis设计与实现","section":"Books","content":" Redis使用对象来表示数据库中的键和值，每次当我们在Redis的数据库中新创建一个键值对时，我们至少会创建两个对象，一个对象用作键值对的键（键对象），另一个对象用作键值对的值（值对象） "},{"id":62,"href":"/zh/zh/post/books/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/","title":"Redis设计与实现","section":"Books","content":" Redis使用对象来表示数据库中的键和值，每次当我们在Redis的数据库中新创建一个键值对时，我们至少会创建两个对象，一个对象用作键值对的键（键对象），另一个对象用作键值对的值（值对象） "},{"id":63,"href":"/zh/post/books/%E5%AE%8F%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6-%E7%AC%AC%E4%B8%89%E7%89%88/","title":"宏观经济学 第三版","section":"Books","content":" 宏观经济学 第三版 # 第1章 经济学原理的实践 # 第2章 经济科学：运用数据和模型理解世界 # 第3章 优化：竭力做到最好 # 第4章 需求，供给与均衡 # 第5章 国家财富：定义和测算宏观经济总量 # 第6章 总收入 # 第7章 经济增长 # 第8章 为什么很多地区仍然不发达？ # 第9章 就业与失业 # 第10章 信贷市场 # 信贷：我们把包括企业家、购房者和学生在内的借款主体称为债务人，他们所借入的资金被称为信贷\n借款当然不是免费的，借款人需要支付利息。借款的初始金额被称为本金。利率是借款者在偿还本金之外，需要（在满一年时）为每1美元贷款支付的额外费用。也可以说，利率就是一笔1美元贷款的年度成本。\n如果你借了1年期利率为i的L美元，1年后你要偿还本金L美元加上i×L美元的利息。为了和实际利率区分开来，我们把利率i称为名义利率。\n实际利率=名义利率-通货膨胀率\n实际GDP=名义GDP-通货膨胀率 几乎所有的贷款都是以名义利率发放的 我现在理解了韩秀云说的贷款买房比全款买房更好，因为实际利率会随着通货膨胀越来越低，甚至可能低于越来的本金 通货膨胀率指的是整体经济中物价上涨的速度。\n其他条件不变时，通货膨胀率越高，企业销售的商品和服务价格就会越高，在给定的名义利率下偿还贷款就会越容易。 信贷需求曲线：信贷需求量与实际利率之间的关系\n政府所感知到的商业机会变化、家庭偏好或预期的变化、政府政策的变化，会使得信贷需求曲线左移或右移 实际利率：人们因存钱而得到的回报，因为今天存的1美元，在一年后的购买力是1+r美元，其中r是实际利率\n换句话说，实际利率是当前消费的机会成本，也就是你基于未来的购买力而放弃的东西。因此，较高的实际利率会增加当前消费的机会成本，鼓励更高水平的储蓄。 真实市场中，为了补偿出借人，具有不同违约风险的借款者需面对不同的实际利率。 信贷供给曲线：信贷供给量与实际利率之间的关系\n信贷供给曲线的移动则源于实际利率不变的情况下，追求优化的经济主体储蓄动机的变化（家庭储蓄动机的变化、企业储蓄动机的变化） 人们为什么要储蓄？\n为退休储蓄 为孩子存钱 为一些可预见的大额支出而存钱 投资个人事业而存钱 以备不时之需 信贷市场：借款者从储蓄者那里获取资金的市场，有时也被称为可贷资金市场\n信贷市场均衡：信贷供给曲线与信贷需求曲线的交点所对应的实际利率和信贷量 交点决定了市场中的信贷总量(Q*)和均衡实际利率(r*)。在均衡实际利率下，信贷需求量等于信贷供给量。实际利率高于均衡水平将导致超额的信贷供给，这通常会给实际利率带来下行压力。实际利率低于均衡水平将导致超额的信贷需求，给实际利率带来上行压力。 信贷市场的作用：通过使储蓄者把多余的钱出借给借款者，信贷市场改善了经济中的资源配置\n金融资本：金融资本存在多种不同的形式，包括信贷（也被称为债务）和股权。\n当一个储蓄者将其存款变成信贷时，他就把自己的储蓄借给了另一个人，换来的是连本带息偿还贷款的承诺。 当一个储蓄者把自己的存款变成股权时，他就利用其储蓄变成了一家公司的股东，这意味着他获得了公司的所有权和对公司未来利润的索取权。这些利润会以股息的形式支付给公司股东。 独角兽：越来越多科技初创公司的市值超过10亿美元。在向公众发行股票之前估值超过这一门槛的公司被称为独角兽。\n第11章 货币体系 # 第12章 短期波动 # 第13章 逆周期宏观经济政策 # 第14章 宏观经济学和国际贸易 # 第15章 开放经济的宏观经济学 # "},{"id":64,"href":"/zh/zh/post/books/%E5%AE%8F%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6-%E7%AC%AC%E4%B8%89%E7%89%88/","title":"宏观经济学 第三版","section":"Books","content":" 宏观经济学 第三版 # 第1章 经济学原理的实践 # 第2章 经济科学：运用数据和模型理解世界 # 第3章 优化：竭力做到最好 # 第4章 需求，供给与均衡 # 第5章 国家财富：定义和测算宏观经济总量 # 第6章 总收入 # 第7章 经济增长 # 第8章 为什么很多地区仍然不发达？ # 第9章 就业与失业 # 第10章 信贷市场 # 信贷：我们把包括企业家、购房者和学生在内的借款主体称为债务人，他们所借入的资金被称为信贷\n借款当然不是免费的，借款人需要支付利息。借款的初始金额被称为本金。利率是借款者在偿还本金之外，需要（在满一年时）为每1美元贷款支付的额外费用。也可以说，利率就是一笔1美元贷款的年度成本。\n如果你借了1年期利率为i的L美元，1年后你要偿还本金L美元加上i×L美元的利息。为了和实际利率区分开来，我们把利率i称为名义利率。\n实际利率=名义利率-通货膨胀率\n实际GDP=名义GDP-通货膨胀率 几乎所有的贷款都是以名义利率发放的 我现在理解了韩秀云说的贷款买房比全款买房更好，因为实际利率会随着通货膨胀越来越低，甚至可能低于越来的本金 通货膨胀率指的是整体经济中物价上涨的速度。\n其他条件不变时，通货膨胀率越高，企业销售的商品和服务价格就会越高，在给定的名义利率下偿还贷款就会越容易。 信贷需求曲线：信贷需求量与实际利率之间的关系\n政府所感知到的商业机会变化、家庭偏好或预期的变化、政府政策的变化，会使得信贷需求曲线左移或右移 实际利率：人们因存钱而得到的回报，因为今天存的1美元，在一年后的购买力是1+r美元，其中r是实际利率\n换句话说，实际利率是当前消费的机会成本，也就是你基于未来的购买力而放弃的东西。因此，较高的实际利率会增加当前消费的机会成本，鼓励更高水平的储蓄。 真实市场中，为了补偿出借人，具有不同违约风险的借款者需面对不同的实际利率。 信贷供给曲线：信贷供给量与实际利率之间的关系\n信贷供给曲线的移动则源于实际利率不变的情况下，追求优化的经济主体储蓄动机的变化（家庭储蓄动机的变化、企业储蓄动机的变化） 人们为什么要储蓄？\n为退休储蓄 为孩子存钱 为一些可预见的大额支出而存钱 投资个人事业而存钱 以备不时之需 信贷市场：借款者从储蓄者那里获取资金的市场，有时也被称为可贷资金市场\n信贷市场均衡：信贷供给曲线与信贷需求曲线的交点所对应的实际利率和信贷量 交点决定了市场中的信贷总量(Q*)和均衡实际利率(r*)。在均衡实际利率下，信贷需求量等于信贷供给量。实际利率高于均衡水平将导致超额的信贷供给，这通常会给实际利率带来下行压力。实际利率低于均衡水平将导致超额的信贷需求，给实际利率带来上行压力。 信贷市场的作用：通过使储蓄者把多余的钱出借给借款者，信贷市场改善了经济中的资源配置\n金融资本：金融资本存在多种不同的形式，包括信贷（也被称为债务）和股权。\n当一个储蓄者将其存款变成信贷时，他就把自己的储蓄借给了另一个人，换来的是连本带息偿还贷款的承诺。 当一个储蓄者把自己的存款变成股权时，他就利用其储蓄变成了一家公司的股东，这意味着他获得了公司的所有权和对公司未来利润的索取权。这些利润会以股息的形式支付给公司股东。 独角兽：越来越多科技初创公司的市值超过10亿美元。在向公众发行股票之前估值超过这一门槛的公司被称为独角兽。\n第11章 货币体系 # 第12章 短期波动 # 第13章 逆周期宏观经济政策 # 第14章 宏观经济学和国际贸易 # 第15章 开放经济的宏观经济学 # "},{"id":65,"href":"/zh/post/books/%E7%BE%8E%E5%9B%BD%E5%9B%B0%E5%B1%80/","title":"美国困局","section":"Books","content":" 美国困局 # 美国困局 导论 从美国内政视角研究美国变局 # 一、缘起 # 二、 理解特朗普和“新右翼”的一些误区 # 三、本书框架 # 第一章 “新右翼”是什么 # 一、政治而非经济：“新右翼”带来的欧美政治议题 # 二、公权与私权：“新右翼”的核心诉求 # 三、西方民粹主义的现实面向 # 第二章“奥巴马选民”vs“特朗普选民”：关键性选举与美国政党选民联盟重组 # 一、变局：“奥巴马选民”联盟浮现 # 二、共和党的两个应对思路 # 三、“特朗普选民”联盟：颠覆性的新议题 # 四、2020年大选：例外的大选与稳固的政党选民联盟 # 五、小结与前瞻 # 第三章 “人权优先”还是“主权优先”？：美国政治中的非法移民议题 # 一、特朗普与民主党的政策逻辑差异 # 二、地域与阶层：白人群体的分裂 # 三、“反常”的亚裔 # 四、拉美裔美国人未必欢迎非法移民老乡 # 五、小结 # 第四章 从“和稀泥”到“旗帜鲜明”：美国政治营销模式变迁 # 一、政治风格：个人特质与外在环境的共同产物 # 二、反非法移民：特朗普vs克鲁兹 # 三、“Love Trumps Hate”：特朗普vs希拉里 # 四、变革时代需要“旗帜鲜明”的政治风格 # 五、“想当总统首先要身体好”：零售政治在美国的复兴 # 第五章 “新右翼”执政方略（一）：特朗普“减税”计划 # 一、经济政策的政治分析 # 二、 为什么富人反对给富人“减税”？ # 三、“减税”计划背后的阶层冲突 # 四、 一个失败的“减税”先例：“茶党” 的堪萨斯实验 # 五、特朗普“减税”计划的配套举措 # 第六章“新右翼”执政方略（二）：其他举措 # 一、能源与气候政策 # 二、产业政策：以威斯康星州富士康项目为例 # 三、贸易政策 # 四、医保改革 # 第七章 从“驯服特朗普”到“被特朗普驯服”：共和党的党内斗争 # 一、从2016年大选至今共和党党内斗争的四个阶段 # 二、失败的“驯服特朗普” # 三、共和党的“特朗普化” # 第八章 民主党的路线之争 # 一、民主党的传统派系格局及其政治主张 # 二、桑德斯与激进派 # 三、激进派崛起与民主党现实政治格局的变化 # 第九章“自由派主张+进步派标签+工人家庭的孩子”：拜登政府的执政策略 # 一、2020年民主党初选与“自由派主张+进步派标签”竞选策略的诞生 # 二、拜登执政后对“自由派主张+进步派标签”策略的进一步运用 # 三、“宾夕法尼亚州工人家庭的孩子”：拜登政府的贸易政策与社会议题 # 后记 # "},{"id":66,"href":"/zh/zh/post/books/%E7%BE%8E%E5%9B%BD%E5%9B%B0%E5%B1%80/","title":"美国困局","section":"Books","content":" 美国困局 # 美国困局 导论 从美国内政视角研究美国变局 # 一、缘起 # 二、 理解特朗普和“新右翼”的一些误区 # 三、本书框架 # 第一章 “新右翼”是什么 # 一、政治而非经济：“新右翼”带来的欧美政治议题 # 二、公权与私权：“新右翼”的核心诉求 # 三、西方民粹主义的现实面向 # 第二章“奥巴马选民”vs“特朗普选民”：关键性选举与美国政党选民联盟重组 # 一、变局：“奥巴马选民”联盟浮现 # 二、共和党的两个应对思路 # 三、“特朗普选民”联盟：颠覆性的新议题 # 四、2020年大选：例外的大选与稳固的政党选民联盟 # 五、小结与前瞻 # 第三章 “人权优先”还是“主权优先”？：美国政治中的非法移民议题 # 一、特朗普与民主党的政策逻辑差异 # 二、地域与阶层：白人群体的分裂 # 三、“反常”的亚裔 # 四、拉美裔美国人未必欢迎非法移民老乡 # 五、小结 # 第四章 从“和稀泥”到“旗帜鲜明”：美国政治营销模式变迁 # 一、政治风格：个人特质与外在环境的共同产物 # 二、反非法移民：特朗普vs克鲁兹 # 三、“Love Trumps Hate”：特朗普vs希拉里 # 四、变革时代需要“旗帜鲜明”的政治风格 # 五、“想当总统首先要身体好”：零售政治在美国的复兴 # 第五章 “新右翼”执政方略（一）：特朗普“减税”计划 # 一、经济政策的政治分析 # 二、 为什么富人反对给富人“减税”？ # 三、“减税”计划背后的阶层冲突 # 四、 一个失败的“减税”先例：“茶党” 的堪萨斯实验 # 五、特朗普“减税”计划的配套举措 # 第六章“新右翼”执政方略（二）：其他举措 # 一、能源与气候政策 # 二、产业政策：以威斯康星州富士康项目为例 # 三、贸易政策 # 四、医保改革 # 第七章 从“驯服特朗普”到“被特朗普驯服”：共和党的党内斗争 # 一、从2016年大选至今共和党党内斗争的四个阶段 # 二、失败的“驯服特朗普” # 三、共和党的“特朗普化” # 第八章 民主党的路线之争 # 一、民主党的传统派系格局及其政治主张 # 二、桑德斯与激进派 # 三、激进派崛起与民主党现实政治格局的变化 # 第九章“自由派主张+进步派标签+工人家庭的孩子”：拜登政府的执政策略 # 一、2020年民主党初选与“自由派主张+进步派标签”竞选策略的诞生 # 二、拜登执政后对“自由派主张+进步派标签”策略的进一步运用 # 三、“宾夕法尼亚州工人家庭的孩子”：拜登政府的贸易政策与社会议题 # 后记 # "},{"id":67,"href":"/zh/post/books/%E8%8B%B1%E4%BC%9F%E8%BE%BE-%E9%BB%84%E4%BB%81%E5%8B%8B%E4%B9%8B%E8%8A%AF/","title":"英伟达-黄仁勋之芯","section":"Books","content":" 黄仁勋-英伟达之芯 # 第1章 求学生涯 # 第2章 职涯早期 # 第3章 从餐厅起步的Nvidia # 第4章 英伟达遭遇绝境 # 第5章 咸鱼翻身 # 第6章 新机器时代曙光初现 # 第7章 死亡竞赛 # 第8章 游戏玩家拯救英伟达 # 第9章 光速之道 # 第10章 同频共振 # 第11章 范式转变的时刻 # 第12章 千载难逢的机会 # 第13章 由机器引领的时代 # 克里泽夫斯基：辛顿在多伦多大学时的学生 因为无法解释神经网络的计算过程，学术界不认可这种方法 辛顿给苏茨克弗和克里泽夫斯基布置了一项艰巨的任务：利用英伟达的GPU训练计算机学会图像识别 卡坦扎罗 2011年加入英伟达 cuDNN cuda deep neural network 矩阵乘法 优秀的神经网络软件应该注重速度而不是精度 马克思与黄仁勋的分歧 马斯克认为，先进的人工智能可能带来灭绝级威胁。这一观点得到了包括辛顿和苏茨克弗在内的大批技术专家的认同，他们还是最初那篇关于AlexNet的论文的合著者。然而黄仁勋完全不这么认为。他竟觉得人工智能毫无风险，真是令我吃惊。 第14章 AI行业的佼佼者 # 2016年，英伟达的股价飙升了224%，这让黄仁勋重获荣光，再度跻身亿万富翁行列。不过，在当年的标准普尔500指数中，表现最抢眼的股票并非英伟达，而是其长期竞争对手AMD，其股价涨幅高达309%。黄仁勋并不甘心位居次席。 Omniverse 第15章 AI工厂 # 乌斯科雷特把这套学习机制命名为“自注意力” 第16章 全球最具价值的半导体企业 # 在2018年的GTC大会上，黄仁勋指出，在短短5年内，英伟达的GPU处理速度提升了25倍，这一成绩远超摩尔定律的预测。接着，他展示了一张图，这张图显示在2012年的显卡上需要一周的时间才能训练出AlexNet，而在他推出的新款计算机DGX-2上则仅需18分钟就能完成训练。 2020年7月，英伟达的市值终于超越了英特尔。没过多久，英伟达的市值又超越了AMD。 第17章 这个时代最重要的科技公司 # 第18章 人类需要更多智慧 # 第19章 更多电力更大算力 # 第20章 地球上最重要的股票 # 第21章 向理性本身发起挑战 # 第22章 深不见底的恐惧 # 第23章 思考机器 # "},{"id":68,"href":"/zh/zh/post/books/%E8%8B%B1%E4%BC%9F%E8%BE%BE-%E9%BB%84%E4%BB%81%E5%8B%8B%E4%B9%8B%E8%8A%AF/","title":"英伟达-黄仁勋之芯","section":"Books","content":" 黄仁勋-英伟达之芯 # 第1章 求学生涯 # 第2章 职涯早期 # 第3章 从餐厅起步的Nvidia # 第4章 英伟达遭遇绝境 # 第5章 咸鱼翻身 # 第6章 新机器时代曙光初现 # 第7章 死亡竞赛 # 第8章 游戏玩家拯救英伟达 # 第9章 光速之道 # 第10章 同频共振 # 第11章 范式转变的时刻 # 第12章 千载难逢的机会 # 第13章 由机器引领的时代 # 克里泽夫斯基：辛顿在多伦多大学时的学生 因为无法解释神经网络的计算过程，学术界不认可这种方法 辛顿给苏茨克弗和克里泽夫斯基布置了一项艰巨的任务：利用英伟达的GPU训练计算机学会图像识别 卡坦扎罗 2011年加入英伟达 cuDNN cuda deep neural network 矩阵乘法 优秀的神经网络软件应该注重速度而不是精度 马克思与黄仁勋的分歧 马斯克认为，先进的人工智能可能带来灭绝级威胁。这一观点得到了包括辛顿和苏茨克弗在内的大批技术专家的认同，他们还是最初那篇关于AlexNet的论文的合著者。然而黄仁勋完全不这么认为。他竟觉得人工智能毫无风险，真是令我吃惊。 第14章 AI行业的佼佼者 # 2016年，英伟达的股价飙升了224%，这让黄仁勋重获荣光，再度跻身亿万富翁行列。不过，在当年的标准普尔500指数中，表现最抢眼的股票并非英伟达，而是其长期竞争对手AMD，其股价涨幅高达309%。黄仁勋并不甘心位居次席。 Omniverse 第15章 AI工厂 # 乌斯科雷特把这套学习机制命名为“自注意力” 第16章 全球最具价值的半导体企业 # 在2018年的GTC大会上，黄仁勋指出，在短短5年内，英伟达的GPU处理速度提升了25倍，这一成绩远超摩尔定律的预测。接着，他展示了一张图，这张图显示在2012年的显卡上需要一周的时间才能训练出AlexNet，而在他推出的新款计算机DGX-2上则仅需18分钟就能完成训练。 2020年7月，英伟达的市值终于超越了英特尔。没过多久，英伟达的市值又超越了AMD。 第17章 这个时代最重要的科技公司 # 第18章 人类需要更多智慧 # 第19章 更多电力更大算力 # 第20章 地球上最重要的股票 # 第21章 向理性本身发起挑战 # 第22章 深不见底的恐惧 # 第23章 思考机器 # "},{"id":69,"href":"/zh/post/books/%E7%94%A8%E5%9C%B0%E5%9B%BE%E7%9C%8B%E6%87%82%E4%B8%96%E7%95%8C%E6%A0%BC%E5%B1%80/","title":"用地图看懂世界格局","section":"Books","content":" 用地图看懂世界格局 # 第一章：欧洲篇——从进退两难、英国脱欧说起 # 一、地缘造就宿命 # 二、摇摆中的外交 # 三、漫谈福利制度 # 四、英国脱欧 # 第二章：美国篇——从经略天下、美国大选说起 # 一、从地缘美国的“基本盘” # 二、创新之本 # 三、要法治还是要民主？ # 四、经略天下——美国的地缘战略变迁 # 五、美国的拐点与特朗普 # 附章：中产阶级与国家的战争潜力 # 第三章 俄罗斯篇——从俄土争端、叙利亚战争说起 # 一、地缘环境与“战斗种族” # 二、权力的游戏——漫谈俄土之间的渊源 # 三、叙利亚的博弈——地缘视角下的俄土关系 # 四、俄军介入叙利亚的看点 # 五、俄印军购——“男神”的另一面 # 第四章：中国周边——从萨德导弹、南海争端说起 # 一、朝鲜半岛与朝核问题 # 二、南海仲裁案 # 三、网络安全并非是让网络变得“人畜无害” # 四、以“大经济”的视角审视抗战 # "},{"id":70,"href":"/zh/zh/post/books/%E7%94%A8%E5%9C%B0%E5%9B%BE%E7%9C%8B%E6%87%82%E4%B8%96%E7%95%8C%E6%A0%BC%E5%B1%80/","title":"用地图看懂世界格局","section":"Books","content":" 用地图看懂世界格局 # 第一章：欧洲篇——从进退两难、英国脱欧说起 # 一、地缘造就宿命 # 二、摇摆中的外交 # 三、漫谈福利制度 # 四、英国脱欧 # 第二章：美国篇——从经略天下、美国大选说起 # 一、从地缘美国的“基本盘” # 二、创新之本 # 三、要法治还是要民主？ # 四、经略天下——美国的地缘战略变迁 # 五、美国的拐点与特朗普 # 附章：中产阶级与国家的战争潜力 # 第三章 俄罗斯篇——从俄土争端、叙利亚战争说起 # 一、地缘环境与“战斗种族” # 二、权力的游戏——漫谈俄土之间的渊源 # 三、叙利亚的博弈——地缘视角下的俄土关系 # 四、俄军介入叙利亚的看点 # 五、俄印军购——“男神”的另一面 # 第四章：中国周边——从萨德导弹、南海争端说起 # 一、朝鲜半岛与朝核问题 # 二、南海仲裁案 # 三、网络安全并非是让网络变得“人畜无害” # 四、以“大经济”的视角审视抗战 # "}]