<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Penruins</title>
    <link>/zh/post/computer-science/java/</link>
    <description>Recent content on Penruins</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <atom:link href="/zh/post/computer-science/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>java</title>
      <link>/zh/post/computer-science/java/java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/zh/post/computer-science/java/java/</guid>
      <description>&lt;h1 id=&#34;string&#34;&gt;&#xA;  String&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#string&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;stringbuffer-是怎么保证线程安全的&#34;&gt;&#xA;  StringBuffer 是怎么保证线程安全的？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#stringbuffer-%e6%98%af%e6%80%8e%e4%b9%88%e4%bf%9d%e8%af%81%e7%ba%bf%e7%a8%8b%e5%ae%89%e5%85%a8%e7%9a%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;StringBuffer&lt;/code&gt; 是通过 &lt;strong&gt;同步机制&lt;/strong&gt; 来保证线程安全的。具体来说，它的所有关键方法（如 &lt;code&gt;append()&lt;/code&gt;、&lt;code&gt;insert()&lt;/code&gt;、&lt;code&gt;delete()&lt;/code&gt;、&lt;code&gt;reverse()&lt;/code&gt; 等）都使用了 &lt;code&gt;synchronized&lt;/code&gt; 关键字进行修饰，确保同一时间只有一个线程可以执行这些方法&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;2&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;7&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;h3 id=&#34;1-同步方法&#34;&gt;&#xA;  1. &lt;strong&gt;同步方法&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e5%90%8c%e6%ad%a5%e6%96%b9%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;StringBuffer&lt;/code&gt; 的方法在设计时都加了 &lt;code&gt;synchronized&lt;/code&gt; 关键字，例如：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;synchronized&lt;/span&gt; StringBuffer &lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;(String str) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 方法实现&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这种机制确保了在多线程环境下，只有一个线程可以访问和修改 &lt;code&gt;StringBuffer&lt;/code&gt; 的内容，避免了竞态条件（Race Condition）和数据不一致的问题&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;2&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;h3 id=&#34;2-锁机制&#34;&gt;&#xA;  2. &lt;strong&gt;锁机制&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e9%94%81%e6%9c%ba%e5%88%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;StringBuffer&lt;/code&gt; 内部使用了一个锁对象（即 &lt;code&gt;this&lt;/code&gt; 锁），当一个线程调用 &lt;code&gt;StringBuffer&lt;/code&gt; 的同步方法时，会获取这个锁，其他线程必须等待锁释放后才能继续执行。这种锁机制保证了线程间的同步&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;7&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;h3 id=&#34;3-性能影响&#34;&gt;&#xA;  3. &lt;strong&gt;性能影响&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-%e6%80%a7%e8%83%bd%e5%bd%b1%e5%93%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;虽然 &lt;code&gt;StringBuffer&lt;/code&gt; 的同步机制确保了线程安全，但也带来了性能开销。因为在多线程环境下，每次只能有一个线程操作 &lt;code&gt;StringBuffer&lt;/code&gt;，其他线程会被阻塞。因此，在单线程环境下，推荐使用性能更高的 &lt;code&gt;StringBuilder&lt;/code&gt;，它没有同步机制&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;5&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;8&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;h3 id=&#34;4-适用场景&#34;&gt;&#xA;  4. &lt;strong&gt;适用场景&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4-%e9%80%82%e7%94%a8%e5%9c%ba%e6%99%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;多线程环境&lt;/strong&gt;：如果需要在多线程环境下对字符串进行操作，&lt;code&gt;StringBuffer&lt;/code&gt; 是合适的选择，因为它确保了线程安全&lt;a href=&#34;@ref&#34;&gt;2&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;9&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;单线程环境&lt;/strong&gt;：在单线程环境下，建议使用 &lt;code&gt;StringBuilder&lt;/code&gt;，因为它没有同步开销，性能更高&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;8&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;总结&#34;&gt;&#xA;  总结&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%80%bb%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;StringBuffer&lt;/code&gt; 通过 &lt;code&gt;synchronized&lt;/code&gt; 关键字实现的同步机制，确保了多线程环境下的线程安全性。虽然这种机制带来了性能开销，但在需要线程安全的场景下，它是一个可靠的选择&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;2&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;7&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;stringbuffer-和-stringbuilder-字符串在底层是以什么数据结构保存的&#34;&gt;&#xA;  StringBuffer 和 StringBuilder 字符串在底层是以什么数据结构保存的&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#stringbuffer-%e5%92%8c-stringbuilder-%e5%ad%97%e7%ac%a6%e4%b8%b2%e5%9c%a8%e5%ba%95%e5%b1%82%e6%98%af%e4%bb%a5%e4%bb%80%e4%b9%88%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e4%bf%9d%e5%ad%98%e7%9a%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;StringBuffer&lt;/code&gt; 和 &lt;code&gt;StringBuilder&lt;/code&gt; 在底层都是使用 &lt;strong&gt;字符数组（&lt;code&gt;char[]&lt;/code&gt;）&lt;/strong&gt; 来保存字符串数据的。具体来说，它们继承了 &lt;code&gt;AbstractStringBuilder&lt;/code&gt; 类，而 &lt;code&gt;AbstractStringBuilder&lt;/code&gt; 类中定义了一个 &lt;code&gt;char[] value&lt;/code&gt; 数组，用于存储字符序列&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;3&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;4&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mybatis</title>
      <link>/zh/post/computer-science/java/mybatis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/zh/post/computer-science/java/mybatis/</guid>
      <description>&lt;h2 id=&#34;mybatis是怎么进行事务管理的-2025-02-08&#34;&gt;&#xA;  mybatis是怎么进行事务管理的 2025-02-08&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mybatis%e6%98%af%e6%80%8e%e4%b9%88%e8%bf%9b%e8%a1%8c%e4%ba%8b%e5%8a%a1%e7%ae%a1%e7%90%86%e7%9a%84-2025-02-08&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;MyBatis 通过集成外部事务管理器（如 Spring 或 Java EE 容器）或使用内置的 JDBC 事务管理机制来管理事务。以下是 MyBatis 事务管理的主要方式：&lt;/p&gt;&#xA;&lt;h3 id=&#34;1-使用-jdbc-事务管理&#34;&gt;&#xA;  1. 使用 JDBC 事务管理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e4%bd%bf%e7%94%a8-jdbc-%e4%ba%8b%e5%8a%a1%e7%ae%a1%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;MyBatis 默认使用 JDBC 的事务管理，通过 &lt;code&gt;java.sql.Connection&lt;/code&gt; 实现。具体步骤如下：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;开启事务&lt;/strong&gt;：调用 &lt;code&gt;Connection.setAutoCommit(false)&lt;/code&gt; 关闭自动提交。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;提交事务&lt;/strong&gt;：调用 &lt;code&gt;Connection.commit()&lt;/code&gt; 提交事务。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;回滚事务&lt;/strong&gt;：调用 &lt;code&gt;Connection.rollback()&lt;/code&gt; 回滚事务。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;示例代码：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SqlSession sqlSession &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sqlSessionFactory.&lt;span style=&#34;color:#a6e22e&#34;&gt;openSession&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 执行数据库操作&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sqlSession.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;insertUser&amp;#34;&lt;/span&gt;,user);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sqlSession.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;updateUser&amp;#34;&lt;/span&gt;,user);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 提交事务&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sqlSession.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;commit&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt;(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Exception e){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 回滚事务&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sqlSession.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rollback&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;span style=&#34;color:#66d9ef&#34;&gt;finally&lt;/span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 关闭 SqlSession&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sqlSession.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-集成-spring-事务管理&#34;&gt;&#xA;  2. 集成 Spring 事务管理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e9%9b%86%e6%88%90-spring-%e4%ba%8b%e5%8a%a1%e7%ae%a1%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;MyBatis 通常与 Spring 集成，利用 Spring 的事务管理功能。Spring 提供了声明式和编程式事务管理。&lt;/p&gt;</description>
    </item>
    <item>
      <title>jvm</title>
      <link>/zh/post/computer-science/java/jvm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/zh/post/computer-science/java/jvm/</guid>
      <description>&lt;h1 id=&#34;jvm&#34;&gt;&#xA;  jvm&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#jvm&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;</description>
    </item>
    <item>
      <title>spring boot</title>
      <link>/zh/post/computer-science/java/springboot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/zh/post/computer-science/java/springboot/</guid>
      <description>&lt;h1 id=&#34;spring-boot&#34;&gt;&#xA;  spring boot&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring-boot&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;spring-boot-monitor&#34;&gt;&#xA;  Spring-boot-monitor&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring-boot-monitor&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;单机监控SpringBoot应用指标&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.pomit.cn/SpringBootMonitor/#/&#34;&gt;官网&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
