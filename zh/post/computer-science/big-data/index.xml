<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Penruins</title>
    <link>/zh/post/computer-science/big-data/</link>
    <description>Recent content on Penruins</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <atom:link href="/zh/post/computer-science/big-data/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>hbase</title>
      <link>/zh/post/computer-science/big-data/hbase/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/zh/post/computer-science/big-data/hbase/</guid>
      <description>&lt;h1 id=&#34;hbase&#34;&gt;&#xA;  hbase&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#hbase&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;HBase 是一个面向列式存储的分布式数据库，其设计思想来源于 Google 的 BigTable 论文&lt;/li&gt;&#xA;&lt;li&gt;HBase 底层存储基于 HDFS 实现，集群的管理基于 ZooKeeper 实现&lt;/li&gt;&#xA;&lt;li&gt;HBase 良好的分布式架构设计为海量数据的快速存储、随机访问提供了可能，基于数据副本机制和分区机制可以轻松实现在线扩容、缩容和数据容灾，是大数据领域中 Key-Value 数据结构存储最常用的数据库方案&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;hbase-vs-elasticsearch&#34;&gt;&#xA;  hbase vs elasticsearch&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#hbase-vs-elasticsearch&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;HBase是基于Hadoop生态的分布式列式数据库，源自Google BigTable设计，擅长海量结构化/半结构化数据的存储和高吞吐写入&lt;/li&gt;&#xA;&lt;li&gt;Elasticsearch是基于Lucene的分布式搜索引擎，专注于全文检索、复杂查询和实时分析，采用文档型数据模型&lt;/li&gt;&#xA;&lt;li&gt;数据模型与灵活性&#xA;&lt;ul&gt;&#xA;&lt;li&gt;HBase采用列式存储模型，数据按&amp;quot;行键(RowKey)+列族(Column Family)+列限定符(Qualifier)&amp;ldquo;组织，适合结构化或半结构化数据。虽然schema-free设计允许灵活添加列，但列族需要预先定义&lt;/li&gt;&#xA;&lt;li&gt;Elasticsearch采用文档型模型，数据以JSON格式存储，天然支持非结构化数据。字段可以动态添加，无需预定义schema，更适合多变的数据结构&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;查询能力对比&#xA;&lt;ul&gt;&#xA;&lt;li&gt;HBase查询能力相对有限&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主要支持基于RowKey的精确查询和范围扫描(Scan)&lt;/li&gt;&#xA;&lt;li&gt;复杂查询需要借助二级索引或Phoenix等SQL层&lt;/li&gt;&#xA;&lt;li&gt;无内置全文检索能力，需结合Solr等搜索引擎&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Elasticsearch提供丰富的查询功能&#xA;&lt;ul&gt;&#xA;&lt;li&gt;支持全文搜索、模糊查询、分词查询、聚合分析等高级特性&lt;/li&gt;&#xA;&lt;li&gt;提供强大的DSL查询语言和SQL接口&lt;/li&gt;&#xA;&lt;li&gt;内置倒排索引，亿级数据下仍能保持秒级响应&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;典型场景：HBase适合&amp;quot;已知RowKey查明细&amp;rdquo;，ES适合&amp;quot;根据内容特征找文档&amp;quot;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;性能与扩展性&#xA;&lt;ul&gt;&#xA;&lt;li&gt;写入性能&#xA;&lt;ul&gt;&#xA;&lt;li&gt;两者都基于LSM树结构，理论写入性能相当&lt;/li&gt;&#xA;&lt;li&gt;实际场景中HBase写入更高效，因为ES需要构建倒排索引等额外开销&lt;/li&gt;&#xA;&lt;li&gt;HBase单集群可支持每天TB级数据写入&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;查询性能&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ES在复杂查询和全文检索方面性能显著优于HBase&lt;/li&gt;&#xA;&lt;li&gt;HBase在简单键值查询和范围扫描上延迟更低&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;扩展能力&#xA;&lt;ul&gt;&#xA;&lt;li&gt;HBase天生为海量数据设计，通过Region分裂实现水平扩展&lt;/li&gt;&#xA;&lt;li&gt;ES通过分片(Shard)机制扩展，但数据量极大时可能需要业务层干预&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;存储成本与资源消耗&#xA;&lt;ul&gt;&#xA;&lt;li&gt;存储效率&#xA;&lt;ul&gt;&#xA;&lt;li&gt;HBase采用列式存储+压缩，存储效率更高，适合长期保存海量数据&lt;/li&gt;&#xA;&lt;li&gt;ES因维护索引和副本，存储开销通常比HBase高30%-50%&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;资源消耗&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ES的CPU和内存消耗更高（分词、索引构建等）&lt;/li&gt;&#xA;&lt;li&gt;HBase更注重I/O优化，适合资源受限环境&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;维护复杂度&#xA;&lt;ul&gt;&#xA;&lt;li&gt;HBase依赖完整的Hadoop生态(HDFS/ZooKeeper等)，组件多，运维复杂度高&lt;/li&gt;&#xA;&lt;li&gt;Elasticsearch自成体系，部署和维护相对简单，但集群调优需要专业知识&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;实时性与一致性&#xA;&lt;ul&gt;&#xA;&lt;li&gt;HBase采用强一致性模型(基于2PC协议)，适合对一致性要求高的场景&lt;/li&gt;&#xA;&lt;li&gt;Elasticsearch采用最终一致性，查询实时性更好但可能短暂不一致&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;典型应用场景推荐&#xA;&lt;ul&gt;&#xA;&lt;li&gt;适合选择HBase的场景&#xA;&lt;ul&gt;&#xA;&lt;li&gt;海量时序数据存储：如设备监控数据、日志流水(每日5G以上)&lt;/li&gt;&#xA;&lt;li&gt;高吞吐写入：需要持续写入TB级结构化数据的场景&lt;/li&gt;&#xA;&lt;li&gt;简单查询为主：已知主键的快速查询或固定模式的范围扫描&lt;/li&gt;&#xA;&lt;li&gt;长期数据归档：需要低成本长期保存的历史数据&lt;/li&gt;&#xA;&lt;li&gt;案例：某埋点系统每天100G数据通过Kafka写入HBase，稳定运行&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;适合选择Elasticsearch的场景&#xA;&lt;ul&gt;&#xA;&lt;li&gt;全文检索需求：如商品搜索、内容检索、日志分析&lt;/li&gt;&#xA;&lt;li&gt;复杂查询分析：需要多条件组合、聚合统计的业务&lt;/li&gt;&#xA;&lt;li&gt;实时数据分析：如应用监控、安全分析等需要秒级响应的场景&lt;/li&gt;&#xA;&lt;li&gt;灵活的数据结构：字段频繁变化或无法预定义schema的情况&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;混合架构方案&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对于同时需要海量存储和复杂查询的场景，可考虑ES+HBase组合架构&#xA;&lt;ul&gt;&#xA;&lt;li&gt;HBase作为主存储，保证数据持久性和高吞吐写入&lt;/li&gt;&#xA;&lt;li&gt;ES作为索引层，提供丰富的查询能力&lt;/li&gt;&#xA;&lt;li&gt;通过数据同步工具保持两者数据一致&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;百亿级数据架构案例：使用ES处理复杂查询，HBase保证可靠存储，两者协同工作&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;选型决策关键因素&#xA;&lt;ul&gt;&#xA;&lt;li&gt;数据规模：日增5GB以下ES更简单，TB级选HBase&lt;/li&gt;&#xA;&lt;li&gt;查询复杂度：简单查询HBase足够，复杂搜索选ES&lt;/li&gt;&#xA;&lt;li&gt;数据结构：固定结构用HBase，多变结构用ES&lt;/li&gt;&#xA;&lt;li&gt;资源预算：资源有限优先HBase，可接受较高成本选ES&lt;/li&gt;&#xA;&lt;li&gt;团队技能：熟悉Hadoop选HBase，无大数据经验ES更易上手&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;总结建议&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Elasticsearch是搜索和复杂查询的首选，特别适合日志分析、内容检索等需要灵活查询的场景&lt;/li&gt;&#xA;&lt;li&gt;HBase是海量数据存储的可靠选择，特别适合时序数据、用户行为记录等高吞吐写入场景&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;hbase-的特点&#34;&gt;&#xA;  hbase 的特点&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#hbase-%e7%9a%84%e7%89%b9%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;易扩展&lt;/li&gt;&#xA;&lt;li&gt;海量存储&lt;/li&gt;&#xA;&lt;li&gt;列式存储&lt;/li&gt;&#xA;&lt;li&gt;高可靠性&lt;/li&gt;&#xA;&lt;li&gt;稀疏性&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;模块组成&#34;&gt;&#xA;  模块组成&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a8%a1%e5%9d%97%e7%bb%84%e6%88%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;HBase 可以将数据存储在本地文件系统，也可以存储在 HDFS 文件系统。在生产环境中，HBase 一般运行在 HDFS 上，以 HDFS 作为基础的存储设施。HBase 通过 HBase Client 提供的 Java API 来访问 HBase 数据库，以完成数据的写入和读取。HBase 集群主由HMaster、Region Server 和 ZooKeeper 组成&#xA;&lt;ul&gt;&#xA;&lt;li&gt;HMaster&#xA;&lt;ul&gt;&#xA;&lt;li&gt;负责管理 RegionServer，实现其负载均衡&lt;/li&gt;&#xA;&lt;li&gt;管理和分配 Region，比如在 Region split时分配新的 Region，在 RegionServer 退出时迁移其内的 Region 到其他 RegionServer上&lt;/li&gt;&#xA;&lt;li&gt;管理namespace和table的元数据（实际存储在HDFS上）&lt;/li&gt;&#xA;&lt;li&gt;权限控制（ACL）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;RegionServer&#xA;&lt;ul&gt;&#xA;&lt;li&gt;存放和管理本地 Region&lt;/li&gt;&#xA;&lt;li&gt;读写HDFS，管理Table中的数据&lt;/li&gt;&#xA;&lt;li&gt;Client 从 HMaster 中获取元数据，找到 RowKey 所在的 RegionServer 进行读写数据&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;ZooKeeper&#xA;&lt;ul&gt;&#xA;&lt;li&gt;存放整个 HBase集群的元数据以及集群的状态信息&lt;/li&gt;&#xA;&lt;li&gt;实现HMaster主从节点的failover&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;reference&#34;&gt;&#xA;  Reference&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/datadance/p/16327298.html&#34;&gt;什么是HBase？终于有人讲明白了&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
