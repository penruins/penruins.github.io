<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Penruins</title>
    <link>/post/computer-science/java/spring/</link>
    <description>Recent content on Penruins</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>[Main Page](/)</copyright>
    <atom:link href="/post/computer-science/java/spring/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>spring</title>
      <link>/post/computer-science/java/spring/spring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/java/spring/spring/</guid>
      <description>&lt;h1 id=&#34;spring&#34;&gt;Spring&lt;a class=&#34;anchor&#34; href=&#34;#spring&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/ThomasVitale/awesome-spring&#34;&gt;ThomasVitale/awesome-spring&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.thomasvitale.com/&#34;&gt;Thomas Vitale&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Software Engineer | Java | Cloud Native | Developer Experience&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/huanzi-qch/springBoot&#34;&gt;huanzi-qch/springBoot&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;SpringBoot系列Demo代码&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/ThomasVitale/developer-experience-java-kubernetes&#34;&gt;ThomasVitale/developer-experience-java-kubernetes&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/ThomasVitale/cloud-native-spring-in-action&#34;&gt;ThomasVitale/cloud-native-spring-in-action&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/ThomasVitale&#34;&gt;Thomas Vitale&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Software Engineer 📚 Author of “Cloud Native Spring in Action” + &amp;ldquo;Developer Experience on Kubernetes&amp;rdquo; 🛳️ CNCF Ambassador 👨‍💻 OSS, Java, Cloud Native, AI&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/ThomasVitale/supply-chain-security-java&#34;&gt;ThomasVitale/supply-chain-security-java&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Samples showing how to secure the supply chain for Java applications&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/ThomasVitale/langchain4j-spring&#34;&gt;ThomasVitale/langchain4j-spring&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/ThomasVitale/spring-tutorials&#34;&gt;ThomasVitale/spring-tutorials&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/xmolecules/jmolecules&#34;&gt;xmolecules/jmolecules&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Libraries to help developers express architectural abstractions in Java code&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/kcctl/kcctl&#34;&gt;kcctl/kcctl&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;A modern and intuitive command line client for Kafka Connect&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/marcushellberg/practical-ai-in-java&#34;&gt;marcushellberg/practical-ai-in-java&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/jline/jline3&#34;&gt;jline/jline3&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;什么是spring&#34;&gt;什么是Spring&lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%80%e4%b9%88%e6%98%afspring&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Spring是一个java开发框架&lt;/li&gt;&#xA;&lt;li&gt;它的核心特性是&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;控制反转&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;依赖注入&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;面向切面编程&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;声明式事务管理&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;模块化设计&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;spring-mvc&#34;&gt;Spring MVC&lt;a class=&#34;anchor&#34; href=&#34;#spring-mvc&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;spring-mvc-流程&#34;&gt;Spring MVC 流程&lt;a class=&#34;anchor&#34; href=&#34;#spring-mvc-%e6%b5%81%e7%a8%8b&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;流程&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用户发送请求&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;DispatcherServlet&lt;/code&gt; 调用 &lt;code&gt;HandlerMapping&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;DispatcherServlet&lt;/code&gt; 调用 &lt;code&gt;HandlerAdapter&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Controller 处理请求&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;DispatcherServlet&lt;/code&gt; 调用 &lt;code&gt;ViewResolver&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;视图渲染 ModelAndView -&amp;gt; ViewResolver -&amp;gt; View&lt;/li&gt;&#xA;&lt;li&gt;返回响应&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;核心组件&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;DispatcherServlet&lt;/strong&gt;：前端控制器，负责请求的分发和协调&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;HandlerMapping&lt;/strong&gt;：根据请求 URL 查找对应的 Handler&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;HandlerAdapter&lt;/strong&gt;：适配并执行 Handler&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Controller&lt;/strong&gt;：处理具体的业务逻辑&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;ViewResolver&lt;/strong&gt;：解析视图名称，生成具体的 View 对象&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;View&lt;/strong&gt;：负责视图的渲染&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;bean&#34;&gt;Bean&lt;a class=&#34;anchor&#34; href=&#34;#bean&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;bean的生命周期&#34;&gt;Bean的生命周期&lt;a class=&#34;anchor&#34; href=&#34;#bean%e7%9a%84%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Bean的实例化&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通过反射调用 Bean 的构造函数，创建Bean的实例&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;填充属性（依赖注入）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Spring根据配置文件或注解，将依赖的Bean注入到当前Bean中&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;调用Aware接口&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果Bean实现了Spring的&lt;code&gt;Aware&lt;/code&gt;接口，Spring会调用对应的回调方法&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;BeanPostProcessor&lt;/code&gt; 的前置处理&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Spring调用所有&lt;code&gt;BeanPostProcessor&lt;/code&gt;的&lt;code&gt;postProcessBeforeInitialization()&lt;/code&gt;方法&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;执行初始化方法&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Spring会调用Bean的初始化方法。&lt;/li&gt;&#xA;&lt;li&gt;@PostConstruct&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;BeanPostProcessor的后置处理&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Spring调用所有&lt;code&gt;BeanPostProcessor&lt;/code&gt;的&lt;code&gt;postProcessAfterInitialization()&lt;/code&gt;方法。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Bean初始化完成&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Bean已经完全初始化，可以被其他Bean使用。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Bean的使用&lt;/li&gt;&#xA;&lt;li&gt;Bean的销毁&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;bean的作用域&#34;&gt;Bean的作用域&lt;a class=&#34;anchor&#34; href=&#34;#bean%e7%9a%84%e4%bd%9c%e7%94%a8%e5%9f%9f&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Singleton（单例）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;默认作用域，单例模式&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Prototype（原型）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;每次请求创建新实例&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Request（请求）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;每个 HTTP 请求创建一个实例&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Session（会话）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;每个 HTTP Session 创建一个实例&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Application（应用）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;整个 ServletContext 生命周期内有效&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;WebSocket&#xA;&lt;ul&gt;&#xA;&lt;li&gt;WebSocket 会话生命周期内有效&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;spring-循环依赖如何解决&#34;&gt;spring 循环依赖如何解决？&lt;a class=&#34;anchor&#34; href=&#34;#spring-%e5%be%aa%e7%8e%af%e4%be%9d%e8%b5%96%e5%a6%82%e4%bd%95%e8%a7%a3%e5%86%b3&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;三级缓存&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;singletonObjects&lt;/code&gt;：一级缓存，存储经历了完整生命周期的Bean对象&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;earlySingletonObjects&lt;/code&gt;：二级缓存，存储提前暴露出来的Bean对象，其生命周期未结束，属性未完全填充&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;singletonFactories&lt;/code&gt;：三级缓存，存储生成Bean的工厂&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;ioc&#34;&gt;IOC&lt;a class=&#34;anchor&#34; href=&#34;#ioc&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;什么是ioc&#34;&gt;什么是IOC&lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%80%e4%b9%88%e6%98%afioc&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;IOC是控制反转的意思，在一个程序中对象的创建与管理由一个容器负责，对象之间的引用通过注入(属性填充)的方式从容器中获取，降低了代码之间的耦合度&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;ioc-的核心概念是什么&#34;&gt;IOC 的核心概念是什么？&lt;a class=&#34;anchor&#34; href=&#34;#ioc-%e7%9a%84%e6%a0%b8%e5%bf%83%e6%a6%82%e5%bf%b5%e6%98%af%e4%bb%80%e4%b9%88&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;依赖注入&lt;/li&gt;&#xA;&lt;li&gt;控制反转&lt;/li&gt;&#xA;&lt;li&gt;IOC容器&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;举一个-spring-的容器&#34;&gt;举一个 Spring 的容器？&lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%be%e4%b8%80%e4%b8%aa-spring-%e7%9a%84%e5%ae%b9%e5%99%a8&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;BeanFactory&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;ApplicationContext&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;WebApplicationContext&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;ioc-的优势是什么&#34;&gt;IOC 的优势是什么？&lt;a class=&#34;anchor&#34; href=&#34;#ioc-%e7%9a%84%e4%bc%98%e5%8a%bf%e6%98%af%e4%bb%80%e4%b9%88&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;降低耦合度&lt;/li&gt;&#xA;&lt;li&gt;提高可测试性&#xA;&lt;ul&gt;&#xA;&lt;li&gt;注入模拟对象进行测试&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;增强可扩展性&lt;/li&gt;&#xA;&lt;li&gt;优化资源管理&#xA;&lt;ul&gt;&#xA;&lt;li&gt;容器管理对象的创建和销毁，避免资源浪费&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;aop&#34;&gt;AOP&lt;a class=&#34;anchor&#34; href=&#34;#aop&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;什么是aop&#34;&gt;什么是AOP？&lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%80%e4%b9%88%e6%98%afaop&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;AOP 是一种&lt;strong&gt;编程范式&lt;/strong&gt;, 通过将横切关注点与业务代码分离，提高代码的可维护性与可重用性&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;aop的核心概念是什么&#34;&gt;AOP的核心概念是什么？&lt;a class=&#34;anchor&#34; href=&#34;#aop%e7%9a%84%e6%a0%b8%e5%bf%83%e6%a6%82%e5%bf%b5%e6%98%af%e4%bb%80%e4%b9%88&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;切面 &lt;strong&gt;Aspect&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;连接点 &lt;strong&gt;Join Point&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;程序执行过程中可以插入切面的点（方法的调用或异常的处理）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;通知 &lt;strong&gt;Advice&lt;/strong&gt; 切面在连接点执行的操作&#xA;&lt;ul&gt;&#xA;&lt;li&gt;@Before&lt;/li&gt;&#xA;&lt;li&gt;@After&lt;/li&gt;&#xA;&lt;li&gt;@Around&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;切入点 &lt;strong&gt;Pointcut&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;定义在哪些连接点上应用通知，通常通过表达式来匹配&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;织入 &lt;strong&gt;Weaving&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;将切面应用到目标对象并创建代理对象的过程，可以在编译期、类加载期或运行期进行&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;aop的应用场景&#34;&gt;AOP的应用场景&lt;a class=&#34;anchor&#34; href=&#34;#aop%e7%9a%84%e5%ba%94%e7%94%a8%e5%9c%ba%e6%99%af&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;日志记录&lt;/li&gt;&#xA;&lt;li&gt;事务管理&lt;/li&gt;&#xA;&lt;li&gt;权限控制&lt;/li&gt;&#xA;&lt;li&gt;性能监控&#xA;&lt;ul&gt;&#xA;&lt;li&gt;记录方法执行时间&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;aop的实现方式&#34;&gt;AOP的实现方式&lt;a class=&#34;anchor&#34; href=&#34;#aop%e7%9a%84%e5%ae%9e%e7%8e%b0%e6%96%b9%e5%bc%8f&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;JDK动态代理&#xA;&lt;ul&gt;&#xA;&lt;li&gt;实现了接口的类&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;CGLIB代理&#xA;&lt;ul&gt;&#xA;&lt;li&gt;未实现接口的类&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;事务&#34;&gt;事务&lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8b%e5%8a%a1&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;</description>
    </item>
    <item>
      <title>spring boot</title>
      <link>/post/computer-science/java/spring/springboot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/java/spring/springboot/</guid>
      <description>&lt;h1 id=&#34;spring-boot&#34;&gt;spring boot&lt;a class=&#34;anchor&#34; href=&#34;#spring-boot&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;aop&#34;&gt;AOP&lt;a class=&#34;anchor&#34; href=&#34;#aop&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;为什么要使用aop&#34;&gt;为什么要使用AOP？&lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%ba%e4%bb%80%e4%b9%88%e8%a6%81%e4%bd%bf%e7%94%a8aop&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;aop的术语和流程&#34;&gt;AOP的术语和流程&lt;a class=&#34;anchor&#34; href=&#34;#aop%e7%9a%84%e6%9c%af%e8%af%ad%e5%92%8c%e6%b5%81%e7%a8%8b&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;aop开发详解&#34;&gt;AOP开发详解&lt;a class=&#34;anchor&#34; href=&#34;#aop%e5%bc%80%e5%8f%91%e8%af%a6%e8%a7%a3&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;确定拦截目标&#xA;&lt;ul&gt;&#xA;&lt;li&gt;需要拦截什么类的什么方法&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;开发切面&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;@Aspect&lt;/code&gt; 注解的一个类&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;@Before&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;@After&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;@AfterReturning&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;@AfterThrowing&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;定义切点&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;环绕通知&#34;&gt;环绕通知&lt;a class=&#34;anchor&#34; href=&#34;#%e7%8e%af%e7%bb%95%e9%80%9a%e7%9f%a5&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一般而言，只有在需要大幅度修改原有目标对象的服务逻辑时才使用它，一般情况下尽量不要使用它。环绕通知是一个取代整个流程的通知，当然它也提供了回调原有流程的能力&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;引入&#34;&gt;引入&lt;a class=&#34;anchor&#34; href=&#34;#%e5%bc%95%e5%85%a5&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;通知获取参数&#34;&gt;通知获取参数&lt;a class=&#34;anchor&#34; href=&#34;#%e9%80%9a%e7%9f%a5%e8%8e%b7%e5%8f%96%e5%8f%82%e6%95%b0&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;织入&#34;&gt;织入&lt;a class=&#34;anchor&#34; href=&#34;#%e7%bb%87%e5%85%a5&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;织入是一个生成动态代理对象并且将切面和目标对象方法编入约定流程的过程&lt;/li&gt;&#xA;&lt;li&gt;本书中采用先声明接口再提供一个实现类的形式来提供服务类，这也是Spring推荐的方式，但是是否拥有接口并不是AOP的强制要求&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在Java中，当前有多种方式实现动态代理，我们之前谈到的CGLIB只是其中的一种，业界比较流行的还有JDK和Javassist等。Spring采用了JDK和CGLIB，对于JDK动态代理的要求是被代理的目标对象必须拥有接口，而对于CGLIB动态代理则不做要求。因此，在默认的情况下，Spring会按照这样的一条规则处理：当需要使用AOP的类拥有接口时，它会以JDK动态代理的方式运行，否则以CGLIB动态代理的方式运行&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;多个切面&#34;&gt;多个切面&lt;a class=&#34;anchor&#34; href=&#34;#%e5%a4%9a%e4%b8%aa%e5%88%87%e9%9d%a2&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;h2 id=&#34;数据库事务&#34;&gt;数据库事务&lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e5%ba%93%e4%ba%8b%e5%8a%a1&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;jdbc的数据库事务&#34;&gt;JDBC的数据库事务&lt;a class=&#34;anchor&#34; href=&#34;#jdbc%e7%9a%84%e6%95%b0%e6%8d%ae%e5%ba%93%e4%ba%8b%e5%8a%a1&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;spring声明式事务的使用&#34;&gt;Spring声明式事务的使用&lt;a class=&#34;anchor&#34; href=&#34;#spring%e5%a3%b0%e6%98%8e%e5%bc%8f%e4%ba%8b%e5%8a%a1%e7%9a%84%e4%bd%bf%e7%94%a8&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;声明式事务是使用注解@Transactional进行标注的，这个注解可以标注在类或者方法上，当它标注在类上时，表示这个类所有公共的(public)非静态的方法都将启用事务功能&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;spring事务管理器&#34;&gt;Spring事务管理器&lt;a class=&#34;anchor&#34; href=&#34;#spring%e4%ba%8b%e5%8a%a1%e7%ae%a1%e7%90%86%e5%99%a8&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在Spring中，事务管理器的顶层接口为 &lt;code&gt;TransactionManager&lt;/code&gt;，这个接口没有任何方法定义，这是因为这个接口下又可以划分两大类事务管理器&#xA;&lt;ul&gt;&#xA;&lt;li&gt;响应式编程的事务管理器&lt;/li&gt;&#xA;&lt;li&gt;非响应式编程的事务管理器&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;PlatformTransactionManager&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;getTransaction 获取事务，返回事务状态&lt;/li&gt;&#xA;&lt;li&gt;commit 提交事务&lt;/li&gt;&#xA;&lt;li&gt;rollback 回滚事务&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;在Spring Boot中，添加Maven依赖&lt;code&gt;mybatis-spring-boot-starter&lt;/code&gt;之后，会自动创建&lt;code&gt;JdbcTransactionManager&lt;/code&gt;对象作为事务管理器&lt;/li&gt;&#xA;&lt;li&gt;如果依赖&lt;code&gt;spring-boot-starter-data-jpa&lt;/code&gt;，则会自动创建&lt;code&gt;JpaTransactionManager&lt;/code&gt;对象作为事务管理器&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;隔离级别&#34;&gt;隔离级别&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9a%94%e7%a6%bb%e7%ba%a7%e5%88%ab&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在企业的生产实践中，选择隔离级别一般会以读写提交为主，它能够防止脏读，但不能避免不可重复读和幻读&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;传播行为&#34;&gt;传播行为&lt;a class=&#34;anchor&#34; href=&#34;#%e4%bc%a0%e6%92%ad%e8%a1%8c%e4%b8%ba&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;执行一个批量任务，它会处理很多的交易，绝大部分交易可以顺利完成，但是也有极少数的交易因为特殊原因不能完成而发生异常，这时我们不应该因为极少数的交易不能完成而回滚批量任务调用的其他交易，使得那些本能完成的交易也不能完成了&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在执行一个批量任务的过程中，调用多个交易时，如果有一些交易发生异常，只回滚那些出现异常的交易，而不回滚整个批量任务，这样就能够使得那些没有问题的交易顺利完成，而有问题的交易则不做任何事情&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;在Spring中，当一个方法调用另一个方法时，可以让事务采取不同的策略工作，如新建事务或者挂起当前事务等，这便是事务的传播行为&lt;/li&gt;&#xA;&lt;li&gt;7种传播行为&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;需要事务，它是默认传播行为。如果当前存在事务，就沿用当前事务；否则新建一个事务运行该方法&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;SUPPORTS&#xA;&lt;ul&gt;&#xA;&lt;li&gt;支持事务。如果当前存在事务，就沿用当前事务；否则继续采用无事务的方式运行该方法&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;MANDATORY&#xA;&lt;ul&gt;&#xA;&lt;li&gt;必须使用事务。如果当前没有事务，则会抛出异常；如果存在当前事务，则沿用当前事务运行该方法￼&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;REQUIRES_NEW&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;无论当前事务是否存在，都会创建新事务运行该方法，这样新事务就可以拥有新的锁和隔离级别等特性，与当前事务相互独立￼&lt;/li&gt;&#xA;&lt;li&gt;e.g.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在进行数据同步的时候，不用将整个同步过程都设置为一个事务&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;NOT_SUPPORTED&#xA;&lt;ul&gt;&#xA;&lt;li&gt;不支持事务，当前存在事务时，将挂起事务，运行方法&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;NEVER&#xA;&lt;ul&gt;&#xA;&lt;li&gt;不支持事务，如果当前存在事务，则抛出异常，否则继续采用无事务的方式运行该方法￼&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;NESTED&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在当前方法调用方法时，如果被调用的方法发生异常，只回滚被调用的方法运行过的SQL语句，而不回滚当前方法的事务&lt;/li&gt;&#xA;&lt;li&gt;原理&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在大部分的数据库中，一段SQL语句中可以设置一个标志位，运行后面的SQL语句时如果有问题，只回滚到这个标志位的数据状态，而不会让这个标志位之前的SQL语句也回滚。这个标志位在数据库概念中被称为保存点(save point)。从加粗日志部分可以看到，Spring生成了nested事务，也可以看到保存点的释放，可见Spring也是使用保存点技术来完成让子事务回滚而不致使当前事务回滚的工作。&lt;/li&gt;&#xA;&lt;li&gt;注意，并不是所有数据库都支持保存点技术，因此Spring内部有这样的规则：当数据库支持保存点技术时，就启用保存点技术；如果不能支持，就新建一个事务来运行代码，即等价于REQUIRES_NEW传播行为&lt;/li&gt;&#xA;&lt;li&gt;NESTED 和 REQUIRES_NEW 的区别&#xA;&lt;ul&gt;&#xA;&lt;li&gt;NESTED传播行为和REQUIRES_NEW传播行为是有区别的：NESTED传播行为会沿用当前事务，以保存点技术为主；REQUIRES_NEW传播行为则创建新的事务，事务的提交和回滚也是独立的，它拥有独立上下文（例如隔离级别和超时时间等），这是在应用中需要注意的地方。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;占用事务时间过长&#34;&gt;占用事务时间过长&lt;a class=&#34;anchor&#34; href=&#34;#%e5%8d%a0%e7%94%a8%e4%ba%8b%e5%8a%a1%e6%97%b6%e9%97%b4%e8%bf%87%e9%95%bf&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;transactional自调用失效问题&#34;&gt;@Transactional自调用失效问题&lt;a class=&#34;anchor&#34; href=&#34;#transactional%e8%87%aa%e8%b0%83%e7%94%a8%e5%a4%b1%e6%95%88%e9%97%ae%e9%a2%98&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;h2 id=&#34;spring-data-redis&#34;&gt;spring-data-redis&lt;a class=&#34;anchor&#34; href=&#34;#spring-data-redis&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Reference&#xA;&lt;ul&gt;&#xA;&lt;li&gt;《深入迁出 Spring Boot 3.x》7.1 spring-data-redis项目简介&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;lettuce-vs-jedis&#34;&gt;Lettuce vs Jedis&lt;a class=&#34;anchor&#34; href=&#34;#lettuce-vs-jedis&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在Java中有很多种与Redis连接的驱动，目前使用比较广泛的是Lettuce和Jedis，它们是类似的，不过自Spring Boot 2.0发布以来，默认使用的是Lettuce&lt;/li&gt;&#xA;&lt;li&gt;Lettuce是基于Netty框架的事件驱动的Redis客户端，其方法调用是异步的，其API也是线程安全的，因此多个线程可以操作单个Lettuce连接来完成各种操作，并且Lettuce支持连接池。Lettuce线程可以被多个请求公用，且不会产生频繁创建和关闭Lettuce连接的开销，因此比较适合应用于高并发网站。&lt;/li&gt;&#xA;&lt;li&gt;Jedis是同步的，不支持异步，Jedis客户端连接不是线程安全的，需要为每个请求创建和关闭一个Jedis连接，所以一般通过连接池来使用Jedis客户端连接。Jedis不太适合在高并发网站使用，当遇到高并发场景时，Jedis连接池无法避免频繁创建和关闭Jedis连接，因为这会造成十分大的系统开销&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;redistemplate和-stringredistemplate&#34;&gt;RedisTemplate和 StringRedisTemplate&lt;a class=&#34;anchor&#34; href=&#34;#redistemplate%e5%92%8c-stringredistemplate&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;StringRedisTemplate是RedisTemplate的子类，从名称就可以看出，StringRedisTemplate专门用于操作字符串&lt;/li&gt;&#xA;&lt;li&gt;RedisTemplate，它是一个强大的类，会自动从RedisConnectionFactory工厂中获取连接，然后执行对应的Redis命令，最后还会关闭Redis的连接。这些操作都被封装在RedisTemplate中，所以开发者并不需要关注Redis连接的闭合问题&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;spring对redis数据类型操作的封装&#34;&gt;Spring对Redis数据类型操作的封装&lt;a class=&#34;anchor&#34; href=&#34;#spring%e5%af%b9redis%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b%e6%93%8d%e4%bd%9c%e7%9a%84%e5%b0%81%e8%a3%85&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ValueOperations 字符串操作接口&lt;/li&gt;&#xA;&lt;li&gt;HashOperations 哈希操作接口&lt;/li&gt;&#xA;&lt;li&gt;ListOperations 列表（链表）操作接口&lt;/li&gt;&#xA;&lt;li&gt;SetOperations 集合操作接口&lt;/li&gt;&#xA;&lt;li&gt;ZSetOperations 有序集合操作接口&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 获取字符串操作接口&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;redisTemplate.&lt;span style=&#34;color:#a6e22e&#34;&gt;opsForValue&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 获取哈希操作接口&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;redisTemplate.&lt;span style=&#34;color:#a6e22e&#34;&gt;opsForHash&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 获取列表（链表）操作接口&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;redisTemplate.&lt;span style=&#34;color:#a6e22e&#34;&gt;opsForList&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 获取集合操作接口&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;redisTemplate.&lt;span style=&#34;color:#a6e22e&#34;&gt;opsForSet&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 获取有序集合操作接口&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;redisTemplate.&lt;span style=&#34;color:#a6e22e&#34;&gt;opsForZSet&lt;/span&gt;();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;sessioncallback-和-rediscallback-接口&#34;&gt;SessionCallback 和 RedisCallback 接口&lt;a class=&#34;anchor&#34; href=&#34;#sessioncallback-%e5%92%8c-rediscallback-%e6%8e%a5%e5%8f%a3&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;redis事务&#34;&gt;Redis事务&lt;a class=&#34;anchor&#34; href=&#34;#redis%e4%ba%8b%e5%8a%a1&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;使用-redis-流水线&#34;&gt;使用 Redis 流水线&lt;a class=&#34;anchor&#34; href=&#34;#%e4%bd%bf%e7%94%a8-redis-%e6%b5%81%e6%b0%b4%e7%ba%bf&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在默认的情况下，Redis客户端把命令逐条发送到Redis服务器，这样做显然性能不高。在关系数据库中我们可以批量运行语句，也就是只有需要运行SQL语句时，才一次性地发送所有SQL语句去运行，这样性能就提高了许多。类似地，Redis也可以批量执行命令，这便是流水线(pipeline)技术，在很多情况下并不是Redis性能不佳，而是网络传输的速度慢造成瓶颈，使用流水线技术可以在需要执行很多命令时大幅度地提升Redis的性能&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;使用-redis发布--订阅&#34;&gt;使用 Redis发布 / 订阅&lt;a class=&#34;anchor&#34; href=&#34;#%e4%bd%bf%e7%94%a8-redis%e5%8f%91%e5%b8%83--%e8%ae%a2%e9%98%85&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;使用-lua-脚本&#34;&gt;使用 Lua 脚本&lt;a class=&#34;anchor&#34; href=&#34;#%e4%bd%bf%e7%94%a8-lua-%e8%84%9a%e6%9c%ac&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在Redis中运行Lua脚本具备原子性，且Lua脚本具备更加强大的计算能力，在高并发环境中需要保证数据一致性时，使用Lua脚本方案比使用Redis自身提供的事务更好&lt;/li&gt;&#xA;&lt;li&gt;Redis提供了两种运行Lua的方法&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一种是直接发送Lua脚本到Redis服务器运行&lt;/li&gt;&#xA;&lt;li&gt;另一种是先把Lua脚本发送给Redis服务器，Redis服务器对Lua脚本进行缓存，然后返回一个32位的SHA1编码，之后只需要发送SHA1和相关参数给Redis服务器便可以运行了。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;这里需要解释为什么会存在通过32位编码运行Lua脚本的方法。如果Lua脚本很长，那么就需要通过网络传递脚本给Redis服务器运行，而现实的情况是网络的传递速度往往跟不上Redis的运行速度，因此网络速度就会成为Redis运行的瓶颈。如果只传递32位编码和参数，那么需要通过网络传输的消息就少了许多，这样就可以提高系统的性能&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;使用-spring-缓存注解操作-redis&#34;&gt;使用 Spring 缓存注解操作 Redis&lt;a class=&#34;anchor&#34; href=&#34;#%e4%bd%bf%e7%94%a8-spring-%e7%bc%93%e5%ad%98%e6%b3%a8%e8%a7%a3%e6%93%8d%e4%bd%9c-redis&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;@CachePut&lt;/code&gt; 将方法返回的结果存储到缓存中&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;@Cacheable&lt;/code&gt; 先通过定义的键从缓存中查询，如果可以查询到数据则返回，否则运行该方法，返回数据，并且将返回的结果存储到缓存中&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;@CacheEvict&lt;/code&gt; 通过定义的键移除缓存&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;缓存注解自调用失效问题&#34;&gt;缓存注解自调用失效问题&lt;a class=&#34;anchor&#34; href=&#34;#%e7%bc%93%e5%ad%98%e6%b3%a8%e8%a7%a3%e8%87%aa%e8%b0%83%e7%94%a8%e5%a4%b1%e6%95%88%e9%97%ae%e9%a2%98&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;自定义缓存管理器&#34;&gt;自定义缓存管理器&lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%ae%9a%e4%b9%89%e7%bc%93%e5%ad%98%e7%ae%a1%e7%90%86%e5%99%a8&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h2 id=&#34;异步线程池&#34;&gt;异步线程池&lt;a class=&#34;anchor&#34; href=&#34;#%e5%bc%82%e6%ad%a5%e7%ba%bf%e7%a8%8b%e6%b1%a0&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;异步消息-rabbitmq&#34;&gt;异步消息 RabbitMQ&lt;a class=&#34;anchor&#34; href=&#34;#%e5%bc%82%e6%ad%a5%e6%b6%88%e6%81%af-rabbitmq&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;定时任务&#34;&gt;定时任务&lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%9a%e6%97%b6%e4%bb%bb%e5%8a%a1&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;validation&#34;&gt;validation&lt;a class=&#34;anchor&#34; href=&#34;#validation&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.51cto.com/u_16213456/12497314&#34;&gt;spring boot validated 验证开始时间和结束时间&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;spring-boot-monitor&#34;&gt;Spring-boot-monitor&lt;a class=&#34;anchor&#34; href=&#34;#spring-boot-monitor&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;好久没维护了，服务有上下文资源会请求不到，这。。。。。。。&lt;/li&gt;&#xA;&lt;li&gt;单机监控SpringBoot应用指标&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.pomit.cn/SpringBootMonitor/#/&#34;&gt;官网&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>spring boot validation</title>
      <link>/post/computer-science/java/spring/spring-boot-validation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/java/spring/spring-boot-validation/</guid>
      <description>&lt;h1 id=&#34;asserttrue-方法名前缀&#34;&gt;&lt;code&gt;@AssertTrue&lt;/code&gt; 方法名前缀&lt;a class=&#34;anchor&#34; href=&#34;#asserttrue-%e6%96%b9%e6%b3%95%e5%90%8d%e5%89%8d%e7%bc%80&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用 &lt;code&gt;@AssertTrue&lt;/code&gt; 进行字段校验时，方法名称必须以 is 或 has 开头, 不然不会生效&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Tips: 在使用 &lt;code&gt;swagger2&lt;/code&gt; 的项目中，如果使用 is 开头，会在接口文档中将方法解析为一个字段，换成 has 为前缀之后不会出现这样的情况&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果一定要使用 is 作为方法名称的前缀，应该也可以使用 &lt;code&gt;@ApiModelProperty(hidden = true)&lt;/code&gt; 将其隐藏&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@AssertTrue&lt;/span&gt;(message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;计划培训开始时间不能大于计划培训结束时间&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isTrainEndTimeAfterTrainStarTime&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; trainStartTime.&lt;span style=&#34;color:#a6e22e&#34;&gt;compareTo&lt;/span&gt;(trainEndTime) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;校验整数字段不能为空&#34;&gt;校验整数字段不能为空&lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%a1%e9%aa%8c%e6%95%b4%e6%95%b0%e5%ad%97%e6%ae%b5%e4%b8%8d%e8%83%bd%e4%b8%ba%e7%a9%ba&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@NotNull&lt;/span&gt;(message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pageNum 不能为空&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Integer pageNum;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;校验字符串不能为空&#34;&gt;校验字符串不能为空&lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%a1%e9%aa%8c%e5%ad%97%e7%ac%a6%e4%b8%b2%e4%b8%8d%e8%83%bd%e4%b8%ba%e7%a9%ba&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@NotBlank&lt;/span&gt;(message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;申请人 不能为空&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String applicant;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;校验时间段字段先后关系&#34;&gt;校验时间段字段先后关系&lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%a1%e9%aa%8c%e6%97%b6%e9%97%b4%e6%ae%b5%e5%ad%97%e6%ae%b5%e5%85%88%e5%90%8e%e5%85%b3%e7%b3%bb&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 日期为 字符串 类型&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@NotEmpty&lt;/span&gt;(message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;计划培训开始时间 不能为空&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String trainStartTime;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@NotEmpty&lt;/span&gt;(message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;计划培训结束时间 不能为空&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String trainEndTime;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@AssertTrue&lt;/span&gt;(message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;计划培训开始时间不能大于计划培训结束时间&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isTrainEndTimeAfterTrainStarTime&lt;/span&gt;() { &lt;span style=&#34;color:#75715e&#34;&gt;// 方法名称要以 is 或 has 开头&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; trainStartTime.&lt;span style=&#34;color:#a6e22e&#34;&gt;compareTo&lt;/span&gt;(trainEndTime) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 日期为 LocalDate 类型&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@NotNull&lt;/span&gt;(message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;开始日期(startDate) 不能为空&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; LocalDate startDate;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@NotNull&lt;/span&gt;(message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;结束日期(endDate) 不能为空&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; LocalDate endDate;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@AssertTrue&lt;/span&gt;(message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;结束日期(endDate) 不能先于 开始日期(startDate)&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isEndDateAfterStartDate&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;endDate.&lt;span style=&#34;color:#a6e22e&#34;&gt;isBefore&lt;/span&gt;(startDate);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>spring transaction</title>
      <link>/post/computer-science/java/spring/spring-transaction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/java/spring/spring-transaction/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/isme-zjh/p/18106598&#34;&gt;@Transactional详解（作用、失效场景与解决方法）| 事务注解实际原理（AOP）解析&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;spring-boot--mybatis-plus-使用事务&#34;&gt;Spring Boot + MyBatis-Plus 使用事务&lt;a class=&#34;anchor&#34; href=&#34;#spring-boot--mybatis-plus-%e4%bd%bf%e7%94%a8%e4%ba%8b%e5%8a%a1&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;p&gt;MyBatis-Plus 是基于 MyBatis 的增强工具，在 Spring Boot 中使用事务的方式与原生 MyBatis 类似。以下是详细的使用方法：&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-添加必要依赖&#34;&gt;1. 添加必要依赖&lt;a class=&#34;anchor&#34; href=&#34;#1-%e6%b7%bb%e5%8a%a0%e5%bf%85%e8%a6%81%e4%be%9d%e8%b5%96&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;首先确保你的项目中包含以下依赖：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.baomidou&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;mybatis-plus-boot-starter&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;最新版本&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2-配置事务管理器&#34;&gt;2. 配置事务管理器&lt;a class=&#34;anchor&#34; href=&#34;#2-%e9%85%8d%e7%bd%ae%e4%ba%8b%e5%8a%a1%e7%ae%a1%e7%90%86%e5%99%a8&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Spring Boot 会自动配置事务管理器，但如果你想自定义，可以在配置类中添加：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.context.annotation.Bean;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.context.annotation.Configuration;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.jdbc.datasource.DataSourceTransactionManager;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; javax.sql.DataSource;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Configuration&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyBatisPlusConfig&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; DataSourceTransactionManager &lt;span style=&#34;color:#a6e22e&#34;&gt;transactionManager&lt;/span&gt;(DataSource dataSource) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DataSourceTransactionManager(dataSource);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3-使用事务&#34;&gt;3. 使用事务&lt;a class=&#34;anchor&#34; href=&#34;#3-%e4%bd%bf%e7%94%a8%e4%ba%8b%e5%8a%a1&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;31-声明式事务推荐&#34;&gt;3.1 声明式事务（推荐）&lt;a class=&#34;anchor&#34; href=&#34;#31-%e5%a3%b0%e6%98%8e%e5%bc%8f%e4%ba%8b%e5%8a%a1%e6%8e%a8%e8%8d%90&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;在 Service 层方法上添加 &lt;code&gt;@Transactional&lt;/code&gt; 注解：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.stereotype.Service;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.transaction.annotation.Transactional;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Service&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserServiceImpl&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; UserService {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Autowired&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; UserMapper userMapper;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Autowired&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; OrderMapper orderMapper;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Transactional&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// 默认遇到RuntimeException时回滚&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createUserWithOrder&lt;/span&gt;(User user, Order order) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 插入用户&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        userMapper.&lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt;(user);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 设置订单用户ID&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        order.&lt;span style=&#34;color:#a6e22e&#34;&gt;setUserId&lt;/span&gt;(user.&lt;span style=&#34;color:#a6e22e&#34;&gt;getId&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 插入订单&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        orderMapper.&lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt;(order);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 如果此处抛出异常，上面两个操作都会回滚&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Transactional&lt;/span&gt;(rollbackFor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Exception.&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// 遇到所有异常都回滚&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;updateUserWithOrder&lt;/span&gt;(User user, Order order) &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; Exception {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        userMapper.&lt;span style=&#34;color:#a6e22e&#34;&gt;updateById&lt;/span&gt;(user);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        orderMapper.&lt;span style=&#34;color:#a6e22e&#34;&gt;updateById&lt;/span&gt;(order);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 即使抛出非RuntimeException也会回滚&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;32-编程式事务&#34;&gt;3.2 编程式事务&lt;a class=&#34;anchor&#34; href=&#34;#32-%e7%bc%96%e7%a8%8b%e5%bc%8f%e4%ba%8b%e5%8a%a1&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;如果需要更精细的控制，可以使用编程式事务：&lt;/p&gt;</description>
    </item>
    <item>
      <title>unit test</title>
      <link>/post/computer-science/java/spring/unit-test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/java/spring/unit-test/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.spring.io/spring-framework/reference/testing.html&#34;&gt;document&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://springdoc.cn/java-spring-mockbeans/&#34;&gt;Spring Boot @MockBean 指南&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/alibaba/testable-mock&#34;&gt;alibaba/testable-mock&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;换种思路写Mock，让单元测试更简单&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/17f8728c7cdf&#34;&gt;Mock 测试技术详解及高级特性，你不得不会的技能！&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Mockito&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.baeldung-cn.com/mockito-series&#34;&gt;Mockito 教程&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.baeldung-cn.com/mockito-quickstart&#34;&gt;Mockito 快速入门教程&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.runoob.com/java/java-mock-mockito.html&#34;&gt;Java Mock 测试框架 Mockito&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.springframework.org.cn/spring-framework/reference/testing/spring-mvc-test-framework.html&#34;&gt;MockMvc&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.springframework.org.cn/spring-framework/reference/testing/spring-mvc-test-framework/server-performing-requests.html&#34;&gt;执行请求&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.springframework.org.cn/spring-framework/reference/testing/spring-mvc-test-framework/server-defining-expectations.html&#34;&gt;定义期望&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
