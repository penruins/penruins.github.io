<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Penruins</title>
    <link>/post/computer-science/algorithm/</link>
    <description>Recent content on Penruins</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="/post/computer-science/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>algorithm practice 剑指 offer</title>
      <link>/post/computer-science/algorithm/algorithm-practice-%E5%89%91%E6%8C%87-offer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/algorithm/algorithm-practice-%E5%89%91%E6%8C%87-offer/</guid>
      <description>&lt;h2 id=&#34;algorithm-practice-剑指-offer&#34;&gt;&#xA;  algorithm practice 剑指 offer&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#algorithm-practice-%e5%89%91%e6%8c%87-offer&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;第1章-整数&#34;&gt;&#xA;  第1章 整数&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac1%e7%ab%a0-%e6%95%b4%e6%95%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;11-整数的基础知识&#34;&gt;&#xA;  1.1 整数的基础知识&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#11-%e6%95%b4%e6%95%b0%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题1整数除法&#34;&gt;&#xA;  面试题1：整数除法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%981%e6%95%b4%e6%95%b0%e9%99%a4%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;12-二进制&#34;&gt;&#xA;  1.2 二进制&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#12-%e4%ba%8c%e8%bf%9b%e5%88%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题2二进制加法&#34;&gt;&#xA;  面试题2：二进制加法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%982%e4%ba%8c%e8%bf%9b%e5%88%b6%e5%8a%a0%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题3前n个数字二进制形式中1的个数&#34;&gt;&#xA;  面试题3：前n个数字二进制形式中1的个数&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%983%e5%89%8dn%e4%b8%aa%e6%95%b0%e5%ad%97%e4%ba%8c%e8%bf%9b%e5%88%b6%e5%bd%a2%e5%bc%8f%e4%b8%ad1%e7%9a%84%e4%b8%aa%e6%95%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;简单计算每个整数的二进制形式中1的个数&#34;&gt;&#xA;  简单计算每个整数的二进制形式中1的个数&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ae%80%e5%8d%95%e8%ae%a1%e7%ae%97%e6%af%8f%e4%b8%aa%e6%95%b4%e6%95%b0%e7%9a%84%e4%ba%8c%e8%bf%9b%e5%88%b6%e5%bd%a2%e5%bc%8f%e4%b8%ad1%e7%9a%84%e4%b8%aa%e6%95%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;根据ii-1计算i的二进制形式中1的个数&#34;&gt;&#xA;  根据“i&amp;amp;（i-1）”计算i的二进制形式中1的个数&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%b9%e6%8d%aeii-1%e8%ae%a1%e7%ae%97i%e7%9a%84%e4%ba%8c%e8%bf%9b%e5%88%b6%e5%bd%a2%e5%bc%8f%e4%b8%ad1%e7%9a%84%e4%b8%aa%e6%95%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;根据i2计算i的二进制形式中1的个数&#34;&gt;&#xA;  根据“i/2”计算i的二进制形式中1的个数&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%b9%e6%8d%aei2%e8%ae%a1%e7%ae%97i%e7%9a%84%e4%ba%8c%e8%bf%9b%e5%88%b6%e5%bd%a2%e5%bc%8f%e4%b8%ad1%e7%9a%84%e4%b8%aa%e6%95%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h5 id=&#34;面试题4只出现一次的数字&#34;&gt;&#xA;  面试题4：只出现一次的数字&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%984%e5%8f%aa%e5%87%ba%e7%8e%b0%e4%b8%80%e6%ac%a1%e7%9a%84%e6%95%b0%e5%ad%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题5单词长度的最大乘积&#34;&gt;&#xA;  面试题5：单词长度的最大乘积&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%985%e5%8d%95%e8%af%8d%e9%95%bf%e5%ba%a6%e7%9a%84%e6%9c%80%e5%a4%a7%e4%b9%98%e7%a7%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;用哈希表记录字符串中出现的字符&#34;&gt;&#xA;  用哈希表记录字符串中出现的字符&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%94%a8%e5%93%88%e5%b8%8c%e8%a1%a8%e8%ae%b0%e5%bd%95%e5%ad%97%e7%ac%a6%e4%b8%b2%e4%b8%ad%e5%87%ba%e7%8e%b0%e7%9a%84%e5%ad%97%e7%ac%a6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;用整数的二进制数位记录字符串中出现的字符&#34;&gt;&#xA;  用整数的二进制数位记录字符串中出现的字符&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%94%a8%e6%95%b4%e6%95%b0%e7%9a%84%e4%ba%8c%e8%bf%9b%e5%88%b6%e6%95%b0%e4%bd%8d%e8%ae%b0%e5%bd%95%e5%ad%97%e7%ac%a6%e4%b8%b2%e4%b8%ad%e5%87%ba%e7%8e%b0%e7%9a%84%e5%ad%97%e7%ac%a6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h4 id=&#34;13-本章小结&#34;&gt;&#xA;  1.3 本章小结&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#13-%e6%9c%ac%e7%ab%a0%e5%b0%8f%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;第2章-数组&#34;&gt;&#xA;  第2章 数组&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac2%e7%ab%a0-%e6%95%b0%e7%bb%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;21-数组的基础知识&#34;&gt;&#xA;  2.1 数组的基础知识&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#21-%e6%95%b0%e7%bb%84%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;22-双指针&#34;&gt;&#xA;  2.2 双指针&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#22-%e5%8f%8c%e6%8c%87%e9%92%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题6排序数组中的两个数字之和&#34;&gt;&#xA;  面试题6：排序数组中的两个数字之和&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%986%e6%8e%92%e5%ba%8f%e6%95%b0%e7%bb%84%e4%b8%ad%e7%9a%84%e4%b8%a4%e4%b8%aa%e6%95%b0%e5%ad%97%e4%b9%8b%e5%92%8c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题7数组中和为0的3个数字&#34;&gt;&#xA;  面试题7：数组中和为0的3个数字&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%987%e6%95%b0%e7%bb%84%e4%b8%ad%e5%92%8c%e4%b8%ba0%e7%9a%843%e4%b8%aa%e6%95%b0%e5%ad%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题8和大于或等于k的最短子数组&#34;&gt;&#xA;  面试题8：和大于或等于k的最短子数组&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%988%e5%92%8c%e5%a4%a7%e4%ba%8e%e6%88%96%e7%ad%89%e4%ba%8ek%e7%9a%84%e6%9c%80%e7%9f%ad%e5%ad%90%e6%95%b0%e7%bb%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题9乘积小于k的子数组&#34;&gt;&#xA;  面试题9：乘积小于k的子数组&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%989%e4%b9%98%e7%a7%af%e5%b0%8f%e4%ba%8ek%e7%9a%84%e5%ad%90%e6%95%b0%e7%bb%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;23-累加数组数字求子数组之和&#34;&gt;&#xA;  2.3 累加数组数字求子数组之和&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#23-%e7%b4%af%e5%8a%a0%e6%95%b0%e7%bb%84%e6%95%b0%e5%ad%97%e6%b1%82%e5%ad%90%e6%95%b0%e7%bb%84%e4%b9%8b%e5%92%8c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题10和为k的子数组&#34;&gt;&#xA;  面试题10：和为k的子数组&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9810%e5%92%8c%e4%b8%bak%e7%9a%84%e5%ad%90%e6%95%b0%e7%bb%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题110和1个数相同的子数组&#34;&gt;&#xA;  面试题11：0和1个数相同的子数组&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%98110%e5%92%8c1%e4%b8%aa%e6%95%b0%e7%9b%b8%e5%90%8c%e7%9a%84%e5%ad%90%e6%95%b0%e7%bb%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题12左右两边子数组的和相等&#34;&gt;&#xA;  面试题12：左右两边子数组的和相等&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9812%e5%b7%a6%e5%8f%b3%e4%b8%a4%e8%be%b9%e5%ad%90%e6%95%b0%e7%bb%84%e7%9a%84%e5%92%8c%e7%9b%b8%e7%ad%89&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题13二维子矩阵的数字之和&#34;&gt;&#xA;  面试题13：二维子矩阵的数字之和&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9813%e4%ba%8c%e7%bb%b4%e5%ad%90%e7%9f%a9%e9%98%b5%e7%9a%84%e6%95%b0%e5%ad%97%e4%b9%8b%e5%92%8c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;24-本章小结&#34;&gt;&#xA;  2.4 本章小结&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#24-%e6%9c%ac%e7%ab%a0%e5%b0%8f%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;第3章-字符串&#34;&gt;&#xA;  第3章 字符串&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac3%e7%ab%a0-%e5%ad%97%e7%ac%a6%e4%b8%b2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;31-字符串的基础知识&#34;&gt;&#xA;  3.1 字符串的基础知识&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#31-%e5%ad%97%e7%ac%a6%e4%b8%b2%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;32-双指针&#34;&gt;&#xA;  3.2 双指针&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#32-%e5%8f%8c%e6%8c%87%e9%92%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题14字符串中的变位词&#34;&gt;&#xA;  面试题14：字符串中的变位词&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9814%e5%ad%97%e7%ac%a6%e4%b8%b2%e4%b8%ad%e7%9a%84%e5%8f%98%e4%bd%8d%e8%af%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题15字符串中的所有变位词&#34;&gt;&#xA;  面试题15：字符串中的所有变位词&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9815%e5%ad%97%e7%ac%a6%e4%b8%b2%e4%b8%ad%e7%9a%84%e6%89%80%e6%9c%89%e5%8f%98%e4%bd%8d%e8%af%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题16不含重复字符的最长子字符串&#34;&gt;&#xA;  面试题16：不含重复字符的最长子字符串&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9816%e4%b8%8d%e5%90%ab%e9%87%8d%e5%a4%8d%e5%ad%97%e7%ac%a6%e7%9a%84%e6%9c%80%e9%95%bf%e5%ad%90%e5%ad%97%e7%ac%a6%e4%b8%b2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;需要多次遍历整个哈希表的解法&#34;&gt;&#xA;  需要多次遍历整个哈希表的解法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9c%80%e8%a6%81%e5%a4%9a%e6%ac%a1%e9%81%8d%e5%8e%86%e6%95%b4%e4%b8%aa%e5%93%88%e5%b8%8c%e8%a1%a8%e7%9a%84%e8%a7%a3%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;避免多次遍历整个哈希表的解法&#34;&gt;&#xA;  避免多次遍历整个哈希表的解法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%81%bf%e5%85%8d%e5%a4%9a%e6%ac%a1%e9%81%8d%e5%8e%86%e6%95%b4%e4%b8%aa%e5%93%88%e5%b8%8c%e8%a1%a8%e7%9a%84%e8%a7%a3%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h5 id=&#34;面试题17包含所有字符的最短字符串&#34;&gt;&#xA;  面试题17：包含所有字符的最短字符串&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9817%e5%8c%85%e5%90%ab%e6%89%80%e6%9c%89%e5%ad%97%e7%ac%a6%e7%9a%84%e6%9c%80%e7%9f%ad%e5%ad%97%e7%ac%a6%e4%b8%b2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;33-回文字符串&#34;&gt;&#xA;  3.3 回文字符串&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#33-%e5%9b%9e%e6%96%87%e5%ad%97%e7%ac%a6%e4%b8%b2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题18有效的回文&#34;&gt;&#xA;  面试题18：有效的回文&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9818%e6%9c%89%e6%95%88%e7%9a%84%e5%9b%9e%e6%96%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题19最多删除一个字符得到回文&#34;&gt;&#xA;  面试题19：最多删除一个字符得到回文&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9819%e6%9c%80%e5%a4%9a%e5%88%a0%e9%99%a4%e4%b8%80%e4%b8%aa%e5%ad%97%e7%ac%a6%e5%be%97%e5%88%b0%e5%9b%9e%e6%96%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题20回文子字符串的个数&#34;&gt;&#xA;  面试题20：回文子字符串的个数&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9820%e5%9b%9e%e6%96%87%e5%ad%90%e5%ad%97%e7%ac%a6%e4%b8%b2%e7%9a%84%e4%b8%aa%e6%95%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;34-本章小结&#34;&gt;&#xA;  3.4 本章小结&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#34-%e6%9c%ac%e7%ab%a0%e5%b0%8f%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;第4章-链表&#34;&gt;&#xA;  第4章 链表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac4%e7%ab%a0-%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;41-链表的基础知识&#34;&gt;&#xA;  4.1 链表的基础知识&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#41-%e9%93%be%e8%a1%a8%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;42-哨兵节点&#34;&gt;&#xA;  4.2 哨兵节点&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#42-%e5%93%a8%e5%85%b5%e8%8a%82%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;用哨兵节点简化链表插入操作&#34;&gt;&#xA;  用哨兵节点简化链表插入操作&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%94%a8%e5%93%a8%e5%85%b5%e8%8a%82%e7%82%b9%e7%ae%80%e5%8c%96%e9%93%be%e8%a1%a8%e6%8f%92%e5%85%a5%e6%93%8d%e4%bd%9c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;用哨兵节点简化链表删除操作&#34;&gt;&#xA;  用哨兵节点简化链表删除操作&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%94%a8%e5%93%a8%e5%85%b5%e8%8a%82%e7%82%b9%e7%ae%80%e5%8c%96%e9%93%be%e8%a1%a8%e5%88%a0%e9%99%a4%e6%93%8d%e4%bd%9c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;43-双指针&#34;&gt;&#xA;  4.3 双指针&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#43-%e5%8f%8c%e6%8c%87%e9%92%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题21删除倒数第k个节点&#34;&gt;&#xA;  面试题21：删除倒数第k个节点&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9821%e5%88%a0%e9%99%a4%e5%80%92%e6%95%b0%e7%ac%ack%e4%b8%aa%e8%8a%82%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题22链表中环的入口节点&#34;&gt;&#xA;  面试题22：链表中环的入口节点&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9822%e9%93%be%e8%a1%a8%e4%b8%ad%e7%8e%af%e7%9a%84%e5%85%a5%e5%8f%a3%e8%8a%82%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;需要知道环中节点数目的解法&#34;&gt;&#xA;  需要知道环中节点数目的解法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9c%80%e8%a6%81%e7%9f%a5%e9%81%93%e7%8e%af%e4%b8%ad%e8%8a%82%e7%82%b9%e6%95%b0%e7%9b%ae%e7%9a%84%e8%a7%a3%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;不需要知道环中节点数目的解法&#34;&gt;&#xA;  不需要知道环中节点数目的解法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%8d%e9%9c%80%e8%a6%81%e7%9f%a5%e9%81%93%e7%8e%af%e4%b8%ad%e8%8a%82%e7%82%b9%e6%95%b0%e7%9b%ae%e7%9a%84%e8%a7%a3%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h5 id=&#34;面试题23两个链表的第1个重合节点&#34;&gt;&#xA;  面试题23：两个链表的第1个重合节点&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9823%e4%b8%a4%e4%b8%aa%e9%93%be%e8%a1%a8%e7%9a%84%e7%ac%ac1%e4%b8%aa%e9%87%8d%e5%90%88%e8%8a%82%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;44-反转链表&#34;&gt;&#xA;  4.4 反转链表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#44-%e5%8f%8d%e8%bd%ac%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题24反转链表&#34;&gt;&#xA;  面试题24：反转链表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9824%e5%8f%8d%e8%bd%ac%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题25链表中的数字相加&#34;&gt;&#xA;  面试题25：链表中的数字相加&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9825%e9%93%be%e8%a1%a8%e4%b8%ad%e7%9a%84%e6%95%b0%e5%ad%97%e7%9b%b8%e5%8a%a0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题26重排链表&#34;&gt;&#xA;  面试题26：重排链表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9826%e9%87%8d%e6%8e%92%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题27回文链表&#34;&gt;&#xA;  面试题27：回文链表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9827%e5%9b%9e%e6%96%87%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;45-双向链表和循环链表&#34;&gt;&#xA;  4.5 双向链表和循环链表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#45-%e5%8f%8c%e5%90%91%e9%93%be%e8%a1%a8%e5%92%8c%e5%be%aa%e7%8e%af%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题28展平多级双向链&#34;&gt;&#xA;  面试题28：展平多级双向链&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9828%e5%b1%95%e5%b9%b3%e5%a4%9a%e7%ba%a7%e5%8f%8c%e5%90%91%e9%93%be&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题29排序的循环链表&#34;&gt;&#xA;  面试题29：排序的循环链表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9829%e6%8e%92%e5%ba%8f%e7%9a%84%e5%be%aa%e7%8e%af%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;46-本章小结&#34;&gt;&#xA;  4.6 本章小结&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#46-%e6%9c%ac%e7%ab%a0%e5%b0%8f%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;第5章-哈希表&#34;&gt;&#xA;  第5章 哈希表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac5%e7%ab%a0-%e5%93%88%e5%b8%8c%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;51-哈希表的基础知识&#34;&gt;&#xA;  5.1 哈希表的基础知识&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#51-%e5%93%88%e5%b8%8c%e8%a1%a8%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;52-哈希表的设计&#34;&gt;&#xA;  5.2 哈希表的设计&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#52-%e5%93%88%e5%b8%8c%e8%a1%a8%e7%9a%84%e8%ae%be%e8%ae%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;53-哈希表的应用&#34;&gt;&#xA;  5.3 哈希表的应用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#53-%e5%93%88%e5%b8%8c%e8%a1%a8%e7%9a%84%e5%ba%94%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;54-本章小结&#34;&gt;&#xA;  5.4 本章小结&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#54-%e6%9c%ac%e7%ab%a0%e5%b0%8f%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;第6章-栈&#34;&gt;&#xA;  第6章 栈&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac6%e7%ab%a0-%e6%a0%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;61-栈的基础知识&#34;&gt;&#xA;  6.1 栈的基础知识&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#61-%e6%a0%88%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;62-栈的应用&#34;&gt;&#xA;  6.2 栈的应用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#62-%e6%a0%88%e7%9a%84%e5%ba%94%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题36后缀表达式&#34;&gt;&#xA;  面试题36：后缀表达式&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9836%e5%90%8e%e7%bc%80%e8%a1%a8%e8%be%be%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题37小行星碰撞&#34;&gt;&#xA;  面试题37：小行星碰撞&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9837%e5%b0%8f%e8%a1%8c%e6%98%9f%e7%a2%b0%e6%92%9e&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题38每日温度&#34;&gt;&#xA;  面试题38：每日温度&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9838%e6%af%8f%e6%97%a5%e6%b8%a9%e5%ba%a6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题39直方图最大矩形面积&#34;&gt;&#xA;  面试题39：直方图最大矩形面积&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9839%e7%9b%b4%e6%96%b9%e5%9b%be%e6%9c%80%e5%a4%a7%e7%9f%a9%e5%bd%a2%e9%9d%a2%e7%a7%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;蛮力法&#34;&gt;&#xA;  蛮力法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%9b%ae%e5%8a%9b%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;分治法&#34;&gt;&#xA;  分治法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e6%b2%bb%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;单调栈法&#34;&gt;&#xA;  单调栈法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8d%95%e8%b0%83%e6%a0%88%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h5 id=&#34;面试题40矩阵中的最大矩形&#34;&gt;&#xA;  面试题40：矩阵中的最大矩形&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9840%e7%9f%a9%e9%98%b5%e4%b8%ad%e7%9a%84%e6%9c%80%e5%a4%a7%e7%9f%a9%e5%bd%a2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;63-本章小结&#34;&gt;&#xA;  6.3 本章小结&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#63-%e6%9c%ac%e7%ab%a0%e5%b0%8f%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;第7章-队列&#34;&gt;&#xA;  第7章 队列&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac7%e7%ab%a0-%e9%98%9f%e5%88%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;71-队列的基础知识&#34;&gt;&#xA;  7.1 队列的基础知识&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#71-%e9%98%9f%e5%88%97%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;72-队列的应用&#34;&gt;&#xA;  7.2 队列的应用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#72-%e9%98%9f%e5%88%97%e7%9a%84%e5%ba%94%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题41滑动窗口的平均值&#34;&gt;&#xA;  面试题41：滑动窗口的平均值&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9841%e6%bb%91%e5%8a%a8%e7%aa%97%e5%8f%a3%e7%9a%84%e5%b9%b3%e5%9d%87%e5%80%bc&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题42最近请求次数&#34;&gt;&#xA;  面试题42：最近请求次数&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9842%e6%9c%80%e8%bf%91%e8%af%b7%e6%b1%82%e6%ac%a1%e6%95%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;73-二叉树的广度优先搜索-solution0703001&#34;&gt;&#xA;  7.3 二叉树的广度优先搜索 Solution0703001&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#73-%e4%ba%8c%e5%8f%89%e6%a0%91%e7%9a%84%e5%b9%bf%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2-solution0703001&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;广度优先搜索&#34;&gt;&#xA;  广度优先搜索&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b9%bf%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bfs&lt;/span&gt;(TreeNode root){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; queue&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(root&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(root);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; result&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;()){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TreeNode node&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        result.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;面试题43在完全二叉树中添加节点&#34;&gt;&#xA;  面试题43：在完全二叉树中添加节点&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9843%e5%9c%a8%e5%ae%8c%e5%85%a8%e4%ba%8c%e5%8f%89%e6%a0%91%e4%b8%ad%e6%b7%bb%e5%8a%a0%e8%8a%82%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// CBT Complete Binary Tree&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CBTInserter&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; queue;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; TreeNode root;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CBTInserter&lt;/span&gt;(TreeNode root) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        queue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;peek&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;peek&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            TreeNode node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TreeNode parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;peek&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TreeNode node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TreeNode(v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (parent.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            parent.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            parent.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(parent.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(parent.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; parent.&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; TreeNode &lt;span style=&#34;color:#a6e22e&#34;&gt;get_root&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;面试题44二叉树中每层的最大值&#34;&gt;&#xA;  面试题44：二叉树中每层的最大值&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9844%e4%ba%8c%e5%8f%89%e6%a0%91%e4%b8%ad%e6%af%8f%e5%b1%82%e7%9a%84%e6%9c%80%e5%a4%a7%e5%80%bc&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;用一个队列实现二叉树的广度优先搜索&#34;&gt;&#xA;  用一个队列实现二叉树的广度优先搜索&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%94%a8%e4%b8%80%e4%b8%aa%e9%98%9f%e5%88%97%e5%ae%9e%e7%8e%b0%e4%ba%8c%e5%8f%89%e6%a0%91%e7%9a%84%e5%b9%bf%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;largestValues&lt;/span&gt;(TreeNode root){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; current&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; next&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; queue&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(root&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(root);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        current&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; result&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; max&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Integer.&lt;span style=&#34;color:#a6e22e&#34;&gt;MIN_VALUE&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;()){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TreeNode node&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        current&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        max&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(max.&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        next&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        next&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(current&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;0){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        result.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(max);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        max&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Integer.&lt;span style=&#34;color:#a6e22e&#34;&gt;MIN_VALUE&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        current&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        next&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h6 id=&#34;用两个队列实现二叉树的广度优先搜索&#34;&gt;&#xA;  用两个队列实现二叉树的广度优先搜索&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%94%a8%e4%b8%a4%e4%b8%aa%e9%98%9f%e5%88%97%e5%ae%9e%e7%8e%b0%e4%ba%8c%e5%8f%89%e6%a0%91%e7%9a%84%e5%b9%bf%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;largestValues&lt;/span&gt;(TreeNode root){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; queue1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; queue2&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(root&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        queue1.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(root);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; result&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; max&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(max,node.&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        queue2.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        queue2.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(queue1.&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;()){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        result.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(max);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        max&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Integer.&lt;span style=&#34;color:#a6e22e&#34;&gt;MIN_VALUE&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        queue1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;queue2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        queue2&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;面试题45二叉树最低层最左边的值&#34;&gt;&#xA;  面试题45：二叉树最低层最左边的值&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9845%e4%ba%8c%e5%8f%89%e6%a0%91%e6%9c%80%e4%bd%8e%e5%b1%82%e6%9c%80%e5%b7%a6%e8%be%b9%e7%9a%84%e5%80%bc&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findBottomLeftValue&lt;/span&gt;(TreeNode root){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; queue1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; queue2&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        queue1.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(root);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; bottomLeft&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;root.&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;()){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TreeNode node&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;queue1.&lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        queue2.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        queue2.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(queue1.&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;()){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        queue1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;queue2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        queue2&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;queue1.&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;()){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        bottomLeft&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;queue1.&lt;span style=&#34;color:#a6e22e&#34;&gt;peek&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bottomLeft;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;面试题46二叉树的右侧视图&#34;&gt;&#xA;  面试题46：二叉树的右侧视图&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9846%e4%ba%8c%e5%8f%89%e6%a0%91%e7%9a%84%e5%8f%b3%e4%be%a7%e8%a7%86%e5%9b%be&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rightSideView&lt;/span&gt;(TreeNode root){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; view&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(root&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; view;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; queue1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; queue2&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        queue1.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(root);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;queue1.&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;()){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TreeNode node&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;queue1.&lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        queue2.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        queue2.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(queue1.&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;()){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        view.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        queue1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;queue2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        queue2&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; view;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;74-本章小结&#34;&gt;&#xA;  7.4 本章小结&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#74-%e6%9c%ac%e7%ab%a0%e5%b0%8f%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;第8章-树&#34;&gt;&#xA;  第8章 树&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac8%e7%ab%a0-%e6%a0%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;81-树的基础知识&#34;&gt;&#xA;  8.1 树的基础知识&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#81-%e6%a0%91%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TreeNode&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; val;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    TreeNode left;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    TreeNode right;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    TreeNode(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;82-二叉树的深度优先搜索&#34;&gt;&#xA;  8.2 二叉树的深度优先搜索&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#82-%e4%ba%8c%e5%8f%89%e6%a0%91%e7%9a%84%e6%b7%b1%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;中序遍历&#34;&gt;&#xA;  中序遍历&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%ad%e5%ba%8f%e9%81%8d%e5%8e%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inorderTraversal&lt;/span&gt;(){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; nodes&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dfs(root,nodes);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; nodes;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt;(TreeNode root,List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; nodes){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(root&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dfs(root.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;,nodes);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        nodes.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(root.&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dfs(root.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;,nodes);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h6 id=&#34;迭代&#34;&gt;&#xA;  迭代&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%bf%ad%e4%bb%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// left -&amp;gt; current -&amp;gt; right&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inorderTraversal&lt;/span&gt;(TreeNode root){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; nodes&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; stack&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TreeNode cur&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;root;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(cur&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;||!&lt;/span&gt;stack.&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;()){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(cur&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        stack.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(cur);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cur&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;cur.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cur&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;stack.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        nodes.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(cur.&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// current node&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cur&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;cur.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; nodes;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;前序遍历&#34;&gt;&#xA;  前序遍历&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%89%8d%e5%ba%8f%e9%81%8d%e5%8e%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;preorderTraversal&lt;/span&gt;(TreeNode root){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; nodes&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dfs(root,nodes);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; nodes;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt;(TreeNode root,List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; nodes){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(root&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        nodes.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(root.&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dfs(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;,nodes);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dfs(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;,nodes);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h6 id=&#34;迭代-1&#34;&gt;&#xA;  迭代&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%bf%ad%e4%bb%a3-1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// current -&amp;gt; left -&amp;gt; right&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;preorderTraversal&lt;/span&gt;(TreeNode root){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; result&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; stack&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TreeNode cur&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;root;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(cur&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;||!&lt;/span&gt;stack.&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;()){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(cur&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        result.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(cur.&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// current node&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        stack.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(cur);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cur&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;cur.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cur&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;stack.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cur&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;cur.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;后序遍历&#34;&gt;&#xA;  后序遍历&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%90%8e%e5%ba%8f%e9%81%8d%e5%8e%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;迭代-2&#34;&gt;&#xA;  迭代&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%bf%ad%e4%bb%a3-2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;postorderTraversal&lt;/span&gt;(TreeNode root){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; result&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; stack&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TreeNode cur&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;root;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TreeNode prev&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(cur&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;||!&lt;/span&gt;stack.&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;()){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(cur&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        stack.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(cur);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cur&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;cur.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cur&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;stack.&lt;span style=&#34;color:#a6e22e&#34;&gt;peek&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(cur.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;cur.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;prev){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        stack.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        result.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(cur.&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        prev&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;cur;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cur&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;3种遍历方法小结&#34;&gt;&#xA;  3种遍历方法小结&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3%e7%a7%8d%e9%81%8d%e5%8e%86%e6%96%b9%e6%b3%95%e5%b0%8f%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题47二叉树剪枝&#34;&gt;&#xA;  面试题47：二叉树剪枝&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9847%e4%ba%8c%e5%8f%89%e6%a0%91%e5%89%aa%e6%9e%9d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; TreeNode &lt;span style=&#34;color:#a6e22e&#34;&gt;pruneTree&lt;/span&gt;(TreeNode root){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(root&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; root;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        root.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pruneTree(root.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        root.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pruneTree(root.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(root.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;root.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;root.&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;0){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; root;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;面试题48序列化和反序列化二叉树&#34;&gt;&#xA;  面试题48：序列化和反序列化二叉树&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9848%e5%ba%8f%e5%88%97%e5%8c%96%e5%92%8c%e5%8f%8d%e5%ba%8f%e5%88%97%e5%8c%96%e4%ba%8c%e5%8f%89%e6%a0%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;序列化&#34;&gt;&#xA;  序列化&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ba%8f%e5%88%97%e5%8c%96&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;serialize&lt;/span&gt;(TreeNode root){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(root&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        String leftStr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;serialize(root.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        String right&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;serialize(root.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; String.&lt;span style=&#34;color:#a6e22e&#34;&gt;valueOf&lt;/span&gt;(root.&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;leftStr&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;rightStr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h6 id=&#34;反序列化&#34;&gt;&#xA;  反序列化&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%8d%e5%ba%8f%e5%88%97%e5%8c%96&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; TreeNode &lt;span style=&#34;color:#a6e22e&#34;&gt;deserialize&lt;/span&gt;(String data){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;nodeStrs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;data.&lt;span style=&#34;color:#a6e22e&#34;&gt;split&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{0};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dfs(nodeStrs,i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; TreeNode &lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt;(String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;strs,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;i){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        String str&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;strs&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        i&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]++&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(str.&lt;span style=&#34;color:#a6e22e&#34;&gt;equals&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#&amp;#34;&lt;/span&gt;)){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TreeNode node&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TreeNode(Integer.&lt;span style=&#34;color:#a6e22e&#34;&gt;valueOf&lt;/span&gt;(str));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        node.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;dfs(strs,i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        node.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;dfs(strs,i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; node;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;面试题49从根节点到叶节点的路径数字之和&#34;&gt;&#xA;  面试题49：从根节点到叶节点的路径数字之和&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9849%e4%bb%8e%e6%a0%b9%e8%8a%82%e7%82%b9%e5%88%b0%e5%8f%b6%e8%8a%82%e7%82%b9%e7%9a%84%e8%b7%af%e5%be%84%e6%95%b0%e5%ad%97%e4%b9%8b%e5%92%8c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sumNumbers&lt;/span&gt;(TreeNode root){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dfs(root,0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt;(TreeNode root,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; path){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(root&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        path&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;10&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;root.&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(root.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;root.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; path;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dfs(root.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;,path)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;dfs(root.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;,path);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;面试题50向下的路径节点值之和&#34;&gt;&#xA;  面试题50：向下的路径节点值之和&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9850%e5%90%91%e4%b8%8b%e7%9a%84%e8%b7%af%e5%be%84%e8%8a%82%e7%82%b9%e5%80%bc%e4%b9%8b%e5%92%8c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pathSum&lt;/span&gt;(TreeNode root,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sum){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer, Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; map&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; HashMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        map.&lt;span style=&#34;color:#a6e22e&#34;&gt;put&lt;/span&gt;(0,1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dfs(root,sum,map,0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt;(TreeNode root,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sum,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer, Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; map,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; path){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(root&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        path&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;root.&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;map.&lt;span style=&#34;color:#a6e22e&#34;&gt;getOrDefault&lt;/span&gt;(path&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;sum,0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;面试题51节点值之和最大的路径&#34;&gt;&#xA;  面试题51：节点值之和最大的路径&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9851%e8%8a%82%e7%82%b9%e5%80%bc%e4%b9%8b%e5%92%8c%e6%9c%80%e5%a4%a7%e7%9a%84%e8%b7%af%e5%be%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;83-二叉搜索树&#34;&gt;&#xA;  8.3 二叉搜索树&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#83-%e4%ba%8c%e5%8f%89%e6%90%9c%e7%b4%a2%e6%a0%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题52展平二叉搜索树&#34;&gt;&#xA;  面试题52：展平二叉搜索树&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9852%e5%b1%95%e5%b9%b3%e4%ba%8c%e5%8f%89%e6%90%9c%e7%b4%a2%e6%a0%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题53二叉搜索树的下一个节点&#34;&gt;&#xA;  面试题53：二叉搜索树的下一个节点&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9853%e4%ba%8c%e5%8f%89%e6%90%9c%e7%b4%a2%e6%a0%91%e7%9a%84%e4%b8%8b%e4%b8%80%e4%b8%aa%e8%8a%82%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;时间复杂度on的解法&#34;&gt;&#xA;  时间复杂度O(n)的解法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%97%b6%e9%97%b4%e5%a4%8d%e6%9d%82%e5%ba%a6on%e7%9a%84%e8%a7%a3%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;时间复杂度oh的解法&#34;&gt;&#xA;  时间复杂度O(h)的解法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%97%b6%e9%97%b4%e5%a4%8d%e6%9d%82%e5%ba%a6oh%e7%9a%84%e8%a7%a3%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h5 id=&#34;面试题54所有大于或等于节点的值之和&#34;&gt;&#xA;  面试题54：所有大于或等于节点的值之和&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9854%e6%89%80%e6%9c%89%e5%a4%a7%e4%ba%8e%e6%88%96%e7%ad%89%e4%ba%8e%e8%8a%82%e7%82%b9%e7%9a%84%e5%80%bc%e4%b9%8b%e5%92%8c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题55二叉搜索树迭代器&#34;&gt;&#xA;  面试题55：二叉搜索树迭代器&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9855%e4%ba%8c%e5%8f%89%e6%90%9c%e7%b4%a2%e6%a0%91%e8%bf%ad%e4%bb%a3%e5%99%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题56二叉搜索树种两个节点的值之和&#34;&gt;&#xA;  面试题56：二叉搜索树种两个节点的值之和&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9856%e4%ba%8c%e5%8f%89%e6%90%9c%e7%b4%a2%e6%a0%91%e7%a7%8d%e4%b8%a4%e4%b8%aa%e8%8a%82%e7%82%b9%e7%9a%84%e5%80%bc%e4%b9%8b%e5%92%8c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;利用哈希表空间复杂度为on的解法&#34;&gt;&#xA;  利用哈希表，空间复杂度为O（n）的解法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%a9%e7%94%a8%e5%93%88%e5%b8%8c%e8%a1%a8%e7%a9%ba%e9%97%b4%e5%a4%8d%e6%9d%82%e5%ba%a6%e4%b8%baon%e7%9a%84%e8%a7%a3%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;应用双指针空间复杂度为oh的解法&#34;&gt;&#xA;  应用双指针，空间复杂度为O（h）的解法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ba%94%e7%94%a8%e5%8f%8c%e6%8c%87%e9%92%88%e7%a9%ba%e9%97%b4%e5%a4%8d%e6%9d%82%e5%ba%a6%e4%b8%baoh%e7%9a%84%e8%a7%a3%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h4 id=&#34;84-treeset和treemap的应用&#34;&gt;&#xA;  8.4 TreeSet和TreeMap的应用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#84-treeset%e5%92%8ctreemap%e7%9a%84%e5%ba%94%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题57值和下标之差都在给定的范围内&#34;&gt;&#xA;  面试题57：值和下标之差都在给定的范围内&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9857%e5%80%bc%e5%92%8c%e4%b8%8b%e6%a0%87%e4%b9%8b%e5%b7%ae%e9%83%bd%e5%9c%a8%e7%bb%99%e5%ae%9a%e7%9a%84%e8%8c%83%e5%9b%b4%e5%86%85&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;时间复杂度为onlogk的解法&#34;&gt;&#xA;  时间复杂度为O（nlogk）的解法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%97%b6%e9%97%b4%e5%a4%8d%e6%9d%82%e5%ba%a6%e4%b8%baonlogk%e7%9a%84%e8%a7%a3%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;时间复杂度为on的解法&#34;&gt;&#xA;  时间复杂度为O（n）的解法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%97%b6%e9%97%b4%e5%a4%8d%e6%9d%82%e5%ba%a6%e4%b8%baon%e7%9a%84%e8%a7%a3%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h5 id=&#34;面试题58日程表&#34;&gt;&#xA;  面试题58：日程表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9858%e6%97%a5%e7%a8%8b%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;85-本章小结&#34;&gt;&#xA;  8.5 本章小结&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#85-%e6%9c%ac%e7%ab%a0%e5%b0%8f%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;第9章-堆&#34;&gt;&#xA;  第9章 堆&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac9%e7%ab%a0-%e5%a0%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;91-堆的基础知识&#34;&gt;&#xA;  9.1 堆的基础知识&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#91-%e5%a0%86%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;92-堆的应用&#34;&gt;&#xA;  9.2 堆的应用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#92-%e5%a0%86%e7%9a%84%e5%ba%94%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;-面试题59数据流的第k大数字-jzoffer59java&#34;&gt;&#xA;  ✅ 面试题59：数据流的第k大数字 JZOffer59.java&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e9%9d%a2%e8%af%95%e9%a2%9859%e6%95%b0%e6%8d%ae%e6%b5%81%e7%9a%84%e7%ac%ack%e5%a4%a7%e6%95%b0%e5%ad%97-jzoffer59java&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-面试题60出现频率最高的k个数字-jzoffer60java&#34;&gt;&#xA;  ✅ 面试题60：出现频率最高的k个数字 JZOffer60.java&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e9%9d%a2%e8%af%95%e9%a2%9860%e5%87%ba%e7%8e%b0%e9%a2%91%e7%8e%87%e6%9c%80%e9%ab%98%e7%9a%84k%e4%b8%aa%e6%95%b0%e5%ad%97-jzoffer60java&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-面试题61和最小的k个数对-jzoffer61java&#34;&gt;&#xA;  ✅ 面试题61：和最小的k个数对 JZOffer61.java&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e9%9d%a2%e8%af%95%e9%a2%9861%e5%92%8c%e6%9c%80%e5%b0%8f%e7%9a%84k%e4%b8%aa%e6%95%b0%e5%af%b9-jzoffer61java&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;使用最大堆&#34;&gt;&#xA;  使用最大堆&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bd%bf%e7%94%a8%e6%9c%80%e5%a4%a7%e5%a0%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;使用最小堆&#34;&gt;&#xA;  使用最小堆&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bd%bf%e7%94%a8%e6%9c%80%e5%b0%8f%e5%a0%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;kSmallestPairs&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;93-本章小结&#34;&gt;&#xA;  9.3 本章小结&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#93-%e6%9c%ac%e7%ab%a0%e5%b0%8f%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;第10章-前缀树&#34;&gt;&#xA;  第10章 前缀树&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac10%e7%ab%a0-%e5%89%8d%e7%bc%80%e6%a0%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;101-前缀树的基础知识&#34;&gt;&#xA;  10.1 前缀树的基础知识&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#101-%e5%89%8d%e7%bc%80%e6%a0%91%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;-面试题62实现前缀树-jzoffer62java&#34;&gt;&#xA;  ✅ 面试题62：实现前缀树 JZOffer62.java&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e9%9d%a2%e8%af%95%e9%a2%9862%e5%ae%9e%e7%8e%b0%e5%89%8d%e7%bc%80%e6%a0%91-jzoffer62java&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;102-前缀树的应用&#34;&gt;&#xA;  10.2 前缀树的应用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#102-%e5%89%8d%e7%bc%80%e6%a0%91%e7%9a%84%e5%ba%94%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;-面试题63替换单词--jzoffer63java&#34;&gt;&#xA;  ✅ 面试题63：替换单词  JZOffer63.java&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e9%9d%a2%e8%af%95%e9%a2%9863%e6%9b%bf%e6%8d%a2%e5%8d%95%e8%af%8d--jzoffer63java&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题64神奇的字典&#34;&gt;&#xA;  面试题64：神奇的字典&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9864%e7%a5%9e%e5%a5%87%e7%9a%84%e5%ad%97%e5%85%b8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题65最短的单词编码&#34;&gt;&#xA;  面试题65：最短的单词编码&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9865%e6%9c%80%e7%9f%ad%e7%9a%84%e5%8d%95%e8%af%8d%e7%bc%96%e7%a0%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题66单词之和&#34;&gt;&#xA;  面试题66：单词之和&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9866%e5%8d%95%e8%af%8d%e4%b9%8b%e5%92%8c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题67最大的异或&#34;&gt;&#xA;  面试题67：最大的异或&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9867%e6%9c%80%e5%a4%a7%e7%9a%84%e5%bc%82%e6%88%96&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;103-本章小结&#34;&gt;&#xA;  10.3 本章小结&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#103-%e6%9c%ac%e7%ab%a0%e5%b0%8f%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;第11章-二分查找&#34;&gt;&#xA;  第11章 二分查找&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac11%e7%ab%a0-%e4%ba%8c%e5%88%86%e6%9f%a5%e6%89%be&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;111-二分查找的基础知识&#34;&gt;&#xA;  11.1 二分查找的基础知识&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#111-%e4%ba%8c%e5%88%86%e6%9f%a5%e6%89%be%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;-二分查找算法-compenruinsjzofferbinarysearchjava&#34;&gt;&#xA;  ✅ 二分查找算法 com.penruins.JZOffer.BinarySearch.java&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e4%ba%8c%e5%88%86%e6%9f%a5%e6%89%be%e7%ae%97%e6%b3%95-compenruinsjzofferbinarysearchjava&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;112-在排序数组中二分查找&#34;&gt;&#xA;  11.2 在排序数组中二分查找&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#112-%e5%9c%a8%e6%8e%92%e5%ba%8f%e6%95%b0%e7%bb%84%e4%b8%ad%e4%ba%8c%e5%88%86%e6%9f%a5%e6%89%be&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题68查找插入位置&#34;&gt;&#xA;  面试题68：查找插入位置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9868%e6%9f%a5%e6%89%be%e6%8f%92%e5%85%a5%e4%bd%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题69山峰数组的顶部&#34;&gt;&#xA;  面试题69：山峰数组的顶部&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9869%e5%b1%b1%e5%b3%b0%e6%95%b0%e7%bb%84%e7%9a%84%e9%a1%b6%e9%83%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题70排序数组中只出现一次的数字-compenruinsjzofferjzoffer70java&#34;&gt;&#xA;  面试题70：排序数组中只出现一次的数字 com.penruins.JZOffer.JZOffer70.java&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9870%e6%8e%92%e5%ba%8f%e6%95%b0%e7%bb%84%e4%b8%ad%e5%8f%aa%e5%87%ba%e7%8e%b0%e4%b8%80%e6%ac%a1%e7%9a%84%e6%95%b0%e5%ad%97-compenruinsjzofferjzoffer70java&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;singleNonDuplicate 用异或运算的方式实现&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;面试题71按权重生成随机数&#34;&gt;&#xA;  面试题71：按权重生成随机数&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9871%e6%8c%89%e6%9d%83%e9%87%8d%e7%94%9f%e6%88%90%e9%9a%8f%e6%9c%ba%e6%95%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;113-在数值范围内二分查找&#34;&gt;&#xA;  11.3 在数值范围内二分查找&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#113-%e5%9c%a8%e6%95%b0%e5%80%bc%e8%8c%83%e5%9b%b4%e5%86%85%e4%ba%8c%e5%88%86%e6%9f%a5%e6%89%be&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题72求平方根&#34;&gt;&#xA;  面试题72：求平方根&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9872%e6%b1%82%e5%b9%b3%e6%96%b9%e6%a0%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题73狒狒吃香蕉&#34;&gt;&#xA;  面试题73：狒狒吃香蕉&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9873%e7%8b%92%e7%8b%92%e5%90%83%e9%a6%99%e8%95%89&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;114-本章小结&#34;&gt;&#xA;  11.4 本章小结&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#114-%e6%9c%ac%e7%ab%a0%e5%b0%8f%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;第12章-排序&#34;&gt;&#xA;  第12章 排序&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac12%e7%ab%a0-%e6%8e%92%e5%ba%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;121-排序的基础知识&#34;&gt;&#xA;  12.1 排序的基础知识&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#121-%e6%8e%92%e5%ba%8f%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题74合并区间&#34;&gt;&#xA;  面试题74：合并区间&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9874%e5%90%88%e5%b9%b6%e5%8c%ba%e9%97%b4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;122-计数排序&#34;&gt;&#xA;  12.2 计数排序&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#122-%e8%ae%a1%e6%95%b0%e6%8e%92%e5%ba%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题75数组相对排序&#34;&gt;&#xA;  面试题75：数组相对排序&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9875%e6%95%b0%e7%bb%84%e7%9b%b8%e5%af%b9%e6%8e%92%e5%ba%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;123-快速排序&#34;&gt;&#xA;  12.3 快速排序&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#123-%e5%bf%ab%e9%80%9f%e6%8e%92%e5%ba%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;快速排序算法-compenruinsjzofferquicksort&#34;&gt;&#xA;  快速排序算法 com.penruins.JZOffer.QuickSort&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bf%ab%e9%80%9f%e6%8e%92%e5%ba%8f%e7%ae%97%e6%b3%95-compenruinsjzofferquicksort&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题76数组中第k大的数字&#34;&gt;&#xA;  面试题76：数组中第k大的数字&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9876%e6%95%b0%e7%bb%84%e4%b8%ad%e7%ac%ack%e5%a4%a7%e7%9a%84%e6%95%b0%e5%ad%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;124-归并排序&#34;&gt;&#xA;  12.4 归并排序&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#124-%e5%bd%92%e5%b9%b6%e6%8e%92%e5%ba%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题77链表排序&#34;&gt;&#xA;  面试题77：链表排序&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9877%e9%93%be%e8%a1%a8%e6%8e%92%e5%ba%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题78合并排序链表&#34;&gt;&#xA;  面试题78：合并排序链表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9878%e5%90%88%e5%b9%b6%e6%8e%92%e5%ba%8f%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;利用最小堆选取值最小的节点&#34;&gt;&#xA;  利用最小堆选取值最小的节点&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%a9%e7%94%a8%e6%9c%80%e5%b0%8f%e5%a0%86%e9%80%89%e5%8f%96%e5%80%bc%e6%9c%80%e5%b0%8f%e7%9a%84%e8%8a%82%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;按照归并排序的思路合并链表&#34;&gt;&#xA;  按照归并排序的思路合并链表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8c%89%e7%85%a7%e5%bd%92%e5%b9%b6%e6%8e%92%e5%ba%8f%e7%9a%84%e6%80%9d%e8%b7%af%e5%90%88%e5%b9%b6%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h4 id=&#34;125-本章小结&#34;&gt;&#xA;  12.5 本章小结&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#125-%e6%9c%ac%e7%ab%a0%e5%b0%8f%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;第13章-回溯法&#34;&gt;&#xA;  第13章 回溯法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac13%e7%ab%a0-%e5%9b%9e%e6%ba%af%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;131-回溯法的基础知识&#34;&gt;&#xA;  13.1 回溯法的基础知识&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#131-%e5%9b%9e%e6%ba%af%e6%b3%95%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;132-集合的组合排列&#34;&gt;&#xA;  13.2 集合的组合、排列&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#132-%e9%9b%86%e5%90%88%e7%9a%84%e7%bb%84%e5%90%88%e6%8e%92%e5%88%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;133-回溯法解决其他类型问题&#34;&gt;&#xA;  13.3 回溯法解决其他类型问题&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#133-%e5%9b%9e%e6%ba%af%e6%b3%95%e8%a7%a3%e5%86%b3%e5%85%b6%e4%bb%96%e7%b1%bb%e5%9e%8b%e9%97%ae%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;134-本章小结&#34;&gt;&#xA;  13.4 本章小结&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#134-%e6%9c%ac%e7%ab%a0%e5%b0%8f%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;第14章-动态规划&#34;&gt;&#xA;  第14章 动态规划&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac14%e7%ab%a0-%e5%8a%a8%e6%80%81%e8%a7%84%e5%88%92&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;141-动态规划的基础知识&#34;&gt;&#xA;  14.1 动态规划的基础知识&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#141-%e5%8a%a8%e6%80%81%e8%a7%84%e5%88%92%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;142-单序列问题&#34;&gt;&#xA;  14.2 单序列问题&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#142-%e5%8d%95%e5%ba%8f%e5%88%97%e9%97%ae%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;143-双序列问题&#34;&gt;&#xA;  14.3 双序列问题&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#143-%e5%8f%8c%e5%ba%8f%e5%88%97%e9%97%ae%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;144-矩阵路径问题&#34;&gt;&#xA;  14.4 矩阵路径问题&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#144-%e7%9f%a9%e9%98%b5%e8%b7%af%e5%be%84%e9%97%ae%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题98路径的数目&#34;&gt;&#xA;  面试题98：路径的数目&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9898%e8%b7%af%e5%be%84%e7%9a%84%e6%95%b0%e7%9b%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;分析确定状态转移方程&#34;&gt;&#xA;  分析确定状态转移方程&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e6%9e%90%e7%a1%ae%e5%ae%9a%e7%8a%b6%e6%80%81%e8%bd%ac%e7%a7%bb%e6%96%b9%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;根据状态转移方程写递归代码&#34;&gt;&#xA;  根据状态转移方程写递归代码&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%b9%e6%8d%ae%e7%8a%b6%e6%80%81%e8%bd%ac%e7%a7%bb%e6%96%b9%e7%a8%8b%e5%86%99%e9%80%92%e5%bd%92%e4%bb%a3%e7%a0%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;递归代码&#34;&gt;&#xA;  递归代码&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%80%92%e5%bd%92%e4%bb%a3%e7%a0%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;优化空间效率&#34;&gt;&#xA;  优化空间效率&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bc%98%e5%8c%96%e7%a9%ba%e9%97%b4%e6%95%88%e7%8e%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h5 id=&#34;面试题99最小路径之和&#34;&gt;&#xA;  面试题99：最小路径之和&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9899%e6%9c%80%e5%b0%8f%e8%b7%af%e5%be%84%e4%b9%8b%e5%92%8c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题100三角形中最小路径之和&#34;&gt;&#xA;  面试题100：三角形中最小路径之和&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%98100%e4%b8%89%e8%a7%92%e5%bd%a2%e4%b8%ad%e6%9c%80%e5%b0%8f%e8%b7%af%e5%be%84%e4%b9%8b%e5%92%8c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;145-背包问题&#34;&gt;&#xA;  14.5 背包问题&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#145-%e8%83%8c%e5%8c%85%e9%97%ae%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;0-1 背包问题&lt;/li&gt;&#xA;&lt;li&gt;多重背包问题&lt;/li&gt;&#xA;&lt;li&gt;完全背包问题&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;面试题101分割等和子集&#34;&gt;&#xA;  面试题101：分割等和子集&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%98101%e5%88%86%e5%89%b2%e7%ad%89%e5%92%8c%e5%ad%90%e9%9b%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;分析确定状态转移方程-1&#34;&gt;&#xA;  分析确定状态转移方程&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e6%9e%90%e7%a1%ae%e5%ae%9a%e7%8a%b6%e6%80%81%e8%bd%ac%e7%a7%bb%e6%96%b9%e7%a8%8b-1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;根据状态转移方程写递归代码-1&#34;&gt;&#xA;  根据状态转移方程写递归代码&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%b9%e6%8d%ae%e7%8a%b6%e6%80%81%e8%bd%ac%e7%a7%bb%e6%96%b9%e7%a8%8b%e5%86%99%e9%80%92%e5%bd%92%e4%bb%a3%e7%a0%81-1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;根据状态转移方程写迭代代码&#34;&gt;&#xA;  根据状态转移方程写迭代代码&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%b9%e6%8d%ae%e7%8a%b6%e6%80%81%e8%bd%ac%e7%a7%bb%e6%96%b9%e7%a8%8b%e5%86%99%e8%bf%ad%e4%bb%a3%e4%bb%a3%e7%a0%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;优化空间效率-1&#34;&gt;&#xA;  优化空间效率&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bc%98%e5%8c%96%e7%a9%ba%e9%97%b4%e6%95%88%e7%8e%87-1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h5 id=&#34;面试题102加减的目标值&#34;&gt;&#xA;  面试题102：加减的目标值&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%98102%e5%8a%a0%e5%87%8f%e7%9a%84%e7%9b%ae%e6%a0%87%e5%80%bc&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题103最小的硬币数目&#34;&gt;&#xA;  面试题103：最小的硬币数目&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%98103%e6%9c%80%e5%b0%8f%e7%9a%84%e7%a1%ac%e5%b8%81%e6%95%b0%e7%9b%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;分析确定状态转移方程-2&#34;&gt;&#xA;  分析确定状态转移方程&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e6%9e%90%e7%a1%ae%e5%ae%9a%e7%8a%b6%e6%80%81%e8%bd%ac%e7%a7%bb%e6%96%b9%e7%a8%8b-2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;根据状态转移方程写代码&#34;&gt;&#xA;  根据状态转移方程写代码&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%b9%e6%8d%ae%e7%8a%b6%e6%80%81%e8%bd%ac%e7%a7%bb%e6%96%b9%e7%a8%8b%e5%86%99%e4%bb%a3%e7%a0%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;另一种思路&#34;&gt;&#xA;  另一种思路&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%a6%e4%b8%80%e7%a7%8d%e6%80%9d%e8%b7%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h5 id=&#34;面试题104排列的数目&#34;&gt;&#xA;  面试题104：排列的数目&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%98104%e6%8e%92%e5%88%97%e7%9a%84%e6%95%b0%e7%9b%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int[] nums = new int[1 2 3];&#xA;i = 3;&#xA;f(i) = f(i - nums[0]) + f(i - nums[1]) + f(i - nums[2]);&#xA;f(0) = 1;&#xA;f(1) = f(0) + f(-1) + f(-2) = 1;&#xA;f(2) = f(1) + f(0) + f(-1) = 2;&#xA;f(3) = f(2) + f(1) + f(0) = 4;&#xA;f(2) {1,1} {2}&#xA;f(1) {1}&#xA;f(0) {}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;146-本章小结&#34;&gt;&#xA;  14.6 本章小结&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#146-%e6%9c%ac%e7%ab%a0%e5%b0%8f%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;第15章-图-305&#34;&gt;&#xA;  第15章 图 305&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac15%e7%ab%a0-%e5%9b%be-305&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;151-图的基础知识-305&#34;&gt;&#xA;  15.1 图的基础知识 305&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#151-%e5%9b%be%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86-305&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;152-图的搜索-307&#34;&gt;&#xA;  15.2 图的搜索 307&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#152-%e5%9b%be%e7%9a%84%e6%90%9c%e7%b4%a2-307&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;153-拓扑排序-333&#34;&gt;&#xA;  15.3 拓扑排序 333&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#153-%e6%8b%93%e6%89%91%e6%8e%92%e5%ba%8f-333&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;154-并查集-342&#34;&gt;&#xA;  15.4 并查集 342&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#154-%e5%b9%b6%e6%9f%a5%e9%9b%86-342&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;155-本章小结-354&#34;&gt;&#xA;  15.5 本章小结 354&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#155-%e6%9c%ac%e7%ab%a0%e5%b0%8f%e7%bb%93-354&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;</description>
    </item>
    <item>
      <title>Algorithm</title>
      <link>/post/computer-science/algorithm/algorithm/</link>
      <pubDate>Thu, 14 Nov 2024 08:59:49 +0800</pubDate>
      <guid>/post/computer-science/algorithm/algorithm/</guid>
      <description>&lt;h1 id=&#34;algorithm&#34;&gt;&#xA;  Algorithm&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#algorithm&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.programmercarl.com/&#34;&gt;代码随想录&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;tips&#34;&gt;&#xA;  Tips&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#tips&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;如果我要创建一个列表并且需要一直在列表的开头插入元素我要怎么实现代码保证效率&#34;&gt;&#xA;  如果我要创建一个列表，并且需要一直在列表的开头插入元素，我要怎么实现代码保证效率&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%a6%82%e6%9e%9c%e6%88%91%e8%a6%81%e5%88%9b%e5%bb%ba%e4%b8%80%e4%b8%aa%e5%88%97%e8%a1%a8%e5%b9%b6%e4%b8%94%e9%9c%80%e8%a6%81%e4%b8%80%e7%9b%b4%e5%9c%a8%e5%88%97%e8%a1%a8%e7%9a%84%e5%bc%80%e5%a4%b4%e6%8f%92%e5%85%a5%e5%85%83%e7%b4%a0%e6%88%91%e8%a6%81%e6%80%8e%e4%b9%88%e5%ae%9e%e7%8e%b0%e4%bb%a3%e7%a0%81%e4%bf%9d%e8%af%81%e6%95%88%e7%8e%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;在 Java 中，如果你需要频繁在列表的开头插入元素，使用 &lt;code&gt;LinkedList&lt;/code&gt; 会比 &lt;code&gt;ArrayList&lt;/code&gt; 更高效。因为 &lt;code&gt;LinkedList&lt;/code&gt; 在列表开头插入元素的时间复杂度是 O(1)，而 &lt;code&gt;ArrayList&lt;/code&gt; 在开头插入元素的时间复杂度是 O(n)，需要移动所有元素。&lt;/p&gt;&#xA;&lt;p&gt;使用 &lt;code&gt;LinkedList&lt;/code&gt; 的示例代码：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.util.LinkedList;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.util.List;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Main&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 创建一个 LinkedList&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 在列表开头插入元素&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        list.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(0, 1);  &lt;span style=&#34;color:#75715e&#34;&gt;// 插入元素 1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        list.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(0, 2);  &lt;span style=&#34;color:#75715e&#34;&gt;// 插入元素 2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        list.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(0, 3);  &lt;span style=&#34;color:#75715e&#34;&gt;// 插入元素 3&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 输出列表&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(list);  &lt;span style=&#34;color:#75715e&#34;&gt;// 输出: [3, 2, 1]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为什么 &lt;code&gt;LinkedList&lt;/code&gt; 更高效？&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
