<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Penruins</title>
    <link>/post/computer-science/</link>
    <description>Recent content on Penruins</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="/post/computer-science/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>computer science</title>
      <link>/post/computer-science/computer-science/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/computer-science/</guid>
      <description>&lt;h1 id=&#34;computer-science&#34;&gt;&#xA;  computer science&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#computer-science&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;main&#34;&gt;&#xA;  main&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#main&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;github&#34;&gt;&#xA;  github&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#github&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618&#34;&gt;&lt;strong&gt;yihong0618&lt;/strong&gt;&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/Kindle_download_helper&#34;&gt;Kindle_download_helper&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/198&#34;&gt;巧妙利用 iOS 的快捷指令配合 GitHub Actions 实现自动化&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.kawabangga.com/posts/4117&#34;&gt;玩了一下 Github 个人首页的 Profile （使用 Action 自动更新）&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog&#34;&gt;yihong0618/gitblog&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.ruanyifeng.com/blog/&#34;&gt;&lt;strong&gt;阮一峰的网络日志&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/theniceboy&#34;&gt;theniceboy&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;bilibili theCW&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/Ovilia&#34;&gt;Ovilia&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/SigureMo&#34;&gt;SigureMo&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/yutto-dev/bilili&#34;&gt;bilili&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/yutto-dev/yutto&#34;&gt;yutto&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;nacos&#34;&gt;&#xA;  nacos&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#nacos&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://nacos.io/zh-cn/docs/what-is-nacos.html&#34;&gt;nacos 官方文档&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;配置更新监听&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://juejin.cn/post/7198073902882177082&#34;&gt;Spring中动态监听Nacos配置更新&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;依赖里面没有 &lt;code&gt;NacosConfigManager&lt;/code&gt; 这个类，是因为必须使用 &lt;code&gt;spring cloud alibaba&lt;/code&gt; ?&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://nacos.io/docs/v2/ecology/use-nacos-with-spring/?spm=5238cd80.723fb8c7.0.0.738c73c6cZGRyq&#34;&gt;Nacos 融合 Spring，成为注册配置中心&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://nacos.io/docs/latest/ecology/use-nacos-with-spring-cloud/?spm=5238cd80.1f77ca18.0.0.4d31e37evrX5Qy&#34;&gt;Nacos 融合 Spring Cloud，成为注册配置中心&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;这个是最新的文档&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://nacos.io/docs/v2/ecology/use-nacos-with-spring/?spm=5238cd80.5e8a737d.0.0.47517e84j4hrrA&#34;&gt;2.x 的文档&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://nacos.io/docs/v2/ecology/use-nacos-with-spring/?spm=5238cd80.5e8a737d.0.0.47517e84j4hrrA#4-%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8&#34;&gt;事件驱动&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;最后配置变更是通过 spring 的框架的事件监听来实现的&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@Autowired&#xA;private Environment environment;&#xA;&#xA;@EventListener&#xA;public void handleEnvironmentChange(EnvironmentChangeEvent event) {&#xA;    // TODO&#xA;    String key = event.getKeys().get(xxxx);&#xA;    String value = environment.getProperty(key)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;博客搭建&#34;&gt;&#xA;  博客搭建&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8d%9a%e5%ae%a2%e6%90%ad%e5%bb%ba&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Built with &lt;code&gt;Sphinx&lt;/code&gt; using a &lt;code&gt;theme&lt;/code&gt; provided by &lt;code&gt;Read the Docs&lt;/code&gt;.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.sphinx-doc.org/en/master/&#34;&gt;e.g.&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>推荐</title>
      <link>/post/computer-science/computer-science-recommend/</link>
      <pubDate>Thu, 14 Nov 2024 08:59:49 +0800</pubDate>
      <guid>/post/computer-science/computer-science-recommend/</guid>
      <description>&lt;h1 id=&#34;推荐&#34;&gt;&#xA;  推荐&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8e%a8%e8%8d%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com&#34;&gt;github&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/alex-shpak/hugo-book&#34;&gt;alex-shpak/hugo-book&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;这个博客就是用这个项目搭建的&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://news.ycombinator.com&#34;&gt;hacker news&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;有很多关于计算机相关的文章，每天都会更新&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;资源下载相关&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/pingf/annie&#34;&gt;pingf/annie&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;可以用来下载B站视频&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/yt-dlp/yt-dlp&#34;&gt;yt-dlp/yt-dlp&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;下载 youtube 视频&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/yutto-dev/bilili&#34;&gt;yutto-dev/bilili&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;下载 bilibili 视频(项目已经归档不再维护,目前还能用，可以使用yutto)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/yutto-dev/yutto&#34;&gt;yutto-dev/yutto&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://notes.kamacoder.com/home/&#34;&gt;卡码笔记&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;代码随想录的网站，里面整理了一些计算机相关的知识点（非算法相关）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/cdk8s-zelda/IntelliJ-IDEA-Tutorial?tab=readme-ov-file&#34;&gt;cdk8s-zelda/IntelliJ-IDEA-Tutorial&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;介绍一些 idea 的使用技巧的&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://segmentfault.com/blogs&#34;&gt;segment fault&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/cdk8s/cdk8s-team-style&#34;&gt;cdk8s/cdk8s-team-style&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/cdk8s/cdk8s-team-style/blob/master/full-stack/4-backend.md&#34;&gt;【从开公司到开发全平台产品】4.后端开发的思考、实践-UPUPMO&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/cdk8s/cdk8s-team-style/blob/master/full-stack/3-architecture.md&#34;&gt;【从开公司到开发全平台产品】3.软件开发设计阶段的思考、实践-UPUPMO&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;blog&#34;&gt;&#xA;  blog&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#blog&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/&#34;&gt;阮一峰的网络日志&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.yinwang.org&#34;&gt;王垠&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;github&#34;&gt;&#xA;  github&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#github&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618&#34;&gt;yihong0618&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;large-language-modelllm&#34;&gt;&#xA;  Large Language Model(LLM)&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#large-language-modelllm&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://tongyi.aliyun.com/qianwen/&#34;&gt;通义千问&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;algorithms&#34;&gt;&#xA;  Algorithms&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#algorithms&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/TheAlgorithms/Java?tab=readme-ov-file&#34;&gt;TheAlgorithms/Java&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>学习记录</title>
      <link>/post/computer-science/computer-science-learning-log/</link>
      <pubDate>Thu, 14 Nov 2024 08:59:49 +0800</pubDate>
      <guid>/post/computer-science/computer-science-learning-log/</guid>
      <description>&lt;h1 id=&#34;学习记录&#34;&gt;&#xA;  学习记录&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ad%a6%e4%b9%a0%e8%ae%b0%e5%bd%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;2025-03-30-sunday&#34;&gt;&#xA;  2025-03-30 Sunday&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2025-03-30-sunday&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../llm/2025-03-30-1-%e5%88%86%e5%8c%ba%e8%a1%a8%e7%9a%84%e7%b4%a2%e5%bc%95%e5%a6%82%e4%bd%95%e5%88%9b%e5%bb%ba-%e8%af%b7%e4%bb%a5postgresql%e4%b8%be%e4%be%8b&#34;&gt;分区表的索引如何创建, 请以postgresql举例&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../llm/2025-03-30-2-postgresql%e4%b8%ad%e5%88%86%e5%8c%ba%e9%94%ae%e4%bc%9a%e8%87%aa%e5%8a%a8%e5%88%9b%e5%bb%ba%e7%b4%a2%e5%bc%95%e5%90%97&#34;&gt;postgresql中分区键会自动创建索引吗&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../llm/2025-03-30-3-kafka%e5%a6%82%e4%bd%95%e5%ae%9e%e7%8e%b0%e9%ab%98%e5%90%9e%e5%90%90%e9%87%8f&#34;&gt;kafka如何实现高吞吐量&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../llm/2025-03-30-4-%e4%b8%8d%e5%90%8c%e6%b6%88%e6%81%af%e9%98%9f%e5%88%97%e6%b6%88%e6%81%af%e5%86%99%e5%85%a5%e6%96%b9%e5%bc%8f%e5%af%b9%e6%af%94&#34;&gt;不同消息队列消息写入方式对比&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../llm/2025-03-30-5-kafka%e5%a6%82%e4%bd%95%e4%bf%9d%e9%9a%9c%e9%a1%ba%e5%ba%8f%e6%b6%88%e8%b4%b9&#34;&gt;kafka如何保障顺序消费&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../llm/2025-03-30-6-Kafka%e7%9a%84%e9%a1%ba%e5%ba%8f%e6%b6%88%e8%b4%b9%e8%83%bd%e5%8a%9b%e4%b8%8e%e5%85%b6%e4%bb%96%e6%b6%88%e6%81%af%e9%98%9f%e5%88%97%e7%b3%bb%e7%bb%9f%e7%9b%b8%e6%af%94%e6%9c%89%e4%bd%95%e4%bc%98%e5%8a%bf&#34;&gt;Kafka的顺序消费能力与其他消息队列系统相比有何优势&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../llm/2025-03-30-7-kafka%e4%b8%80%e4%b8%aa%e5%88%86%e5%8c%ba%e6%9c%89%e5%a4%9a%e4%b8%aa%e6%b6%88%e8%b4%b9%e8%80%85%e6%b6%88%e8%b4%b9%e9%a1%ba%e5%ba%8f%e6%98%af%e6%80%8e%e6%a0%b7%e7%9a%84&#34;&gt;kafka一个分区有多个消费者消费顺序是怎样的&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../llm/2025-03-30-8-kafka%e5%8f%91%e9%80%81%e5%a4%b1%e8%b4%a5%e5%a6%82%e4%bd%95%e5%a4%84%e7%90%86&#34;&gt;kafka发送失败如何处理&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../llm/2025-03-30-9-Kafka%e7%aa%81%e7%84%b6%e5%ae%95%e6%9c%ba%e4%ba%86%e6%b6%88%e6%81%af%e4%bc%9a%e4%b8%8d%e4%bc%9a%e4%b8%a2%e5%a4%b1&#34;&gt;Kafka突然宕机了消息会不会丢失&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2025-01-17&#34;&gt;&#xA;  2025-01-17&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2025-01-17&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;剑指offer-book&#34;&gt;&#xA;  剑指Offer Book&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%89%91%e6%8c%87offer-book&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/25910559/&#34;&gt;剑指Offer&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;第1章-面试的流程-1&#34;&gt;&#xA;  第1章 面试的流程 1&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac1%e7%ab%a0-%e9%9d%a2%e8%af%95%e7%9a%84%e6%b5%81%e7%a8%8b-1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1.1 面试官谈面试 1&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1.2 面试的三种形式 2&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1.2.1 电话面试 2&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1.2.2 共享桌面远程面试 3&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1.2.3 现场面试 4&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1.3 面试的三个环节 5&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1.3.1 行为面试环节 5&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 应聘者的项目经验 6&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 应聘者掌握的技能 7&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 回答“为什么跳槽” 8&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1.3.2 技术面试环节 10&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 扎实的基础知识 10&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 高质量的代码 11&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 清晰的思路 14&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 优化效率的能力 15&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 优秀的综合能力 16&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1.3.3 应聘者提问环节 17&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1.4 本章小结 18&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;第2章-面试需要的基础知识-20&#34;&gt;&#xA;  第2章 面试需要的基础知识 20&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac2%e7%ab%a0-%e9%9d%a2%e8%af%95%e9%9c%80%e8%a6%81%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86-20&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;2.1 面试官谈基础知识 20&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2.2 编程语言 22&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2.2.1 C++ 22&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题1：赋值运算符函数 24&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 经典的解法，适用于初级程序员 25&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 考虑异常安全性的解法，高级程序员必备 26&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2.2.2 C# 27&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题2：实现Singleton模式 31&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 不好的解法一：只适用于单线程 31&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 不好的解法二：可用于多线程但效率不高 32&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 可行的解法：同步锁前后两次判断 33&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 推荐的解法一：利用静态构造函数 34&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 推荐的解法二：按需创建实例 34&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 解法比较 35&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2.3 数据结构 36&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2.3.1 数组 36&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题3：二维数组中的查找 38&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2.3.2 字符串 42&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题4：替换空格 44&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; O(n2)的解法，不足以拿到Offer 45&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; O(n)的解法，搞定Offer就靠它 46&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2.3.3 链表 49&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题5：从尾到头打印链表 51&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2.3.4 树 53&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题6：重建二叉树 55&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2.3.5 栈和队列 58&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题7：用两个栈实现队列 59&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2.4 算法和数据操作 62&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2.4.1 查找和排序 63&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题8：旋转数组的最小数字 66&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2.4.2 递归和循环 71&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题9：斐波那契数列 73&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 效率很低的解法，面试官不会喜欢 73&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试官期待的实用解法 74&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; O(logn)但不够实用的解法 74&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 解法比较 75&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2.4.3 位运算 77&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题10：二进制中1的个数 78&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 可能引起死循环的解法 79&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 常规解法 79&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 能给面试官带来惊喜的解法 80&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2.5 本章小结 82&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;第3章-高质量的代码-84&#34;&gt;&#xA;  第3章 高质量的代码 84&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac3%e7%ab%a0-%e9%ab%98%e8%b4%a8%e9%87%8f%e7%9a%84%e4%bb%a3%e7%a0%81-84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 3.1 面试官谈代码质量 84&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 3.2 代码的规范性 86&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 3.3 代码的完整性 87&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 从3方面确保代码的完整性 87&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 3种错误处理的方法 88&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题11：数值的整数次方 90&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 自以为题目简单的解法 90&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 全面但不够高效的解法，离Offer已经很近了 90&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 全面又高效的解法，确保能拿到Offer 92&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题12：打印1到最大的n位数 94&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 跳进面试官陷阱 94&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 在字符串上模拟数字加法 94&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 把问题转换成数字排列 97&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题13：在O(1)时间删除链表结点 99&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题14：调整数组顺序使奇数位于偶数前面 102&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 只完成基本功能的解法，仅适用于初级程序员 102&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 考虑可扩展性的解法，能秒杀Offer 104&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 3.4 代码的鲁棒性 106&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题15：链表中倒数第k个结点 107&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题16：反转链表 112&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题17：合并两个排序的链表 114&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题18：树的子结构 117&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 3.5 本章小结 121&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;第4章-解决面试题的思路-123&#34;&gt;&#xA;  第4章 解决面试题的思路 123&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac4%e7%ab%a0-%e8%a7%a3%e5%86%b3%e9%9d%a2%e8%af%95%e9%a2%98%e7%9a%84%e6%80%9d%e8%b7%af-123&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 4.1 面试官谈面试思路 123&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题19：二叉树的镜像 125&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 4.2 画图让抽象问题形象化 125&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题20：顺时针打印矩阵 127&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 4.3 举例让抽象问题具体化 131&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题21：包含min函数的栈 132&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题22：栈的压入、弹出序列 134&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题23：从上往下打印二叉树 137&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题24：二叉搜索树的后序遍历序列 140&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题25：二叉树中和为某一值的路径 143&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 4.4 分解让复杂问题简单化 146&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题26：复杂链表的复制 147&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题27：二叉搜索树与双向链表 151&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题28：字符串的排列 154&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 4.5 本章小结 158&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;第5章-优化时间和空间效率-160&#34;&gt;&#xA;  第5章 优化时间和空间效率 160&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac5%e7%ab%a0-%e4%bc%98%e5%8c%96%e6%97%b6%e9%97%b4%e5%92%8c%e7%a9%ba%e9%97%b4%e6%95%88%e7%8e%87-160&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 5.1 面试官谈效率 160&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 5.2 时间效率 162&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题29：数组中出现次数超过一半的数字 163&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 基于Partition函数的O(n)算法 163&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 利用数组特点的O(n)算法 165&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 解法比较 166&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题30：最小的k个数 167&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; O(n)的算法，只当可以修改输入数组时可用 167&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; O(nlogk)的算法，适合处理海量数据 168&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 解法比较 169&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题31：连续子数组的最大和 171&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 举例分析数组的规律 171&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 应用动态规划法 173&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题32：从1到n整数中1出现的次数 174&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 不考虑效率的解法，想拿Offer有点难 174&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 明显提高效率的解法，让面试官耳目一新 175&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题33：把数组排成最小的数 177&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 5.3 时间效率与空间效率的平衡 181&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题34：丑数 182&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 逐个判断整数是不是丑数的解法 182&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 创建数组保存已经找到的丑数的解法 183&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题35：第一个只出现一次的字符 186&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题36：数组中的逆序对 189&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题37：两个链表的第一个公共结点 193&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 5.4 本章小结 196&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;第6章-面试中的各项能力-198&#34;&gt;&#xA;  第6章 面试中的各项能力 198&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac6%e7%ab%a0-%e9%9d%a2%e8%af%95%e4%b8%ad%e7%9a%84%e5%90%84%e9%a1%b9%e8%83%bd%e5%8a%9b-198&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 6.1 面试官谈能力 198&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 6.2 沟通能力和学习能力 200&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 沟通能力 200&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 学习能力 200&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 善于学习、沟通的人也善于提问 201&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 6.3 知识迁移能力 203&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题38：数字在排序数组中出现的次数 204&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题39：二叉树的深度 207&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 重复遍历结点的解法，不足以打动面试官 209&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 只遍历结点一次的解法，正是面试官喜欢的 209&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题40：数组中只出现一次的数字 211&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题41：和为s的两个数字VS和为s的连续正数序列 214&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题42：翻转单词顺序 VS左旋转字符串 218&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 6.4 抽象建模能力 222&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题43：n个骰子的点数 223&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 基于递归求骰子点数，时间效率不够高 223&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 基于循环求骰子点数，时间性能好 224&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题44：扑克牌的顺子 226&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题45：圆圈中最后剩下的数字 228&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 经典的解法，用循环链表模拟圆圈 229&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 创新的解法，拿到Offer不在话下 230&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 6.5 发散思维能力 232&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题46：求1+2+…+n 233&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 利用构造函数求解 234&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 利用虚函数求解 234&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 利用函数指针求解 235&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 利用模板类型求解 236&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题47：不用加减乘除做加法 237&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题48：不能被继承的类 239&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 常规的解法：把构造函数设为私有函数 239&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 新奇的解法：利用虚拟继承 240&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 6.6 本章小结 241&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;第7章-两个面试案例-243&#34;&gt;&#xA;  第7章 两个面试案例 243&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac7%e7%ab%a0-%e4%b8%a4%e4%b8%aa%e9%9d%a2%e8%af%95%e6%a1%88%e4%be%8b-243&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 7.1 案例一：（面试题49）把字符串转换成整数 244&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 7.2 案例二：（面试题50）树中两个结点的最低公共祖先 252&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;第8章-英文版新增面试题-261&#34;&gt;&#xA;  第8章 英文版新增面试题 261&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac8%e7%ab%a0-%e8%8b%b1%e6%96%87%e7%89%88%e6%96%b0%e5%a2%9e%e9%9d%a2%e8%af%95%e9%a2%98-261&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 8.1 数组 261&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题51：数组中重复的数字 261&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题52：构建乘积数组 263&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 8.2 字符串 265&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题53：正则表达式匹配 265&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题54：表示数值的字符串 267&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题55：字符流中第一个不重复的字符 269&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 8.3 链表 270&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题56：链表中环的入口结点 270&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题57：删除链表中重复的结点 273&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 8.4 树 275&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题58：二叉树的下一个结点 275&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题59：对称的二叉树 277&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题60：把二叉树打印成多行 278&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题61：按之字形顺序打印二叉树 280&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题62：序列化二叉树 283&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题63：二叉搜索树的第k个结点 285&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题64：数据流中的中位数 286&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 8.5 栈和队列 290&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题65：滑动窗口的最大值 290&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 8.6 回溯法 294&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题66：矩阵中的路径 294&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题67：机器人的运动范围 296&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2025-01-11&#34;&gt;&#xA;  2025-01-11&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2025-01-11&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;leetcode-刷题&#34;&gt;&#xA;  leetcode 刷题&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#leetcode-%e5%88%b7%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;面试经典150题&#34;&gt;&#xA;  面试经典150题&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e7%bb%8f%e5%85%b8150%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.cn/studyplan/top-interview-150/&#34;&gt;面试经典150题&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;数组字符串&#34;&gt;&#xA;  数组/字符串&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e7%bb%84%e5%ad%97%e7%ac%a6%e4%b8%b2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/merge-sorted-array/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;合并两个有序数组&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution88.java&#34;&gt;2025-01-12&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/remove-element/submissions/592471220/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;移除元素&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2025-01-11&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 删除有序数组中的重复项&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2025-01-11 没有做出来，看的官方题解&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution26.java&#34;&gt;2025-01-11&lt;/a&gt; 做完&lt;code&gt;删除有序数组中的重复项 II&lt;/code&gt;之后再尝试重新解题完成&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 删除有序数组中的重复项 II&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution80.java&#34;&gt;2025-01-11&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/majority-element/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;多数元素&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution169.java&#34;&gt;2025-01-12&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/rotate-array/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;轮转数组&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution189.java&#34;&gt;2025-01-18&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;进阶&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 尽可能想出更多的解决方案，至少有 三种 不同的方法可以解决这个问题。&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 你可以使用空间复杂度为 O(1) 的 原地 算法解决这个问题吗？&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;买卖股票的最佳时机&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2025-01-11 看官方题解做出来的&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2025-01-17 review&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;买卖股票的最佳时机 II&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 官方题解 理解&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2025-01-17 方法一：动态规划&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 方法二：贪心&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/jump-game/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;跳跃游戏&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2025-01-17 官方题解理解 贪心&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution55.java&#34;&gt;2025-01-18&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/jump-game-ii/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;跳跃游戏 II&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution45.java&#34;&gt;2025-01-18 算法超时了&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 理解官方题解&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2025-01-18 方法一：反向查找出发位置&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Solution45.jump2&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2025-01-18 方法二：正向查找可达到的最大位置&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Solution45.jump3&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/h-index/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;H 指数&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution274.java&#34;&gt;2025-01-18&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Tips&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; An easy approach is to sort the array first.&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; What are the possible values of h-index?&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; A faster approach is to use extra space.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; O(1) 时间插入、删除和获取随机元素&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 除自身以外数组的乘积&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 加油站&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 分发糖果&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 接雨水&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/roman-to-integer/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;罗马数字转整数&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution13.java&#34;&gt;2025-01-12&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 整数转罗马数字&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/length-of-last-word/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;最后一个单词的长度&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution58.java&#34;&gt;2025-01-12&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/longest-common-prefix/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;最长公共前缀&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution14.java&#34;&gt;2025-01-12&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/reverse-words-in-a-string/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;反转字符串中的单词&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution151.java&#34;&gt;2025-01-18&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;进阶&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 如果字符串在你使用的编程语言中是一种可变数据类型，请尝试使用 O(1) 额外空间复杂度的 原地 解法。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Z 字形变换&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;找出字符串中第一个匹配项的下标&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution28.java&#34;&gt;2025-01-12&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 文本左右对齐&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;双指针&#34;&gt;&#xA;  双指针&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%8c%e6%8c%87%e9%92%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/valid-palindrome/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;验证回文串&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution125.java&#34;&gt;2025-01-13&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/is-subsequence/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;判断子序列&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution392.java&#34;&gt;2025-01-13&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/two-sum-ii-input-array-is-sorted/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;两数之和 II - 输入有序数组&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution167.java&#34;&gt;2025-01-13&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 运行有时候会超过时间限制&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/container-with-most-water/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;盛最多水的容器&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 三数之和&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;滑动窗口&#34;&gt;&#xA;  滑动窗口&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%bb%91%e5%8a%a8%e7%aa%97%e5%8f%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/minimum-size-subarray-sum/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;长度最小的子数组&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution209.java&#34;&gt;2025-01-22&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/longest-substring-without-repeating-characters/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;无重复字符的最长子串&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution3.java&#34;&gt;2025-01-22&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/substring-with-concatenation-of-all-words/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;串联所有单词的子串&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution30.java&#34;&gt;2025-01-22&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/minimum-window-substring/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;最小覆盖子串&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;矩阵&#34;&gt;&#xA;  矩阵&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%9f%a9%e9%98%b5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/valid-sudoku/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;有效的数独&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution36.java&#34;&gt;2025-01-18&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/spiral-matrix/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;螺旋矩阵&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution54.java&#34;&gt;2025-01-18&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/rotate-image/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;旋转图像&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 理解官方题解&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2025-01-18 方法一：使用辅助数组&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2025-01-18 方法二：原地旋转&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 有数学公式的推导，需要自己推导一次&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2025-01-18 方法三：用翻转代替旋转&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 有数学公式的推导，需要自己推导一次&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/set-matrix-zeroes/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;矩阵置零&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution73.java&#34;&gt;2025-01-18&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/game-of-life/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;生命游戏&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution289.java&#34;&gt;2025-01-18&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;进阶&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 你可以使用原地算法解决本题吗？请注意，面板上所有格子需要同时被更新：你不能先更新某些格子，然后使用它们的更新后的值再更新其他格子。&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 本题中，我们使用二维数组来表示面板。原则上，面板是无限的，但当活细胞侵占了面板边界时会造成问题。你将如何解决这些问题？&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;-哈希表&#34;&gt;&#xA;  ✅ 哈希表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e5%93%88%e5%b8%8c%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/ransom-note/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;赎金信&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution383.java&#34;&gt;2025-01-13&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/isomorphic-strings/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;同构字符串&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution205.java&#34;&gt;2025-01-13&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/word-pattern/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;单词规律&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution290.java&#34;&gt;2025-01-13&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/valid-anagram/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;有效的字母异位词&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution242.java&#34;&gt;2025-01-13&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/group-anagrams/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;字母异位词分组&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution49.java&#34;&gt;2025-01-16&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;第一遍算法超时，看了官方题解思路后实现通过&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/two-sum/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;两数之和&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution1.java&#34;&gt;2025-01-13&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/happy-number/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;快乐数&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution202.java&#34;&gt;2025-01-13&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/contains-duplicate-ii/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;存在重复元素 II&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution219.java&#34;&gt;2025-01-13&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/longest-consecutive-sequence/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;最长连续序列&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution128.java&#34;&gt;2025-01-16&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;看了官方题解后完成&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;区间&#34;&gt;&#xA;  区间&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8c%ba%e9%97%b4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;栈&#34;&gt;&#xA;  栈&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/valid-parentheses/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;有效的括号&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution20.java&#34;&gt;2025-01-22&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/simplify-path/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;简化路径&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution71.java&#34;&gt;2025-01-22&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/min-stack/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;最小栈&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution155.java&#34;&gt;2025-01-22&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;理解官方题解 文字描述后完成&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2025-01-22 理解官方题解&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/evaluate-reverse-polish-notation/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;逆波兰表达式求值&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution150.java&#34;&gt;2025-01-22&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 基本计算器&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;链表&#34;&gt;&#xA;  链表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/linked-list-cycle/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;环形链表&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution141.java&#34;&gt;2025-01-20&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;理解官方题解&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2025-01-20 方法一：哈希表&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 方法二：快慢指针&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/add-two-numbers/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;两数相加&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution2.java&#34;&gt;2025-01-20&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/merge-two-sorted-lists/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;合并两个有序链表&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution21.java&#34;&gt;2025-01-20&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/copy-list-with-random-pointer/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;随机链表的复制&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution138.java&#34;&gt;2025-01-20&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/reverse-linked-list-ii/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;反转链表 II&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution92.java&#34;&gt;2025-01-20&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/reverse-nodes-in-k-group/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;K 个一组翻转链表&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/remove-nth-node-from-end-of-list/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;删除链表的倒数第 N 个结点&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution19.java&#34;&gt;2025-01-20&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;进阶&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2025-01-20 你能尝试使用一趟扫描实现吗？&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/remove-duplicates-from-sorted-list-ii/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;删除排序链表中的重复元素 II&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution82.java&#34;&gt;2025-01-21&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/rotate-list/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;旋转链表&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution61.java&#34;&gt;2025-01-20&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/partition-list/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;分隔链表&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution86.java&#34;&gt;2025-01-21&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/lru-cache/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;LRU 缓存&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution146.java&#34;&gt;2025-01-22&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 理解官方题解&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;二叉树&#34;&gt;&#xA;  二叉树&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e5%8f%89%e6%a0%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/maximum-depth-of-binary-tree/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;二叉树的最大深度&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution104.java&#34;&gt;2025-01-15&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/same-tree/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;相同的树&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution100.java&#34;&gt;2025-01-15&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/invert-binary-tree/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;翻转二叉树&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution226.java&#34;&gt;2025-01-15&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 对称二叉树&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 没做出来，看的官方题解&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 从前序与中序遍历序列构造二叉树&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 从中序与后序遍历序列构造二叉树&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 填充每个节点的下一个右侧节点指针 II&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 二叉树展开为链表&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 路径总和&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 求根节点到叶节点数字之和&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 二叉树中的最大路径和&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 二叉搜索树迭代器&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 完全二叉树的节点个数&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 二叉树的最近公共祖先&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;二叉树层次遍历&#34;&gt;&#xA;  二叉树层次遍历&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e5%8f%89%e6%a0%91%e5%b1%82%e6%ac%a1%e9%81%8d%e5%8e%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;二叉搜索树&#34;&gt;&#xA;  二叉搜索树&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e5%8f%89%e6%90%9c%e7%b4%a2%e6%a0%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;图&#34;&gt;&#xA;  图&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9b%be&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;图的广度优先搜索&#34;&gt;&#xA;  图的广度优先搜索&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9b%be%e7%9a%84%e5%b9%bf%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;字典树&#34;&gt;&#xA;  字典树&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ad%97%e5%85%b8%e6%a0%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-回溯&#34;&gt;&#xA;  ✅ 回溯&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e5%9b%9e%e6%ba%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/letter-combinations-of-a-phone-number/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;电话号码的字母组合&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution17.java&#34;&gt;2025-01-15&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/combinations/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;组合&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution77.java&#34;&gt;2025-01-15&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/permutations/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;全排列&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution46.java&#34;&gt;2025-01-15&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/combination-sum/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;组合总和&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution39.java&#34;&gt;2025-01-15&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/n-queens-ii/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;N 皇后 II&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution52.java&#34;&gt;2025-01-15&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/generate-parentheses/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;括号生成&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution22.java&#34;&gt;2025-01-15&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/word-search/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;单词搜索&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution79.java&#34;&gt;2025-01-15&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;分治&#34;&gt;&#xA;  分治&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e6%b2%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;kadane算法&#34;&gt;&#xA;  kadane算法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#kadane%e7%ae%97%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;二分查找&#34;&gt;&#xA;  二分查找&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e5%88%86%e6%9f%a5%e6%89%be&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;堆&#34;&gt;&#xA;  堆&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%a0%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;位运算&#34;&gt;&#xA;  位运算&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bd%8d%e8%bf%90%e7%ae%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/add-binary/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;二进制求和&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution67.java&#34;&gt;2025-01-16&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/reverse-bits/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;颠倒二进制位&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2025-01-16 没做出来, 参考这篇文章&lt;a href=&#34;https://blog.csdn.net/QuantumYou/article/details/119998894&#34;&gt;LeetCode 190. 颠倒二进制位 （位运算 分治）&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2025-01-17 复习了一遍&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution190.java&#34;&gt;2025-01-17 新增了中间值打印的代码在算法中&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/number-of-1-bits/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;位1的个数&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution191.java&#34;&gt;2025-01-17&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/single-number/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;只出现一次的数字&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution136.java&#34;&gt;2025-01-17&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/single-number-ii/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;只出现一次的数字 II&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2025-01-17 理解了官方题解 方法2&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/bitwise-and-of-numbers-range/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;数字范围按位与&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2025-01-17 理解了官方题解 方法2&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;数学&#34;&gt;&#xA;  数学&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e5%ad%a6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/palindrome-number/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;回文数&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution9.java&#34;&gt;2025-01-17&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 不将整数转为字符串来解决这个问题&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/plus-one/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;加一&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution66.java&#34;&gt;2025-01-17&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/factorial-trailing-zeroes/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;阶乘后的零&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution172.java&#34;&gt;2025-01-17&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/sqrtx/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;x 的平方根&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution69.java&#34;&gt;2025-01-17&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/powx-n/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;Pow(x, n)&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution50.java&#34;&gt;2025-01-17&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;超时了&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2025-01-17 看懂了官方题解&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 直线上最多的点数&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2025-01-17 看了官方题解，但还是不太理解&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;一维动态规划&#34;&gt;&#xA;  一维动态规划&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e7%bb%b4%e5%8a%a8%e6%80%81%e8%a7%84%e5%88%92&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/climbing-stairs/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;爬楼梯&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2025-01-11 通过&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;多维动态规划&#34;&gt;&#xA;  多维动态规划&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%a4%9a%e7%bb%b4%e5%8a%a8%e6%80%81%e8%a7%84%e5%88%92&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h2 id=&#34;2025-01-09&#34;&gt;&#xA;  2025-01-09&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2025-01-09&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;-spring实战-第6版-book&#34;&gt;&#xA;  ✅ Spring实战 第6版 Book&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-spring%e5%ae%9e%e6%88%98-%e7%ac%ac6%e7%89%88-book&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 第1章 Spring 起步&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1.1 什么是Spring &lt;code&gt;2025-01-09&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1.2 初始化 spring 应用 &lt;code&gt;2025-01-09&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1.3 编写 Spring 应用 &lt;code&gt;2025-01-09&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1.4 俯瞰 Spring 风景线 &lt;code&gt;2025-01-09&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 第2章&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2.1 展现信息 &lt;code&gt;2025-01-09&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2.2 处理表单提交 &lt;code&gt;2025-01-09&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2.3 校验表单输入 &lt;code&gt;2025-01-09&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2.4 使用视图控制器 &lt;code&gt;2025-01-09&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2.5 选择视图模板库 &lt;code&gt;2025-01-09&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 第3章 使用数据&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 3.1 &lt;code&gt;2025-01-09&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 3.2 &lt;code&gt;2025-01-11&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 3.3 &lt;code&gt;2025-01-11&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 第4章 使用非关系型数据&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 4.1 &lt;code&gt;2025-01-11&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 4.2 &lt;code&gt;2025-01-11&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 第5章 保护Spring&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 5.1 &lt;code&gt;2025-01-11&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 5.2 &lt;code&gt;2025-01-11&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 5.3 &lt;code&gt;2025-01-11&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 5.4 &lt;code&gt;2025-01-11&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 5.5 &lt;code&gt;2025-01-12&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 第6章 使用配置属性&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 6.1 &lt;code&gt;2025-01-12&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 6.2 &lt;code&gt;2025-01-12&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 6.3 &lt;code&gt;2025-01-12&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 第7章 创建REST服务&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 7.1 &lt;code&gt;2025-01-12&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 7.2 &lt;code&gt;2025-01-12&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 7.3 &lt;code&gt;2025-01-12&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 第8章 保护REST&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 8.1 &lt;code&gt;2025-01-12&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 8.2 &lt;code&gt;2025-01-12&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 8.3 &lt;code&gt;2025-01-12&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 8.4 &lt;code&gt;2025-01-12&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 第9章 发送异步消息&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 9.1 &lt;code&gt;2025-01-13&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 9.2 &lt;code&gt;2025-01-13&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 9.3 &lt;code&gt;2025-01-13&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 第10章 Spring集成&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 10.1 &lt;code&gt;2025-01-13&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 10.2 &lt;code&gt;2025-01-13&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 10.3 &lt;code&gt;2025-01-13&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 第11章 理解反应式编程&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 11.1 &lt;code&gt;2025-01-13&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 11.2 &lt;code&gt;2025-01-13&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 11.3 &lt;code&gt;2025-01-13&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 第12章 开发反应式API&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 12.1 &lt;code&gt;2025-01-13&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 12.2 &lt;code&gt;2025-01-13&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 12.3 &lt;code&gt;2025-01-13&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 12.4 &lt;code&gt;2025-01-13&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 12.5 &lt;code&gt;2025-01-13&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 第13章 反应式持久化数据&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 13.1 &lt;code&gt;2025-01-14&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 13.2 &lt;code&gt;2025-01-14&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 13.3 &lt;code&gt;2025-01-14&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 第14章 使用RSocket&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 14.1 &lt;code&gt;2025-01-14&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 14.2 &lt;code&gt;2025-01-15&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 14.3 &lt;code&gt;2025-01-15&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 第15章 部署Spring&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 15.1 &lt;code&gt;2025-01-15&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 15.2 &lt;code&gt;2025-01-15&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 15.3 &lt;code&gt;2025-01-15&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 15.4 &lt;code&gt;2025-01-15&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 第16章 管理Spring&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 16.1 &lt;code&gt;2025-01-15&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 16.2 &lt;code&gt;2025-01-15&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 16.3 &lt;code&gt;2025-01-15&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 第17章 使用JMX监控Spring&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 17.1 &lt;code&gt;2025-01-15&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 17.2 &lt;code&gt;2025-01-15&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 17.3 &lt;code&gt;2025-01-15&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 第18章 部署Spring&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 18.1 &lt;code&gt;2025-01-15&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 18.2 &lt;code&gt;2025-01-15&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 18.3 &lt;code&gt;2025-01-15&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 18.4 &lt;code&gt;2025-01-15&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 18.5 &lt;code&gt;2025-01-15&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;javaguide-文档阅读&#34;&gt;&#xA;  JavaGuide 文档阅读&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#javaguide-%e6%96%87%e6%a1%a3%e9%98%85%e8%af%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://javaguide.cn/home.html&#34;&gt;JavaGuide&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 必看&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试准备&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Java&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 计算机基础&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 数据库&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 开发工具&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 常用框架&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Spring&amp;amp;Spring Boot&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; MyBatis常见面试题总结&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2025-01-09 太过总结性，需要看一些更基础的文章&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Netty常见面试题总结&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 系统设计&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 分布式&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 高性能&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 高可用&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2025-01-08&#34;&gt;&#xA;  2025-01-08&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2025-01-08&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;计算机教育中缺失的学期&#34;&gt;&#xA;  计算机教育中缺失的学期&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%ae%a1%e7%ae%97%e6%9c%ba%e6%95%99%e8%82%b2%e4%b8%ad%e7%bc%ba%e5%a4%b1%e7%9a%84%e5%ad%a6%e6%9c%9f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://space.bilibili.com/695281681/lists?sid=4245283&amp;amp;spm_id_from=333.788.0.0&#34;&gt;计算机教育中缺失的学期&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;阮一峰博客阅读&#34;&gt;&#xA;  阮一峰博客阅读&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%98%ae%e4%b8%80%e5%b3%b0%e5%8d%9a%e5%ae%a2%e9%98%85%e8%af%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/&#34;&gt;阮一峰的网络日志&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;&#34;&gt;散文&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;&#34;&gt;观点与感想&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;&#34;&gt;算法与数学&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;&#34;&gt;开发者手册&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;&#34;&gt;理解计算机&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;&#34;&gt;JavaScript&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;&#34;&gt;计算机行业历史&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;&#34;&gt;周刊&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;&#34;&gt;创业&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;&#34;&gt;译文集&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;&#34;&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;&#34;&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;&#34;&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;&#34;&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;&#34;&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;&#34;&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;&#34;&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;&#34;&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2025-01-05&#34;&gt;&#xA;  2025-01-05&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2025-01-05&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;spring-基础知识点-视频&#34;&gt;&#xA;  spring 基础知识点 视频&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring-%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86%e7%82%b9-%e8%a7%86%e9%a2%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1vLaceeEMY?spm_id_from=333.788.videopod.episodes&amp;amp;vd_source=867426e6965781e5a2c5ef2fc1a0f8f8&#34;&gt;B站大学终于把Spring做成动画片了，一周刷爆，2024最新版，学完即可面试，拿走不谢，学不会我退出IT圈！&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1 2025-01-05&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Spring 是如何整合MyBatis管理Mapper接口的 2025-01-05&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2 2025-01-06&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 3 2025-01-06&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 4 2025-01-06&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 5 2025-01-06&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 6 2025-01-06&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 7 2025-01-06&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 8 2025-01-06&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 9 2025-01-06&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 10 2025-01-06&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 11 (January 6, 2025 at 18:43:04 GMT+8)&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 12 (January 6, 2025 at 18:50:57 GMT+8)&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 13 (January 6, 2025 at 18:57:05 GMT+8)&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 14 (January 6, 2025 at 18:59:15 GMT+8)&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 15 2025-01-07&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 16 2025-01-07&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 17&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 18&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 19&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 20&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 21&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 22&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 23&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 24&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 25&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 26&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 27&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 28&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 29&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 30&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 31&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 32&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 33&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 34&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 35&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 36&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 37&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 38&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 39&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 40&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 41&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 42&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 43&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 44&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 45&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 46&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 47&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 48&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 49&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 50&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 51&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 52&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 53&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 54&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 55&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 56&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 57&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 58&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 3&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 4&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 5&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 6&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 7&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 8&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 9&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 10&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 11&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 12&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 13&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 14&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 15&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 16&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 17&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 18&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 19&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 20&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 21&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 22&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 23&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 24&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 25&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 26&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 27&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 28&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 29&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 30&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 31&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 32&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 33&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 34&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 35&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 36&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 37&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 38&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 39&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 40&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 41&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 42&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 43&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 44&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 45&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 46&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 47&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 48&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 49&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 50&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 51&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 52&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 53&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 54&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 55&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 56&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 57&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 58&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 59&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 60&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 61&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 62&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 63&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 64&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 65&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 66&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 67&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 68&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 69&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 70&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 71&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 72&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 73&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 74&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 75&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 76&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 77&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 78&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 79&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 80&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 100&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2025-01-03&#34;&gt;&#xA;  2025-01-03&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2025-01-03&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;代码随想录-视频&#34;&gt;&#xA;  代码随想录 视频&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%a3%e7%a0%81%e9%9a%8f%e6%83%b3%e5%bd%95-%e8%a7%86%e9%a2%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1fA4y1o715&#34;&gt;代码随想录&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;数组&#34;&gt;&#xA;  数组&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e7%bb%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;链表-1&#34;&gt;&#xA;  链表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%93%be%e8%a1%a8-1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;哈希表&#34;&gt;&#xA;  哈希表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%93%88%e5%b8%8c%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;字符串&#34;&gt;&#xA;  字符串&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ad%97%e7%ac%a6%e4%b8%b2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;栈与队列&#34;&gt;&#xA;  栈与队列&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%88%e4%b8%8e%e9%98%9f%e5%88%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;二叉树-1&#34;&gt;&#xA;  二叉树&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e5%8f%89%e6%a0%91-1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1 &lt;a href=&#34;https://www.bilibili.com/video/BV1Hy4y1t7ij?vd_source=867426e6965781e5a2c5ef2fc1a0f8f8&amp;amp;spm_id_from=333.788.videopod.sections&#34;&gt;理论基础&lt;/a&gt; 2025-01-09&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2 递归遍历 (Leetcode 144, 145, 94) 2025-01-09&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 3 非递归遍历 2025-01-09&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 4 非递归遍历-中序 2025-01-11&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 5 层序遍历（广度优先搜索）&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 6 翻转二叉树&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 7 对称二叉树&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 8 二叉树的最大深度&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 9 二叉树的最小深度&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 10 完全二叉树节点的数量&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 11 平衡二叉树&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 12 二叉树的所有路径&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 13 左叶子之和&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 14 找左下角的值&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 15 路径总和&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 16 从中序和后序遍历序列构造二叉树&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 17 最大二叉树&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 18 合并二叉树&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 19 &lt;a href=&#34;https://www.bilibili.com/video/BV1wG411g7sF?vd_source=867426e6965781e5a2c5ef2fc1a0f8f8&amp;amp;spm_id_from=333.788.videopod.sections&#34;&gt;二叉搜索树中的搜索&lt;/a&gt; (Leetcode 700) 2025-01-08&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 20 验证二叉搜索树 (Leetcode 98) 2025-01-08&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 21 二叉搜索树的最小绝对差 (Leetcode 530) 2025-01-08&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 22 二叉搜索树中的众数(Leetcode 501) 2025-01-09&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 23 二叉树的最近公共祖先(Leetcode 236) 2025-01-09&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 24 二叉搜索树的最近公共祖先 2025-01-09&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 25 二叉搜索树中的插入操作(Leetcode 701) 2025-01-09&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 26 &lt;a href=&#34;https://www.bilibili.com/video/BV1tP41177us?vd_source=867426e6965781e5a2c5ef2fc1a0f8f8&amp;amp;spm_id_from=333.788.player.switch&#34;&gt;删除二叉搜索树中的节点(Leetcode 450)&lt;/a&gt; 2025-01-09&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 27 修剪二叉搜索树 (Leetcode 669) 2025-01-09&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 28 将有序数组转换为二叉搜索树 (Leetcode 108) 2025-01-09&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 29 把二叉搜索树转换为累加树(Leetcode 538) 2025-01-09&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;-回溯法&#34;&gt;&#xA;  ✅ 回溯法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e5%9b%9e%e6%ba%af%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1 理论篇 2025-01-03&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2 组合问题（对应力扣题目：77.组合） 2025-01-03&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 3 组合问题的剪枝操作（对应力扣题目：77.组合）2025-01-03&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 4 回溯算法如何剪枝？| LeetCode：216.组合总和III 2025-01-03&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 5 LeetCode：17.电话号码的字母组合 2025-01-03&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 6 组合总和（对应「leetcode」力扣题目：39.组合总和） 2025-01-03&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 7 LeetCode:40.组合总和II 2025-01-03&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 8 分割回文串 2025-01-04&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 9 复原IP地址 2025-01-04&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 10 子集 （Leetcode 78） 2025-01-04&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 11 子集2（Leetcode 90） 2025-01-04&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 12 递增子序列（Leetcode 491） 2025-01-04&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 13 全排列（Leetcode 46） 2025-01-04&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 14 全排列2（Leetcode 47）2025-01-04&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 15 N皇后（Leetcode 51） 2025-01-05&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 16 解数独（Leetcode 37） 2025-01-05&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;-贪心算法&#34;&gt;&#xA;  ✅ 贪心算法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e8%b4%aa%e5%bf%83%e7%ae%97%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 理论基础 2025-01-05&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1 分发饼干 leetcode 455 2025-01-05&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2 摆动序列 Leetcode 376 2025-01-05&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 3 最大子序和 2025-01-06&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 4 买卖股票最佳时机2 2025-01-06&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 5 跳跃游戏（Leetcode 55） 2025-01-06&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 6 跳跃游戏2 （Leetcode 45） 2025-01-06&#xA;&lt;ul&gt;&#xA;&lt;li&gt;这道题没听懂&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 7 K次取反后最大化的数组和 （Leetcode 1005） 2025-01-06&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 8 加油站（Leetcode 134） 2025-01-06&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 9 分发糖果（Leetcode 135） 2025-01-06&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 10 柠檬水找零（Leetcode 860） 2025-01-06&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 11 根据身高重建队列（Leetcode 406） 2025-01-06&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 12 用最少数量的箭引爆气球(Leetcode 452) 2025-01-06&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 13 无重叠区间(Leetcode 435) 2025-01-06&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 14 划分字母区间 (Leetcode 763) 2025-01-06&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 15 合并区间 （Leetcode 56） (January 7, 2025 at 15:18:40 GMT+8)&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 16 单调自增的数字（Leetcode 738）(January 7, 2025 at 15:41:59 GMT+8)&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 17 监督二叉树（Leetcode 968） (January 7, 2025 at 16:11:51 GMT+8)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;动态规划&#34;&gt;&#xA;  动态规划&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8a%a8%e6%80%81%e8%a7%84%e5%88%92&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1 理论基础   (January 7, 2025 at 16:34:49 GMT+8)&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2 斐波那契数列 （Leetcode 509） (January 7, 2025 at 16:46:54 GMT+8)&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 3 爬楼梯（Leetcode 70） (January 7, 2025 at 16:57:46 GMT+8)&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 4 &lt;a href=&#34;https://www.bilibili.com/video/BV16G411c7yZ&#34;&gt;使用最小花费爬楼梯&lt;/a&gt; (Leetcode 746)  2025-01-08&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 5 不同路径 2025-01-08&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 6 不同路径2 (Leetcode 63) 2025-01-08&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 7 整数拆分 (Leetcode 343)  2025-01-08&#xA;&lt;ul&gt;&#xA;&lt;li&gt;这道题没太听懂&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 8 不同的二叉搜索树（Leetcode 96）&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 9 0-1背包问题理论基础&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 10 0-1背包问题之滚动数组&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 11 分割等和子集&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 12 最后一块石头的重量2&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 13 目标和&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 14 一和零&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 15 完全背包理论基础&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 16 零钱兑换2&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 17 组合综合4&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 18 零钱兑换&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 19 完全平方数&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 20 单词拆分&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 21 打家劫舍&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 22 打家劫舍2&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 23 打家劫舍3&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 24 买卖股票的最佳时机1&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 25 买卖股票的最佳时机2&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 26 买卖股票的最佳时机3&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 27 买卖股票的最佳时机4&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 28 买卖股票的最佳时机含冷冻期&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 29 买卖股票的最佳时机含手续费&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 30 最长递增子序列&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 31 最长连续递增序列&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 32 最长重复子数组&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 33 最长公共子序列&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 34 不相交的线&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 35 最大子序和&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 36 判断子序列&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 37 不同的子序列&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 38 两个字符串的删除操作&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 39 编辑距离&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 40 回文子串&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 42 最长回文子序列&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;单调栈&#34;&gt;&#xA;  单调栈&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8d%95%e8%b0%83%e6%a0%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h2 id=&#34;2024-11-14&#34;&gt;&#xA;  2024-11-14&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2024-11-14&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://challahscript.com/what_i_wish_someone_told_me_about_postgres&#34;&gt;What I Wish Someone Told Me About Postgres&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;介绍了 postgresql 相关的一些知识点，可以看一看&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.wired.com/story/the-wired-guide-to-protecting-yourself-from-government-surveillance/&#34;&gt;The WIRED Guide to Protecting Yourself From Government Surveillance&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://arstechnica.com/ai/2024/11/how-a-stubborn-computer-scientist-accidentally-launched-the-deep-learning-boom/&#34;&gt;How a stubborn computer scientist accidentally launched the deep learning boom&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;可以了解到 辛顿、黄仁勋、李飞飞 的工作是如何推动神经网络的发展的&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>github</title>
      <link>/post/computer-science/github/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/github/</guid>
      <description>&lt;h1 id=&#34;github&#34;&gt;&#xA;  github&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#github&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;2025-08-12 移动端创建issue的时候要等issue的页面加载完成之后再返回到列表，如果没加载完就返回到列表，issue会丢失（列表显示不出来），但是issue的数量是已经累加了的&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;profile&#34;&gt;&#xA;  profile&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#profile&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.github.com/en/account-and-profile/concepts/about-your-profile&#34;&gt;官方文档&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果你新建一个和你的用户名一样名字的仓库，这个仓库的 Readme 就会展示在你的个人主页上 ref: &lt;a href=&#34;https://www.kawabangga.com/posts/4117&#34;&gt;玩了一下 Github 个人首页的 Profile （使用 Action 自动更新）&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;github-action&#34;&gt;&#xA;  Github Action&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#github-action&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html&#34;&gt;GitHub Actions 入门教程&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;repository&#34;&gt;&#xA;  repository&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#repository&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux&#34;&gt;torvalds/linux&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/CesiumGS/cesium&#34;&gt;CesiumGS/cesium&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;CesiumJS is a JavaScript library for creating 3D globes and 2D maps in a web browser without a plugin. It uses&#xA;WebGL for hardware-accelerated graphics, and is cross-platform, cross-browser, and tuned for dynamic-data&#xA;visualization.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/ohmyzsh/ohmyzsh&#34;&gt;ohmyzsh/ohmyzsh&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Oh My Zsh is an open source, community-driven framework for managing your zsh configuration.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/duanluan/zutil&#34;&gt;duanluan/zutil&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;追求更快更全的 Java 工具类&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://duanluan.github.io/zutil/&#34;&gt;文档&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/binarywang/Linux-Tutorial&#34;&gt;binarywang/Linux-Tutorial&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Java 程序员眼中的 Linux&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618&#34;&gt;&lt;strong&gt;yihong0618&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;algorithm-practice&#34;&gt;&#xA;  algorithm-practice&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#algorithm-practice&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/penruins/algorithm-practice&#34;&gt;algorithm-practice&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;datastructure&#34;&gt;&#xA;  dataStructure&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#datastructure&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;com.penruins.dataStructure&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;priorityqueuedemo&#34;&gt;&#xA;  PriorityQueueDemo&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#priorityqueuedemo&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;demo1&#xA;&lt;ul&gt;&#xA;&lt;li&gt;PriorityQueue 默认为最小堆&lt;/li&gt;&#xA;&lt;li&gt;如果 PriorityQueue 中没有元素了，则返回 null&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;demo2&#xA;&lt;ul&gt;&#xA;&lt;li&gt;自定义一个比较器实现最大堆&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;follow&#34;&gt;&#xA;  follow&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#follow&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/oldratlee&#34;&gt;oldratlee&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;graphcompenruinsgraph&#34;&gt;&#xA;  graph(com.penruins.graph)&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#graphcompenruinsgraph&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;com.penruins.graph&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;广度优先搜索compenruinsgraphgraphsearchbfs&#34;&gt;&#xA;  广度优先搜索(com.penruins.graph.GraphSearch.bfs)&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b9%bf%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2compenruinsgraphgraphsearchbfs&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;com.penruins.graph.GraphSearch.bfs&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;二维图的广度优先搜索&lt;/li&gt;&#xA;&lt;li&gt;8个方向&lt;/li&gt;&#xA;&lt;li&gt;从标志数组的打印可以看出来是广度优先搜索&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>job</title>
      <link>/post/computer-science/job/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/job/</guid>
      <description>&lt;h1 id=&#34;job&#34;&gt;&#xA;  job&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#job&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.0x08.org/posts/resume-for-graduates&#34;&gt;应届生的简历&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>kafka一个分区有多个消费者消费顺序是怎样的</title>
      <link>/post/computer-science/llm/2025-03-30-7-kafka%E4%B8%80%E4%B8%AA%E5%88%86%E5%8C%BA%E6%9C%89%E5%A4%9A%E4%B8%AA%E6%B6%88%E8%B4%B9%E8%80%85%E6%B6%88%E8%B4%B9%E9%A1%BA%E5%BA%8F%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/llm/2025-03-30-7-kafka%E4%B8%80%E4%B8%AA%E5%88%86%E5%8C%BA%E6%9C%89%E5%A4%9A%E4%B8%AA%E6%B6%88%E8%B4%B9%E8%80%85%E6%B6%88%E8%B4%B9%E9%A1%BA%E5%BA%8F%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84/</guid>
      <description>&lt;h1 id=&#34;kafka一个分区有多个消费者消费顺序是怎样的&#34;&gt;&#xA;  kafka一个分区有多个消费者消费顺序是怎样的&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#kafka%e4%b8%80%e4%b8%aa%e5%88%86%e5%8c%ba%e6%9c%89%e5%a4%9a%e4%b8%aa%e6%b6%88%e8%b4%b9%e8%80%85%e6%b6%88%e8%b4%b9%e9%a1%ba%e5%ba%8f%e6%98%af%e6%80%8e%e6%a0%b7%e7%9a%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;在 Kafka 中，&lt;strong&gt;一个分区（Partition）只能被同一个消费者组（Consumer Group）内的一个消费者（Consumer）消费&lt;/strong&gt;，这是 Kafka 设计的基本原则。以下是详细分析：&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;1-单分区与消费者组的消费规则&#34;&gt;&#xA;  1. &lt;strong&gt;单分区与消费者组的消费规则&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e5%8d%95%e5%88%86%e5%8c%ba%e4%b8%8e%e6%b6%88%e8%b4%b9%e8%80%85%e7%bb%84%e7%9a%84%e6%b6%88%e8%b4%b9%e8%a7%84%e5%88%99&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;一个分区仅由一个消费者消费&lt;/strong&gt;：&lt;br&gt;&#xA;在同一个消费者组内，每个分区会被分配给组内的唯一消费者。例如，如果一个 Topic 有 3 个分区，消费者组有 3 个消费者，则每个消费者负责一个分区，消息按分区顺序消费&lt;a href=&#34;@ref&#34;&gt;29&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;消费者数量 &amp;gt; 分区数&lt;/strong&gt;：多余的消费者会处于空闲状态，无法消费任何分区的消息。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;消费者数量 ≤ 分区数&lt;/strong&gt;：每个消费者可能分配到一个或多个分区，但一个分区始终只对应一个消费者&lt;a href=&#34;@ref&#34;&gt;29&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;分区内消息严格有序&lt;/strong&gt;：&lt;br&gt;&#xA;单个分区内的消息按生产者写入的顺序存储和消费，消费者按偏移量（Offset）递增顺序处理消息&lt;a href=&#34;@ref&#34;&gt;13&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;17&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;2-多消费者消费同一分区的特殊情况&#34;&gt;&#xA;  2. &lt;strong&gt;多消费者消费同一分区的特殊情况&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e5%a4%9a%e6%b6%88%e8%b4%b9%e8%80%85%e6%b6%88%e8%b4%b9%e5%90%8c%e4%b8%80%e5%88%86%e5%8c%ba%e7%9a%84%e7%89%b9%e6%ae%8a%e6%83%85%e5%86%b5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;不同消费者组&lt;/strong&gt;：&lt;br&gt;&#xA;多个消费者组可以独立消费同一个分区的消息（每个组内仍遵循单消费者规则），但不同组之间的消费进度（Offset）互不影响。例如：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;消费者组 A 的 Consumer 1 消费分区 0；&lt;/li&gt;&#xA;&lt;li&gt;消费者组 B 的 Consumer 1 也消费分区 0&lt;a href=&#34;@ref&#34;&gt;29&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;注意&lt;/strong&gt;：这种场景下，消息会被重复消费，且各组消费顺序独立。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;同一消费者组内多线程消费&lt;/strong&gt;：&lt;br&gt;&#xA;若一个消费者启动多线程处理同一分区的消息，需自行保证线程间的顺序性（如单线程消费或业务层排序），否则可能乱序&lt;a href=&#34;@ref&#34;&gt;11&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;3-分区分配策略的影响&#34;&gt;&#xA;  3. &lt;strong&gt;分区分配策略的影响&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-%e5%88%86%e5%8c%ba%e5%88%86%e9%85%8d%e7%ad%96%e7%95%a5%e7%9a%84%e5%bd%b1%e5%93%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Kafka 默认的分区分配策略（如 &lt;code&gt;RangeAssignor&lt;/code&gt; 或 &lt;code&gt;RoundRobinAssignor&lt;/code&gt;）会影响消费者与分区的对应关系，但不会改变单分区单消费者的核心规则&lt;a href=&#34;@ref&#34;&gt;13&lt;/a&gt;。例如：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;RangeAssignor&lt;/strong&gt;：按分区范围顺序分配，可能导致分区分配不均。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;RoundRobinAssignor&lt;/strong&gt;：轮询分配，更均衡但可能打乱业务相关性&lt;a href=&#34;@ref&#34;&gt;13&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;4-总结与建议&#34;&gt;&#xA;  4. &lt;strong&gt;总结与建议&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4-%e6%80%bb%e7%bb%93%e4%b8%8e%e5%bb%ba%e8%ae%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;顺序性保障&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;单分区内消息天然有序，但需确保消费者组内单线程消费&lt;a href=&#34;@ref&#34;&gt;17&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;跨分区顺序需通过相同 Key 路由到同一分区实现局部有序&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;17&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;扩展性权衡&lt;/strong&gt;：&lt;br&gt;&#xA;增加分区数可提升并行度，但需避免消费者数量不足导致负载不均。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;若需多消费者并发处理同一分区的消息且保持顺序，需引入外部排序机制（如优先级队列）或改用单消费者多线程模式&lt;a href=&#34;@ref&#34;&gt;11&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>kafka发送失败如何处理</title>
      <link>/post/computer-science/llm/2025-03-30-8-kafka%E5%8F%91%E9%80%81%E5%A4%B1%E8%B4%A5%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/llm/2025-03-30-8-kafka%E5%8F%91%E9%80%81%E5%A4%B1%E8%B4%A5%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86/</guid>
      <description>&lt;h1 id=&#34;kafka发送失败如何处理&#34;&gt;&#xA;  kafka发送失败如何处理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#kafka%e5%8f%91%e9%80%81%e5%a4%b1%e8%b4%a5%e5%a6%82%e4%bd%95%e5%a4%84%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;当 Kafka 生产者发送消息失败时，可以通过以下方法进行排查和处理，结合错误类型和业务需求选择合适策略：&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;一常见失败原因及解决方案&#34;&gt;&#xA;  一、&lt;strong&gt;常见失败原因及解决方案&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e5%b8%b8%e8%a7%81%e5%a4%b1%e8%b4%a5%e5%8e%9f%e5%9b%a0%e5%8f%8a%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;网络故障&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;现象&lt;/strong&gt;：生产者无法连接 Broker，或发送超时。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;解决&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;检查网络连通性（如防火墙、DNS 解析）。&lt;/li&gt;&#xA;&lt;li&gt;增加生产者参数 &lt;code&gt;retries&lt;/code&gt;（重试次数）和 &lt;code&gt;retry.backoff.ms&lt;/code&gt;（重试间隔）&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;14&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;分区副本不可用&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;现象&lt;/strong&gt;：目标分区 Leader 副本宕机或正在重分配。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;解决&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;检查 Broker 和分区状态（如 &lt;code&gt;kafka-topics.sh --describe&lt;/code&gt;）。&lt;/li&gt;&#xA;&lt;li&gt;配置 &lt;code&gt;acks=all&lt;/code&gt; 确保所有副本确认写入，避免数据丢失&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;14&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;主题不存在&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;现象&lt;/strong&gt;：发送到未创建的主题。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;解决&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;提前创建主题，或启用 &lt;code&gt;auto.create.topics.enable=true&lt;/code&gt;（生产环境慎用）&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;消息大小超限&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;现象&lt;/strong&gt;：消息超过 &lt;code&gt;max.request.size&lt;/code&gt; 或 Broker 限制。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;解决&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;增大 &lt;code&gt;max.request.size&lt;/code&gt; 或拆分大消息&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;14&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;生产者配置错误&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;现象&lt;/strong&gt;：&lt;code&gt;bootstrap.servers&lt;/code&gt; 配置错误或序列化器不匹配。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;解决&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;检查 &lt;code&gt;bootstrap.servers&lt;/code&gt; 地址和序列化配置（如 &lt;code&gt;StringSerializer&lt;/code&gt;）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;二发送失败的处理策略&#34;&gt;&#xA;  二、&lt;strong&gt;发送失败的处理策略&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e5%8f%91%e9%80%81%e5%a4%b1%e8%b4%a5%e7%9a%84%e5%a4%84%e7%90%86%e7%ad%96%e7%95%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;同步发送模式&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;调用 &lt;code&gt;send().get()&lt;/code&gt; 阻塞等待发送结果，捕获异常后重试或记录日志&lt;a href=&#34;@ref&#34;&gt;2&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;22&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    RecordMetadata metadata &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; producer.&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(record).&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (Exception e) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 重试或记录失败&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;异步发送模式&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>kafka如何保障顺序消费</title>
      <link>/post/computer-science/llm/2025-03-30-5-kafka%E5%A6%82%E4%BD%95%E4%BF%9D%E9%9A%9C%E9%A1%BA%E5%BA%8F%E6%B6%88%E8%B4%B9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/llm/2025-03-30-5-kafka%E5%A6%82%E4%BD%95%E4%BF%9D%E9%9A%9C%E9%A1%BA%E5%BA%8F%E6%B6%88%E8%B4%B9/</guid>
      <description>&lt;h1 id=&#34;kafka如何保障顺序消费&#34;&gt;&#xA;  kafka如何保障顺序消费&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#kafka%e5%a6%82%e4%bd%95%e4%bf%9d%e9%9a%9c%e9%a1%ba%e5%ba%8f%e6%b6%88%e8%b4%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Kafka 通过其独特的分区机制和消费者组设计来保障消息的顺序消费，但需注意其仅能保证&lt;strong&gt;单分区内的顺序性&lt;/strong&gt;，跨分区的全局顺序需额外设计。以下是具体实现方法和原理：&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;一单分区顺序性保障&#34;&gt;&#xA;  一、&lt;strong&gt;单分区顺序性保障&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e5%8d%95%e5%88%86%e5%8c%ba%e9%a1%ba%e5%ba%8f%e6%80%a7%e4%bf%9d%e9%9a%9c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;分区内消息严格有序&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Kafka 的每个分区（Partition）是一个有序的、不可变的日志序列，消息按生产者发送的顺序追加到分区末尾，消费者按相同顺序读取&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;18&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;25&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;关键设计&lt;/strong&gt;：分区内的消息通过偏移量（Offset）标识顺序，消费者按 Offset 递增消费&lt;a href=&#34;@ref&#34;&gt;18&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;生产者配置&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;相同 Key 路由到同一分区&lt;/strong&gt;：生产者通过消息 Key 的哈希值确定分区，相同 Key 的消息始终进入同一分区，确保业务相关的消息顺序&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;25&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;39&lt;/a&gt;。&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 示例：发送相同Key的消息到同一分区&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ProducerRecord&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String, String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; record &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ProducerRecord&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;topic&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;order-123&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;producer.&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(record);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;限制并发请求&lt;/strong&gt;：设置 &lt;code&gt;max.in.flight.requests.per.connection=1&lt;/code&gt;，防止生产者因重试导致消息乱序&lt;a href=&#34;@ref&#34;&gt;31&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;25&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;消费者配置&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;单线程消费&lt;/strong&gt;：每个分区仅由一个消费者线程处理，避免并发消费破坏顺序&lt;a href=&#34;@ref&#34;&gt;18&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;手动提交 Offset&lt;/strong&gt;：确保消息处理完成后再提交 Offset，防止重复消费或漏消费。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;二全局顺序性实现跨分区&#34;&gt;&#xA;  二、&lt;strong&gt;全局顺序性实现（跨分区）&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e5%85%a8%e5%b1%80%e9%a1%ba%e5%ba%8f%e6%80%a7%e5%ae%9e%e7%8e%b0%e8%b7%a8%e5%88%86%e5%8c%ba&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;单分区策略&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;将 Topic 设置为单分区，所有消息集中到一个分区，但会牺牲吞吐量和扩展性&lt;a href=&#34;@ref&#34;&gt;24&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;25&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;32&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;适用场景&lt;/strong&gt;：低吞吐但强顺序要求的场景（如金融交易流水）&lt;a href=&#34;@ref&#34;&gt;24&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;基于 Key 的分区路由&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;将需顺序处理的消息（如同一订单 ID）通过相同 Key 路由到固定分区，实现局部顺序&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;39&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;局限性&lt;/strong&gt;：若 Key 分布不均，可能导致分区负载倾斜&lt;a href=&#34;@ref&#34;&gt;24&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;应用层排序&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;消费者拉取多分区消息后，通过优先级队列（如按时间戳或业务ID排序）实现全局顺序。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;示例&lt;/strong&gt;：&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PriorityQueue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ConsumerRecord&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; queue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PriorityQueue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;(Comparator.&lt;span style=&#34;color:#a6e22e&#34;&gt;comparing&lt;/span&gt;(ConsumerRecord::timestamp));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;三高级配置与优化&#34;&gt;&#xA;  三、&lt;strong&gt;高级配置与优化&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%89%e9%ab%98%e7%ba%a7%e9%85%8d%e7%bd%ae%e4%b8%8e%e4%bc%98%e5%8c%96&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;幂等生产者&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;设置 &lt;code&gt;enable.idempotence=true&lt;/code&gt;，避免重试导致消息重复或乱序，同时允许 &lt;code&gt;max.in.flight.requests.per.connection&amp;gt;1&lt;/code&gt; 提升吞吐&lt;a href=&#34;@ref&#34;&gt;31&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;消费者组与分区数平衡&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>kafka如何实现高吞吐量</title>
      <link>/post/computer-science/llm/2025-03-30-3-kafka%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%AB%98%E5%90%9E%E5%90%90%E9%87%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/llm/2025-03-30-3-kafka%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%AB%98%E5%90%9E%E5%90%90%E9%87%8F/</guid>
      <description>&lt;h1 id=&#34;kafka如何实现高吞吐量&#34;&gt;&#xA;  kafka如何实现高吞吐量&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#kafka%e5%a6%82%e4%bd%95%e5%ae%9e%e7%8e%b0%e9%ab%98%e5%90%9e%e5%90%90%e9%87%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Kafka 实现高吞吐量的核心机制基于其多层次的优化设计，包括存储、网络、并行处理和资源利用等方面。以下是关键实现原理及技术细节：&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;1-顺序写入与页缓存技术&#34;&gt;&#xA;  1. &lt;strong&gt;顺序写入与页缓存技术&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e9%a1%ba%e5%ba%8f%e5%86%99%e5%85%a5%e4%b8%8e%e9%a1%b5%e7%bc%93%e5%ad%98%e6%8a%80%e6%9c%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;顺序写入磁盘&lt;/strong&gt;：Kafka 将消息追加到分区日志文件末尾，避免随机磁盘寻址。顺序写入的吞吐量接近内存读写速度（可达数百MB/s），远高于随机写入&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;12&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;22&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;页缓存（Page Cache）&lt;/strong&gt;：消息首先写入操作系统的页缓存（内存），由操作系统异步刷盘。这减少了直接磁盘I/O的开销，同时利用内存加速读写&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;12&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;23&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;2-零拷贝zero-copy技术&#34;&gt;&#xA;  2. &lt;strong&gt;零拷贝（Zero-Copy）技术&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e9%9b%b6%e6%8b%b7%e8%b4%9dzero-copy%e6%8a%80%e6%9c%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;sendfile 系统调用&lt;/strong&gt;：消费者读取数据时，Kafka 通过 &lt;code&gt;sendfile&lt;/code&gt; 直接将页缓存的数据发送到网卡，跳过用户态与内核态之间的数据拷贝，减少CPU消耗和上下文切换&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;51&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;53&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;mmap 内存映射&lt;/strong&gt;：生产者写入时通过内存映射文件（&lt;code&gt;mmap&lt;/code&gt;）将磁盘文件映射到内存，避免数据复制&lt;a href=&#34;@ref&#34;&gt;12&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;51&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;3-分区与并行处理&#34;&gt;&#xA;  3. &lt;strong&gt;分区与并行处理&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-%e5%88%86%e5%8c%ba%e4%b8%8e%e5%b9%b6%e8%a1%8c%e5%a4%84%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;分区机制&lt;/strong&gt;：Topic 分为多个 Partition，每个 Partition 独立处理读写请求，支持水平扩展。分区数越多，并行度越高，吞吐量线性增长&lt;a href=&#34;@ref&#34;&gt;34&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;消费者组&lt;/strong&gt;：多个消费者并行消费不同分区，避免单点瓶颈。例如，6个分区的Topic可由6个消费者同时处理，提升整体消费速率。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;4-批量处理与压缩&#34;&gt;&#xA;  4. &lt;strong&gt;批量处理与压缩&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4-%e6%89%b9%e9%87%8f%e5%a4%84%e7%90%86%e4%b8%8e%e5%8e%8b%e7%bc%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;生产者批量发送&lt;/strong&gt;：Producer 累积消息到批次（如100ms或1MB阈值）后一次性发送，减少网络和磁盘I/O次数&lt;a href=&#34;@ref&#34;&gt;12&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;32&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;消息压缩&lt;/strong&gt;：支持 Snappy、GZIP 等压缩算法，减少网络传输数据量（尤其对文本数据压缩率可达80%）&lt;a href=&#34;@ref&#34;&gt;12&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;22&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;5-高效的存储与索引&#34;&gt;&#xA;  5. &lt;strong&gt;高效的存储与索引&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#5-%e9%ab%98%e6%95%88%e7%9a%84%e5%ad%98%e5%82%a8%e4%b8%8e%e7%b4%a2%e5%bc%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;稀疏索引&lt;/strong&gt;：每个 Partition 的日志分段（Segment）附带索引文件，通过偏移量快速定位消息，避免全量扫描&lt;a href=&#34;@ref&#34;&gt;32&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;23&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;日志分段清理&lt;/strong&gt;：定期删除过期数据或合并小文件，保持存储高效。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;6-网络与协议优化&#34;&gt;&#xA;  6. &lt;strong&gt;网络与协议优化&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#6-%e7%bd%91%e7%bb%9c%e4%b8%8e%e5%8d%8f%e8%ae%ae%e4%bc%98%e5%8c%96&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;二进制协议&lt;/strong&gt;：自定义紧凑的二进制通信协议，减少解析开销&lt;a href=&#34;@ref&#34;&gt;32&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;长轮询与拉取模式&lt;/strong&gt;：消费者主动拉取消息（Pull），根据处理能力控制流量，避免Broker过载。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;总结&#34;&gt;&#xA;  总结&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%80%bb%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Kafka 的高吞吐量是多项技术协同作用的结果：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;存储层&lt;/strong&gt;：顺序写入+页缓存+零拷贝最大化I/O效率；&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;架构层&lt;/strong&gt;：分区+并行处理实现水平扩展；&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;传输层&lt;/strong&gt;：批量+压缩+高效协议降低网络开销。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;实际应用中，需根据业务调整分区数、批次大小和压缩算法等参数以进一步优化性能&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;12&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kafka的顺序消费能力与其他消息队列系统相比有何优势</title>
      <link>/post/computer-science/llm/2025-03-30-6-kafka%E7%9A%84%E9%A1%BA%E5%BA%8F%E6%B6%88%E8%B4%B9%E8%83%BD%E5%8A%9B%E4%B8%8E%E5%85%B6%E4%BB%96%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%B3%BB%E7%BB%9F%E7%9B%B8%E6%AF%94%E6%9C%89%E4%BD%95%E4%BC%98%E5%8A%BF/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/llm/2025-03-30-6-kafka%E7%9A%84%E9%A1%BA%E5%BA%8F%E6%B6%88%E8%B4%B9%E8%83%BD%E5%8A%9B%E4%B8%8E%E5%85%B6%E4%BB%96%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%B3%BB%E7%BB%9F%E7%9B%B8%E6%AF%94%E6%9C%89%E4%BD%95%E4%BC%98%E5%8A%BF/</guid>
      <description>&lt;h1 id=&#34;kafka的顺序消费能力与其他消息队列系统相比有何优势&#34;&gt;&#xA;  Kafka的顺序消费能力与其他消息队列系统相比有何优势&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#kafka%e7%9a%84%e9%a1%ba%e5%ba%8f%e6%b6%88%e8%b4%b9%e8%83%bd%e5%8a%9b%e4%b8%8e%e5%85%b6%e4%bb%96%e6%b6%88%e6%81%af%e9%98%9f%e5%88%97%e7%b3%bb%e7%bb%9f%e7%9b%b8%e6%af%94%e6%9c%89%e4%bd%95%e4%bc%98%e5%8a%bf&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Kafka 在顺序消费能力上与其他主流消息队列系统（如 RabbitMQ、RocketMQ）相比，具有独特的优势和适用场景。以下是详细对比分析：&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;一kafka-顺序消费的核心优势&#34;&gt;&#xA;  一、&lt;strong&gt;Kafka 顺序消费的核心优势&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80kafka-%e9%a1%ba%e5%ba%8f%e6%b6%88%e8%b4%b9%e7%9a%84%e6%a0%b8%e5%bf%83%e4%bc%98%e5%8a%bf&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;分区内严格有序&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Kafka 通过分区（Partition）机制天然保证同一分区内的消息顺序性，消息按写入顺序存储和消费，适用于高吞吐场景下的局部有序需求（如订单流水、日志流）&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;对比&lt;/strong&gt;：RabbitMQ 默认不保证顺序，需通过单队列单消费者或复杂的分组逻辑实现；RocketMQ 虽支持队列内有序，但需依赖队列分配策略。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;高性能与扩展性&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Kafka 的分区设计允许水平扩展，通过增加分区数提升吞吐量，同时保持分区内顺序。例如，10个分区的 Topic 可支持10个消费者并行消费，每个消费者处理一个分区的有序消息&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;28&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;对比&lt;/strong&gt;：RabbitMQ 单队列模式无法扩展，吞吐量受限；RocketMQ 虽支持多队列，但全局有序需牺牲队列数（单队列）&lt;a href=&#34;@ref&#34;&gt;47&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;生产者控制灵活&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通过消息 Key 的哈希路由，Kafka 可将需顺序处理的消息（如相同订单ID）固定到同一分区，兼顾顺序性与并行能力&lt;a href=&#34;@ref&#34;&gt;28&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;对比&lt;/strong&gt;：RabbitMQ 需业务层实现分组逻辑；RocketMQ 类似但需显式配置 &lt;code&gt;MessageQueueSelector&lt;/code&gt;&lt;a href=&#34;@ref&#34;&gt;47&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;零拷贝与批量处理&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Kafka 的零拷贝技术和批量发送机制减少 I/O 开销，在高吞吐场景下仍能保持低延迟的顺序消费&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;29&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;对比&lt;/strong&gt;：RabbitMQ 的推送模型和内存优先策略在吞吐量上逊色&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;二与其他消息队列的对比&#34;&gt;&#xA;  二、&lt;strong&gt;与其他消息队列的对比&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e4%b8%8e%e5%85%b6%e4%bb%96%e6%b6%88%e6%81%af%e9%98%9f%e5%88%97%e7%9a%84%e5%af%b9%e6%af%94&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;strong&gt;特性&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;strong&gt;Kafka&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;strong&gt;RocketMQ&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;strong&gt;RabbitMQ&lt;/strong&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;顺序性保证&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;分区内有序，分区间无序&lt;/td&gt;&#xA;          &lt;td&gt;队列内有序，队列间无序&lt;/td&gt;&#xA;          &lt;td&gt;默认无序，需单队列单消费者&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;全局有序实现&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;单分区主题（牺牲吞吐）或 Key 分区&lt;/td&gt;&#xA;          &lt;td&gt;单队列主题或 Key 选择队列&lt;/td&gt;&#xA;          &lt;td&gt;单队列单消费者或消息分组&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;并行能力&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;高（多分区并行）&lt;/td&gt;&#xA;          &lt;td&gt;高（多队列并行）&lt;/td&gt;&#xA;          &lt;td&gt;低（单队列限制）&lt;a href=&#34;@ref&#34;&gt;40&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;适用场景&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;日志聚合、流处理、高吞吐局部有序&lt;/td&gt;&#xA;          &lt;td&gt;金融交易、分布式事务&lt;/td&gt;&#xA;          &lt;td&gt;低吞吐、简单顺序需求&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;三kafka-的局限性&#34;&gt;&#xA;  三、&lt;strong&gt;Kafka 的局限性&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%89kafka-%e7%9a%84%e5%b1%80%e9%99%90%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;全局有序成本高&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kafka突然宕机了消息会不会丢失</title>
      <link>/post/computer-science/llm/2025-03-30-9-kafka%E7%AA%81%E7%84%B6%E5%AE%95%E6%9C%BA%E4%BA%86%E6%B6%88%E6%81%AF%E4%BC%9A%E4%B8%8D%E4%BC%9A%E4%B8%A2%E5%A4%B1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/llm/2025-03-30-9-kafka%E7%AA%81%E7%84%B6%E5%AE%95%E6%9C%BA%E4%BA%86%E6%B6%88%E6%81%AF%E4%BC%9A%E4%B8%8D%E4%BC%9A%E4%B8%A2%E5%A4%B1/</guid>
      <description>&lt;h1 id=&#34;kafka突然宕机了消息会不会丢失&#34;&gt;&#xA;  Kafka突然宕机了消息会不会丢失&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#kafka%e7%aa%81%e7%84%b6%e5%ae%95%e6%9c%ba%e4%ba%86%e6%b6%88%e6%81%af%e4%bc%9a%e4%b8%8d%e4%bc%9a%e4%b8%a2%e5%a4%b1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Kafka 在突然宕机时是否会导致消息丢失，取决于其&lt;strong&gt;副本机制、生产者配置、刷盘策略&lt;/strong&gt;等多个因素。以下是具体分析：&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;一可能导致消息丢失的场景&#34;&gt;&#xA;  一、&lt;strong&gt;可能导致消息丢失的场景&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e5%8f%af%e8%83%bd%e5%af%bc%e8%87%b4%e6%b6%88%e6%81%af%e4%b8%a2%e5%a4%b1%e7%9a%84%e5%9c%ba%e6%99%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;生产者未启用高可靠性配置&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;若生产者设置 &lt;code&gt;acks=0&lt;/code&gt; 或 &lt;code&gt;acks=1&lt;/code&gt;，且消息未完全同步到副本时 Leader 宕机，消息会丢失：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;acks=0&lt;/code&gt;：生产者不等待 Broker 确认，直接发送下一条消息，宕机时丢失风险最高&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;11&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;acks=1&lt;/code&gt;：仅 Leader 写入本地日志即返回成功，若 Follower 未同步且 Leader 宕机，消息丢失&lt;a href=&#34;@ref&#34;&gt;11&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;18&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Broker 刷盘策略为异步&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Kafka 默认先将消息写入操作系统的 &lt;strong&gt;PageCache&lt;/strong&gt;，异步刷盘。若服务器宕机，PageCache 中未刷盘的消息会丢失&lt;a href=&#34;@ref&#34;&gt;11&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;18&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;副本同步不足&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;若 &lt;code&gt;min.insync.replicas=1&lt;/code&gt;（默认），且仅 Leader 持有消息时宕机，即使设置 &lt;code&gt;acks=all&lt;/code&gt; 也可能丢失消息&lt;a href=&#34;@ref&#34;&gt;18&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;23&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;二避免消息丢失的配置&#34;&gt;&#xA;  二、&lt;strong&gt;避免消息丢失的配置&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e9%81%bf%e5%85%8d%e6%b6%88%e6%81%af%e4%b8%a2%e5%a4%b1%e7%9a%84%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;生产者端&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;设置 &lt;code&gt;acks=all&lt;/code&gt;：确保所有 ISR（同步副本）均写入消息后才返回成功&lt;a href=&#34;@ref&#34;&gt;11&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;18&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;启用幂等性（&lt;code&gt;enable.idempotence=true&lt;/code&gt;）和重试机制（&lt;code&gt;retries&amp;gt;0&lt;/code&gt;），防止重复发送和网络抖动导致丢失&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;43&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Broker 端&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;提高 &lt;code&gt;min.insync.replicas&lt;/code&gt;（如设置为 2），确保至少两个副本同步成功&lt;a href=&#34;@ref&#34;&gt;18&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;23&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;同步刷盘（&lt;code&gt;log.flush.interval.messages=1&lt;/code&gt;），但会显著降低性能，仅适用于金融等高可靠性场景&lt;a href=&#34;@ref&#34;&gt;11&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;18&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Topic 配置&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;设置 &lt;code&gt;replication.factor≥3&lt;/code&gt;，多副本冗余存储，即使一台 Broker 宕机，其他副本仍可提供服务&lt;a href=&#34;@ref&#34;&gt;23&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;三kafka-的可靠性保障机制&#34;&gt;&#xA;  三、&lt;strong&gt;Kafka 的可靠性保障机制&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%89kafka-%e7%9a%84%e5%8f%af%e9%9d%a0%e6%80%a7%e4%bf%9d%e9%9a%9c%e6%9c%ba%e5%88%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;ISR 机制&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;只有与 Leader 同步的副本（ISR）才能参与选举，避免数据不一致&lt;a href=&#34;@ref&#34;&gt;18&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;23&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;自动故障恢复&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Leader 宕机后，Controller 会从 ISR 中选举新 Leader，继续提供服务&lt;a href=&#34;@ref&#34;&gt;23&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;持久化设计&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;消息以追加日志（append-only）形式写入磁盘，即使消费者已消费，数据仍保留（可配置保留时间）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;四总结&#34;&gt;&#xA;  四、&lt;strong&gt;总结&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9b%9b%e6%80%bb%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;可能丢失&lt;/strong&gt;：若配置为 &lt;code&gt;acks=0/1&lt;/code&gt;、异步刷盘或副本不足时，宕机会导致消息丢失。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;不会丢失&lt;/strong&gt;：若配置 &lt;code&gt;acks=all&lt;/code&gt;、同步刷盘且 &lt;code&gt;min.insync.replicas≥2&lt;/code&gt;，即使单台 Broker 宕机，消息仍可从其他副本恢复&lt;a href=&#34;@ref&#34;&gt;11&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;18&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;23&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;建议&lt;/strong&gt;：根据业务重要性权衡性能与可靠性，金融级场景建议同步刷盘 + 多副本 + 事务支持（&lt;code&gt;transactional.id&lt;/code&gt;）&lt;a href=&#34;@ref&#34;&gt;43&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>postgresql中分区键会自动创建索引吗</title>
      <link>/post/computer-science/llm/2025-03-30-2-postgresql%E4%B8%AD%E5%88%86%E5%8C%BA%E9%94%AE%E4%BC%9A%E8%87%AA%E5%8A%A8%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95%E5%90%97/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/llm/2025-03-30-2-postgresql%E4%B8%AD%E5%88%86%E5%8C%BA%E9%94%AE%E4%BC%9A%E8%87%AA%E5%8A%A8%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95%E5%90%97/</guid>
      <description>&lt;h1 id=&#34;postgresql中分区键会自动创建索引吗&#34;&gt;&#xA;  postgresql中分区键会自动创建索引吗&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#postgresql%e4%b8%ad%e5%88%86%e5%8c%ba%e9%94%ae%e4%bc%9a%e8%87%aa%e5%8a%a8%e5%88%9b%e5%bb%ba%e7%b4%a2%e5%bc%95%e5%90%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;在PostgreSQL中，&lt;strong&gt;分区键不会自动创建索引&lt;/strong&gt;。以下是详细说明和相关建议：&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;1-分区键与索引的关系&#34;&gt;&#xA;  1. &lt;strong&gt;分区键与索引的关系&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e5%88%86%e5%8c%ba%e9%94%ae%e4%b8%8e%e7%b4%a2%e5%bc%95%e7%9a%84%e5%85%b3%e7%b3%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;PostgreSQL的分区表机制本身&lt;strong&gt;不会自动为分区键创建索引&lt;/strong&gt;。分区键仅用于数据路由（决定数据存储在哪个分区），但不会自动优化基于该列的查询性能&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;如果需要对分区键进行高效查询（尤其是范围查询或等值查询），&lt;strong&gt;必须手动创建索引&lt;/strong&gt;。例如：&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- 在分区表上显式创建分区键索引&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INDEX&lt;/span&gt; idx_logdate &lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt; log_history (logdate);  &lt;span style=&#34;color:#75715e&#34;&gt;-- 自动在所有子分区上创建相同索引&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;从PostgreSQL 11开始，在父表上创建的索引会自动传播到所有子分区&lt;a href=&#34;@ref&#34;&gt;16&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;2-为什么需要手动创建索引&#34;&gt;&#xA;  2. &lt;strong&gt;为什么需要手动创建索引？&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e4%b8%ba%e4%bb%80%e4%b9%88%e9%9c%80%e8%a6%81%e6%89%8b%e5%8a%a8%e5%88%9b%e5%bb%ba%e7%b4%a2%e5%bc%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;分区剪枝（Partition Pruning）依赖分区键&lt;/strong&gt;：虽然查询时PostgreSQL会根据分区键过滤不需要的分区，但如果查询条件还包含其他非分区键列，仍需额外索引来加速&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;26&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;唯一约束的限制&lt;/strong&gt;：若要在分区表上创建主键或唯一约束，&lt;strong&gt;必须包含分区键列&lt;/strong&gt;，否则无法保证全局唯一性&lt;a href=&#34;@ref&#34;&gt;16&lt;/a&gt;。例如：&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- 正确做法：包含分区键&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ALTER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; sales &lt;span style=&#34;color:#66d9ef&#34;&gt;ADD&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;PRIMARY&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;KEY&lt;/span&gt; (order_id, sale_date);  &lt;span style=&#34;color:#75715e&#34;&gt;-- sale_date是分区键&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;3-自动索引传播的特性&#34;&gt;&#xA;  3. &lt;strong&gt;自动索引传播的特性&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-%e8%87%aa%e5%8a%a8%e7%b4%a2%e5%bc%95%e4%bc%a0%e6%92%ad%e7%9a%84%e7%89%b9%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;从PostgreSQL 11开始，在父表上创建的索引（包括唯一索引）会自动在所有子分区上创建相同结构的索引&lt;a href=&#34;@ref&#34;&gt;16&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;但需注意：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;并发创建索引（CONCURRENTLY）&lt;/strong&gt;：无法直接在父表上并发创建索引，需逐个分区操作&lt;a href=&#34;@ref&#34;&gt;29&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;索引类型一致性&lt;/strong&gt;：所有分区的索引必须与父表索引类型相同（如B-tree、Hash等）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;4-最佳实践建议&#34;&gt;&#xA;  4. &lt;strong&gt;最佳实践建议&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4-%e6%9c%80%e4%bd%b3%e5%ae%9e%e8%b7%b5%e5%bb%ba%e8%ae%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;显式为高频查询的分区键创建索引&lt;/strong&gt;，即使它已用于分区剪枝&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;26&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;结合查询模式设计索引&lt;/strong&gt;：若查询常使用&lt;code&gt;分区键 + 其他列&lt;/code&gt;，可创建复合索引。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;定期监控索引使用情况&lt;/strong&gt;：删除未使用的索引以减少维护开销。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;总结&#34;&gt;&#xA;  总结&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%80%bb%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;PostgreSQL的分区键本身不会自动创建索引，需手动添加。合理设计分区键和索引（尤其是包含分区键的复合索引）能显著提升查询性能&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;16&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>redis</title>
      <link>/post/computer-science/redis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/redis/</guid>
      <description>&lt;h1 id=&#34;redis&#34;&gt;&#xA;  redis&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#redis&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;redis基本数据类型-使用场景&#34;&gt;&#xA;  redis基本数据类型, 使用场景&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#redis%e5%9f%ba%e6%9c%ac%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b-%e4%bd%bf%e7%94%a8%e5%9c%ba%e6%99%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;5大基本类型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;String 字符串&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;常用场景：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;缓存：存储用户信息、配置信息等。&lt;/li&gt;&#xA;&lt;li&gt;计数器：如文章阅读量、点赞数等。&lt;/li&gt;&#xA;&lt;li&gt;分布式锁：通过 SETNX 命令实现。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Hash 哈希&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;常用场景：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;存储用户信息：如用户 ID 作为 key，用户属性（姓名、年龄等）作为 field-value 对。&lt;/li&gt;&#xA;&lt;li&gt;存储商品信息：如商品 ID 作为 key，商品详情（价格、库存等）作为 field-value 对。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;List 列表&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;常用场景：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;消息队列：通过 LPUSH 和 RPOP 实现简单的消息队列。&lt;/li&gt;&#xA;&lt;li&gt;最新消息列表：如微博的时间线、朋友圈动态等。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Set 集合&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;常用场景：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;标签系统：如文章标签、用户兴趣标签等。&lt;/li&gt;&#xA;&lt;li&gt;去重：如统计独立 IP 访问量。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Sorted Set 有序集合&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;常用场景：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;排行榜：如游戏积分排行榜、热搜榜等。&lt;/li&gt;&#xA;&lt;li&gt;延迟队列：通过分数存储时间戳，按时间顺序处理任务。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;什么是缓存击穿-缓存穿透-缓存雪崩&#34;&gt;&#xA;  什么是缓存击穿 缓存穿透 缓存雪崩&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%80%e4%b9%88%e6%98%af%e7%bc%93%e5%ad%98%e5%87%bb%e7%a9%bf-%e7%bc%93%e5%ad%98%e7%a9%bf%e9%80%8f-%e7%bc%93%e5%ad%98%e9%9b%aa%e5%b4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;缓存击穿 Cache Breakdown&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;热点数据过期的同时有大量的请求访问该热点数据，导致数据库负载突然增加&lt;/li&gt;&#xA;&lt;li&gt;解决办法&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用互斥锁，同时只能一个线程读取数据库中的数据后保存到缓存中，其他线程等待读取缓存中的值&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;缓存穿透 Cache Penetration&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;查询的数据在缓存和数据库中都不存在&lt;/li&gt;&#xA;&lt;li&gt;解决办法&#xA;&lt;ul&gt;&#xA;&lt;li&gt;缓存空值&lt;/li&gt;&#xA;&lt;li&gt;布隆过滤器&lt;/li&gt;&#xA;&lt;li&gt;参数校验&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;简单动态字符串&#34;&gt;&#xA;  简单动态字符串&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ae%80%e5%8d%95%e5%8a%a8%e6%80%81%e5%ad%97%e7%ac%a6%e4%b8%b2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;链表&#34;&gt;&#xA;  链表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;字典&#34;&gt;&#xA;  字典&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ad%97%e5%85%b8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;跳跃表&#34;&gt;&#xA;  跳跃表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%b7%b3%e8%b7%83%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;整数集合&#34;&gt;&#xA;  整数集合&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b4%e6%95%b0%e9%9b%86%e5%90%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;压缩列表&#34;&gt;&#xA;  压缩列表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8e%8b%e7%bc%a9%e5%88%97%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;对象&#34;&gt;&#xA;  对象&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%af%b9%e8%b1%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;数据库&#34;&gt;&#xA;  数据库&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e5%ba%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;redis-集群&#34;&gt;&#xA;  redis 集群&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#redis-%e9%9b%86%e7%be%a4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;redis-的集群模式有哪些&#34;&gt;&#xA;  redis 的集群模式有哪些？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#redis-%e7%9a%84%e9%9b%86%e7%be%a4%e6%a8%a1%e5%bc%8f%e6%9c%89%e5%93%aa%e4%ba%9b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;主从模式&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主节点负责写操作，从节点负责读操作，实现读写分离&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;哨兵模式&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在主从复制的基础上，增加了自动故障转移功能。哨兵节点监控主从节点的状态，当主节点故障时，自动选举从节点为主节点&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;cluster模式&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通过数据分片（Sharding）实现分布式存储，支持自动故障转移和负载均衡&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;redis-数据如何进行分片&#34;&gt;&#xA;  redis 数据如何进行分片？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#redis-%e6%95%b0%e6%8d%ae%e5%a6%82%e4%bd%95%e8%bf%9b%e8%a1%8c%e5%88%86%e7%89%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;槽位计算：通过 CRC16(key) % 16384 计算键（key）所属的槽位&lt;/li&gt;&#xA;&lt;li&gt;槽位分配：每个节点负责维护一部分槽位，槽位分布均匀，支持动态扩容和缩容&lt;/li&gt;&#xA;&lt;li&gt;数据路由：客户端请求时，先计算 key 的槽位，然后根据槽位找到对应的节点&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;分片的实现方案有哪些&#34;&gt;&#xA;  分片的实现方案有哪些？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e7%89%87%e7%9a%84%e5%ae%9e%e7%8e%b0%e6%96%b9%e6%a1%88%e6%9c%89%e5%93%aa%e4%ba%9b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;客户端分片 Redis-rb Predis&lt;/li&gt;&#xA;&lt;li&gt;代理分片（客户端与Redis节点之间增加代理层 Twemproxy）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;增加了系统的复杂性和延迟&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;主从&#34;&gt;&#xA;  主从&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%bb%e4%bb%8e&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Reference&#xA;&lt;ul&gt;&#xA;&lt;li&gt;《Redis设计与实现》 第15章 复制&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;在Redis中，用户可以通过执行SLAVEOF命令或者设置slaveof选项，让一个服务器去复制（replicate）另一个服务器，我们称呼被复制的服务器为主服务器（master），而对主服务器进行复制的服务器则被称为从服务器（slave）&lt;/li&gt;&#xA;&lt;li&gt;进行复制中的主从服务器双方的数据库将保存相同的数据，概念上将这种现象称作“数据库状态一致”，或者简称“一致”。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;旧版复制功能的实现&#34;&gt;&#xA;  旧版复制功能的实现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%97%a7%e7%89%88%e5%a4%8d%e5%88%b6%e5%8a%9f%e8%83%bd%e7%9a%84%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;同步 sync&#xA;&lt;ul&gt;&#xA;&lt;li&gt;同步操作用于将从服务器的数据库状态更新至主服务器当前所处的数据库状态&lt;/li&gt;&#xA;&lt;li&gt;步骤&#xA;&lt;ul&gt;&#xA;&lt;li&gt;1）从服务器向主服务器发送SYNC命令。&lt;/li&gt;&#xA;&lt;li&gt;2）收到SYNC命令的主服务器执行BGSAVE命令，在后台生成一个RDB文件，并使用一个缓冲区记录从现在开始执行的所有写命令。&lt;/li&gt;&#xA;&lt;li&gt;3）当主服务器的BGSAVE命令执行完毕时，主服务器会将BGSAVE命令生成的RDB文件发送给从服务器，从服务器接收并载入这个RDB文件，将自己的数据库状态更新至主服务器执行BGSAVE命令时的数据库状态。&lt;/li&gt;&#xA;&lt;li&gt;4）主服务器将记录在缓冲区里面的所有写命令发送给从服务器，从服务器执行这些写命令，将自己的数据库状态更新至主服务器数据库当前所处的状态。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;命令传播 command propagate&#xA;&lt;ul&gt;&#xA;&lt;li&gt;命令传播操作则用于在主服务器的数据库状态被修改，导致主从服务器的数据库状态出现不一致时，让主从服务器的数据库重新回到一致状态&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;旧版复制功能的缺陷&#34;&gt;&#xA;  旧版复制功能的缺陷&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%97%a7%e7%89%88%e5%a4%8d%e5%88%b6%e5%8a%9f%e8%83%bd%e7%9a%84%e7%bc%ba%e9%99%b7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在Redis中，从服务器对主服务器的复制可以分为以下两种情况&#xA;&lt;ul&gt;&#xA;&lt;li&gt;初次复制：从服务器以前没有复制过任何主服务器，或者从服务器当前要复制的主服务器和上一次复制的主服务器不同&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对于初次复制来说，旧版复制功能能够很好地完成任务&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;断线后重复制：处于命令传播阶段的主从服务器因为网络原因而中断了复制，但从服务器通过自动重连接重新连上了主服务器，并继续复制主服务器&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对于断线后重复制来说，旧版复制功能虽然也能让主从服务器重新回到一致状态，但效率却非常低&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;SYNC命令是一个非常耗费资源的操作&#xA;&lt;ul&gt;&#xA;&lt;li&gt;1）主服务器需要执行BGSAVE命令来生成RDB文件，这个生成操作会耗费主服务器大量的CPU、内存和磁盘I/O资源。&lt;/li&gt;&#xA;&lt;li&gt;2）主服务器需要将自己生成的RDB文件发送给从服务器，这个发送操作会耗费主从服务器大量的网络资源（带宽和流量），并对主服务器响应命令请求的时间产生影响。&lt;/li&gt;&#xA;&lt;li&gt;3）接收到RDB文件的从服务器需要载入主服务器发来的RDB文件，并且在载入期间，从服务器会因为阻塞而没办法处理命令请求。&lt;/li&gt;&#xA;&lt;li&gt;因为SYNC命令是一个如此耗费资源的操作，所以Redis有必要保证在真正有需要时才执行SYNC命令。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;新版复制功能的实现&#34;&gt;&#xA;  新版复制功能的实现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%96%b0%e7%89%88%e5%a4%8d%e5%88%b6%e5%8a%9f%e8%83%bd%e7%9a%84%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;为了解决旧版复制功能在处理断线重复制情况时的低效问题，Redis从2.8版本开始，使用&lt;strong&gt;PSYNC&lt;/strong&gt;命令代替SYNC命令来执行复制时的同步操作&lt;/li&gt;&#xA;&lt;li&gt;PSYNC命令具有完整重同步（full resynchronization）和部分重同步（partial resynchronization）两种模式&#xA;&lt;ul&gt;&#xA;&lt;li&gt;其中完整重同步用于处理初次复制情况：完整重同步的执行步骤和SYNC命令的执行步骤基本一样，它们都是通过让主服务器创建并发送RDB文件，以及向从服务器发送保存在缓冲区里面的写命令来进行同步&lt;/li&gt;&#xA;&lt;li&gt;而部分重同步则用于处理断线后重复制情况：当从服务器在断线后重新连接主服务器时，如果条件允许，主服务器可以将主从服务器连接断开期间执行的写命令发送给从服务器，从服务器只要接收并执行这些写命令，就可以将数据库更新至主服务器当前所处的状态&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;部分重同步的实现&#34;&gt;&#xA;  部分重同步的实现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%83%a8%e5%88%86%e9%87%8d%e5%90%8c%e6%ad%a5%e7%9a%84%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;部分重同步功能由以下三个部分构成：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主服务器的复制偏移量（replication offset）和从服务器的复制偏移量&#xA;&lt;ul&gt;&#xA;&lt;li&gt;执行复制的双方——主服务器和从服务器会分别维护一个复制偏移量&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主服务器每次向从服务器传播N个字节的数据时，就将自己的复制偏移量的值加上N&lt;/li&gt;&#xA;&lt;li&gt;从服务器每次收到主服务器传播来的N个字节的数据时，就将自己的复制偏移量的值加上N&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;通过对比主从服务器的复制偏移量，程序可以很容易地知道主从服务器是否处于一致状态&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果主从服务器处于一致状态，那么主从服务器两者的偏移量总是相同的&lt;/li&gt;&#xA;&lt;li&gt;相反，如果主从服务器两者的偏移量并不相同，那么说明主从服务器并未处于一致状态&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;主服务器的复制积压缓冲区（replication backlog）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;复制积压缓冲区是由主服务器维护的一个固定长度（fixed-size）先进先出（FIFO）队列，默认大小为1MB&#xA;&lt;ul&gt;&#xA;&lt;li&gt;和普通先进先出队列随着元素的增加和减少而动态调整长度不同，固定长度先进先出队列的长度是固定的，当入队元素的数量大于队列长度时，最先入队的元素会被弹出，而新元素会被放入队列&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;当主服务器进行命令传播时，它不仅会将写命令发送给所有从服务器，还会将写命令入队到复制积压缓冲区里面&lt;/li&gt;&#xA;&lt;li&gt;主服务器的复制积压缓冲区里面会保存着一部分最近传播的写命令，并且复制积压缓冲区会为队列中的每个字节记录相应的复制偏移量&lt;/li&gt;&#xA;&lt;li&gt;当从服务器重新连上主服务器时，从服务器会通过PSYNC命令将自己的复制偏移量offset发送给主服务器，主服务器会根据这个复制偏移量来决定对从服务器执行何种同步操作&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果offset偏移量之后的数据（也即是偏移量offset+1开始的数据）仍然存在于复制积压缓冲区里面，那么主服务器将对从服务器执行部分重同步操作&lt;/li&gt;&#xA;&lt;li&gt;相反，如果offset偏移量之后的数据已经不存在于复制积压缓冲区，那么主服务器将对从服务器执行完整重同步操作&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;根据需要调整复制积压缓冲区的大小&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Redis为复制积压缓冲区设置的默认大小为1MB，如果主服务器需要执行大量写命令，又或者主从服务器断线后重连接所需的时间比较长，那么这个大小也许并不合适&lt;/li&gt;&#xA;&lt;li&gt;如果复制积压缓冲区的大小设置得不恰当，那么PSYNC命令的复制重同步模式就不能正常发挥作用，因此，正确估算和设置复制积压缓冲区的大小非常重要&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果复制积压缓冲区的大小设置得不恰当，那么PSYNC命令的复制重同步模式就不能正常发挥作用，因此，正确估算和设置复制积压缓冲区的大小非常重要&#xA;&lt;ul&gt;&#xA;&lt;li&gt;其中second为从服务器断线后重新连接上主服务器所需的平均时间（以秒计算）&lt;/li&gt;&#xA;&lt;li&gt;而write_size_per_second则是主服务器平均每秒产生的写命令数据量（协议格式的写命令的长度总和）&lt;/li&gt;&#xA;&lt;li&gt;例如，如果主服务器平均每秒产生1 MB的写数据，而从服务器断线之后平均要5秒才能重新连接上主服务器，那么复制积压缓冲区的大小就不能低于5MB。&lt;/li&gt;&#xA;&lt;li&gt;为了安全起见，可以将复制积压缓冲区的大小设为2&lt;em&gt;second&lt;/em&gt;write_size_per_second，这样可以保证绝大部分断线情况都能用部分重同步来处理&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;服务器的运行ID（run ID）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;每个Redis服务器，不论主服务器还是从服务，都会有自己的运行ID&lt;/li&gt;&#xA;&lt;li&gt;运行ID在服务器启动时自动生成，由40个随机的十六进制字符组成&lt;/li&gt;&#xA;&lt;li&gt;当从服务器对主服务器进行初次复制时，主服务器会将自己的运行ID传送给从服务器，而从服务器则会将这个运行ID保存起来&lt;/li&gt;&#xA;&lt;li&gt;当从服务器断线并重新连上一个主服务器时，从服务器将向当前连接的主服务器发送之前保存的运行ID&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果从服务器保存的运行ID和当前连接的主服务器的运行ID相同，那么说明从服务器断线之前复制的就是当前连接的这个主服务器，主服务器可以继续尝试执行部分重同步操作&lt;/li&gt;&#xA;&lt;li&gt;相反地，如果从服务器保存的运行ID和当前连接的主服务器的运行ID并不相同，那么说明从服务器断线之前复制的主服务器并不是当前连接的这个主服务器，主服务器将对从服务器执行完整重同步操作&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;psync-命令的实现&#34;&gt;&#xA;  PSYNC 命令的实现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#psync-%e5%91%bd%e4%bb%a4%e7%9a%84%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;复制的实现&#34;&gt;&#xA;  复制的实现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%a4%8d%e5%88%b6%e7%9a%84%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;心跳检测&#34;&gt;&#xA;  心跳检测&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bf%83%e8%b7%b3%e6%a3%80%e6%b5%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;sentinel&#34;&gt;&#xA;  Sentinel&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#sentinel&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Sentinel（哨岗、哨兵）是Redis的高可用性（high availability）解决方案：由一个或多个Sentinel实例（instance）组成的Sentinel系统（system）可以监视任意多个主服务器，以及这些主服务器属下的所有从服务器，并在被监视的主服务器进入下线状态时，自动将下线主服务器属下的某个从服务器升级为新的主服务器，然后由新的主服务器代替已下线的主服务器继续处理命令请求&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;集群&#34;&gt;&#xA;  集群&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9b%86%e7%be%a4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Redis集群是Redis提供的分布式数据库方案，集群通过分片（sharding）来进行数据共享，并提供复制和故障转移功能&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;节点&#34;&gt;&#xA;  节点&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%8a%82%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一个Redis集群通常由多个节点（node）组成，在刚开始的时候，每个节点都是相互独立的，它们都处于一个只包含自己的集群当中，要组建一个真正可工作的集群，我们必须将各个独立的节点连接起来，构成一个包含多个节点的集群&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;槽指派&#34;&gt;&#xA;  槽指派&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a7%bd%e6%8c%87%e6%b4%be&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Redis集群通过分片的方式来保存数据库中的键值对：集群的整个数据库被分为16384个槽（slot），数据库中的每个键都属于这16384个槽的其中一个，集群中的每个节点可以处理0个或最多16384个槽&lt;/li&gt;&#xA;&lt;li&gt;当数据库中的16384个槽都有节点在处理时，集群处于上线状态（ok）；相反地，如果数据库中有任何一个槽没有得到处理，那么集群处于下线状态（fail）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;在集群中执行命令&#34;&gt;&#xA;  在集群中执行命令&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9c%a8%e9%9b%86%e7%be%a4%e4%b8%ad%e6%89%a7%e8%a1%8c%e5%91%bd%e4%bb%a4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;当客户端向节点发送与数据库键有关的命令时，接收命令的节点会计算出命令要处理的数据库键属于哪个槽，并检查这个槽是否指派给了自己&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果键所在的槽正好就指派给了当前节点，那么节点直接执行这个命令&lt;/li&gt;&#xA;&lt;li&gt;如果键所在的槽并没有指派给当前节点，那么节点会向客户端返回一个MOVED错误，指引客户端转向（redirect）至正确的节点，并再次发送之前想要执行的命令&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;重新分片&#34;&gt;&#xA;  重新分片&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%87%8d%e6%96%b0%e5%88%86%e7%89%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Redis集群的重新分片操作可以将任意数量已经指派给某个节点（源节点）的槽改为指派给另一个节点（目标节点），并且相关槽所属的键值对也会从源节点被移动到目标节点。&lt;/li&gt;&#xA;&lt;li&gt;重新分片操作可以在线（online）进行，在重新分片的过程中，集群不需要下线，并且源节点和目标节点都可以继续处理命令请求&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;ask错误&#34;&gt;&#xA;  ASK错误&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#ask%e9%94%99%e8%af%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;复制与故障转移&#34;&gt;&#xA;  复制与故障转移&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%a4%8d%e5%88%b6%e4%b8%8e%e6%95%85%e9%9a%9c%e8%bd%ac%e7%a7%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Redis集群中的节点分为主节点（master）和从节点（slave），其中主节点用于处理槽，而从节点则用于复制某个主节点，并在被复制的主节点下线时，代替下线主节点继续处理命令请求&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;消息&#34;&gt;&#xA;  消息&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b6%88%e6%81%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;集群中的各个节点通过发送和接收消息（message）来进行通信，我们称发送消息的节点为发送者（sender），接收消息的节点为接收者（receiver）&lt;/li&gt;&#xA;&lt;li&gt;节点发送的消息主要有以下五种&#xA;&lt;ul&gt;&#xA;&lt;li&gt;MEET&lt;/li&gt;&#xA;&lt;li&gt;PING&lt;/li&gt;&#xA;&lt;li&gt;PONG&lt;/li&gt;&#xA;&lt;li&gt;FAIL&lt;/li&gt;&#xA;&lt;li&gt;PUBLISH&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>security</title>
      <link>/post/computer-science/security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/security/</guid>
      <description>&lt;h1 id=&#34;security&#34;&gt;&#xA;  security&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#security&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;man-in-the-middle-attack-中间人攻击&#34;&gt;&#xA;  man-in-the-middle attack 中间人攻击&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#man-in-the-middle-attack-%e4%b8%ad%e9%97%b4%e4%ba%ba%e6%94%bb%e5%87%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;SSL Pinning is a technique we use on the client side to avoid a man-in-the-middle attack by validating the server certificates. The developers embed (or pin) a list of trustful certificates in the client application during development and use them to compare against the server certificates during runtime.&lt;/p&gt;&#xA;&lt;p&gt;If there is a mismatch between the server and the local copy of certificates, the connection will be disrupted, and no further user data will be sent to that server. This enforcement ensures that user devices communicate only with dedicated, trustful servers.&lt;/p&gt;</description>
    </item>
    <item>
      <title>不同消息队列消息写入方式对比</title>
      <link>/post/computer-science/llm/2025-03-30-4-%E4%B8%8D%E5%90%8C%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E6%B6%88%E6%81%AF%E5%86%99%E5%85%A5%E6%96%B9%E5%BC%8F%E5%AF%B9%E6%AF%94/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/llm/2025-03-30-4-%E4%B8%8D%E5%90%8C%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E6%B6%88%E6%81%AF%E5%86%99%E5%85%A5%E6%96%B9%E5%BC%8F%E5%AF%B9%E6%AF%94/</guid>
      <description>&lt;h1 id=&#34;不同消息队列消息写入方式对比&#34;&gt;&#xA;  不同消息队列消息写入方式对比&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%8d%e5%90%8c%e6%b6%88%e6%81%af%e9%98%9f%e5%88%97%e6%b6%88%e6%81%af%e5%86%99%e5%85%a5%e6%96%b9%e5%bc%8f%e5%af%b9%e6%af%94&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;以下是主流消息队列（Kafka、RocketMQ、RabbitMQ、Pulsar、ActiveMQ）在消息写入方式上的对比，结合性能、可靠性和适用场景进行综合分析：&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;1-kafka&#34;&gt;&#xA;  1. &lt;strong&gt;Kafka&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-kafka&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;写入方式&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;顺序追加写入&lt;/strong&gt;：消息以追加（Append-only）方式写入分区日志文件，利用磁盘顺序I/O的高性能特性&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;15&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;28&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;批量发送&lt;/strong&gt;：生产者（Producer）将消息累积到批次（如1MB或100ms阈值）后批量发送，减少网络和磁盘I/O次数&lt;a href=&#34;@ref&#34;&gt;28&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;异步刷盘&lt;/strong&gt;：默认异步刷盘（依赖页缓存），通过参数可配置同步刷盘（牺牲性能换可靠性）&lt;a href=&#34;@ref&#34;&gt;28&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;高吞吐（10万级/秒），适合日志、大数据场景&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;15&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;不支持延迟消息，仅保证分区内有序&lt;a href=&#34;@ref&#34;&gt;16&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;28&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;2-rocketmq&#34;&gt;&#xA;  2. &lt;strong&gt;RocketMQ&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-rocketmq&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;写入方式&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;顺序写+索引&lt;/strong&gt;：消息追加到CommitLog文件（顺序写），同时构建索引文件（ConsumeQueue）加速查询&lt;a href=&#34;@ref&#34;&gt;42&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;同步/异步刷盘&lt;/strong&gt;：支持同步刷盘（强一致性）和异步刷盘（高性能）&lt;a href=&#34;@ref&#34;&gt;42&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;43&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;事务消息&lt;/strong&gt;：通过“半消息”机制实现分布式事务，先暂存消息，本地事务提交后再确认写入&lt;a href=&#34;@ref&#34;&gt;42&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;兼顾高吞吐（10万级/秒）和功能完备性（延迟消息、事务支持）&lt;a href=&#34;@ref&#34;&gt;16&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;28&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;适合电商、金融等业务场景&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;42&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;3-rabbitmq&#34;&gt;&#xA;  3. &lt;strong&gt;RabbitMQ&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-rabbitmq&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;写入方式&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;内存+磁盘混合&lt;/strong&gt;：默认优先写入内存，通过持久化队列（Durable Queue）将消息同步到磁盘&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;28&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Exchange路由&lt;/strong&gt;：消息通过Exchange根据路由规则（Direct/Topic/Fanout）分发到队列&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;16&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;实时性高（微秒级延迟），但吞吐量较低（万级/秒）&lt;a href=&#34;@ref&#34;&gt;28&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;支持复杂路由和消息确认机制，适合中小规模业务&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;16&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;4-pulsar&#34;&gt;&#xA;  4. &lt;strong&gt;Pulsar&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4-pulsar&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;写入方式&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;分层存储&lt;/strong&gt;：消息先写入Broker的内存层，再异步持久化到BookKeeper集群（计算与存储分离）&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;16&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;分片（Segment）存储&lt;/strong&gt;：Topic分区划分为Segment，分散存储提高扩展性&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;支持秒级延迟消息和多租户，适合云原生和异地容灾场景&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;16&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;吞吐量接近Kafka，但架构更复杂&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;5-activemq&#34;&gt;&#xA;  5. &lt;strong&gt;ActiveMQ&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#5-activemq&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;写入方式&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;内存/KahaDB/JDBC&lt;/strong&gt;：默认KahaDB（基于日志的存储），支持JDBC持久化到数据库。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;同步刷盘可选&lt;/strong&gt;：通过配置选择是否同步刷盘。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;功能全面但吞吐量最低（万级/秒），适合传统企业应用&lt;a href=&#34;@ref&#34;&gt;28&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;社区活跃度低，逐渐被替代&lt;a href=&#34;@ref&#34;&gt;28&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;对比总结&#34;&gt;&#xA;  &lt;strong&gt;对比总结&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%af%b9%e6%af%94%e6%80%bb%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;特性&lt;/th&gt;&#xA;          &lt;th&gt;Kafka&lt;/th&gt;&#xA;          &lt;th&gt;RocketMQ&lt;/th&gt;&#xA;          &lt;th&gt;RabbitMQ&lt;/th&gt;&#xA;          &lt;th&gt;Pulsar&lt;/th&gt;&#xA;          &lt;th&gt;ActiveMQ&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;写入性能&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;最高（顺序I/O+批量）&lt;/td&gt;&#xA;          &lt;td&gt;高（顺序写+索引）&lt;/td&gt;&#xA;          &lt;td&gt;低（内存优先）&lt;/td&gt;&#xA;          &lt;td&gt;高（分层存储）&lt;/td&gt;&#xA;          &lt;td&gt;最低&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;可靠性&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;异步刷盘可能丢数据&lt;/td&gt;&#xA;          &lt;td&gt;支持同步刷盘&lt;/td&gt;&#xA;          &lt;td&gt;依赖持久化配置&lt;/td&gt;&#xA;          &lt;td&gt;高（BookKeeper）&lt;/td&gt;&#xA;          &lt;td&gt;依赖配置&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;延迟消息&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;不支持&lt;/td&gt;&#xA;          &lt;td&gt;支持&lt;/td&gt;&#xA;          &lt;td&gt;支持（插件）&lt;/td&gt;&#xA;          &lt;td&gt;支持秒级&lt;/td&gt;&#xA;          &lt;td&gt;支持&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;适用场景&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;日志/大数据&lt;/td&gt;&#xA;          &lt;td&gt;电商/金融&lt;/td&gt;&#xA;          &lt;td&gt;中小规模业务&lt;/td&gt;&#xA;          &lt;td&gt;云原生/异地容灾&lt;/td&gt;&#xA;          &lt;td&gt;传统企业应用&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;&lt;strong&gt;参考资料&lt;/strong&gt;：&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;15&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;16&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;28&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;42&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>分区表的索引如何创建，请以postgresql举例</title>
      <link>/post/computer-science/llm/2025-03-30-1-%E5%88%86%E5%8C%BA%E8%A1%A8%E7%9A%84%E7%B4%A2%E5%BC%95%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA-%E8%AF%B7%E4%BB%A5postgresql%E4%B8%BE%E4%BE%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/llm/2025-03-30-1-%E5%88%86%E5%8C%BA%E8%A1%A8%E7%9A%84%E7%B4%A2%E5%BC%95%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA-%E8%AF%B7%E4%BB%A5postgresql%E4%B8%BE%E4%BE%8B/</guid>
      <description>&lt;h1 id=&#34;分区表的索引如何创建请以postgresql举例&#34;&gt;&#xA;  分区表的索引如何创建，请以postgresql举例&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e5%8c%ba%e8%a1%a8%e7%9a%84%e7%b4%a2%e5%bc%95%e5%a6%82%e4%bd%95%e5%88%9b%e5%bb%ba%e8%af%b7%e4%bb%a5postgresql%e4%b8%be%e4%be%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h1 id=&#34;postgresql分区表索引创建指南&#34;&gt;&#xA;  PostgreSQL分区表索引创建指南&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#postgresql%e5%88%86%e5%8c%ba%e8%a1%a8%e7%b4%a2%e5%bc%95%e5%88%9b%e5%bb%ba%e6%8c%87%e5%8d%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;PostgreSQL中分区表索引的创建方法与普通表有所不同，需要特别注意分区表的特性。以下是详细的创建方法和示例：&lt;/p&gt;&#xA;&lt;h2 id=&#34;一基本索引创建方法&#34;&gt;&#xA;  一、基本索引创建方法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e5%9f%ba%e6%9c%ac%e7%b4%a2%e5%bc%95%e5%88%9b%e5%bb%ba%e6%96%b9%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1-自动分区索引postgresql-11&#34;&gt;&#xA;  1. 自动分区索引（PostgreSQL 11+）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e8%87%aa%e5%8a%a8%e5%88%86%e5%8c%ba%e7%b4%a2%e5%bc%95postgresql-11&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;从PostgreSQL 11开始，可以直接在父表上创建索引，系统会自动为所有子分区创建对应的索引&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;2&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;47&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- 创建分区表&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; sales (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    id SERIAL &lt;span style=&#34;color:#66d9ef&#34;&gt;PRIMARY&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;KEY&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    product VARCHAR,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sale_date DATE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;) PARTITION &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; RANGE (sale_date);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- 创建子分区&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; sales_2021_01_01 PARTITION &lt;span style=&#34;color:#66d9ef&#34;&gt;OF&lt;/span&gt; sales &lt;span style=&#34;color:#66d9ef&#34;&gt;FOR&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;VALUES&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2021-01-01&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;TO&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2021-01-02&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; sales_2021_01_02 PARTITION &lt;span style=&#34;color:#66d9ef&#34;&gt;OF&lt;/span&gt; sales &lt;span style=&#34;color:#66d9ef&#34;&gt;FOR&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;VALUES&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2021-01-02&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;TO&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2021-01-03&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- 在父表上创建索引，会自动应用到所有分区&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INDEX&lt;/span&gt; idx_product &lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt; sales (product);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-手动创建分区索引postgresql-10及以下&#34;&gt;&#xA;  2. 手动创建分区索引（PostgreSQL 10及以下）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e6%89%8b%e5%8a%a8%e5%88%9b%e5%bb%ba%e5%88%86%e5%8c%ba%e7%b4%a2%e5%bc%95postgresql-10%e5%8f%8a%e4%bb%a5%e4%b8%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;在PostgreSQL 10及以下版本，需要为每个分区单独创建索引：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- 为每个分区单独创建索引&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INDEX&lt;/span&gt; sales_2021_01_01_product_idx &lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt; sales_2021_01_01 (product);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INDEX&lt;/span&gt; sales_2021_01_02_product_idx &lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt; sales_2021_01_02 (product);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;二特殊索引类型&#34;&gt;&#xA;  二、特殊索引类型&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e7%89%b9%e6%ae%8a%e7%b4%a2%e5%bc%95%e7%b1%bb%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1-唯一索引和主键&#34;&gt;&#xA;  1. 唯一索引和主键&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e5%94%af%e4%b8%80%e7%b4%a2%e5%bc%95%e5%92%8c%e4%b8%bb%e9%94%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;PostgreSQL 11+支持在分区表上创建唯一约束和主键，但必须包含分区键&lt;a href=&#34;@ref&#34;&gt;47&lt;/a&gt;：&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>/post/computer-science/cloud/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/cloud/</guid>
      <description>&lt;p&gt;cloud&lt;/p&gt;</description>
    </item>
    <item>
      <title>Artificial Intelligence</title>
      <link>/post/computer-science/artificial-intelligence/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/artificial-intelligence/</guid>
      <description>&lt;h1 id=&#34;artificial-intelligence&#34;&gt;&#xA;  Artificial Intelligence&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#artificial-intelligence&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;cherry-studio&#34;&gt;&#xA;  Cherry Studio&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#cherry-studio&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://linux.do/t/topic/503051&#34;&gt;面向新手的MCP使用教程：在Cherry Studio中配置和使用模型上下文协议&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>crawler</title>
      <link>/post/computer-science/crawler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/crawler/</guid>
      <description>&lt;h1 id=&#34;crawler&#34;&gt;&#xA;  crawler&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#crawler&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/570489043&#34;&gt;针对豆瓣反爬问题的讨论&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/54742748&#34;&gt;从豆瓣的反爬说说自建代理池&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>git</title>
      <link>/post/computer-science/git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/git/</guid>
      <description>&lt;h1 id=&#34;branches&#34;&gt;&#xA;  branches&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#branches&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;git checkout main #切换到 main 分支&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;git branch #查看本地分支&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;git branch -a #查看所有分支（包括远程）&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;git branch -r #仅查看远程分支&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>networking</title>
      <link>/post/computer-science/networking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/networking/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.haoyep.com/posts/access-intranet-ports-via-cloudflare-tunnel/&#34;&gt;通过Cloudflare tunnel访问内网端口&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Python</title>
      <link>/post/computer-science/python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/python/</guid>
      <description>&lt;h1 id=&#34;python&#34;&gt;&#xA;  Python&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#python&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;yutto&#34;&gt;&#xA;  yutto&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#yutto&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;</description>
    </item>
    <item>
      <title>reddison</title>
      <link>/post/computer-science/reddison/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/reddison/</guid>
      <description>&lt;h1 id=&#34;什么情况下使用-redistemplate-什么时候使用-reddison&#34;&gt;&#xA;  什么情况下使用 redistemplate 什么时候使用 reddison&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%80%e4%b9%88%e6%83%85%e5%86%b5%e4%b8%8b%e4%bd%bf%e7%94%a8-redistemplate-%e4%bb%80%e4%b9%88%e6%97%b6%e5%80%99%e4%bd%bf%e7%94%a8-reddison&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;在 Java 项目中，选择 &lt;code&gt;RedisTemplate&lt;/code&gt;（Spring Data Redis）还是 &lt;code&gt;Redisson&lt;/code&gt; 取决于具体需求场景。以下是两者的对比和适用场景分析：&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;1-redistemplatespring-data-redis&#34;&gt;&#xA;  &lt;strong&gt;1. RedisTemplate（Spring Data Redis）&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-redistemplatespring-data-redis&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;定位&lt;/strong&gt;：Spring 生态提供的轻量级 Redis 操作工具，封装了 Jedis/Lettuce。&#xA;&lt;strong&gt;适用场景&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;简单的 CRUD 操作&lt;/strong&gt;：读写字符串、Hash、List 等基础数据结构。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;与 Spring 生态深度集成&lt;/strong&gt;：需要无缝配合 &lt;code&gt;@Cacheable&lt;/code&gt;、Spring Session 等功能。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;无需复杂分布式特性&lt;/strong&gt;：例如仅需缓存数据、计数器等基础功能。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;特点&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;支持 JSON、JDK 序列化等多种序列化方式。&lt;/li&gt;&#xA;&lt;li&gt;提供简单的发布/订阅、事务支持。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;不支持分布式锁、信号量等高级功能&lt;/strong&gt;（需自行基于 &lt;code&gt;SETNX&lt;/code&gt; 实现）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;示例场景&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 存储字符串&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;redisTemplate.&lt;span style=&#34;color:#a6e22e&#34;&gt;opsForValue&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 存储Hash&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;redisTemplate.&lt;span style=&#34;color:#a6e22e&#34;&gt;opsForHash&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;put&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user:1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Alice&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;h3 id=&#34;2-redisson&#34;&gt;&#xA;  &lt;strong&gt;2. Redisson&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-redisson&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;定位&lt;/strong&gt;：分布式服务框架，提供丰富的分布式数据结构和高阶功能。&#xA;&lt;strong&gt;适用场景&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;需要分布式协调&lt;/strong&gt;：如分布式锁（&lt;code&gt;RLock&lt;/code&gt;）、信号量（&lt;code&gt;RSemaphore&lt;/code&gt;）、延迟队列（&lt;code&gt;RDelayedQueue&lt;/code&gt;）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;复杂分布式业务&lt;/strong&gt;：跨 JVM 共享对象、分布式任务调度（如 &lt;code&gt;RExecutorService&lt;/code&gt;）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;高性能分布式缓存&lt;/strong&gt;：支持本地缓存联动（&lt;code&gt;RLocalCachedMap&lt;/code&gt;）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;特点&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;提供 &lt;code&gt;java.util.concurrent&lt;/code&gt; 风格的 API（如 &lt;code&gt;RMap&lt;/code&gt;、&lt;code&gt;RList&lt;/code&gt;）。&lt;/li&gt;&#xA;&lt;li&gt;内置看门狗机制避免锁死，支持锁自动续期。&lt;/li&gt;&#xA;&lt;li&gt;支持 Redis 集群、哨兵、云托管等多种部署模式。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;示例场景&lt;/strong&gt;：&lt;/p&gt;</description>
    </item>
    <item>
      <title>vim</title>
      <link>/post/computer-science/vim/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/vim/</guid>
      <description>&lt;h1 id=&#34;vim&#34;&gt;&#xA;  vim&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#vim&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;nvim&#34;&gt;&#xA;  nvim&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#nvim&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://neovim.io/&#34;&gt;neovim.io&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;直接用brew安装就行 &lt;code&gt;brew install neovim&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;第一步肯定是要把插件管理工具安装一下&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;junegunn/vim-plug&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;直接运行文档中linux的安装命令&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;indent&#34;&gt;&#xA;  indent&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#indent&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://vi.stackexchange.com/questions/42406/how-can-i-make-neovim-wrap-lines-in-respect-to-indentation&#34;&gt;How can I make (Neo)Vim wrap lines in respect to indentation?&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;这个可以解决缩进换行的问题，很棒！&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;clipboard-剪贴板&#34;&gt;&#xA;  clipboard 剪贴板&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#clipboard-%e5%89%aa%e8%b4%b4%e6%9d%bf&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;直接在配置文件中添加这两行，就可以了&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;vnoremap y &amp;#34;+y&#xA;set clipboard+=unnamedplus&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;quickfix&#34;&gt;&#xA;  quickfix&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#quickfix&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/71778294&#34;&gt;VIM学习笔记 QuickFix&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;lazyvim&#34;&gt;&#xA;  LazyVim&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#lazyvim&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.lazyvim.org/&#34;&gt;lazyvim org&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://yelog.org/2024/08/02/write-markdown-in-neovim-experience-and-tips/&#34;&gt;用 neovim 写 markdown 是一种什么样的体验(含技巧)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;markdown&#34;&gt;&#xA;  markdown&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#markdown&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;theCW&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1ox411R7bo&#34;&gt;不影响听课的高效率记笔记方法：Vim + Markdown - 教学与配置&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/iamcco/markdown-preview.nvim&#34;&gt;iamcco/markdown-preview.nvim&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://linkarzu.com/posts/neovim/markdown-setup-2024/&#34;&gt;My neovim markdown setup in 2024&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/tadmccorkle/markdown.nvim&#34;&gt;tadmccorkle/markdown.nvim&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/cnshsliu/smp.nvim&#34;&gt;cnshsliu/smp.nvim&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/MeanderingProgrammer/render-markdown.nvim&#34;&gt;MeanderingProgrammer/render-markdown.nvim&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;这个插件可以直接在 neovim 中直接 render markdown 文件&lt;/li&gt;&#xA;&lt;li&gt;但是安装只提供了 lua 的安装方式&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;outlinenvim&#34;&gt;&#xA;  outline.nvim&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#outlinenvim&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/hedyhli/outline.nvim&#34;&gt;hedyhli/outline.nvim&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;这个插件太优秀了！&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;解决 outline 左箭头和下箭头乱码的问题&lt;/p&gt;</description>
    </item>
    <item>
      <title>系统设计</title>
      <link>/post/computer-science/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</guid>
      <description>&lt;h1 id=&#34;系统设计&#34;&gt;&#xA;  系统设计&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%b3%bb%e7%bb%9f%e8%ae%be%e8%ae%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;数据持久化&#34;&gt;&#xA;  数据持久化&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e6%8c%81%e4%b9%85%e5%8c%96&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;冷热分离&#34;&gt;&#xA;  冷热分离&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%86%b7%e7%83%ad%e5%88%86%e7%a6%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/370031862&#34;&gt;冷热分离之 OTS 表格存储实战&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://developer.aliyun.com/article/1321304&#34;&gt;数据架构：数据冷热分离实践思考&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://xie.infoq.cn/article/8cb17c785305b9228bc92fea1&#34;&gt;数据架构：概念与冷热分离&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;查询分离&#34;&gt;&#xA;  查询分离&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9f%a5%e8%af%a2%e5%88%86%e7%a6%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;分表分库&#34;&gt;&#xA;  分表分库&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e8%a1%a8%e5%88%86%e5%ba%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h2 id=&#34;服务发现&#34;&gt;&#xA;  服务发现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9c%8d%e5%8a%a1%e5%8f%91%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;事务处理&#34;&gt;&#xA;  事务处理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8b%e5%8a%a1%e5%a4%84%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;本地事务&#34;&gt;&#xA;  本地事务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9c%ac%e5%9c%b0%e4%ba%8b%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;全局事务&#34;&gt;&#xA;  全局事务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%a8%e5%b1%80%e4%ba%8b%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;共享事务&#34;&gt;&#xA;  共享事务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%b1%e4%ba%ab%e4%ba%8b%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;分布式事务&#34;&gt;&#xA;  分布式事务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e5%b8%83%e5%bc%8f%e4%ba%8b%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h2 id=&#34;缓存&#34;&gt;&#xA;  缓存&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bc%93%e5%ad%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;客户端缓存&#34;&gt;&#xA;  客户端缓存&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%a2%e6%88%b7%e7%ab%af%e7%bc%93%e5%ad%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;系统是否真的需要缓存&#34;&gt;&#xA;  系统是否真的需要缓存？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%b3%bb%e7%bb%9f%e6%98%af%e5%90%a6%e7%9c%9f%e7%9a%84%e9%9c%80%e8%a6%81%e7%bc%93%e5%ad%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件开发中引入缓存的负面作用要明显大于硬件缓存带来的负面作用&#xA;&lt;ul&gt;&#xA;&lt;li&gt;从开发角度来说&#xA;&lt;ul&gt;&#xA;&lt;li&gt;你要考虑缓存的失效、更新、一致性等问题（硬件缓存也有这些问题，只是不需要由你去考虑，主流的ISA也都没有提供任何直接操作缓存的指令）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;从运维角度来说&#xA;&lt;ul&gt;&#xA;&lt;li&gt;缓存会掩盖一些缺陷，让问题在更久的时间以后，出现在距离发生现场更远的位置上&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;从安全角度来说&#xA;&lt;ul&gt;&#xA;&lt;li&gt;缓存可能会泄漏某些保密数据，也是容易受到攻击的薄弱点&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;引入缓存的理由&#xA;&lt;ul&gt;&#xA;&lt;li&gt;为缓解CPU压力而引入缓存&#xA;&lt;ul&gt;&#xA;&lt;li&gt;譬如把方法运行结果存储起来、把原本要实时计算的内容提前算好、对一些公用的数据进行复用，这可以节省CPU算力，顺带提升响应性能&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;为缓解I/O压力而引入缓存&#xA;&lt;ul&gt;&#xA;&lt;li&gt;譬如把原本对网络、磁盘等较慢介质的读写访问变为对内存等较快介质的访问，&lt;/li&gt;&#xA;&lt;li&gt;将原本对单点部件（如数据库）的读写访问变为对可扩缩部件（如缓存中间件）的访问，顺带提升响应性能&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;服务端缓存&#34;&gt;&#xA;  服务端缓存&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9c%8d%e5%8a%a1%e7%ab%af%e7%bc%93%e5%ad%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;读缓存&#34;&gt;&#xA;  读缓存&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%af%bb%e7%bc%93%e5%ad%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;写缓存&#34;&gt;&#xA;  写缓存&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%86%99%e7%bc%93%e5%ad%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h2 id=&#34;负载均衡&#34;&gt;&#xA;  负载均衡&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%b4%9f%e8%bd%bd%e5%9d%87%e8%a1%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;流量治理&#34;&gt;&#xA;  流量治理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b5%81%e9%87%8f%e6%b2%bb%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;服务容错&#34;&gt;&#xA;  服务容错&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9c%8d%e5%8a%a1%e5%ae%b9%e9%94%99&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;流量控制&#34;&gt;&#xA;  流量控制&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b5%81%e9%87%8f%e6%8e%a7%e5%88%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h2 id=&#34;可观测性&#34;&gt;&#xA;  可观测性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%af%e8%a7%82%e6%b5%8b%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;时间日志&#34;&gt;&#xA;  时间日志&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%97%b6%e9%97%b4%e6%97%a5%e5%bf%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;链路追踪&#34;&gt;&#xA;  链路追踪&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%93%be%e8%b7%af%e8%bf%bd%e8%b8%aa&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;聚合度量&#34;&gt;&#xA;  聚合度量&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%81%9a%e5%90%88%e5%ba%a6%e9%87%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h2 id=&#34;架构安全性&#34;&gt;&#xA;  架构安全性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9e%b6%e6%9e%84%e5%ae%89%e5%85%a8%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;认证&#34;&gt;&#xA;  认证&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%ae%a4%e8%af%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;授权&#34;&gt;&#xA;  授权&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8e%88%e6%9d%83&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;凭证&#34;&gt;&#xA;  凭证&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%87%ad%e8%af%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;保密&#34;&gt;&#xA;  保密&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bf%9d%e5%af%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;传输&#34;&gt;&#xA;  传输&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bc%a0%e8%be%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h2 id=&#34;分布式共识&#34;&gt;&#xA;  分布式共识&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e5%b8%83%e5%bc%8f%e5%85%b1%e8%af%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;reference&#34;&gt;&#xA;  Reference&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/35492898/&#34;&gt;凤凰架构 构建可靠的大型分布式系统&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/36661336/&#34;&gt;搞定系统设计 面试敲开大厂的门&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>运维</title>
      <link>/post/computer-science/%E8%BF%90%E7%BB%B4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/%E8%BF%90%E7%BB%B4/</guid>
      <description>&lt;h1 id=&#34;查询&#34;&gt;&#xA;  查询&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9f%a5%e8%af%a2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 查找文件&#xA;find ./ -name &amp;#34;elastic&amp;#34;&#xA;&#xA;# 端口查询&#xA;### 查询&#xA;sudo netstat -tulnp | grep :443&#xA;sudo lsof -i :443&#xA;### 杀死&#xA;kill -9 &#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;内存&#34;&gt;&#xA;  内存&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%86%85%e5%ad%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 服务器内存占用率&#xA;free -h&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;磁盘&#34;&gt;&#xA;  磁盘&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%a3%81%e7%9b%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 磁盘占用&#xA;df -h&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
  </channel>
</rss>
