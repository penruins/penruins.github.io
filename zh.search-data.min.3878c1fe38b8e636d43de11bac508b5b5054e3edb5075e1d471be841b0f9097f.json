[{"id":0,"href":"/zh/post/others/about-me/","title":"about me","section":"Others","content":" about me # 家乡 云南昆明 骑行 Strava 电影 douban 观影记录 研究各种提升效率的小工具 vim 双拼 raspberry pi ios shortcut "},{"id":1,"href":"/zh/zh/post/others/about-me/","title":"about me","section":"Others","content":" about me # 家乡 云南昆明 骑行 Strava 电影 douban 观影记录 研究各种提升效率的小工具 vim 双拼 raspberry pi ios shortcut "},{"id":2,"href":"/zh/post/computer-science/java/java/","title":"java","section":"Java","content":" java # 学习资料 # CS-Notes面试笔记 mall-swarm视频教程 basic # java array 转 list # 在Java中，你可以使用Arrays.asList()方法将数组转换为列表。这是一个简单的方法来创建一个固定大小的List。如果你需要一个能够改变大小的List，你需要使用new ArrayList\u0026lt;\u0026gt;(Arrays.asList(array))来创建一个新的ArrayList实例。\n以下是两种情况的代码示例：\n创建一个固定大小的列表 # import java.util.Arrays; import java.util.List; public class ArrayToListExample { public static void main(String[] args) { String[] array = {\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;}; List\u0026lt;String\u0026gt; list = Arrays.asList(array); System.out.println(list); // 输出: [a, b, c] } } 创建一个可变大小的列表 # import java.util.ArrayList; import java.util.Arrays; import java.util.List; public class ArrayToArrayListExample { public static void main(String[] args) { String[] array = {\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;}; List\u0026lt;String\u0026gt; arrayList = new ArrayList\u0026lt;\u0026gt;(Arrays.asList(array)); // 现在可以添加或删除元素了 arrayList.add(\u0026#34;d\u0026#34;); System.out.println(arrayList); // 输出: [a, b, c, d] } } 请注意，当你使用Arrays.asList()时，它返回的是一个受数组支持的固定大小的列表。这意味着你不能添加或移除元素（除非你将其转换为像ArrayList这样的可调整大小的列表），但是你可以修改已经存在的元素。如果你尝试对固定大小的列表执行添加或移除操作，将会抛出UnsupportedOperationException异常。\njava， 怎么用二进制打印int # 在Java中，可以使用Integer.toBinaryString()方法来将一个int类型的数值转换为二进制字符串表示。此方法返回的是一个不带前导零的字符串，也就是说它不会打印出完整的32位（对于int类型），如果需要显示所有位，包括前导零，则需要额外处理。\n以下是一些例子：\n使用 Integer.toBinaryString() # public class BinaryPrintExample { public static void main(String[] args) { int number = 42; String binaryString = Integer.toBinaryString(number); System.out.println(\u0026#34;The binary representation of \u0026#34; + number + \u0026#34; is: \u0026#34; + binaryString); } } 打印包含前导零的完整32位 # 如果你想要打印出完整的32位二进制数，包括前导的0，你可以使用String.format()或者BitSet，但最简单的方法是用String.format()配合循环补足前导零：\npublic class FullBinaryPrintExample { public static void main(String[] args) { int number = 42; // Convert to binary string and ensure it\u0026#39;s 32 bits long with leading zeros String binaryString = String.format(\u0026#34;%32s\u0026#34;, Integer.toBinaryString(number)).replace(\u0026#39; \u0026#39;, \u0026#39;0\u0026#39;); System.out.println(\u0026#34;The full 32-bit binary representation of \u0026#34; + number + \u0026#34; is: \u0026#34; + binaryString); } } 上面的代码中，%32s指定了格式化后的字符串总长度为32，不足的部分用空格填充，然后我们用replace(' ', '0')把所有的空格替换成'0\u0026rsquo;。\n使用位运算手动构建二进制字符串 # 如果你想自己实现这个功能，你也可以使用位运算来构建二进制字符串：\npublic class ManualBinaryPrintExample { public static void main(String[] args) { int number = 42; StringBuilder binaryString = new StringBuilder(); for (int i = 31; i \u0026gt;= 0; i--) { int k = number \u0026gt;\u0026gt; i; if ((k \u0026amp; 1) \u0026gt; 0) { binaryString.append(\u0026#34;1\u0026#34;); } else { binaryString.append(\u0026#34;0\u0026#34;); } } System.out.println(\u0026#34;The manually constructed 32-bit binary representation of \u0026#34; + number + \u0026#34; is: \u0026#34; + binaryString.toString()); } } 这段代码通过逐位检查整数的每一位是否为1，并相应地添加\u0026quot;1\u0026quot;或\u0026quot;0\u0026quot;到StringBuilder对象中，最终构建出完整的32位二进制字符串。\nconcurrent # "},{"id":3,"href":"/zh/zh/post/computer-science/java/java/","title":"java","section":"Java","content":" java # 学习资料 # CS-Notes面试笔记 mall-swarm视频教程 basic # java array 转 list # 在Java中，你可以使用Arrays.asList()方法将数组转换为列表。这是一个简单的方法来创建一个固定大小的List。如果你需要一个能够改变大小的List，你需要使用new ArrayList\u0026lt;\u0026gt;(Arrays.asList(array))来创建一个新的ArrayList实例。\n以下是两种情况的代码示例：\n创建一个固定大小的列表 # import java.util.Arrays; import java.util.List; public class ArrayToListExample { public static void main(String[] args) { String[] array = {\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;}; List\u0026lt;String\u0026gt; list = Arrays.asList(array); System.out.println(list); // 输出: [a, b, c] } } 创建一个可变大小的列表 # import java.util.ArrayList; import java.util.Arrays; import java.util.List; public class ArrayToArrayListExample { public static void main(String[] args) { String[] array = {\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;}; List\u0026lt;String\u0026gt; arrayList = new ArrayList\u0026lt;\u0026gt;(Arrays.asList(array)); // 现在可以添加或删除元素了 arrayList.add(\u0026#34;d\u0026#34;); System.out.println(arrayList); // 输出: [a, b, c, d] } } 请注意，当你使用Arrays.asList()时，它返回的是一个受数组支持的固定大小的列表。这意味着你不能添加或移除元素（除非你将其转换为像ArrayList这样的可调整大小的列表），但是你可以修改已经存在的元素。如果你尝试对固定大小的列表执行添加或移除操作，将会抛出UnsupportedOperationException异常。\njava， 怎么用二进制打印int # 在Java中，可以使用Integer.toBinaryString()方法来将一个int类型的数值转换为二进制字符串表示。此方法返回的是一个不带前导零的字符串，也就是说它不会打印出完整的32位（对于int类型），如果需要显示所有位，包括前导零，则需要额外处理。\n以下是一些例子：\n使用 Integer.toBinaryString() # public class BinaryPrintExample { public static void main(String[] args) { int number = 42; String binaryString = Integer.toBinaryString(number); System.out.println(\u0026#34;The binary representation of \u0026#34; + number + \u0026#34; is: \u0026#34; + binaryString); } } 打印包含前导零的完整32位 # 如果你想要打印出完整的32位二进制数，包括前导的0，你可以使用String.format()或者BitSet，但最简单的方法是用String.format()配合循环补足前导零：\npublic class FullBinaryPrintExample { public static void main(String[] args) { int number = 42; // Convert to binary string and ensure it\u0026#39;s 32 bits long with leading zeros String binaryString = String.format(\u0026#34;%32s\u0026#34;, Integer.toBinaryString(number)).replace(\u0026#39; \u0026#39;, \u0026#39;0\u0026#39;); System.out.println(\u0026#34;The full 32-bit binary representation of \u0026#34; + number + \u0026#34; is: \u0026#34; + binaryString); } } 上面的代码中，%32s指定了格式化后的字符串总长度为32，不足的部分用空格填充，然后我们用replace(' ', '0')把所有的空格替换成'0\u0026rsquo;。\n使用位运算手动构建二进制字符串 # 如果你想自己实现这个功能，你也可以使用位运算来构建二进制字符串：\npublic class ManualBinaryPrintExample { public static void main(String[] args) { int number = 42; StringBuilder binaryString = new StringBuilder(); for (int i = 31; i \u0026gt;= 0; i--) { int k = number \u0026gt;\u0026gt; i; if ((k \u0026amp; 1) \u0026gt; 0) { binaryString.append(\u0026#34;1\u0026#34;); } else { binaryString.append(\u0026#34;0\u0026#34;); } } System.out.println(\u0026#34;The manually constructed 32-bit binary representation of \u0026#34; + number + \u0026#34; is: \u0026#34; + binaryString.toString()); } } 这段代码通过逐位检查整数的每一位是否为1，并相应地添加\u0026quot;1\u0026quot;或\u0026quot;0\u0026quot;到StringBuilder对象中，最终构建出完整的32位二进制字符串。\nconcurrent # "},{"id":4,"href":"/zh/post/computer-science/java/mybatis/","title":"Mybatis","section":"Java","content":" mybatis是怎么进行事务管理的 2025-02-08 # MyBatis 通过集成外部事务管理器（如 Spring 或 Java EE 容器）或使用内置的 JDBC 事务管理机制来管理事务。以下是 MyBatis 事务管理的主要方式：\n1. 使用 JDBC 事务管理 # MyBatis 默认使用 JDBC 的事务管理，通过 java.sql.Connection 实现。具体步骤如下：\n开启事务：调用 Connection.setAutoCommit(false) 关闭自动提交。 提交事务：调用 Connection.commit() 提交事务。 回滚事务：调用 Connection.rollback() 回滚事务。 示例代码：\nSqlSession sqlSession = sqlSessionFactory.openSession(); try{ // 执行数据库操作 sqlSession. insert(\u0026#34;insertUser\u0026#34;,user); sqlSession. update(\u0026#34;updateUser\u0026#34;,user); // 提交事务 sqlSession. commit(); }catch( Exception e){ // 回滚事务 sqlSession. rollback(); }finally{ // 关闭 SqlSession sqlSession. close(); } 2. 集成 Spring 事务管理 # MyBatis 通常与 Spring 集成，利用 Spring 的事务管理功能。Spring 提供了声明式和编程式事务管理。\n2.1 声明式事务管理 # 通过 @Transactional 注解或 XML 配置实现事务管理。\n示例代码：\n@Service public class UserService { @Autowired private UserMapper userMapper; @Transactional public void addUser(User user) { userMapper.insertUser(user); userMapper.updateUser(user); } } 2.2 编程式事务管理 # 通过 TransactionTemplate 或 PlatformTransactionManager 手动管理事务。\n示例代码：\n@Service public class UserService { @Autowired private UserMapper userMapper; @Autowired private PlatformTransactionManager transactionManager; public void addUser(User user) { TransactionDefinition def = new DefaultTransactionDefinition(); TransactionStatus status = transactionManager.getTransaction(def); try { userMapper.insertUser(user); userMapper.updateUser(user); transactionManager.commit(status); } catch (Exception e) { transactionManager.rollback(status); throw e; } } } 3. 使用 Java EE 容器的事务管理 # 在 Java EE 环境中，MyBatis 可以通过 JTA（Java Transaction API）与容器的事务管理器集成，通常通过 UserTransaction 或容器提供的其他机制管理事务。\n总结 # JDBC 事务管理：MyBatis 默认使用 JDBC 事务管理，手动控制事务。 Spring 事务管理：与 Spring 集成时，推荐使用 Spring 的事务管理，支持声明式和编程式事务。 Java EE 事务管理：在 Java EE 环境中，可通过 JTA 与容器的事务管理器集成。 选择合适的事务管理方式取决于应用场景和框架集成需求。\n我使用springboot框架，我在一个方法中使用mybatis提供的mapper方法插入了一条数据，但是我没有在方法上使用@Transactional注解，这种情况下有事务吗 2025-02-08 # 在 Spring Boot 中使用 MyBatis 时，如果你在一个方法中调用了 MyBatis 的 Mapper 方法插入数据，但没有在方法上使用 @Transactional 注解，那么默认情况下是没有事务管理的。具体表现如下：\n1. 没有事务的情况 # 如果没有 @Transactional 注解，Spring 不会为该方法开启事务。 每次调用 MyBatis 的 Mapper 方法时，MyBatis 会使用默认的 JDBC 行为，即自动提交（auto-commit）。 这意味着每次执行 SQL 语句（如插入、更新、删除）后，数据库会立即提交该操作，无法回滚。 2. 可能的风险 # 数据不一致：如果方法中有多个数据库操作（例如插入多条数据），其中一个操作失败，前面的操作已经提交，无法回滚，可能导致数据不一致。 缺乏事务控制：无法保证操作的原子性。 3. 如何验证没有事务 # 你可以通过以下方式验证：\n在方法中故意抛出异常，观察数据是否被插入。 如果没有事务，即使抛出异常，已经插入的数据也会被提交到数据库。 示例代码：\n@Service public class UserService { @Autowired private UserMapper userMapper; public void addUser(User user) { userMapper.insertUser(user); // 插入数据 throw new RuntimeException(\u0026#34;模拟异常\u0026#34;); // 抛出异常 } } 运行后，检查数据库，会发现 user 数据已经被插入，即使抛出了异常。\n4. 如何启用事务 # 如果你希望方法中的操作在一个事务中执行，可以通过以下方式启用事务管理：\n4.1 使用 @Transactional 注解 # 在方法上添加 @Transactional 注解，Spring 会为该方法开启事务。\n示例代码：\n@Service public class UserService { @Autowired private UserMapper userMapper; @Transactional public void addUser(User user) { userMapper.insertUser(user); // 插入数据 throw new RuntimeException(\u0026#34;模拟异常\u0026#34;); // 抛出异常 } } 运行后，检查数据库，会发现 user 数据没有被插入，因为事务回滚了。\n4.2 配置事务管理器 # 确保 Spring Boot 项目中已经配置了事务管理器（通常使用 DataSourceTransactionManager）。Spring Boot 会自动配置事务管理器，只要你引入了相关依赖（如 spring-boot-starter-data-jpa 或 mybatis-spring-boot-starter）。\n5. 总结 # 没有 @Transactional 注解：默认没有事务，每次 SQL 操作会立即提交。 需要事务：在方法上添加 @Transactional 注解，确保方法中的多个操作在同一个事务中执行，保证原子性。 验证事务：通过抛出异常的方式验证事务是否生效。 如果你希望方法中的操作具有事务性，务必使用 @Transactional 注解。\n什么是乐观锁、悲观锁 2025-02-08 # 乐观锁和悲观锁是并发控制中常用的两种策略，用于解决多个事务或线程同时访问和修改同一数据时可能引发的数据不一致问题。它们的核心区别在于对并发冲突的处理方式。\n1. 悲观锁（Pessimistic Locking） # 悲观锁假设并发冲突很可能发生，因此在访问数据时直接加锁，确保其他事务或线程无法修改数据，直到当前操作完成。\n实现方式 # 在数据库中，通常通过 SELECT ... FOR UPDATE 或 SELECT ... LOCK IN SHARE MODE 实现。 在代码中，可以通过 synchronized 关键字或 ReentrantLock 实现。 特点 # 优点：保证数据强一致性，适合写操作多的场景。 缺点：加锁会降低并发性能，可能导致死锁。 适用场景 # 写操作频繁，且并发冲突概率高的场景。 例如：银行转账、库存扣减等。 示例 # -- 数据库中使用悲观锁 BEGIN; SELECT * FROM account WHERE id = 1 FOR UPDATE; -- 加锁 UPDATE account SET balance = balance - 100 WHERE id = 1; COMMIT; 2. 乐观锁（Optimistic Locking） # 乐观锁假设并发冲突很少发生，因此在访问数据时不会加锁，而是在提交时检查数据是否被其他事务修改过。如果发现冲突，则回滚或重试。\n实现方式 # 通常通过版本号（Version）或时间戳（Timestamp）实现。 在数据库中，可以为表添加一个 version 字段，每次更新时检查版本号是否一致。 特点 # 优点：不加锁，提高并发性能，适合读操作多的场景。 缺点：冲突时需要回滚或重试，可能增加业务逻辑复杂度。 适用场景 # 读操作频繁，写操作较少的场景。 例如：电商库存、评论系统等。 示例 # -- 数据库中使用乐观锁 -- 表结构 CREATE TABLE product ( id INT PRIMARY KEY, name VARCHAR(50), stock INT, version INT -- 版本号字段 ); -- 更新操作 UPDATE product SET stock = stock - 1, version = version + 1 WHERE id = 1 AND version = 5; -- 检查版本号 在代码中，可以通过以下方式实现乐观锁：\npublic boolean updateProduct(Product product) { int rows = productMapper.updateProduct( product.getId(), product.getStock(), product.getVersion() ); if (rows == 0) { throw new OptimisticLockException(\u0026#34;数据已被修改，请重试\u0026#34;); } return true; } 3. 对比总结 # 特性 悲观锁 乐观锁 加锁时机 访问数据时立即加锁 提交时检查冲突 性能 低（加锁影响并发） 高（不加锁，冲突时回滚） 适用场景 写操作多，冲突概率高 读操作多，冲突概率低 实现复杂度 简单 较复杂（需处理冲突） 数据一致性 强一致性 最终一致性 4. 如何选择 # 如果业务场景中写操作频繁，且对数据一致性要求高，选择悲观锁。 如果业务场景中读操作频繁，且冲突概率低，选择乐观锁。 5. 实际应用中的注意事项 # 悲观锁：注意死锁问题，避免长时间持有锁。 乐观锁：需要设计重试机制，处理冲突时的回滚或重试逻辑。 通过合理选择锁机制，可以在保证数据一致性的同时，最大化系统的并发性能。\n"},{"id":5,"href":"/zh/zh/post/computer-science/java/mybatis/","title":"Mybatis","section":"Java","content":" mybatis是怎么进行事务管理的 2025-02-08 # MyBatis 通过集成外部事务管理器（如 Spring 或 Java EE 容器）或使用内置的 JDBC 事务管理机制来管理事务。以下是 MyBatis 事务管理的主要方式：\n1. 使用 JDBC 事务管理 # MyBatis 默认使用 JDBC 的事务管理，通过 java.sql.Connection 实现。具体步骤如下：\n开启事务：调用 Connection.setAutoCommit(false) 关闭自动提交。 提交事务：调用 Connection.commit() 提交事务。 回滚事务：调用 Connection.rollback() 回滚事务。 示例代码：\nSqlSession sqlSession = sqlSessionFactory.openSession(); try{ // 执行数据库操作 sqlSession. insert(\u0026#34;insertUser\u0026#34;,user); sqlSession. update(\u0026#34;updateUser\u0026#34;,user); // 提交事务 sqlSession. commit(); }catch( Exception e){ // 回滚事务 sqlSession. rollback(); }finally{ // 关闭 SqlSession sqlSession. close(); } 2. 集成 Spring 事务管理 # MyBatis 通常与 Spring 集成，利用 Spring 的事务管理功能。Spring 提供了声明式和编程式事务管理。\n2.1 声明式事务管理 # 通过 @Transactional 注解或 XML 配置实现事务管理。\n示例代码：\n@Service public class UserService { @Autowired private UserMapper userMapper; @Transactional public void addUser(User user) { userMapper.insertUser(user); userMapper.updateUser(user); } } 2.2 编程式事务管理 # 通过 TransactionTemplate 或 PlatformTransactionManager 手动管理事务。\n示例代码：\n@Service public class UserService { @Autowired private UserMapper userMapper; @Autowired private PlatformTransactionManager transactionManager; public void addUser(User user) { TransactionDefinition def = new DefaultTransactionDefinition(); TransactionStatus status = transactionManager.getTransaction(def); try { userMapper.insertUser(user); userMapper.updateUser(user); transactionManager.commit(status); } catch (Exception e) { transactionManager.rollback(status); throw e; } } } 3. 使用 Java EE 容器的事务管理 # 在 Java EE 环境中，MyBatis 可以通过 JTA（Java Transaction API）与容器的事务管理器集成，通常通过 UserTransaction 或容器提供的其他机制管理事务。\n总结 # JDBC 事务管理：MyBatis 默认使用 JDBC 事务管理，手动控制事务。 Spring 事务管理：与 Spring 集成时，推荐使用 Spring 的事务管理，支持声明式和编程式事务。 Java EE 事务管理：在 Java EE 环境中，可通过 JTA 与容器的事务管理器集成。 选择合适的事务管理方式取决于应用场景和框架集成需求。\n我使用springboot框架，我在一个方法中使用mybatis提供的mapper方法插入了一条数据，但是我没有在方法上使用@Transactional注解，这种情况下有事务吗 2025-02-08 # 在 Spring Boot 中使用 MyBatis 时，如果你在一个方法中调用了 MyBatis 的 Mapper 方法插入数据，但没有在方法上使用 @Transactional 注解，那么默认情况下是没有事务管理的。具体表现如下：\n1. 没有事务的情况 # 如果没有 @Transactional 注解，Spring 不会为该方法开启事务。 每次调用 MyBatis 的 Mapper 方法时，MyBatis 会使用默认的 JDBC 行为，即自动提交（auto-commit）。 这意味着每次执行 SQL 语句（如插入、更新、删除）后，数据库会立即提交该操作，无法回滚。 2. 可能的风险 # 数据不一致：如果方法中有多个数据库操作（例如插入多条数据），其中一个操作失败，前面的操作已经提交，无法回滚，可能导致数据不一致。 缺乏事务控制：无法保证操作的原子性。 3. 如何验证没有事务 # 你可以通过以下方式验证：\n在方法中故意抛出异常，观察数据是否被插入。 如果没有事务，即使抛出异常，已经插入的数据也会被提交到数据库。 示例代码：\n@Service public class UserService { @Autowired private UserMapper userMapper; public void addUser(User user) { userMapper.insertUser(user); // 插入数据 throw new RuntimeException(\u0026#34;模拟异常\u0026#34;); // 抛出异常 } } 运行后，检查数据库，会发现 user 数据已经被插入，即使抛出了异常。\n4. 如何启用事务 # 如果你希望方法中的操作在一个事务中执行，可以通过以下方式启用事务管理：\n4.1 使用 @Transactional 注解 # 在方法上添加 @Transactional 注解，Spring 会为该方法开启事务。\n示例代码：\n@Service public class UserService { @Autowired private UserMapper userMapper; @Transactional public void addUser(User user) { userMapper.insertUser(user); // 插入数据 throw new RuntimeException(\u0026#34;模拟异常\u0026#34;); // 抛出异常 } } 运行后，检查数据库，会发现 user 数据没有被插入，因为事务回滚了。\n4.2 配置事务管理器 # 确保 Spring Boot 项目中已经配置了事务管理器（通常使用 DataSourceTransactionManager）。Spring Boot 会自动配置事务管理器，只要你引入了相关依赖（如 spring-boot-starter-data-jpa 或 mybatis-spring-boot-starter）。\n5. 总结 # 没有 @Transactional 注解：默认没有事务，每次 SQL 操作会立即提交。 需要事务：在方法上添加 @Transactional 注解，确保方法中的多个操作在同一个事务中执行，保证原子性。 验证事务：通过抛出异常的方式验证事务是否生效。 如果你希望方法中的操作具有事务性，务必使用 @Transactional 注解。\n什么是乐观锁、悲观锁 2025-02-08 # 乐观锁和悲观锁是并发控制中常用的两种策略，用于解决多个事务或线程同时访问和修改同一数据时可能引发的数据不一致问题。它们的核心区别在于对并发冲突的处理方式。\n1. 悲观锁（Pessimistic Locking） # 悲观锁假设并发冲突很可能发生，因此在访问数据时直接加锁，确保其他事务或线程无法修改数据，直到当前操作完成。\n实现方式 # 在数据库中，通常通过 SELECT ... FOR UPDATE 或 SELECT ... LOCK IN SHARE MODE 实现。 在代码中，可以通过 synchronized 关键字或 ReentrantLock 实现。 特点 # 优点：保证数据强一致性，适合写操作多的场景。 缺点：加锁会降低并发性能，可能导致死锁。 适用场景 # 写操作频繁，且并发冲突概率高的场景。 例如：银行转账、库存扣减等。 示例 # -- 数据库中使用悲观锁 BEGIN; SELECT * FROM account WHERE id = 1 FOR UPDATE; -- 加锁 UPDATE account SET balance = balance - 100 WHERE id = 1; COMMIT; 2. 乐观锁（Optimistic Locking） # 乐观锁假设并发冲突很少发生，因此在访问数据时不会加锁，而是在提交时检查数据是否被其他事务修改过。如果发现冲突，则回滚或重试。\n实现方式 # 通常通过版本号（Version）或时间戳（Timestamp）实现。 在数据库中，可以为表添加一个 version 字段，每次更新时检查版本号是否一致。 特点 # 优点：不加锁，提高并发性能，适合读操作多的场景。 缺点：冲突时需要回滚或重试，可能增加业务逻辑复杂度。 适用场景 # 读操作频繁，写操作较少的场景。 例如：电商库存、评论系统等。 示例 # -- 数据库中使用乐观锁 -- 表结构 CREATE TABLE product ( id INT PRIMARY KEY, name VARCHAR(50), stock INT, version INT -- 版本号字段 ); -- 更新操作 UPDATE product SET stock = stock - 1, version = version + 1 WHERE id = 1 AND version = 5; -- 检查版本号 在代码中，可以通过以下方式实现乐观锁：\npublic boolean updateProduct(Product product) { int rows = productMapper.updateProduct( product.getId(), product.getStock(), product.getVersion() ); if (rows == 0) { throw new OptimisticLockException(\u0026#34;数据已被修改，请重试\u0026#34;); } return true; } 3. 对比总结 # 特性 悲观锁 乐观锁 加锁时机 访问数据时立即加锁 提交时检查冲突 性能 低（加锁影响并发） 高（不加锁，冲突时回滚） 适用场景 写操作多，冲突概率高 读操作多，冲突概率低 实现复杂度 简单 较复杂（需处理冲突） 数据一致性 强一致性 最终一致性 4. 如何选择 # 如果业务场景中写操作频繁，且对数据一致性要求高，选择悲观锁。 如果业务场景中读操作频繁，且冲突概率低，选择乐观锁。 5. 实际应用中的注意事项 # 悲观锁：注意死锁问题，避免长时间持有锁。 乐观锁：需要设计重试机制，处理冲突时的回滚或重试逻辑。 通过合理选择锁机制，可以在保证数据一致性的同时，最大化系统的并发性能。\n"},{"id":6,"href":"/zh/post/computer-science/computer-science-recommend/","title":"推荐","section":"Computer Science","content":" 推荐 # github alex-shpak/hugo-book 这个博客就是用这个项目搭建的 hacker news 有很多关于计算机相关的文章，每天都会更新 资源下载相关 pingf/annie 可以用来下载B站视频 yt-dlp/yt-dlp 下载 youtube 视频 yutto-dev/bilili 下载 bilibili 视频(项目已经归档不再维护,目前还能用，可以使用yutto) yutto-dev/yutto 卡码笔记 代码随想录的网站，里面整理了一些计算机相关的知识点（非算法相关） segment fault blog # 阮一峰的网络日志 王垠 github # yihong0618 Large Language Model(LLM) # 通义千问 "},{"id":7,"href":"/zh/zh/post/computer-science/computer-science-recommend/","title":"推荐","section":"Computer Science","content":" 推荐 # github alex-shpak/hugo-book 这个博客就是用这个项目搭建的 hacker news 有很多关于计算机相关的文章，每天都会更新 资源下载相关 pingf/annie 可以用来下载B站视频 yt-dlp/yt-dlp 下载 youtube 视频 yutto-dev/bilili 下载 bilibili 视频(项目已经归档不再维护,目前还能用，可以使用yutto) yutto-dev/yutto 卡码笔记 代码随想录的网站，里面整理了一些计算机相关的知识点（非算法相关） segment fault blog # 阮一峰的网络日志 王垠 github # yihong0618 Large Language Model(LLM) # 通义千问 "},{"id":8,"href":"/zh/post/life/movies-log/","title":"观影记录","section":"Life","content":" 观影记录 # 2025 # 2025-01-12 敦煌 1 2025-01-12 2 2025-01-15 3 2025-01-16 4 2025-01-18 5 2025-01-20 6 `` 7 `` 8 `` 9 `` 10 `` 2025-01-11 如果国宝会说话 第四季 东京爱情故事 1 2025-01-11 2 2025-01-12 3 2025-01-13 4 2025-01-15 5 2025-01-16 6 2025-01-17 7 2025-01-18 8 2025-01-19 9 2025-01-20 10 2025-01-22 11 `` 2025-01-10 飞屋环游记 2025-01-07 如果国宝会说话 第三季 2025-01-04 如果国宝会说话 第二季 2025-01-03 辛德勒的名单（2） 2025-01-02 四重奏 1 2025-01-02 2 2025-01-03 3 2025-01-04 4 2025-01-05 5 2025-01-06 6 2025-01-07 7 2025-01-08 8 2025-01-09 9 2025-01-10 10 2025-01-10 2025-01-01 如果国宝会说话 第一季 2024 # 2024-12-01 金色梦乡 2024-11-30 Better Call Saul S04E07 2024-11-29 Better Call Saul S04E06 2024-11-28 Better Call Saul S04E05 2024-11-27 Better Call Saul S04E03-04 2024-11-26 Better Call Saul S04E01-02 2024-11-25 Better Call Saul S03E09-10 2024-11-23 热血警探 铁雨 ⭐⭐⭐⭐ 2024-11-18 东邪西毒 终极版 2024-11-17 甲方乙方 2024-11-16 正义回廊 ⭐⭐⭐⭐ 有话好好说 ⭐⭐⭐⭐ 2024-11-15 Better Call Saul S03E07 Better Call Saul S03E08 2024-11-14 Better Call Saul S03E06 2024-11-13 Better Call Saul S03E05 2024-11-12 Better Call Saul S03E04 2024-11-12 Better Call Saul S03E02 Better Call Saul S03E03 2024-10-24 哈利波特与死亡圣器 下 2024-10-23 哈利波特与死亡圣器 上 2024-10-22 哈利波特与混血王子 2024-10-20 哈利波特与凤凰社 哈利波特与火焰杯 哈利波特与阿兹卡班的囚徒 2024-10-19 哈利波特与密室 哈利波特与魔法石 2024-10-07 燃情岁月 ⭐⭐⭐⭐ 抓娃娃 2024-10-06 赛德克巴莱 2024-10-05 名侦探柯南：百万美元的五棱星 2024-10-04 年会不能停 2024-09-17 市场法则 过季 ⭐⭐⭐⭐ 完美的日子 ⭐⭐⭐⭐⭐ 2024-09-15 幽灵公主 鬼灭之刃 那田蜘蛛山篇 鬼灭之刃 柱训练篇 鬼灭之刃 锻刀村篇 2024-09-08 不要抬头 2024-08-18 一部关于咖啡的电影 2024-07-14 鬼灭之刃 游郭篇 鬼灭之刃 无限列车篇 2024-07-07 朗读者 2024-06-15 环法自行车赛：逆风飞驰 第二季 2024-06-09 江湖儿女 2024-05-19 红猪 2024-05-12 繁花 2024-05-04 极速车王 2024-05-03 大佛普拉斯 芝加哥七君子审判 2024-04-22 寻梦环游记 2024-04-21 你想活出怎样的人生 2024-04-06 黄海 逃离乌托邦 2024-04-04 坠落的审判 2024-03-15 周处除三害 2024-03-13 巾帼枭雄之义海豪情 2024-02-20 新闻女王 2024-02-18 飞驰人生2 2024-02-09 阿尔法围棋 哈利波特20周年：回到霍格沃茨 2024-02-08 三大队 2024-01-20 土拨鼠之日 2024-01-10 请回答1988 2023 # 2023年5月2日 婚姻生活 2023年4月29日 惠子，凝视 ⭐⭐⭐⭐ 2023年3月18日 黑暗荣耀 第二季 2023年3月05日 乒乓 2023年2月12日 健听女孩 2023年1月30日 黑匣子 2023年1月29日 巴斯克·斯克鲁格斯的歌谣 2023年1月27日 马拉多纳2019 2023年1月26日 马拉多纳之死 2023年1月26日 打扰伯格曼 2023年1月26日 误杀瞒天记 2023年1月26日 我即闪电 2023年1月25日 风骚律师 第六季 ⭐⭐⭐⭐⭐ 2023年1月25日 宿敌 2023年1月24日 互联网之子 2023年1月22日 互联网之子 2023年1月22日 万圣节的新娘 2023年1月22日 伊卡洛斯 2023年1月22日 老师，您能坐我旁边吗？ 2022 # 2022年10月07日 真相捕捉 第二季 2022年10月03日 黑洞 2022年09月10日 六号车厢 ⭐⭐⭐⭐ 2022年08月10日 我的天才女友 第三季 2022年07月31日 命运喜欢恶作剧 2022年07月30日 人生大事 2022年07月26日 渔业阴谋 2022年02月08日 Tinder诈骗王 2022年02月07日 亢奋 第一季 2022年02月03日 情事 2022年02月03日 火口的两人 2022年02月03日 激情 2022年02月02日 偶然与想象 2022年02月02日 东城梦魇 2022年02月01日 2020去死 2022年01月31日 瀑布 2022年01月31日 天注定 2022年01月30日 T省的 84·85年 2022年01月30日 天道 2022年01月20日 405谋杀案 2022年01月19日 背靠背，脸对脸 2022年01月18日 黑炮事件 2022年01月17日 成瘾剂量 2022年01月09日 驾驶我的车 ⭐⭐⭐⭐ 2022年01月01日 踏雪寻梅 2021 # 2021年12月26日 困在时间里的父亲 2021年11月19日 扬名立万 2021年11月13日 不老奇事 2021年10月31日 沙丘 2021年10月31日 007:无暇赴死 2021年10月16日 长津湖 2021年10月10日 吗啡 2021年09月25日 峰爆 2021年09月22日 教室里的一头牦牛 2021年09月20日 无依之地 2021年09月03日 失控玩家 2021年08月29日 让子弹飞 2021年08月15日 心灵奇旅 2021年08月10日 脸庞，村庄 2021年08月07日 沉默的真相 2021年08月02日 隐秘的角落 2021年07月31日 花束般的恋爱 2021年07月30日 热带往事 2021年07月30日 大阪直美 2021年07月26日 俗女养成记 2021年07月07日 巴萨提的颜色 2021年07月04日 真心半解 2021年06月11日 过把瘾 2021年06月08日 射雕英雄传 2021年05月27日 茶馆 2021年05月16日 人间的条件 5,6 2021年05月15日 人间的条件 3,4 2021年05月14日 热带雨 人间的条件 1,2 2021年05月13日 南海十三郎 2021年05月11日 笨鸟 2021年05月10日 无言的山丘 2021年05月09日 恐怖分子 2021年05月08日 海滩的一日 2021年05月08日 麻将 2021年05月07日 青梅竹马 盲山 万箭穿心 2021年05月06日 倒霉性爱，发狂黄片 2021年05月05日 龙争虎斗 零水日 2021年05月04日 若水 2021年05月04日 剩女 2021-04-13 盗火者：中国教育改革调查 others # 【风骚律师杂谈】我爱你——86年 "},{"id":9,"href":"/zh/zh/post/life/movies-log/","title":"观影记录","section":"Life","content":" 观影记录 # 2025 # 2025-01-12 敦煌 1 2025-01-12 2 2025-01-15 3 2025-01-16 4 2025-01-18 5 2025-01-20 6 `` 7 `` 8 `` 9 `` 10 `` 2025-01-11 如果国宝会说话 第四季 东京爱情故事 1 2025-01-11 2 2025-01-12 3 2025-01-13 4 2025-01-15 5 2025-01-16 6 2025-01-17 7 2025-01-18 8 2025-01-19 9 2025-01-20 10 2025-01-22 11 `` 2025-01-10 飞屋环游记 2025-01-07 如果国宝会说话 第三季 2025-01-04 如果国宝会说话 第二季 2025-01-03 辛德勒的名单（2） 2025-01-02 四重奏 1 2025-01-02 2 2025-01-03 3 2025-01-04 4 2025-01-05 5 2025-01-06 6 2025-01-07 7 2025-01-08 8 2025-01-09 9 2025-01-10 10 2025-01-10 2025-01-01 如果国宝会说话 第一季 2024 # 2024-12-01 金色梦乡 2024-11-30 Better Call Saul S04E07 2024-11-29 Better Call Saul S04E06 2024-11-28 Better Call Saul S04E05 2024-11-27 Better Call Saul S04E03-04 2024-11-26 Better Call Saul S04E01-02 2024-11-25 Better Call Saul S03E09-10 2024-11-23 热血警探 铁雨 ⭐⭐⭐⭐ 2024-11-18 东邪西毒 终极版 2024-11-17 甲方乙方 2024-11-16 正义回廊 ⭐⭐⭐⭐ 有话好好说 ⭐⭐⭐⭐ 2024-11-15 Better Call Saul S03E07 Better Call Saul S03E08 2024-11-14 Better Call Saul S03E06 2024-11-13 Better Call Saul S03E05 2024-11-12 Better Call Saul S03E04 2024-11-12 Better Call Saul S03E02 Better Call Saul S03E03 2024-10-24 哈利波特与死亡圣器 下 2024-10-23 哈利波特与死亡圣器 上 2024-10-22 哈利波特与混血王子 2024-10-20 哈利波特与凤凰社 哈利波特与火焰杯 哈利波特与阿兹卡班的囚徒 2024-10-19 哈利波特与密室 哈利波特与魔法石 2024-10-07 燃情岁月 ⭐⭐⭐⭐ 抓娃娃 2024-10-06 赛德克巴莱 2024-10-05 名侦探柯南：百万美元的五棱星 2024-10-04 年会不能停 2024-09-17 市场法则 过季 ⭐⭐⭐⭐ 完美的日子 ⭐⭐⭐⭐⭐ 2024-09-15 幽灵公主 鬼灭之刃 那田蜘蛛山篇 鬼灭之刃 柱训练篇 鬼灭之刃 锻刀村篇 2024-09-08 不要抬头 2024-08-18 一部关于咖啡的电影 2024-07-14 鬼灭之刃 游郭篇 鬼灭之刃 无限列车篇 2024-07-07 朗读者 2024-06-15 环法自行车赛：逆风飞驰 第二季 2024-06-09 江湖儿女 2024-05-19 红猪 2024-05-12 繁花 2024-05-04 极速车王 2024-05-03 大佛普拉斯 芝加哥七君子审判 2024-04-22 寻梦环游记 2024-04-21 你想活出怎样的人生 2024-04-06 黄海 逃离乌托邦 2024-04-04 坠落的审判 2024-03-15 周处除三害 2024-03-13 巾帼枭雄之义海豪情 2024-02-20 新闻女王 2024-02-18 飞驰人生2 2024-02-09 阿尔法围棋 哈利波特20周年：回到霍格沃茨 2024-02-08 三大队 2024-01-20 土拨鼠之日 2024-01-10 请回答1988 2023 # 2023年5月2日 婚姻生活 2023年4月29日 惠子，凝视 ⭐⭐⭐⭐ 2023年3月18日 黑暗荣耀 第二季 2023年3月05日 乒乓 2023年2月12日 健听女孩 2023年1月30日 黑匣子 2023年1月29日 巴斯克·斯克鲁格斯的歌谣 2023年1月27日 马拉多纳2019 2023年1月26日 马拉多纳之死 2023年1月26日 打扰伯格曼 2023年1月26日 误杀瞒天记 2023年1月26日 我即闪电 2023年1月25日 风骚律师 第六季 ⭐⭐⭐⭐⭐ 2023年1月25日 宿敌 2023年1月24日 互联网之子 2023年1月22日 互联网之子 2023年1月22日 万圣节的新娘 2023年1月22日 伊卡洛斯 2023年1月22日 老师，您能坐我旁边吗？ 2022 # 2022年10月07日 真相捕捉 第二季 2022年10月03日 黑洞 2022年09月10日 六号车厢 ⭐⭐⭐⭐ 2022年08月10日 我的天才女友 第三季 2022年07月31日 命运喜欢恶作剧 2022年07月30日 人生大事 2022年07月26日 渔业阴谋 2022年02月08日 Tinder诈骗王 2022年02月07日 亢奋 第一季 2022年02月03日 情事 2022年02月03日 火口的两人 2022年02月03日 激情 2022年02月02日 偶然与想象 2022年02月02日 东城梦魇 2022年02月01日 2020去死 2022年01月31日 瀑布 2022年01月31日 天注定 2022年01月30日 T省的 84·85年 2022年01月30日 天道 2022年01月20日 405谋杀案 2022年01月19日 背靠背，脸对脸 2022年01月18日 黑炮事件 2022年01月17日 成瘾剂量 2022年01月09日 驾驶我的车 ⭐⭐⭐⭐ 2022年01月01日 踏雪寻梅 2021 # 2021年12月26日 困在时间里的父亲 2021年11月19日 扬名立万 2021年11月13日 不老奇事 2021年10月31日 沙丘 2021年10月31日 007:无暇赴死 2021年10月16日 长津湖 2021年10月10日 吗啡 2021年09月25日 峰爆 2021年09月22日 教室里的一头牦牛 2021年09月20日 无依之地 2021年09月03日 失控玩家 2021年08月29日 让子弹飞 2021年08月15日 心灵奇旅 2021年08月10日 脸庞，村庄 2021年08月07日 沉默的真相 2021年08月02日 隐秘的角落 2021年07月31日 花束般的恋爱 2021年07月30日 热带往事 2021年07月30日 大阪直美 2021年07月26日 俗女养成记 2021年07月07日 巴萨提的颜色 2021年07月04日 真心半解 2021年06月11日 过把瘾 2021年06月08日 射雕英雄传 2021年05月27日 茶馆 2021年05月16日 人间的条件 5,6 2021年05月15日 人间的条件 3,4 2021年05月14日 热带雨 人间的条件 1,2 2021年05月13日 南海十三郎 2021年05月11日 笨鸟 2021年05月10日 无言的山丘 2021年05月09日 恐怖分子 2021年05月08日 海滩的一日 2021年05月08日 麻将 2021年05月07日 青梅竹马 盲山 万箭穿心 2021年05月06日 倒霉性爱，发狂黄片 2021年05月05日 龙争虎斗 零水日 2021年05月04日 若水 2021年05月04日 剩女 2021-04-13 盗火者：中国教育改革调查 others # 【风骚律师杂谈】我爱你——86年 "},{"id":10,"href":"/zh/post/computer-science/computer-science-learning-log/","title":"学习记录","section":"Computer Science","content":" 学习记录 # 2025-01-17 # 剑指Offer Book # 剑指Offer 第1章 面试的流程 1 # 1.1 面试官谈面试 1 1.2 面试的三种形式 2 1.2.1 电话面试 2 1.2.2 共享桌面远程面试 3 1.2.3 现场面试 4 1.3 面试的三个环节 5 1.3.1 行为面试环节 5 应聘者的项目经验 6 应聘者掌握的技能 7 回答“为什么跳槽” 8 1.3.2 技术面试环节 10 扎实的基础知识 10 高质量的代码 11 清晰的思路 14 优化效率的能力 15 优秀的综合能力 16 1.3.3 应聘者提问环节 17 1.4 本章小结 18 第2章 面试需要的基础知识 20 # 2.1 面试官谈基础知识 20 2.2 编程语言 22 2.2.1 C++ 22 面试题1：赋值运算符函数 24 经典的解法，适用于初级程序员 25 考虑异常安全性的解法，高级程序员必备 26 2.2.2 C# 27 面试题2：实现Singleton模式 31 不好的解法一：只适用于单线程 31 不好的解法二：可用于多线程但效率不高 32 可行的解法：同步锁前后两次判断 33 推荐的解法一：利用静态构造函数 34 推荐的解法二：按需创建实例 34 解法比较 35 2.3 数据结构 36 2.3.1 数组 36 面试题3：二维数组中的查找 38 2.3.2 字符串 42 面试题4：替换空格 44 O(n2)的解法，不足以拿到Offer 45 O(n)的解法，搞定Offer就靠它 46 2.3.3 链表 49 面试题5：从尾到头打印链表 51 2.3.4 树 53 面试题6：重建二叉树 55 2.3.5 栈和队列 58 面试题7：用两个栈实现队列 59 2.4 算法和数据操作 62 2.4.1 查找和排序 63 面试题8：旋转数组的最小数字 66 2.4.2 递归和循环 71 面试题9：斐波那契数列 73 效率很低的解法，面试官不会喜欢 73 面试官期待的实用解法 74 O(logn)但不够实用的解法 74 解法比较 75 2.4.3 位运算 77 面试题10：二进制中1的个数 78 可能引起死循环的解法 79 常规解法 79 能给面试官带来惊喜的解法 80 2.5 本章小结 82 第3章 高质量的代码 84 # 3.1 面试官谈代码质量 84 3.2 代码的规范性 86 3.3 代码的完整性 87 从3方面确保代码的完整性 87 3种错误处理的方法 88 面试题11：数值的整数次方 90 自以为题目简单的解法 90 全面但不够高效的解法，离Offer已经很近了 90 全面又高效的解法，确保能拿到Offer 92 面试题12：打印1到最大的n位数 94 跳进面试官陷阱 94 在字符串上模拟数字加法 94 把问题转换成数字排列 97 面试题13：在O(1)时间删除链表结点 99 面试题14：调整数组顺序使奇数位于偶数前面 102 只完成基本功能的解法，仅适用于初级程序员 102 考虑可扩展性的解法，能秒杀Offer 104 3.4 代码的鲁棒性 106 面试题15：链表中倒数第k个结点 107 面试题16：反转链表 112 面试题17：合并两个排序的链表 114 面试题18：树的子结构 117 3.5 本章小结 121 第4章 解决面试题的思路 123 # 4.1 面试官谈面试思路 123 面试题19：二叉树的镜像 125 4.2 画图让抽象问题形象化 125 面试题20：顺时针打印矩阵 127 4.3 举例让抽象问题具体化 131 面试题21：包含min函数的栈 132 面试题22：栈的压入、弹出序列 134 面试题23：从上往下打印二叉树 137 面试题24：二叉搜索树的后序遍历序列 140 面试题25：二叉树中和为某一值的路径 143 4.4 分解让复杂问题简单化 146 面试题26：复杂链表的复制 147 面试题27：二叉搜索树与双向链表 151 面试题28：字符串的排列 154 4.5 本章小结 158 第5章 优化时间和空间效率 160 # 5.1 面试官谈效率 160 5.2 时间效率 162 面试题29：数组中出现次数超过一半的数字 163 基于Partition函数的O(n)算法 163 利用数组特点的O(n)算法 165 解法比较 166 面试题30：最小的k个数 167 O(n)的算法，只当可以修改输入数组时可用 167 O(nlogk)的算法，适合处理海量数据 168 解法比较 169 面试题31：连续子数组的最大和 171 举例分析数组的规律 171 应用动态规划法 173 面试题32：从1到n整数中1出现的次数 174 不考虑效率的解法，想拿Offer有点难 174 明显提高效率的解法，让面试官耳目一新 175 面试题33：把数组排成最小的数 177 5.3 时间效率与空间效率的平衡 181 面试题34：丑数 182 逐个判断整数是不是丑数的解法 182 创建数组保存已经找到的丑数的解法 183 面试题35：第一个只出现一次的字符 186 面试题36：数组中的逆序对 189 面试题37：两个链表的第一个公共结点 193 5.4 本章小结 196 第6章 面试中的各项能力 198 # 6.1 面试官谈能力 198 6.2 沟通能力和学习能力 200 沟通能力 200 学习能力 200 善于学习、沟通的人也善于提问 201 6.3 知识迁移能力 203 面试题38：数字在排序数组中出现的次数 204 面试题39：二叉树的深度 207 重复遍历结点的解法，不足以打动面试官 209 只遍历结点一次的解法，正是面试官喜欢的 209 面试题40：数组中只出现一次的数字 211 面试题41：和为s的两个数字VS和为s的连续正数序列 214 面试题42：翻转单词顺序 VS左旋转字符串 218 6.4 抽象建模能力 222 面试题43：n个骰子的点数 223 基于递归求骰子点数，时间效率不够高 223 基于循环求骰子点数，时间性能好 224 面试题44：扑克牌的顺子 226 面试题45：圆圈中最后剩下的数字 228 经典的解法，用循环链表模拟圆圈 229 创新的解法，拿到Offer不在话下 230 6.5 发散思维能力 232 面试题46：求1+2+…+n 233 利用构造函数求解 234 利用虚函数求解 234 利用函数指针求解 235 利用模板类型求解 236 面试题47：不用加减乘除做加法 237 面试题48：不能被继承的类 239 常规的解法：把构造函数设为私有函数 239 新奇的解法：利用虚拟继承 240 6.6 本章小结 241 第7章 两个面试案例 243 # 7.1 案例一：（面试题49）把字符串转换成整数 244 7.2 案例二：（面试题50）树中两个结点的最低公共祖先 252 第8章 英文版新增面试题 261 # 8.1 数组 261 面试题51：数组中重复的数字 261 面试题52：构建乘积数组 263 8.2 字符串 265 面试题53：正则表达式匹配 265 面试题54：表示数值的字符串 267 面试题55：字符流中第一个不重复的字符 269 8.3 链表 270 面试题56：链表中环的入口结点 270 面试题57：删除链表中重复的结点 273 8.4 树 275 面试题58：二叉树的下一个结点 275 面试题59：对称的二叉树 277 面试题60：把二叉树打印成多行 278 面试题61：按之字形顺序打印二叉树 280 面试题62：序列化二叉树 283 面试题63：二叉搜索树的第k个结点 285 面试题64：数据流中的中位数 286 8.5 栈和队列 290 面试题65：滑动窗口的最大值 290 8.6 回溯法 294 面试题66：矩阵中的路径 294 面试题67：机器人的运动范围 296 2025-01-11 # leetcode 刷题 # 面试经典150题 # 面试经典150题 数组/字符串 # 合并两个有序数组 2025-01-12 移除元素 2025-01-11 删除有序数组中的重复项 2025-01-11 没有做出来，看的官方题解 2025-01-11 做完删除有序数组中的重复项 II之后再尝试重新解题完成 删除有序数组中的重复项 II 2025-01-11 多数元素 2025-01-12 轮转数组 2025-01-18 进阶 尽可能想出更多的解决方案，至少有 三种 不同的方法可以解决这个问题。 你可以使用空间复杂度为 O(1) 的 原地 算法解决这个问题吗？ 买卖股票的最佳时机 2025-01-11 看官方题解做出来的 2025-01-17 review 买卖股票的最佳时机 II 官方题解 理解 2025-01-17 方法一：动态规划 方法二：贪心 跳跃游戏 2025-01-17 官方题解理解 贪心 2025-01-18 跳跃游戏 II 2025-01-18 算法超时了 理解官方题解 2025-01-18 方法一：反向查找出发位置 Solution45.jump2 2025-01-18 方法二：正向查找可达到的最大位置 Solution45.jump3 H 指数 2025-01-18 Tips An easy approach is to sort the array first. What are the possible values of h-index? A faster approach is to use extra space. O(1) 时间插入、删除和获取随机元素 除自身以外数组的乘积 加油站 分发糖果 接雨水 罗马数字转整数 2025-01-12 整数转罗马数字 最后一个单词的长度 2025-01-12 最长公共前缀 2025-01-12 反转字符串中的单词 2025-01-18 进阶 如果字符串在你使用的编程语言中是一种可变数据类型，请尝试使用 O(1) 额外空间复杂度的 原地 解法。 Z 字形变换 找出字符串中第一个匹配项的下标 2025-01-12 文本左右对齐 双指针 # 验证回文串 2025-01-13 判断子序列 2025-01-13 两数之和 II - 输入有序数组 2025-01-13 运行有时候会超过时间限制 盛最多水的容器 三数之和 滑动窗口 # 长度最小的子数组 2025-01-22 无重复字符的最长子串 2025-01-22 串联所有单词的子串 2025-01-22 最小覆盖子串 矩阵 # 有效的数独 2025-01-18 螺旋矩阵 2025-01-18 旋转图像 理解官方题解 2025-01-18 方法一：使用辅助数组 2025-01-18 方法二：原地旋转 有数学公式的推导，需要自己推导一次 2025-01-18 方法三：用翻转代替旋转 有数学公式的推导，需要自己推导一次 矩阵置零 2025-01-18 生命游戏 2025-01-18 进阶 你可以使用原地算法解决本题吗？请注意，面板上所有格子需要同时被更新：你不能先更新某些格子，然后使用它们的更新后的值再更新其他格子。 本题中，我们使用二维数组来表示面板。原则上，面板是无限的，但当活细胞侵占了面板边界时会造成问题。你将如何解决这些问题？ ✅ 哈希表 # 赎金信 2025-01-13 同构字符串 2025-01-13 单词规律 2025-01-13 有效的字母异位词 2025-01-13 字母异位词分组 2025-01-16 第一遍算法超时，看了官方题解思路后实现通过 两数之和 2025-01-13 快乐数 2025-01-13 存在重复元素 II 2025-01-13 最长连续序列 2025-01-16 看了官方题解后完成 区间 # 栈 # 有效的括号 2025-01-22 简化路径 2025-01-22 最小栈 2025-01-22 理解官方题解 文字描述后完成 2025-01-22 理解官方题解 逆波兰表达式求值 2025-01-22 基本计算器 链表 # 环形链表 2025-01-20 理解官方题解 2025-01-20 方法一：哈希表 方法二：快慢指针 两数相加 2025-01-20 合并两个有序链表 2025-01-20 随机链表的复制 2025-01-20 反转链表 II 2025-01-20 K 个一组翻转链表 删除链表的倒数第 N 个结点 2025-01-20 进阶 2025-01-20 你能尝试使用一趟扫描实现吗？ 删除排序链表中的重复元素 II 2025-01-21 旋转链表 2025-01-20 分隔链表 2025-01-21 LRU 缓存 2025-01-22 理解官方题解 二叉树 # 二叉树的最大深度 2025-01-15 相同的树 2025-01-15 翻转二叉树 2025-01-15 对称二叉树 没做出来，看的官方题解 从前序与中序遍历序列构造二叉树 从中序与后序遍历序列构造二叉树 填充每个节点的下一个右侧节点指针 II 二叉树展开为链表 路径总和 求根节点到叶节点数字之和 二叉树中的最大路径和 二叉搜索树迭代器 完全二叉树的节点个数 二叉树的最近公共祖先 二叉树层次遍历 # 二叉搜索树 # 图 # 图的广度优先搜索 # 字典树 # ✅ 回溯 # 电话号码的字母组合 2025-01-15 组合 2025-01-15 全排列 2025-01-15 组合总和 2025-01-15 N 皇后 II 2025-01-15 括号生成 2025-01-15 单词搜索 2025-01-15 分治 # kadane算法 # 二分查找 # 堆 # 位运算 # 二进制求和 2025-01-16 颠倒二进制位 2025-01-16 没做出来, 参考这篇文章LeetCode 190. 颠倒二进制位 （位运算 分治） 2025-01-17 复习了一遍 2025-01-17 新增了中间值打印的代码在算法中 位1的个数 2025-01-17 只出现一次的数字 2025-01-17 只出现一次的数字 II 2025-01-17 理解了官方题解 方法2 数字范围按位与 2025-01-17 理解了官方题解 方法2 数学 # 回文数 2025-01-17 不将整数转为字符串来解决这个问题 加一 2025-01-17 阶乘后的零 2025-01-17 x 的平方根 2025-01-17 Pow(x, n) 2025-01-17 超时了 2025-01-17 看懂了官方题解 直线上最多的点数 2025-01-17 看了官方题解，但还是不太理解 一维动态规划 # 爬楼梯 2025-01-11 通过 多维动态规划 # 2025-01-09 # ✅ Spring实战 第6版 Book # 第1章 Spring 起步 1.1 什么是Spring 2025-01-09 1.2 初始化 spring 应用 2025-01-09 1.3 编写 Spring 应用 2025-01-09 1.4 俯瞰 Spring 风景线 2025-01-09 第2章 2.1 展现信息 2025-01-09 2.2 处理表单提交 2025-01-09 2.3 校验表单输入 2025-01-09 2.4 使用视图控制器 2025-01-09 2.5 选择视图模板库 2025-01-09 第3章 使用数据 3.1 2025-01-09 3.2 2025-01-11 3.3 2025-01-11 第4章 使用非关系型数据 4.1 2025-01-11 4.2 2025-01-11 第5章 保护Spring 5.1 2025-01-11 5.2 2025-01-11 5.3 2025-01-11 5.4 2025-01-11 5.5 2025-01-12 第6章 使用配置属性 6.1 2025-01-12 6.2 2025-01-12 6.3 2025-01-12 第7章 创建REST服务 7.1 2025-01-12 7.2 2025-01-12 7.3 2025-01-12 第8章 保护REST 8.1 2025-01-12 8.2 2025-01-12 8.3 2025-01-12 8.4 2025-01-12 第9章 发送异步消息 9.1 2025-01-13 9.2 2025-01-13 9.3 2025-01-13 第10章 Spring集成 10.1 2025-01-13 10.2 2025-01-13 10.3 2025-01-13 第11章 理解反应式编程 11.1 2025-01-13 11.2 2025-01-13 11.3 2025-01-13 第12章 开发反应式API 12.1 2025-01-13 12.2 2025-01-13 12.3 2025-01-13 12.4 2025-01-13 12.5 2025-01-13 第13章 反应式持久化数据 13.1 2025-01-14 13.2 2025-01-14 13.3 2025-01-14 第14章 使用RSocket 14.1 2025-01-14 14.2 2025-01-15 14.3 2025-01-15 第15章 部署Spring 15.1 2025-01-15 15.2 2025-01-15 15.3 2025-01-15 15.4 2025-01-15 第16章 管理Spring 16.1 2025-01-15 16.2 2025-01-15 16.3 2025-01-15 第17章 使用JMX监控Spring 17.1 2025-01-15 17.2 2025-01-15 17.3 2025-01-15 第18章 部署Spring 18.1 2025-01-15 18.2 2025-01-15 18.3 2025-01-15 18.4 2025-01-15 18.5 2025-01-15 JavaGuide 文档阅读 # JavaGuide 必看 面试准备 Java 计算机基础 数据库 开发工具 常用框架 Spring\u0026amp;Spring Boot MyBatis常见面试题总结 2025-01-09 太过总结性，需要看一些更基础的文章 Netty常见面试题总结 系统设计 分布式 高性能 高可用 2025-01-08 # 计算机教育中缺失的学期 # 计算机教育中缺失的学期 阮一峰博客阅读 # 阮一峰的网络日志 散文 观点与感想 算法与数学 开发者手册 理解计算机 JavaScript 计算机行业历史 周刊 创业 译文集 2025-01-05 # spring 基础知识点 视频 # B站大学终于把Spring做成动画片了，一周刷爆，2024最新版，学完即可面试，拿走不谢，学不会我退出IT圈！ 1 2025-01-05 Spring 是如何整合MyBatis管理Mapper接口的 2025-01-05 2 2025-01-06 3 2025-01-06 4 2025-01-06 5 2025-01-06 6 2025-01-06 7 2025-01-06 8 2025-01-06 9 2025-01-06 10 2025-01-06 11 (January 6, 2025 at 18:43:04 GMT+8) 12 (January 6, 2025 at 18:50:57 GMT+8) 13 (January 6, 2025 at 18:57:05 GMT+8) 14 (January 6, 2025 at 18:59:15 GMT+8) 15 2025-01-07 16 2025-01-07 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 100 2025-01-03 # 代码随想录 视频 # 代码随想录 数组 # 链表 # 哈希表 # 字符串 # 栈与队列 # 二叉树 # 1 理论基础 2025-01-09 2 递归遍历 (Leetcode 144, 145, 94) 2025-01-09 3 非递归遍历 2025-01-09 4 非递归遍历-中序 2025-01-11 5 层序遍历（广度优先搜索） 6 翻转二叉树 7 对称二叉树 8 二叉树的最大深度 9 二叉树的最小深度 10 完全二叉树节点的数量 11 平衡二叉树 12 二叉树的所有路径 13 左叶子之和 14 找左下角的值 15 路径总和 16 从中序和后序遍历序列构造二叉树 17 最大二叉树 18 合并二叉树 19 二叉搜索树中的搜索 (Leetcode 700) 2025-01-08 20 验证二叉搜索树 (Leetcode 98) 2025-01-08 21 二叉搜索树的最小绝对差 (Leetcode 530) 2025-01-08 22 二叉搜索树中的众数(Leetcode 501) 2025-01-09 23 二叉树的最近公共祖先(Leetcode 236) 2025-01-09 24 二叉搜索树的最近公共祖先 2025-01-09 25 二叉搜索树中的插入操作(Leetcode 701) 2025-01-09 26 删除二叉搜索树中的节点(Leetcode 450) 2025-01-09 27 修剪二叉搜索树 (Leetcode 669) 2025-01-09 28 将有序数组转换为二叉搜索树 (Leetcode 108) 2025-01-09 29 把二叉搜索树转换为累加树(Leetcode 538) 2025-01-09 ✅ 回溯法 # 1 理论篇 2025-01-03 2 组合问题（对应力扣题目：77.组合） 2025-01-03 3 组合问题的剪枝操作（对应力扣题目：77.组合）2025-01-03 4 回溯算法如何剪枝？| LeetCode：216.组合总和III 2025-01-03 5 LeetCode：17.电话号码的字母组合 2025-01-03 6 组合总和（对应「leetcode」力扣题目：39.组合总和） 2025-01-03 7 LeetCode:40.组合总和II 2025-01-03 8 分割回文串 2025-01-04 9 复原IP地址 2025-01-04 10 子集 （Leetcode 78） 2025-01-04 11 子集2（Leetcode 90） 2025-01-04 12 递增子序列（Leetcode 491） 2025-01-04 13 全排列（Leetcode 46） 2025-01-04 14 全排列2（Leetcode 47）2025-01-04 15 N皇后（Leetcode 51） 2025-01-05 16 解数独（Leetcode 37） 2025-01-05 ✅ 贪心算法 # 理论基础 2025-01-05 1 分发饼干 leetcode 455 2025-01-05 2 摆动序列 Leetcode 376 2025-01-05 3 最大子序和 2025-01-06 4 买卖股票最佳时机2 2025-01-06 5 跳跃游戏（Leetcode 55） 2025-01-06 6 跳跃游戏2 （Leetcode 45） 2025-01-06 这道题没听懂 7 K次取反后最大化的数组和 （Leetcode 1005） 2025-01-06 8 加油站（Leetcode 134） 2025-01-06 9 分发糖果（Leetcode 135） 2025-01-06 10 柠檬水找零（Leetcode 860） 2025-01-06 11 根据身高重建队列（Leetcode 406） 2025-01-06 12 用最少数量的箭引爆气球(Leetcode 452) 2025-01-06 13 无重叠区间(Leetcode 435) 2025-01-06 14 划分字母区间 (Leetcode 763) 2025-01-06 15 合并区间 （Leetcode 56） (January 7, 2025 at 15:18:40 GMT+8) 16 单调自增的数字（Leetcode 738）(January 7, 2025 at 15:41:59 GMT+8) 17 监督二叉树（Leetcode 968） (January 7, 2025 at 16:11:51 GMT+8) 动态规划 # 1 理论基础 (January 7, 2025 at 16:34:49 GMT+8) 2 斐波那契数列 （Leetcode 509） (January 7, 2025 at 16:46:54 GMT+8) 3 爬楼梯（Leetcode 70） (January 7, 2025 at 16:57:46 GMT+8) 4 使用最小花费爬楼梯 (Leetcode 746) 2025-01-08 5 不同路径 2025-01-08 6 不同路径2 (Leetcode 63) 2025-01-08 7 整数拆分 (Leetcode 343) 2025-01-08 这道题没太听懂 8 不同的二叉搜索树（Leetcode 96） 9 0-1背包问题理论基础 10 0-1背包问题之滚动数组 11 分割等和子集 12 最后一块石头的重量2 13 目标和 14 一和零 15 完全背包理论基础 16 零钱兑换2 17 组合综合4 18 零钱兑换 19 完全平方数 20 单词拆分 21 打家劫舍 22 打家劫舍2 23 打家劫舍3 24 买卖股票的最佳时机1 25 买卖股票的最佳时机2 26 买卖股票的最佳时机3 27 买卖股票的最佳时机4 28 买卖股票的最佳时机含冷冻期 29 买卖股票的最佳时机含手续费 30 最长递增子序列 31 最长连续递增序列 32 最长重复子数组 33 最长公共子序列 34 不相交的线 35 最大子序和 36 判断子序列 37 不同的子序列 38 两个字符串的删除操作 39 编辑距离 40 回文子串 42 最长回文子序列 单调栈 # 2024-11-14 # What I Wish Someone Told Me About Postgres 介绍了 postgresql 相关的一些知识点，可以看一看 The WIRED Guide to Protecting Yourself From Government Surveillance How a stubborn computer scientist accidentally launched the deep learning boom 可以了解到 辛顿、黄仁勋、李飞飞 的工作是如何推动神经网络的发展的 "},{"id":11,"href":"/zh/zh/post/computer-science/computer-science-learning-log/","title":"学习记录","section":"Computer Science","content":" 学习记录 # 2025-01-17 # 剑指Offer Book # 剑指Offer 第1章 面试的流程 1 # 1.1 面试官谈面试 1 1.2 面试的三种形式 2 1.2.1 电话面试 2 1.2.2 共享桌面远程面试 3 1.2.3 现场面试 4 1.3 面试的三个环节 5 1.3.1 行为面试环节 5 应聘者的项目经验 6 应聘者掌握的技能 7 回答“为什么跳槽” 8 1.3.2 技术面试环节 10 扎实的基础知识 10 高质量的代码 11 清晰的思路 14 优化效率的能力 15 优秀的综合能力 16 1.3.3 应聘者提问环节 17 1.4 本章小结 18 第2章 面试需要的基础知识 20 # 2.1 面试官谈基础知识 20 2.2 编程语言 22 2.2.1 C++ 22 面试题1：赋值运算符函数 24 经典的解法，适用于初级程序员 25 考虑异常安全性的解法，高级程序员必备 26 2.2.2 C# 27 面试题2：实现Singleton模式 31 不好的解法一：只适用于单线程 31 不好的解法二：可用于多线程但效率不高 32 可行的解法：同步锁前后两次判断 33 推荐的解法一：利用静态构造函数 34 推荐的解法二：按需创建实例 34 解法比较 35 2.3 数据结构 36 2.3.1 数组 36 面试题3：二维数组中的查找 38 2.3.2 字符串 42 面试题4：替换空格 44 O(n2)的解法，不足以拿到Offer 45 O(n)的解法，搞定Offer就靠它 46 2.3.3 链表 49 面试题5：从尾到头打印链表 51 2.3.4 树 53 面试题6：重建二叉树 55 2.3.5 栈和队列 58 面试题7：用两个栈实现队列 59 2.4 算法和数据操作 62 2.4.1 查找和排序 63 面试题8：旋转数组的最小数字 66 2.4.2 递归和循环 71 面试题9：斐波那契数列 73 效率很低的解法，面试官不会喜欢 73 面试官期待的实用解法 74 O(logn)但不够实用的解法 74 解法比较 75 2.4.3 位运算 77 面试题10：二进制中1的个数 78 可能引起死循环的解法 79 常规解法 79 能给面试官带来惊喜的解法 80 2.5 本章小结 82 第3章 高质量的代码 84 # 3.1 面试官谈代码质量 84 3.2 代码的规范性 86 3.3 代码的完整性 87 从3方面确保代码的完整性 87 3种错误处理的方法 88 面试题11：数值的整数次方 90 自以为题目简单的解法 90 全面但不够高效的解法，离Offer已经很近了 90 全面又高效的解法，确保能拿到Offer 92 面试题12：打印1到最大的n位数 94 跳进面试官陷阱 94 在字符串上模拟数字加法 94 把问题转换成数字排列 97 面试题13：在O(1)时间删除链表结点 99 面试题14：调整数组顺序使奇数位于偶数前面 102 只完成基本功能的解法，仅适用于初级程序员 102 考虑可扩展性的解法，能秒杀Offer 104 3.4 代码的鲁棒性 106 面试题15：链表中倒数第k个结点 107 面试题16：反转链表 112 面试题17：合并两个排序的链表 114 面试题18：树的子结构 117 3.5 本章小结 121 第4章 解决面试题的思路 123 # 4.1 面试官谈面试思路 123 面试题19：二叉树的镜像 125 4.2 画图让抽象问题形象化 125 面试题20：顺时针打印矩阵 127 4.3 举例让抽象问题具体化 131 面试题21：包含min函数的栈 132 面试题22：栈的压入、弹出序列 134 面试题23：从上往下打印二叉树 137 面试题24：二叉搜索树的后序遍历序列 140 面试题25：二叉树中和为某一值的路径 143 4.4 分解让复杂问题简单化 146 面试题26：复杂链表的复制 147 面试题27：二叉搜索树与双向链表 151 面试题28：字符串的排列 154 4.5 本章小结 158 第5章 优化时间和空间效率 160 # 5.1 面试官谈效率 160 5.2 时间效率 162 面试题29：数组中出现次数超过一半的数字 163 基于Partition函数的O(n)算法 163 利用数组特点的O(n)算法 165 解法比较 166 面试题30：最小的k个数 167 O(n)的算法，只当可以修改输入数组时可用 167 O(nlogk)的算法，适合处理海量数据 168 解法比较 169 面试题31：连续子数组的最大和 171 举例分析数组的规律 171 应用动态规划法 173 面试题32：从1到n整数中1出现的次数 174 不考虑效率的解法，想拿Offer有点难 174 明显提高效率的解法，让面试官耳目一新 175 面试题33：把数组排成最小的数 177 5.3 时间效率与空间效率的平衡 181 面试题34：丑数 182 逐个判断整数是不是丑数的解法 182 创建数组保存已经找到的丑数的解法 183 面试题35：第一个只出现一次的字符 186 面试题36：数组中的逆序对 189 面试题37：两个链表的第一个公共结点 193 5.4 本章小结 196 第6章 面试中的各项能力 198 # 6.1 面试官谈能力 198 6.2 沟通能力和学习能力 200 沟通能力 200 学习能力 200 善于学习、沟通的人也善于提问 201 6.3 知识迁移能力 203 面试题38：数字在排序数组中出现的次数 204 面试题39：二叉树的深度 207 重复遍历结点的解法，不足以打动面试官 209 只遍历结点一次的解法，正是面试官喜欢的 209 面试题40：数组中只出现一次的数字 211 面试题41：和为s的两个数字VS和为s的连续正数序列 214 面试题42：翻转单词顺序 VS左旋转字符串 218 6.4 抽象建模能力 222 面试题43：n个骰子的点数 223 基于递归求骰子点数，时间效率不够高 223 基于循环求骰子点数，时间性能好 224 面试题44：扑克牌的顺子 226 面试题45：圆圈中最后剩下的数字 228 经典的解法，用循环链表模拟圆圈 229 创新的解法，拿到Offer不在话下 230 6.5 发散思维能力 232 面试题46：求1+2+…+n 233 利用构造函数求解 234 利用虚函数求解 234 利用函数指针求解 235 利用模板类型求解 236 面试题47：不用加减乘除做加法 237 面试题48：不能被继承的类 239 常规的解法：把构造函数设为私有函数 239 新奇的解法：利用虚拟继承 240 6.6 本章小结 241 第7章 两个面试案例 243 # 7.1 案例一：（面试题49）把字符串转换成整数 244 7.2 案例二：（面试题50）树中两个结点的最低公共祖先 252 第8章 英文版新增面试题 261 # 8.1 数组 261 面试题51：数组中重复的数字 261 面试题52：构建乘积数组 263 8.2 字符串 265 面试题53：正则表达式匹配 265 面试题54：表示数值的字符串 267 面试题55：字符流中第一个不重复的字符 269 8.3 链表 270 面试题56：链表中环的入口结点 270 面试题57：删除链表中重复的结点 273 8.4 树 275 面试题58：二叉树的下一个结点 275 面试题59：对称的二叉树 277 面试题60：把二叉树打印成多行 278 面试题61：按之字形顺序打印二叉树 280 面试题62：序列化二叉树 283 面试题63：二叉搜索树的第k个结点 285 面试题64：数据流中的中位数 286 8.5 栈和队列 290 面试题65：滑动窗口的最大值 290 8.6 回溯法 294 面试题66：矩阵中的路径 294 面试题67：机器人的运动范围 296 2025-01-11 # leetcode 刷题 # 面试经典150题 # 面试经典150题 数组/字符串 # 合并两个有序数组 2025-01-12 移除元素 2025-01-11 删除有序数组中的重复项 2025-01-11 没有做出来，看的官方题解 2025-01-11 做完删除有序数组中的重复项 II之后再尝试重新解题完成 删除有序数组中的重复项 II 2025-01-11 多数元素 2025-01-12 轮转数组 2025-01-18 进阶 尽可能想出更多的解决方案，至少有 三种 不同的方法可以解决这个问题。 你可以使用空间复杂度为 O(1) 的 原地 算法解决这个问题吗？ 买卖股票的最佳时机 2025-01-11 看官方题解做出来的 2025-01-17 review 买卖股票的最佳时机 II 官方题解 理解 2025-01-17 方法一：动态规划 方法二：贪心 跳跃游戏 2025-01-17 官方题解理解 贪心 2025-01-18 跳跃游戏 II 2025-01-18 算法超时了 理解官方题解 2025-01-18 方法一：反向查找出发位置 Solution45.jump2 2025-01-18 方法二：正向查找可达到的最大位置 Solution45.jump3 H 指数 2025-01-18 Tips An easy approach is to sort the array first. What are the possible values of h-index? A faster approach is to use extra space. O(1) 时间插入、删除和获取随机元素 除自身以外数组的乘积 加油站 分发糖果 接雨水 罗马数字转整数 2025-01-12 整数转罗马数字 最后一个单词的长度 2025-01-12 最长公共前缀 2025-01-12 反转字符串中的单词 2025-01-18 进阶 如果字符串在你使用的编程语言中是一种可变数据类型，请尝试使用 O(1) 额外空间复杂度的 原地 解法。 Z 字形变换 找出字符串中第一个匹配项的下标 2025-01-12 文本左右对齐 双指针 # 验证回文串 2025-01-13 判断子序列 2025-01-13 两数之和 II - 输入有序数组 2025-01-13 运行有时候会超过时间限制 盛最多水的容器 三数之和 滑动窗口 # 长度最小的子数组 2025-01-22 无重复字符的最长子串 2025-01-22 串联所有单词的子串 2025-01-22 最小覆盖子串 矩阵 # 有效的数独 2025-01-18 螺旋矩阵 2025-01-18 旋转图像 理解官方题解 2025-01-18 方法一：使用辅助数组 2025-01-18 方法二：原地旋转 有数学公式的推导，需要自己推导一次 2025-01-18 方法三：用翻转代替旋转 有数学公式的推导，需要自己推导一次 矩阵置零 2025-01-18 生命游戏 2025-01-18 进阶 你可以使用原地算法解决本题吗？请注意，面板上所有格子需要同时被更新：你不能先更新某些格子，然后使用它们的更新后的值再更新其他格子。 本题中，我们使用二维数组来表示面板。原则上，面板是无限的，但当活细胞侵占了面板边界时会造成问题。你将如何解决这些问题？ ✅ 哈希表 # 赎金信 2025-01-13 同构字符串 2025-01-13 单词规律 2025-01-13 有效的字母异位词 2025-01-13 字母异位词分组 2025-01-16 第一遍算法超时，看了官方题解思路后实现通过 两数之和 2025-01-13 快乐数 2025-01-13 存在重复元素 II 2025-01-13 最长连续序列 2025-01-16 看了官方题解后完成 区间 # 栈 # 有效的括号 2025-01-22 简化路径 2025-01-22 最小栈 2025-01-22 理解官方题解 文字描述后完成 2025-01-22 理解官方题解 逆波兰表达式求值 2025-01-22 基本计算器 链表 # 环形链表 2025-01-20 理解官方题解 2025-01-20 方法一：哈希表 方法二：快慢指针 两数相加 2025-01-20 合并两个有序链表 2025-01-20 随机链表的复制 2025-01-20 反转链表 II 2025-01-20 K 个一组翻转链表 删除链表的倒数第 N 个结点 2025-01-20 进阶 2025-01-20 你能尝试使用一趟扫描实现吗？ 删除排序链表中的重复元素 II 2025-01-21 旋转链表 2025-01-20 分隔链表 2025-01-21 LRU 缓存 2025-01-22 理解官方题解 二叉树 # 二叉树的最大深度 2025-01-15 相同的树 2025-01-15 翻转二叉树 2025-01-15 对称二叉树 没做出来，看的官方题解 从前序与中序遍历序列构造二叉树 从中序与后序遍历序列构造二叉树 填充每个节点的下一个右侧节点指针 II 二叉树展开为链表 路径总和 求根节点到叶节点数字之和 二叉树中的最大路径和 二叉搜索树迭代器 完全二叉树的节点个数 二叉树的最近公共祖先 二叉树层次遍历 # 二叉搜索树 # 图 # 图的广度优先搜索 # 字典树 # ✅ 回溯 # 电话号码的字母组合 2025-01-15 组合 2025-01-15 全排列 2025-01-15 组合总和 2025-01-15 N 皇后 II 2025-01-15 括号生成 2025-01-15 单词搜索 2025-01-15 分治 # kadane算法 # 二分查找 # 堆 # 位运算 # 二进制求和 2025-01-16 颠倒二进制位 2025-01-16 没做出来, 参考这篇文章LeetCode 190. 颠倒二进制位 （位运算 分治） 2025-01-17 复习了一遍 2025-01-17 新增了中间值打印的代码在算法中 位1的个数 2025-01-17 只出现一次的数字 2025-01-17 只出现一次的数字 II 2025-01-17 理解了官方题解 方法2 数字范围按位与 2025-01-17 理解了官方题解 方法2 数学 # 回文数 2025-01-17 不将整数转为字符串来解决这个问题 加一 2025-01-17 阶乘后的零 2025-01-17 x 的平方根 2025-01-17 Pow(x, n) 2025-01-17 超时了 2025-01-17 看懂了官方题解 直线上最多的点数 2025-01-17 看了官方题解，但还是不太理解 一维动态规划 # 爬楼梯 2025-01-11 通过 多维动态规划 # 2025-01-09 # ✅ Spring实战 第6版 Book # 第1章 Spring 起步 1.1 什么是Spring 2025-01-09 1.2 初始化 spring 应用 2025-01-09 1.3 编写 Spring 应用 2025-01-09 1.4 俯瞰 Spring 风景线 2025-01-09 第2章 2.1 展现信息 2025-01-09 2.2 处理表单提交 2025-01-09 2.3 校验表单输入 2025-01-09 2.4 使用视图控制器 2025-01-09 2.5 选择视图模板库 2025-01-09 第3章 使用数据 3.1 2025-01-09 3.2 2025-01-11 3.3 2025-01-11 第4章 使用非关系型数据 4.1 2025-01-11 4.2 2025-01-11 第5章 保护Spring 5.1 2025-01-11 5.2 2025-01-11 5.3 2025-01-11 5.4 2025-01-11 5.5 2025-01-12 第6章 使用配置属性 6.1 2025-01-12 6.2 2025-01-12 6.3 2025-01-12 第7章 创建REST服务 7.1 2025-01-12 7.2 2025-01-12 7.3 2025-01-12 第8章 保护REST 8.1 2025-01-12 8.2 2025-01-12 8.3 2025-01-12 8.4 2025-01-12 第9章 发送异步消息 9.1 2025-01-13 9.2 2025-01-13 9.3 2025-01-13 第10章 Spring集成 10.1 2025-01-13 10.2 2025-01-13 10.3 2025-01-13 第11章 理解反应式编程 11.1 2025-01-13 11.2 2025-01-13 11.3 2025-01-13 第12章 开发反应式API 12.1 2025-01-13 12.2 2025-01-13 12.3 2025-01-13 12.4 2025-01-13 12.5 2025-01-13 第13章 反应式持久化数据 13.1 2025-01-14 13.2 2025-01-14 13.3 2025-01-14 第14章 使用RSocket 14.1 2025-01-14 14.2 2025-01-15 14.3 2025-01-15 第15章 部署Spring 15.1 2025-01-15 15.2 2025-01-15 15.3 2025-01-15 15.4 2025-01-15 第16章 管理Spring 16.1 2025-01-15 16.2 2025-01-15 16.3 2025-01-15 第17章 使用JMX监控Spring 17.1 2025-01-15 17.2 2025-01-15 17.3 2025-01-15 第18章 部署Spring 18.1 2025-01-15 18.2 2025-01-15 18.3 2025-01-15 18.4 2025-01-15 18.5 2025-01-15 JavaGuide 文档阅读 # JavaGuide 必看 面试准备 Java 计算机基础 数据库 开发工具 常用框架 Spring\u0026amp;Spring Boot MyBatis常见面试题总结 2025-01-09 太过总结性，需要看一些更基础的文章 Netty常见面试题总结 系统设计 分布式 高性能 高可用 2025-01-08 # 计算机教育中缺失的学期 # 计算机教育中缺失的学期 阮一峰博客阅读 # 阮一峰的网络日志 散文 观点与感想 算法与数学 开发者手册 理解计算机 JavaScript 计算机行业历史 周刊 创业 译文集 2025-01-05 # spring 基础知识点 视频 # B站大学终于把Spring做成动画片了，一周刷爆，2024最新版，学完即可面试，拿走不谢，学不会我退出IT圈！ 1 2025-01-05 Spring 是如何整合MyBatis管理Mapper接口的 2025-01-05 2 2025-01-06 3 2025-01-06 4 2025-01-06 5 2025-01-06 6 2025-01-06 7 2025-01-06 8 2025-01-06 9 2025-01-06 10 2025-01-06 11 (January 6, 2025 at 18:43:04 GMT+8) 12 (January 6, 2025 at 18:50:57 GMT+8) 13 (January 6, 2025 at 18:57:05 GMT+8) 14 (January 6, 2025 at 18:59:15 GMT+8) 15 2025-01-07 16 2025-01-07 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 100 2025-01-03 # 代码随想录 视频 # 代码随想录 数组 # 链表 # 哈希表 # 字符串 # 栈与队列 # 二叉树 # 1 理论基础 2025-01-09 2 递归遍历 (Leetcode 144, 145, 94) 2025-01-09 3 非递归遍历 2025-01-09 4 非递归遍历-中序 2025-01-11 5 层序遍历（广度优先搜索） 6 翻转二叉树 7 对称二叉树 8 二叉树的最大深度 9 二叉树的最小深度 10 完全二叉树节点的数量 11 平衡二叉树 12 二叉树的所有路径 13 左叶子之和 14 找左下角的值 15 路径总和 16 从中序和后序遍历序列构造二叉树 17 最大二叉树 18 合并二叉树 19 二叉搜索树中的搜索 (Leetcode 700) 2025-01-08 20 验证二叉搜索树 (Leetcode 98) 2025-01-08 21 二叉搜索树的最小绝对差 (Leetcode 530) 2025-01-08 22 二叉搜索树中的众数(Leetcode 501) 2025-01-09 23 二叉树的最近公共祖先(Leetcode 236) 2025-01-09 24 二叉搜索树的最近公共祖先 2025-01-09 25 二叉搜索树中的插入操作(Leetcode 701) 2025-01-09 26 删除二叉搜索树中的节点(Leetcode 450) 2025-01-09 27 修剪二叉搜索树 (Leetcode 669) 2025-01-09 28 将有序数组转换为二叉搜索树 (Leetcode 108) 2025-01-09 29 把二叉搜索树转换为累加树(Leetcode 538) 2025-01-09 ✅ 回溯法 # 1 理论篇 2025-01-03 2 组合问题（对应力扣题目：77.组合） 2025-01-03 3 组合问题的剪枝操作（对应力扣题目：77.组合）2025-01-03 4 回溯算法如何剪枝？| LeetCode：216.组合总和III 2025-01-03 5 LeetCode：17.电话号码的字母组合 2025-01-03 6 组合总和（对应「leetcode」力扣题目：39.组合总和） 2025-01-03 7 LeetCode:40.组合总和II 2025-01-03 8 分割回文串 2025-01-04 9 复原IP地址 2025-01-04 10 子集 （Leetcode 78） 2025-01-04 11 子集2（Leetcode 90） 2025-01-04 12 递增子序列（Leetcode 491） 2025-01-04 13 全排列（Leetcode 46） 2025-01-04 14 全排列2（Leetcode 47）2025-01-04 15 N皇后（Leetcode 51） 2025-01-05 16 解数独（Leetcode 37） 2025-01-05 ✅ 贪心算法 # 理论基础 2025-01-05 1 分发饼干 leetcode 455 2025-01-05 2 摆动序列 Leetcode 376 2025-01-05 3 最大子序和 2025-01-06 4 买卖股票最佳时机2 2025-01-06 5 跳跃游戏（Leetcode 55） 2025-01-06 6 跳跃游戏2 （Leetcode 45） 2025-01-06 这道题没听懂 7 K次取反后最大化的数组和 （Leetcode 1005） 2025-01-06 8 加油站（Leetcode 134） 2025-01-06 9 分发糖果（Leetcode 135） 2025-01-06 10 柠檬水找零（Leetcode 860） 2025-01-06 11 根据身高重建队列（Leetcode 406） 2025-01-06 12 用最少数量的箭引爆气球(Leetcode 452) 2025-01-06 13 无重叠区间(Leetcode 435) 2025-01-06 14 划分字母区间 (Leetcode 763) 2025-01-06 15 合并区间 （Leetcode 56） (January 7, 2025 at 15:18:40 GMT+8) 16 单调自增的数字（Leetcode 738）(January 7, 2025 at 15:41:59 GMT+8) 17 监督二叉树（Leetcode 968） (January 7, 2025 at 16:11:51 GMT+8) 动态规划 # 1 理论基础 (January 7, 2025 at 16:34:49 GMT+8) 2 斐波那契数列 （Leetcode 509） (January 7, 2025 at 16:46:54 GMT+8) 3 爬楼梯（Leetcode 70） (January 7, 2025 at 16:57:46 GMT+8) 4 使用最小花费爬楼梯 (Leetcode 746) 2025-01-08 5 不同路径 2025-01-08 6 不同路径2 (Leetcode 63) 2025-01-08 7 整数拆分 (Leetcode 343) 2025-01-08 这道题没太听懂 8 不同的二叉搜索树（Leetcode 96） 9 0-1背包问题理论基础 10 0-1背包问题之滚动数组 11 分割等和子集 12 最后一块石头的重量2 13 目标和 14 一和零 15 完全背包理论基础 16 零钱兑换2 17 组合综合4 18 零钱兑换 19 完全平方数 20 单词拆分 21 打家劫舍 22 打家劫舍2 23 打家劫舍3 24 买卖股票的最佳时机1 25 买卖股票的最佳时机2 26 买卖股票的最佳时机3 27 买卖股票的最佳时机4 28 买卖股票的最佳时机含冷冻期 29 买卖股票的最佳时机含手续费 30 最长递增子序列 31 最长连续递增序列 32 最长重复子数组 33 最长公共子序列 34 不相交的线 35 最大子序和 36 判断子序列 37 不同的子序列 38 两个字符串的删除操作 39 编辑距离 40 回文子串 42 最长回文子序列 单调栈 # 2024-11-14 # What I Wish Someone Told Me About Postgres 介绍了 postgresql 相关的一些知识点，可以看一看 The WIRED Guide to Protecting Yourself From Government Surveillance How a stubborn computer scientist accidentally launched the deep learning boom 可以了解到 辛顿、黄仁勋、李飞飞 的工作是如何推动神经网络的发展的 "},{"id":12,"href":"/zh/post/others/english-learning/","title":"English Learning","section":"Others","content":" English Learning # lite cnn 纯文字版的cnn，没有图片 lite cnn China China Daily 中国官方最大的英语新闻网站？ voa special English 这个网站听 voa special 不用翻墙 rest of world 这个网站很有设计感 China verge Hacker News 技术文章也能学习英语 南华早报 bbc China quora 国外的知乎 log # 2025-01-07 2024-12-14 “羽绒服”英语怎么说？你绝对想不到！ 2025-01-07 2025-01-06 “年会”英文怎么说？“Year Meeting”还是“Annual Party？” 都错啦！ voa special English # voa special English others # 如何利用 AI 更好地学外语 A List Of Text-Only \u0026amp; Minimalist News Sites 2022 # Monkeypox outbreak 猴痘病毒爆发 Russia-Ukraine War November A projected \u0026ldquo;red wave\u0026rdquo; fizzled, as Republicans won a slim majority in the House, and Democrats held control of the United States Senate 随着共和党在众议院赢得微弱多数，民主党控制了美国参议院，预计中的“红色浪潮”落空了 2022-11-09 Why is Apple Rosetta 2 fast? 为什么 Apple Rosetta 2 速度很快？ October Elon Musk took control of Twitter, bringing to the social media giant a brash leadership style – along with thousands of layoffs 埃隆·马斯克 （Elon Musk） 控制了 Twitter，为这家社交媒体巨头带来了傲慢的领导风格——以及数千人的裁员 September Britain\u0026rsquo;s Queen Elizabeth II died in Scotland, at the age of 96. Her son Charles succeeded her as king 英国女王伊丽莎白二世在苏格兰去世，享年 96 岁。她的儿子查理继承了她的国王之位 August The FBI conducted a search of Mar-a-Lago, the home of former president Donald Trump, and found classified materials, including documents labeled \u0026ldquo;top secret.\u0026rdquo; 联邦调查局对前总统唐纳德·特朗普的家马阿拉歌庄园进行了搜查，发现了机密材料，包括标记为“绝密”的文件。 July Former Japanese prime minister Shinzo Abe was assassinated, just two days before that country\u0026rsquo;s parliamentary elections 日本前首相安倍晋三在该国议会选举前两天被暗杀 June The Supreme Court overturned Roe v. Wade, effectively criminalizing abortion in much of the nation 最高法院推翻了罗伊诉韦德案（Roe v. Wade），实际上在全国大部分地区将堕胎定为刑事犯罪。 May A gunman in Uvalde, Texas killed 19 students and two teachers at Robb Elementary School. It was the third-deadliest school shooting in U.S. history 德克萨斯州尤瓦尔迪的一名枪手在罗布小学杀死了 19 名学生和两名教师。这是美国历史上第三致命的校园枪击事件 2021 # December In December, tornadoes ripped through the South and Midwest, killing at least 91 people \u0026hellip; 12 月，龙卷风席卷南部和中西部，造成至少 91 人死亡\u0026hellip;\u0026hellip; October October brought the welcome news that the World Health Organization had endorsed the world\u0026rsquo;s first vaccine against malaria. 10 月带来了一个可喜的消息，即世界卫生组织批准了世界上第一种疟疾疫苗 September September saw the implementation of the Texas Heartbeat Act, which bans abortions after roughly six weeks. The Supreme Court has declined to block the law, saying it\u0026rsquo;s a question for lower courts. 9 月，德克萨斯州心跳法案 （Texas Heartbeat Act） 实施，该法案禁止在大约六周后堕胎。最高法院拒绝阻止这项法律，称这是下级法院的问题 August August saw the withdrawal of American troops from Afghanistan after a two-decade war that took the lives of over 2,400 U.S. service personnel. 8 月，美国军队在经历了二十年的战争后从阿富汗撤军，这场战争夺走了 2,400 多名美国军人的生命 July July brought the 32nd Summer Olympic games to Tokyo, a year after being postponed. The U.S. topped the medal count with 113. 第 32 届夏季奥运会在推迟一年后于 7 月在东京举行。美国以 113 枚奖牌位居榜首 June June saw the partial collapse of a 12-story condominium in Surfside, Florida, killing 98 residents. 6 月，佛罗里达州瑟夫赛德 （Surfside） 的一栋 12 层公寓部分倒塌，造成 98 名居民死亡 March The container ship Ever Given ran aground in the Suez Canal in March, holding up billions in trade. The ship was freed six days later. 3 月，集装箱船 Ever Given 在苏伊士运河搁浅，阻碍了数十亿美元的贸易。六天后，这艘船被释放 February In February, the United States formally re-joined the Paris Climate Agreement, an international treaty aimed at limiting global warming. 今年 2 月，美国正式重新加入旨在限制全球变暖的国际条约《巴黎气候协定》。 Janurary In January Joe Biden was inaugurated as our 46th president … 1 月，乔·拜登就任我们的第 46 任总统\u0026hellip;\u0026hellip; 2020 # The United Kingdom left the European Union; Brexit 2019 # Global SARS-Cov-2 (COVID-19) Pandemic Hong Kong Protests in 2019. 2019 年香港抗议活动 2018 # The Yellow Vests Movement in France 法国巴黎黄背心运动 World\u0026rsquo;s longest sea-crossing bridge: Hong Kong-Zhuhai-Macao Bridge The China-US trade War Started in 2018. 2018 年开始的中美贸易战 2015 # The Legalization of Same-Sex Marriage in the United States 美国同性婚姻合法化 2014 # Catastrophic Aviation Disasters of 2014. 2014 年的灾难性航空灾难 The Annexation of Crimea by Russia 俄罗斯吞并克里米亚 2012 # The “God Particle” Is (Probably) Discovered “上帝粒子”被发现 2011 # Japan’s 2011 Tōhoku Earthquake and Tsunami 日本 2011 年东北地震和海啸 Bin Laden Killed 本·拉登被击毙 2010 # Instagram was launched Apple Inc. releasd the first tablet touch screen computer iPad 2009-2017 # Barack Obama, the 44th U.S. President. The 1st African American President of the United States 2009 # Bitcoin 比特币\n2008 # **The credit and property value bubble collapses, Wall Street and other equities markets crash, demand evaporates, and a global economic recession ensues** 信用和财产价值泡沫破灭，华尔街和其他产权投资金融市场崩盘，因市场需求蒸发，导致全球性的经济衰退 2006 # The International Astronomical Union decides to remove Pluto from the list planets of the solar system 国际天文联会决定将冥王星从太阳系中除名 Twitter was launched 2005 # Facebook Youtube 2003 # USA invades Iraq 2002 # Latin no longer used in UK legal documents USA invades Afghanistan 2001 # Sep. 11 2001 New York City World Trade Center attacked fomer # 2000 International space station 1999 Alibaba 1998 Google 1996 clone 1994 Yahoo European Union 1991 1st web page From 1991 until now. The Information Revolution An era marked by the spread of telecommunications technology, especially with personal computers, the internet, the web-based economy, social media, smart phones, and greater cross-cultural mixing. Late-stage capitalism as inequalities increased. The rise of China. Death cults terrorize the world early in this era, and extremism poses a threat to global security. The threat of global conflict remains as leadership in North Korea, China, and Russia use outdated paradigms to justify policies that prepare their nations for military conflict with neighbors ( Ukraine, Georgia, Taiwan). Anti-democratic nationalist tendencies manifest in the United States (Trump), Brazil, Hungary, Poland, Turkey, the Philippines, China, Russia, Egypt, and elsewhere. But popular people’s movements for the environment, peace, and democracy (e.g., the Arab Spring, anti-global-warming activism, Black Lives Matter, Occupy Wall Street, Anti-Iraq-War) also manifest, and win some victories. Anthropocene global climate catastrophe threatens humanity. Mass extinctions begin. 这个时代代表着电信技术的普及，特别是在个人电脑、网路、电商经济、社交媒体、智能手机、以及更广泛的跨文化融合。晚期资本主义，不平等情况增加。中国的崛起，死亡邪教在这个世界造成。恐惧，极端主义也对全球的安全构成威胁。全球性的威胁冲突仍然存在北韩、中国和俄罗斯的领导阶层，他们使用不符合时代的政策，来证明准备与邻国之间（乌克兰、乔治亚、台湾）所发生的军事冲突的正当性。反民主之民族主义者倾向表现在美国（川普）、巴西、匈牙利、波兰、土耳其、菲律宾、中国、俄罗斯、埃及和其他地方。而民众为了保护环境、和平与民主而开展的运动（例如，阿拉伯之春、反全球暖化的激进主义、黑人的生命问题、占领华尔街和伊拉克战争）也得以体现，并赢得了一些胜利。在人类世，人们正面临着全球性气候灾难的威胁，这也是大灭绝的开始。 1991 1st Gulf War, USA invades Iraq following invasion of Kuwait 第一次波斯湾战争，美国攻击伊拉克接著入侵科威特 USSR collapse 苏联体制崩溃解体 Union of Soviet Socialist Republics 苏维埃社会主义共和国联盟 1990 Hubble space telescope 哈伯太空望远镜 1989 USSR quits Eastern Europe 苏联撤离东欧 Berlin wall falls 1988 USSR quits Afghanistan 1987 DNA convicts criminals 用DNA检测方式证明罪犯的罪行 1986 Shuttle Tragedy 航天飞机悲剧 1985 Ozone layer \u0026ldquo;hole\u0026rdquo; discovered 发现臭氧层破洞 1984 String Theory accepted as a possible unifying theory in physics 弦理论被接受的原因在于它有可能会成为物理中的大统一理论 1983 The Internet is Born 互联网诞生 1981 AIDS identified 辨认出爱滋病 Acquired Immunodeficiency Syndrome 获得性免疫缺陷综合征 1979 USSR invades Afghanistan China attacks Vietnam, but is repelled 1977 MRI 核磁共振摄影 Magnetic Resonance Imaging 1973 Roe v. Wade 罗诉韦德案 1972 Nixon Goes To China 尼克松访问中国 1970 String Theory \u0026ldquo;born\u0026rdquo; 1969 1st moon walk 人类首次登陆月球 1968 King Assassinated 马丁·路德·金遇刺 1967 Arab-Israeli \u0026ldquo;6-day war\u0026rdquo; 阿拉伯和以色列之间的“六日战争\u0026quot; 1966 Martin Luther King assassination 1963 John F. Kennedy Assassinated 肯尼迪遇刺 1962 Cuban Missile Crisis 古巴导弹危机 1961 Berlin Wall Built 柏林墙建成 1958 US Launches First Satellite 美国发射第一颗卫星 1953 The Dawn of DNA 1950 Credit cards 1949 Germany divided into East \u0026amp; West 1948 State of Israel founded First transistor 晶体管 1945 USA bombs Japan with two Atomic bombs UN founded 1939-1945 World War II 1935 Spanish Civil War 西班牙内战 Mao\u0026rsquo;s long march 长征 1932 Von Neumann develops foundation for Quantum Mechanics 冯・诺伊曼建立了量子力学的基础 1931 Empire State Building Completed 帝国大厦竣工 1927 Heisenberg, Uncertainty Principle 海森堡的不确定性原理 1920-1933 U.S. Prohibition 美国禁酒时期 1920 Schrödinger Equation, Quantum Theory emerges in modern form 薛定谔方程式，为现在量子力学中的基本方程式 1914-1918 World War I From 1912 end of Imperial China and start of Balkan wars to 1991, the end of the Cold War. The Age of Conflict 冲突时代 从西元1912年中国大情帝国衰亡和巴尔干战争开始，到西元1991年的冷战结束。 An era marked by the Mexican Revolution, the Russian Revolution, the Great War (1914-1918), the Great Influenza Pandemic, the Warlord Era in China, The War of Japanese Imperial Conquest, the Second World War, the Maoist Revolution in China, various anti-colonial wars, the Cold War, and all this while technology leaped ahead with computer-controlled machine tools carrying automation to new levels. Rudimentary automobiles and aircraft of the previous era transformed to a point where humans went to the moon. Air conditioning and television and radio changed culture as people spent more time indoors. Urbanization transformed society as fewer people lived on farms in rural areas. Electrification and the demand for power created a surge in the construction of power plants and infrastructure to extract fossil fuels and Uranium ores from the earth. 这个时代看到了墨西哥革命、俄罗斯革命、第一次世界大战（西元1914-1918年）、流感大流行、中国的军阀时代、日本的帝国战争、第二次世界大战、中国的毛派革命、 各种反殖民战争、冷战，在同时科技飞速的发展，提升到用电脑控制的自动化机器的新的水平。上一个时代，基本生活里的汽车和飞机，已转变为人类有能力登陆月球。随着冷气机、电视机和广播的普及，人们花费更多的时间待在室内。城市化改变了社会，因为在农村地区居住的人口减少了。电气化和对电力的需求，掀起一股建设发电厂的热潮，和从地球上开采化石燃料和铀矿石的基础设施。 "},{"id":13,"href":"/zh/zh/post/others/english-learning/","title":"English Learning","section":"Others","content":" English Learning # lite cnn 纯文字版的cnn，没有图片 lite cnn China China Daily 中国官方最大的英语新闻网站？ voa special English 这个网站听 voa special 不用翻墙 rest of world 这个网站很有设计感 China verge Hacker News 技术文章也能学习英语 南华早报 bbc China quora 国外的知乎 log # 2025-01-07 2024-12-14 “羽绒服”英语怎么说？你绝对想不到！ 2025-01-07 2025-01-06 “年会”英文怎么说？“Year Meeting”还是“Annual Party？” 都错啦！ voa special English # voa special English others # 如何利用 AI 更好地学外语 A List Of Text-Only \u0026amp; Minimalist News Sites 2022 # Monkeypox outbreak 猴痘病毒爆发 Russia-Ukraine War November A projected \u0026ldquo;red wave\u0026rdquo; fizzled, as Republicans won a slim majority in the House, and Democrats held control of the United States Senate 随着共和党在众议院赢得微弱多数，民主党控制了美国参议院，预计中的“红色浪潮”落空了 2022-11-09 Why is Apple Rosetta 2 fast? 为什么 Apple Rosetta 2 速度很快？ October Elon Musk took control of Twitter, bringing to the social media giant a brash leadership style – along with thousands of layoffs 埃隆·马斯克 （Elon Musk） 控制了 Twitter，为这家社交媒体巨头带来了傲慢的领导风格——以及数千人的裁员 September Britain\u0026rsquo;s Queen Elizabeth II died in Scotland, at the age of 96. Her son Charles succeeded her as king 英国女王伊丽莎白二世在苏格兰去世，享年 96 岁。她的儿子查理继承了她的国王之位 August The FBI conducted a search of Mar-a-Lago, the home of former president Donald Trump, and found classified materials, including documents labeled \u0026ldquo;top secret.\u0026rdquo; 联邦调查局对前总统唐纳德·特朗普的家马阿拉歌庄园进行了搜查，发现了机密材料，包括标记为“绝密”的文件。 July Former Japanese prime minister Shinzo Abe was assassinated, just two days before that country\u0026rsquo;s parliamentary elections 日本前首相安倍晋三在该国议会选举前两天被暗杀 June The Supreme Court overturned Roe v. Wade, effectively criminalizing abortion in much of the nation 最高法院推翻了罗伊诉韦德案（Roe v. Wade），实际上在全国大部分地区将堕胎定为刑事犯罪。 May A gunman in Uvalde, Texas killed 19 students and two teachers at Robb Elementary School. It was the third-deadliest school shooting in U.S. history 德克萨斯州尤瓦尔迪的一名枪手在罗布小学杀死了 19 名学生和两名教师。这是美国历史上第三致命的校园枪击事件 2021 # December In December, tornadoes ripped through the South and Midwest, killing at least 91 people \u0026hellip; 12 月，龙卷风席卷南部和中西部，造成至少 91 人死亡\u0026hellip;\u0026hellip; October October brought the welcome news that the World Health Organization had endorsed the world\u0026rsquo;s first vaccine against malaria. 10 月带来了一个可喜的消息，即世界卫生组织批准了世界上第一种疟疾疫苗 September September saw the implementation of the Texas Heartbeat Act, which bans abortions after roughly six weeks. The Supreme Court has declined to block the law, saying it\u0026rsquo;s a question for lower courts. 9 月，德克萨斯州心跳法案 （Texas Heartbeat Act） 实施，该法案禁止在大约六周后堕胎。最高法院拒绝阻止这项法律，称这是下级法院的问题 August August saw the withdrawal of American troops from Afghanistan after a two-decade war that took the lives of over 2,400 U.S. service personnel. 8 月，美国军队在经历了二十年的战争后从阿富汗撤军，这场战争夺走了 2,400 多名美国军人的生命 July July brought the 32nd Summer Olympic games to Tokyo, a year after being postponed. The U.S. topped the medal count with 113. 第 32 届夏季奥运会在推迟一年后于 7 月在东京举行。美国以 113 枚奖牌位居榜首 June June saw the partial collapse of a 12-story condominium in Surfside, Florida, killing 98 residents. 6 月，佛罗里达州瑟夫赛德 （Surfside） 的一栋 12 层公寓部分倒塌，造成 98 名居民死亡 March The container ship Ever Given ran aground in the Suez Canal in March, holding up billions in trade. The ship was freed six days later. 3 月，集装箱船 Ever Given 在苏伊士运河搁浅，阻碍了数十亿美元的贸易。六天后，这艘船被释放 February In February, the United States formally re-joined the Paris Climate Agreement, an international treaty aimed at limiting global warming. 今年 2 月，美国正式重新加入旨在限制全球变暖的国际条约《巴黎气候协定》。 Janurary In January Joe Biden was inaugurated as our 46th president … 1 月，乔·拜登就任我们的第 46 任总统\u0026hellip;\u0026hellip; 2020 # The United Kingdom left the European Union; Brexit 2019 # Global SARS-Cov-2 (COVID-19) Pandemic Hong Kong Protests in 2019. 2019 年香港抗议活动 2018 # The Yellow Vests Movement in France 法国巴黎黄背心运动 World\u0026rsquo;s longest sea-crossing bridge: Hong Kong-Zhuhai-Macao Bridge The China-US trade War Started in 2018. 2018 年开始的中美贸易战 2015 # The Legalization of Same-Sex Marriage in the United States 美国同性婚姻合法化 2014 # Catastrophic Aviation Disasters of 2014. 2014 年的灾难性航空灾难 The Annexation of Crimea by Russia 俄罗斯吞并克里米亚 2012 # The “God Particle” Is (Probably) Discovered “上帝粒子”被发现 2011 # Japan’s 2011 Tōhoku Earthquake and Tsunami 日本 2011 年东北地震和海啸 Bin Laden Killed 本·拉登被击毙 2010 # Instagram was launched Apple Inc. releasd the first tablet touch screen computer iPad 2009-2017 # Barack Obama, the 44th U.S. President. The 1st African American President of the United States 2009 # Bitcoin 比特币\n2008 # **The credit and property value bubble collapses, Wall Street and other equities markets crash, demand evaporates, and a global economic recession ensues** 信用和财产价值泡沫破灭，华尔街和其他产权投资金融市场崩盘，因市场需求蒸发，导致全球性的经济衰退 2006 # The International Astronomical Union decides to remove Pluto from the list planets of the solar system 国际天文联会决定将冥王星从太阳系中除名 Twitter was launched 2005 # Facebook Youtube 2003 # USA invades Iraq 2002 # Latin no longer used in UK legal documents USA invades Afghanistan 2001 # Sep. 11 2001 New York City World Trade Center attacked fomer # 2000 International space station 1999 Alibaba 1998 Google 1996 clone 1994 Yahoo European Union 1991 1st web page From 1991 until now. The Information Revolution An era marked by the spread of telecommunications technology, especially with personal computers, the internet, the web-based economy, social media, smart phones, and greater cross-cultural mixing. Late-stage capitalism as inequalities increased. The rise of China. Death cults terrorize the world early in this era, and extremism poses a threat to global security. The threat of global conflict remains as leadership in North Korea, China, and Russia use outdated paradigms to justify policies that prepare their nations for military conflict with neighbors ( Ukraine, Georgia, Taiwan). Anti-democratic nationalist tendencies manifest in the United States (Trump), Brazil, Hungary, Poland, Turkey, the Philippines, China, Russia, Egypt, and elsewhere. But popular people’s movements for the environment, peace, and democracy (e.g., the Arab Spring, anti-global-warming activism, Black Lives Matter, Occupy Wall Street, Anti-Iraq-War) also manifest, and win some victories. Anthropocene global climate catastrophe threatens humanity. Mass extinctions begin. 这个时代代表着电信技术的普及，特别是在个人电脑、网路、电商经济、社交媒体、智能手机、以及更广泛的跨文化融合。晚期资本主义，不平等情况增加。中国的崛起，死亡邪教在这个世界造成。恐惧，极端主义也对全球的安全构成威胁。全球性的威胁冲突仍然存在北韩、中国和俄罗斯的领导阶层，他们使用不符合时代的政策，来证明准备与邻国之间（乌克兰、乔治亚、台湾）所发生的军事冲突的正当性。反民主之民族主义者倾向表现在美国（川普）、巴西、匈牙利、波兰、土耳其、菲律宾、中国、俄罗斯、埃及和其他地方。而民众为了保护环境、和平与民主而开展的运动（例如，阿拉伯之春、反全球暖化的激进主义、黑人的生命问题、占领华尔街和伊拉克战争）也得以体现，并赢得了一些胜利。在人类世，人们正面临着全球性气候灾难的威胁，这也是大灭绝的开始。 1991 1st Gulf War, USA invades Iraq following invasion of Kuwait 第一次波斯湾战争，美国攻击伊拉克接著入侵科威特 USSR collapse 苏联体制崩溃解体 Union of Soviet Socialist Republics 苏维埃社会主义共和国联盟 1990 Hubble space telescope 哈伯太空望远镜 1989 USSR quits Eastern Europe 苏联撤离东欧 Berlin wall falls 1988 USSR quits Afghanistan 1987 DNA convicts criminals 用DNA检测方式证明罪犯的罪行 1986 Shuttle Tragedy 航天飞机悲剧 1985 Ozone layer \u0026ldquo;hole\u0026rdquo; discovered 发现臭氧层破洞 1984 String Theory accepted as a possible unifying theory in physics 弦理论被接受的原因在于它有可能会成为物理中的大统一理论 1983 The Internet is Born 互联网诞生 1981 AIDS identified 辨认出爱滋病 Acquired Immunodeficiency Syndrome 获得性免疫缺陷综合征 1979 USSR invades Afghanistan China attacks Vietnam, but is repelled 1977 MRI 核磁共振摄影 Magnetic Resonance Imaging 1973 Roe v. Wade 罗诉韦德案 1972 Nixon Goes To China 尼克松访问中国 1970 String Theory \u0026ldquo;born\u0026rdquo; 1969 1st moon walk 人类首次登陆月球 1968 King Assassinated 马丁·路德·金遇刺 1967 Arab-Israeli \u0026ldquo;6-day war\u0026rdquo; 阿拉伯和以色列之间的“六日战争\u0026quot; 1966 Martin Luther King assassination 1963 John F. Kennedy Assassinated 肯尼迪遇刺 1962 Cuban Missile Crisis 古巴导弹危机 1961 Berlin Wall Built 柏林墙建成 1958 US Launches First Satellite 美国发射第一颗卫星 1953 The Dawn of DNA 1950 Credit cards 1949 Germany divided into East \u0026amp; West 1948 State of Israel founded First transistor 晶体管 1945 USA bombs Japan with two Atomic bombs UN founded 1939-1945 World War II 1935 Spanish Civil War 西班牙内战 Mao\u0026rsquo;s long march 长征 1932 Von Neumann develops foundation for Quantum Mechanics 冯・诺伊曼建立了量子力学的基础 1931 Empire State Building Completed 帝国大厦竣工 1927 Heisenberg, Uncertainty Principle 海森堡的不确定性原理 1920-1933 U.S. Prohibition 美国禁酒时期 1920 Schrödinger Equation, Quantum Theory emerges in modern form 薛定谔方程式，为现在量子力学中的基本方程式 1914-1918 World War I From 1912 end of Imperial China and start of Balkan wars to 1991, the end of the Cold War. The Age of Conflict 冲突时代 从西元1912年中国大情帝国衰亡和巴尔干战争开始，到西元1991年的冷战结束。 An era marked by the Mexican Revolution, the Russian Revolution, the Great War (1914-1918), the Great Influenza Pandemic, the Warlord Era in China, The War of Japanese Imperial Conquest, the Second World War, the Maoist Revolution in China, various anti-colonial wars, the Cold War, and all this while technology leaped ahead with computer-controlled machine tools carrying automation to new levels. Rudimentary automobiles and aircraft of the previous era transformed to a point where humans went to the moon. Air conditioning and television and radio changed culture as people spent more time indoors. Urbanization transformed society as fewer people lived on farms in rural areas. Electrification and the demand for power created a surge in the construction of power plants and infrastructure to extract fossil fuels and Uranium ores from the earth. 这个时代看到了墨西哥革命、俄罗斯革命、第一次世界大战（西元1914-1918年）、流感大流行、中国的军阀时代、日本的帝国战争、第二次世界大战、中国的毛派革命、 各种反殖民战争、冷战，在同时科技飞速的发展，提升到用电脑控制的自动化机器的新的水平。上一个时代，基本生活里的汽车和飞机，已转变为人类有能力登陆月球。随着冷气机、电视机和广播的普及，人们花费更多的时间待在室内。城市化改变了社会，因为在农村地区居住的人口减少了。电气化和对电力的需求，掀起一股建设发电厂的热潮，和从地球上开采化石燃料和铀矿石的基础设施。 "},{"id":14,"href":"/zh/post/life/bilibili/","title":"bilibili","section":"Life","content":" bilibili # movies # 木鱼水心 电影广角镜 world # Yooupi食途 星球研究所 世茹很如意 digital # 那岩KJMX TESTV官方频道 黄杨ME cycling # Contayu_Cycling 道长说车 club100 周四青年 艾慕葡萄 table tennis # -我是派派- computer science # TheCW PegasusWang 神州数码云基地 Koala聊开源 JavaEE之Spring框架 开源社KAIYUANSHE 美团技术团队 技术胖 代码随想录 张老师和杜老师编程课 photography # 影视飓风 music # 94不曈 bilibili-knowledge # 量子位 柴知道 other # M2档案 "},{"id":15,"href":"/zh/zh/post/life/bilibili/","title":"bilibili","section":"Life","content":" bilibili # movies # 木鱼水心 电影广角镜 world # Yooupi食途 星球研究所 世茹很如意 digital # 那岩KJMX TESTV官方频道 黄杨ME cycling # Contayu_Cycling 道长说车 club100 周四青年 艾慕葡萄 table tennis # -我是派派- computer science # TheCW PegasusWang 神州数码云基地 Koala聊开源 JavaEE之Spring框架 开源社KAIYUANSHE 美团技术团队 技术胖 代码随想录 张老师和杜老师编程课 photography # 影视飓风 music # 94不曈 bilibili-knowledge # 量子位 柴知道 other # M2档案 "},{"id":16,"href":"/zh/post/life/books/","title":"books","section":"Life","content":" books # mathematics # 组合数学 原书第5版 computer science # 软件体系结构原理、方法与实践 algorithms # 算法 第四版 剑指Offer：名企面试官精讲典型编程题 java # Head First Java Java实战（第2版） java 核心技术 java 编程的逻辑 Maven 实战 java8 实战 深入理解java虚拟机 第一行代码：Android Spring实战（第6版） spring 微服务实战 第2版 书单 Modern Java(8+)下的技术/技能升级 Java 图灵程序设计丛书·Java系列 security # 白帽子讲 web 安全 networking # http 权威指南 深入浅出https 网络是怎样连接的 cloud # 云计算通俗讲义 kubernates in action database # SQL优化最佳实践 SQL查询的艺术 artificial intelligence # 人工智能入行实战：从校园到职场 深度学习入门 Python 神经网络编程 others # 大象：Thinking in UML Redis 设计与实现 人人都懂设计模式 编程之美 ffmpeg音视频开发基础与实战 黑客与画家 economy # 股票投资入门，进阶，与实战 经济学：第18版 politics # 美国困局 history # 邓小平时代 美国十讲 资中筠 明朝那些事1 文明的进程：文明的社会发生和心理发生的研究 law # 法理学（第4版） 刑法学讲义 罗翔 health # 我们为什么睡觉 philosophy # 西方哲学史讲演录 伦理学的两个基本问题 哲学 科学 常识 古希腊文明的光芒 赵林 大问题：简明哲学导论 人类理智研究 自识与反思：近现代西方哲学的基本问题 谈谈方法 笛卡尔 第一哲学沉思集：反驳与答辩 给无神论者：宗教对世俗生活的意义 psychology # 社会心理学 戴维迈尔斯 认知心理学及其启示 自控力：斯坦福大学最受欢迎心理学课程 习惯的力量 发展心理学 精神焦虑症的自救（病理分析卷） learning science # 学习之道 练习的心态：如何培养耐心、专注和自律 为什么学生不喜欢上学 暗时间 thinking # 送你一颗子弹 2019-08-05 枪炮、病菌与钢铁：人类社会的命运 literature # 恶意 嫌疑人X的献身 伽利略的苦恼 斯通纳 少年的你，如此美丽 杀死一只知更鸟 许三观卖血记 月光落在左手上 虚无的十字架 放学后 mess # 查令十字街84号 2019-08-05 跑步圣经：我跑故我在 当我谈跑步时我在谈些什么 囚徒健身：用失传的技艺练就强大的生存实力 "},{"id":17,"href":"/zh/zh/post/life/books/","title":"books","section":"Life","content":" books # mathematics # 组合数学 原书第5版 computer science # 软件体系结构原理、方法与实践 algorithms # 算法 第四版 剑指Offer：名企面试官精讲典型编程题 java # Head First Java Java实战（第2版） java 核心技术 java 编程的逻辑 Maven 实战 java8 实战 深入理解java虚拟机 第一行代码：Android Spring实战（第6版） spring 微服务实战 第2版 书单 Modern Java(8+)下的技术/技能升级 Java 图灵程序设计丛书·Java系列 security # 白帽子讲 web 安全 networking # http 权威指南 深入浅出https 网络是怎样连接的 cloud # 云计算通俗讲义 kubernates in action database # SQL优化最佳实践 SQL查询的艺术 artificial intelligence # 人工智能入行实战：从校园到职场 深度学习入门 Python 神经网络编程 others # 大象：Thinking in UML Redis 设计与实现 人人都懂设计模式 编程之美 ffmpeg音视频开发基础与实战 黑客与画家 economy # 股票投资入门，进阶，与实战 经济学：第18版 politics # 美国困局 history # 邓小平时代 美国十讲 资中筠 明朝那些事1 文明的进程：文明的社会发生和心理发生的研究 law # 法理学（第4版） 刑法学讲义 罗翔 health # 我们为什么睡觉 philosophy # 西方哲学史讲演录 伦理学的两个基本问题 哲学 科学 常识 古希腊文明的光芒 赵林 大问题：简明哲学导论 人类理智研究 自识与反思：近现代西方哲学的基本问题 谈谈方法 笛卡尔 第一哲学沉思集：反驳与答辩 给无神论者：宗教对世俗生活的意义 psychology # 社会心理学 戴维迈尔斯 认知心理学及其启示 自控力：斯坦福大学最受欢迎心理学课程 习惯的力量 发展心理学 精神焦虑症的自救（病理分析卷） learning science # 学习之道 练习的心态：如何培养耐心、专注和自律 为什么学生不喜欢上学 暗时间 thinking # 送你一颗子弹 2019-08-05 枪炮、病菌与钢铁：人类社会的命运 literature # 恶意 嫌疑人X的献身 伽利略的苦恼 斯通纳 少年的你，如此美丽 杀死一只知更鸟 许三观卖血记 月光落在左手上 虚无的十字架 放学后 mess # 查令十字街84号 2019-08-05 跑步圣经：我跑故我在 当我谈跑步时我在谈些什么 囚徒健身：用失传的技艺练就强大的生存实力 "},{"id":18,"href":"/zh/post/life/cycling/","title":"cycling","section":"Life","content":" cycling # my log # 环滇池 # 9 2024-09-15 8 2023-11-11 7 2023-10-28 6 2023-10-22 5 2023-05-21 4 2022-12-31 3 2022-06-05 2 2022-03-20 1 2021-11-27 昆洛路-\u0026gt;彩云中路爬坡-\u0026gt;彩云北路 # 8 2025-01-07 7 2024-12-19 6 2024-12-18 5 2024-12-17 4 2024-12-13 3 2024-12-10 2 2024-12-06 1 2024-11-29 2024 # 2024-05-01 149.44km 阳宗海 2024-03-16 169.81km 环两湖失败 2023 # 2023-07-15 136.21km 梁王山 2023-04-30 150.06km 抚仙湖折返 2022 # 2022-05-28 131.56km 梁王山 2022-04-30 202.94km 抚仙湖 骑行路线 # 昆明 # 环滇池 宝花路 爬至小亭子 梁王山上坡 西山后山爬坡 松花坝水库爬坡 昭通 # 凤凰山 athlete # Tadej Pogacar # strava 2024-09-29 世锦赛冠军 2024-07-21 环法 stage 21 赛段冠军 2024-07-20 stage 20 赛段冠军 reference # pro cycling stats 自行车职业赛数据及积分排行查询 strava my_strava veloviewer "},{"id":19,"href":"/zh/zh/post/life/cycling/","title":"cycling","section":"Life","content":" cycling # my log # 环滇池 # 9 2024-09-15 8 2023-11-11 7 2023-10-28 6 2023-10-22 5 2023-05-21 4 2022-12-31 3 2022-06-05 2 2022-03-20 1 2021-11-27 昆洛路-\u0026gt;彩云中路爬坡-\u0026gt;彩云北路 # 8 2025-01-07 7 2024-12-19 6 2024-12-18 5 2024-12-17 4 2024-12-13 3 2024-12-10 2 2024-12-06 1 2024-11-29 2024 # 2024-05-01 149.44km 阳宗海 2024-03-16 169.81km 环两湖失败 2023 # 2023-07-15 136.21km 梁王山 2023-04-30 150.06km 抚仙湖折返 2022 # 2022-05-28 131.56km 梁王山 2022-04-30 202.94km 抚仙湖 骑行路线 # 昆明 # 环滇池 宝花路 爬至小亭子 梁王山上坡 西山后山爬坡 松花坝水库爬坡 昭通 # 凤凰山 athlete # Tadej Pogacar # strava 2024-09-29 世锦赛冠军 2024-07-21 环法 stage 21 赛段冠军 2024-07-20 stage 20 赛段冠军 reference # pro cycling stats 自行车职业赛数据及积分排行查询 strava my_strava veloviewer "},{"id":20,"href":"/zh/post/computer-science/database/","title":"database","section":"Computer Science","content":" database # sql # 175 组合两个表 # 175. 组合两个表 select FirstName, LastName, City, State from Person left join on Person.PersonId = Address.PersonId; 176 第二高的薪水 # 176. 第二高的薪水 select distinct Salary as SecondHighestSalary from Employee order by Salary desc limit 1 offset 1 然而，如果没有第 2 高的薪资，即表里可能只有一条记录，这个解答会被评测为 \u0026lsquo;Wrong Answer\u0026rsquo; 。为了克服这个问题，我们可以将其作为临时表。\nSELECT (SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT 1 OFFSET 1) AS SecondHighestSalary ; "},{"id":21,"href":"/zh/zh/post/computer-science/database/","title":"database","section":"Computer Science","content":" database # sql # 175 组合两个表 # 175. 组合两个表 select FirstName, LastName, City, State from Person left join on Person.PersonId = Address.PersonId; 176 第二高的薪水 # 176. 第二高的薪水 select distinct Salary as SecondHighestSalary from Employee order by Salary desc limit 1 offset 1 然而，如果没有第 2 高的薪资，即表里可能只有一条记录，这个解答会被评测为 \u0026lsquo;Wrong Answer\u0026rsquo; 。为了克服这个问题，我们可以将其作为临时表。\nSELECT (SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT 1 OFFSET 1) AS SecondHighestSalary ; "},{"id":22,"href":"/zh/post/computer-science/echarts/","title":"echarts","section":"Computer Science","content":" echarts # PPChart "},{"id":23,"href":"/zh/zh/post/computer-science/echarts/","title":"echarts","section":"Computer Science","content":" echarts # PPChart "},{"id":24,"href":"/zh/post/computer-science/github/","title":"github","section":"Computer Science","content":" github # Github Action # GitHub Actions 入门教程 repository # torvalds/linux CesiumGS/cesium CesiumJS is a JavaScript library for creating 3D globes and 2D maps in a web browser without a plugin. It uses WebGL for hardware-accelerated graphics, and is cross-platform, cross-browser, and tuned for dynamic-data visualization. ohmyzsh/ohmyzsh Oh My Zsh is an open source, community-driven framework for managing your zsh configuration. follow # oldratlee "},{"id":25,"href":"/zh/zh/post/computer-science/github/","title":"github","section":"Computer Science","content":" github # Github Action # GitHub Actions 入门教程 repository # torvalds/linux CesiumGS/cesium CesiumJS is a JavaScript library for creating 3D globes and 2D maps in a web browser without a plugin. It uses WebGL for hardware-accelerated graphics, and is cross-platform, cross-browser, and tuned for dynamic-data visualization. ohmyzsh/ohmyzsh Oh My Zsh is an open source, community-driven framework for managing your zsh configuration. follow # oldratlee "},{"id":26,"href":"/zh/post/life/hiking/","title":"hiking","section":"Life","content":" hiking # 2024-10-13 金铜盆 "},{"id":27,"href":"/zh/zh/post/life/hiking/","title":"hiking","section":"Life","content":" hiking # 2024-10-13 金铜盆 "},{"id":28,"href":"/zh/post/computer-science/ios/","title":"ios","section":"Computer Science","content":" ios # 一日一技：iOS抓包最简单方案 bark # Finb/Bark Bark is a push notification tool app. It\u0026rsquo;s free, simple, and secure, leveraging APNs without draining device battery. document Bark-Java-SDK Day One # Obsidian # IFTTT # 3 个非常规 Day One 使用场景 触发你的智能生活：IFTTT 入门 RSS # Inoreader Feedly "},{"id":29,"href":"/zh/zh/post/computer-science/ios/","title":"ios","section":"Computer Science","content":" ios # 一日一技：iOS抓包最简单方案 bark # Finb/Bark Bark is a push notification tool app. It\u0026rsquo;s free, simple, and secure, leveraging APNs without draining device battery. document Bark-Java-SDK Day One # Obsidian # IFTTT # 3 个非常规 Day One 使用场景 触发你的智能生活：IFTTT 入门 RSS # Inoreader Feedly "},{"id":30,"href":"/zh/post/computer-science/job/","title":"job","section":"Computer Science","content":" job # 应届生的简历 "},{"id":31,"href":"/zh/zh/post/computer-science/job/","title":"job","section":"Computer Science","content":" job # 应届生的简历 "},{"id":32,"href":"/zh/post/computer-science/java/jvm/","title":"jvm","section":"Java","content":" jvm # "},{"id":33,"href":"/zh/zh/post/computer-science/java/jvm/","title":"jvm","section":"Java","content":" jvm # "},{"id":34,"href":"/zh/post/life/life-recommend/","title":"life recommand","section":"Life","content":" life recommend # sspai 数码相关内容，还有一些偏硬核的科普，技术文章 movies # 绝命毒师 Breaking Bad 风骚律师 Better Call Saul 权力的游戏 灿烂人生 无言的山丘 人间的条件 赤足小子 婚姻生活 article # 互联网是人类历史的一段弯路吗 每天通勤骑车60公里身体会不会累垮？ books # 社会心理学 戴维迈尔斯 西方哲学史讲演录 赵林 为什么学生不喜欢上学 送你一颗子弹 刘瑜 bilibili # movies 木鱼水心 质量很高，第一个关注的电影解说up 电影广角镜 绝命毒师和风骚律师 解说的很棒 digital 那岩KJMX 科技美学 cycling 道长说车 CLUB100 Contayu_Cycling world Yooupi食途 星球研究所 economy 小Lin说 software # ios # a-Shell working copy Documents Shadowrocket Obsidian ServerCat Github 搜狗输入法 彩云天气 Actions DataJar ShellFish nPlayer HashPhotos Soor Shortcuts 小宇宙 让听播客回归简单——即刻团队新作「小宇宙」体验报告 mac # windows # wallpaper # 4k wallpapers philosophy # Philosophia 哲学社 2020-03-16 种族歧视错在哪儿 F1 # 指北集EP.01——简明Formula One观赛指北 motto # you don\u0026rsquo;t give up, then there\u0026rsquo;s no limitation.\n真的猛士，敢于直面惨淡的人生，敢于正视淋漓的鲜血。\n梦里不知身是客，一晌贪欢\n夫夷以近，则游者众；险以远，则至者少。而世之奇伟、瑰怪，非常之观，常在于险远，而人之所罕至焉，故非有志者不能至也。有志矣，不随以止也，然力不足者，亦不能至也。有志与力，而又不随以怠，至于幽暗昏惑而无物以相之，亦不能至也。然力足以至焉，于人为可讥，而在己为有悔；尽吾志也而不能至者，可以无悔矣，其孰能讥之乎？此余之所得也！\n2024-06-12\n艾柯：將來，教育目的是教人“篩選”這種藝術。再沒必要教加德滿都在哪裏，或者查理大帝之後誰是第一個法蘭西國王，因為我們隨處找到答案。不過，我們應該叫學生考查十五個網絡頁面，讓他們自己判斷哪個最差。需要教會他們“比較”這種技巧。\n2023-10-24\n"},{"id":35,"href":"/zh/zh/post/life/life-recommend/","title":"life recommand","section":"Life","content":" life recommend # sspai 数码相关内容，还有一些偏硬核的科普，技术文章 movies # 绝命毒师 Breaking Bad 风骚律师 Better Call Saul 权力的游戏 灿烂人生 无言的山丘 人间的条件 赤足小子 婚姻生活 article # 互联网是人类历史的一段弯路吗 每天通勤骑车60公里身体会不会累垮？ books # 社会心理学 戴维迈尔斯 西方哲学史讲演录 赵林 为什么学生不喜欢上学 送你一颗子弹 刘瑜 bilibili # movies 木鱼水心 质量很高，第一个关注的电影解说up 电影广角镜 绝命毒师和风骚律师 解说的很棒 digital 那岩KJMX 科技美学 cycling 道长说车 CLUB100 Contayu_Cycling world Yooupi食途 星球研究所 economy 小Lin说 software # ios # a-Shell working copy Documents Shadowrocket Obsidian ServerCat Github 搜狗输入法 彩云天气 Actions DataJar ShellFish nPlayer HashPhotos Soor Shortcuts 小宇宙 让听播客回归简单——即刻团队新作「小宇宙」体验报告 mac # windows # wallpaper # 4k wallpapers philosophy # Philosophia 哲学社 2020-03-16 种族歧视错在哪儿 F1 # 指北集EP.01——简明Formula One观赛指北 motto # you don\u0026rsquo;t give up, then there\u0026rsquo;s no limitation.\n真的猛士，敢于直面惨淡的人生，敢于正视淋漓的鲜血。\n梦里不知身是客，一晌贪欢\n夫夷以近，则游者众；险以远，则至者少。而世之奇伟、瑰怪，非常之观，常在于险远，而人之所罕至焉，故非有志者不能至也。有志矣，不随以止也，然力不足者，亦不能至也。有志与力，而又不随以怠，至于幽暗昏惑而无物以相之，亦不能至也。然力足以至焉，于人为可讥，而在己为有悔；尽吾志也而不能至者，可以无悔矣，其孰能讥之乎？此余之所得也！\n2024-06-12\n艾柯：將來，教育目的是教人“篩選”這種藝術。再沒必要教加德滿都在哪裏，或者查理大帝之後誰是第一個法蘭西國王，因為我們隨處找到答案。不過，我們應該叫學生考查十五個網絡頁面，讓他們自己判斷哪個最差。需要教會他們“比較”這種技巧。\n2023-10-24\n"},{"id":36,"href":"/zh/post/computer-science/mac/","title":"mac","section":"Computer Science","content":" mac # brew # 查看 brew 服务运行状态 brew services list mysql # 启动 brew services start mysql@8.0 使用命令行连接 mysql mysql -u root reference Macbook通过brew安装mysql8.0 mongodb # mongodb 安装 brew tap mongodb/brew brew update brew install mongodb-community@8.0 启动 mongodb brew services start mongodb-community@8.0 停止 mongodb brew services stop mongodb-community@8.0 mongodb 配置文件位置 vim /opt/homebrew/etc/mongod.conf ffmpeg # 安装 brew install ffmpeg postgresql # Homebrew 安装 postgresql yt-dlp # yt-dlp/yt-dlp 安装 brew install yt-dlp output-template yt-dlp -N 20 https://www.youtube.com/@xiaodaodalang --merge-output-format mp4 # 后台下载 nohup yt-dlp -N 20 https://www.youtube.com/@xiaodaodalang --merge-output-format mp4 \u0026amp; # 加上日期前缀 yt-dlp -N 20 -o \u0026#34;%(upload_date\u0026gt;%Y-%m-%d)s-%(title)s.%(ext)s\u0026#34; https://www.youtube.com/@xiaodaodalang --merge-output-format mp4 player # Mac下最好的视频播放器 IINA disk # DaisyDisk Hidden space 隐藏空间 如何用命令弹出硬盘 查询硬盘挂载路径 df -h 取消挂载 diskutil unmount xxxxx transmit 文件传输工具 把一个java程序配置为一个服务 # 在 macOS 中将 Java 程序配置为服务，可以通过创建一个 LaunchDaemon 或 LaunchAgent 来实现。这里我们以创建一个 LaunchDaemon 为例来说明如何操作。\n准备工作\n确保你的 Java 程序可以无交互地运行：\n你的 Java 应用应该能够从命令行启动，并且不需要用户界面或用户输入。 编写启动脚本（可选）：\n如果你的 Java 程序需要复杂的启动参数或者环境变量设置，建议先编写一个 Shell 脚本来处理这些细节。例如，你可以创建一个名为 start-myapp.sh 的脚本文件，内容如下： #!/bin/bash cd /path/to/your/app export JAVA_OPTS=\u0026#34;-Xms512m -Xmx1024m\u0026#34; exec java $JAVA_OPTS -jar your-application.jar 记得给这个脚本执行权限： chmod +x start-myapp.sh 创建 LaunchDaemon 配置文件\n创建配置文件：\n在 /Library/LaunchDaemons/ 目录下创建一个新的 .plist 文件。文件名应该包含反向域名格式的唯一标识符，例如 com.yourdomain.yourapp.plist。 使用文本编辑器创建并编辑这个文件，内容如下： \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE plist PUBLIC \u0026#34;-//Apple//DTD PLIST 1.0//EN\u0026#34; \u0026#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd\u0026#34;\u0026gt; \u0026lt;plist version=\u0026#34;1.0\u0026#34;\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;Label\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;com.yourdomain.yourapp\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;ProgramArguments\u0026lt;/key\u0026gt; \u0026lt;array\u0026gt; \u0026lt;string\u0026gt;/path/to/start-myapp.sh\u0026lt;/string\u0026gt; \u0026lt;/array\u0026gt; \u0026lt;key\u0026gt;RunAtLoad\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;key\u0026gt;KeepAlive\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;key\u0026gt;StandardOutPath\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;/path/to/yourapp.log\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;StandardErrorPath\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;/path/to/yourapp.err\u0026lt;/string\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;/plist\u0026gt; 解释： Label 是服务的唯一标识符。 ProgramArguments 指定了启动程序的命令及其参数。 RunAtLoad 设置为 true 表示系统启动时自动启动该服务。 KeepAlive 设置为 true 表示如果服务停止，则系统会自动重启它。 StandardOutPath 和 StandardErrorPath 分别指定了标准输出和错误输出的日志文件路径。 加载服务：\n将配置文件保存后，使用以下命令加载服务： sudo launchctl load /Library/LaunchDaemons/com.yourdomain.yourapp.plist 启动服务： sudo launchctl start com.yourdomain.yourapp 停止和卸载服务\n停止服务： sudo launchctl stop com.yourdomain.yourapp 卸载服务： sudo launchctl unload /Library/LaunchDaemons/com.yourdomain.yourapp.plist 以上步骤完成后，你的 Java 应用程序就会作为一个 macOS 服务运行了。如果有任何问题，可以检查指定的日志文件以获取更多信息。\n怎么查看 launchctl 服务的状态 # 在 macOS 中，你可以使用 launchctl 命令来查看服务的状态。以下是几种常见的方法来检查 launchctl 服务的状态：\n查看所有已加载的服务 使用 list 子命令可以列出所有已加载的 launchd 服务及其状态：\nsudo launchctl list 这将显示一个列表，其中包括服务的标签（Label）、进程 ID（PID）以及退出状态（LastExitStatus）。\n查看特定服务的状态 如果你只想查看某个特定服务的状态，可以使用服务的标签（Label）来过滤输出。例如，如果你的服务标签是 com.yourdomain.yourapp，可以使用以下命令：\nsudo launchctl list com.yourdomain.yourapp 查看服务的详细信息 如果你想查看更详细的信息，可以使用 print 子命令。例如：\nsudo launchctl print system/com.yourdomain.yourapp 这将显示关于该服务的详细信息，包括其配置、状态、环境变量等。\n检查服务日志 如果服务有日志输出，可以使用 log 命令来查看日志。例如：\nsudo log show --predicate \u0026#39;process == \u0026#34;yourapp\u0026#34;\u0026#39; --info --debug --last 1h 这将显示过去一小时内与 yourapp 进程相关的所有日志信息。\n示例\n假设你有一个服务标签为 com.example.myapp 的服务，你可以按以下步骤检查其状态：\n查看所有已加载的服务：\nsudo launchctl list 查看特定服务的状态：\nsudo launchctl list com.example.myapp 查看服务的详细信息：\nsudo launchctl print system/com.example.myapp 查看服务日志：\nsudo log show --predicate \u0026#39;process == \u0026#34;myapp\u0026#34;\u0026#39; --info --debug --last 1h 通过这些命令，你可以轻松地检查和管理 launchctl 服务的状态。\n怎么查看 launchctl 中一个服务的内存使用情况 # 在 macOS 中，你可以使用多种方法来查看 launchctl 服务的内存使用情况。以下是几种常见的方法：\n使用 top 命令\ntop 命令是一个实时系统监视工具，可以显示系统的整体状态，包括 CPU 和内存使用情况。你可以通过 top 命令来查找特定服务的进程 ID（PID），然后查看其内存使用情况。\n打开 top 并查找进程：\ntop 在 top 界面中查找你的服务：\n按 P 可以按 CPU 使用率排序。 按 M 可以按内存使用率排序。 查找你的服务进程，通常可以通过进程名称或部分名称来识别。 使用 ps 命令\nps 命令可以显示当前系统中运行的进程信息。你可以结合 grep 命令来查找特定服务的进程信息。\n查找服务的 PID：\nps aux | grep com.yourdomain.yourapp 这将显示与 com.yourdomain.yourapp 相关的所有进程信息。找到你的服务进程的 PID。\n查看特定进程的内存使用情况：\nps -p \u0026lt;PID\u0026gt; -o %mem,%cpu,rss 其中 \u0026lt;PID\u0026gt; 是你在上一步中找到的进程 ID。%mem 显示内存使用百分比，%cpu 显示 CPU 使用百分比，rss 显示常驻集大小（Resident Set Size，即进程占用的实际物理内存）。\n使用 activity monitor\nmacOS 自带的“活动监视器”应用程序也可以用来查看进程的内存使用情况。\n打开“活动监视器”：\n你可以通过 Spotlight 搜索（按 Cmd + Space，然后输入“活动监视器”）来打开它。 切换到“内存”标签页：\n在“活动监视器”中，选择“内存”标签页，这里会显示所有进程的内存使用情况。 查找你的服务：\n在进程列表中查找你的服务名称，查看其内存使用情况。 使用 memory_pressure 命令\nmemory_pressure 命令可以显示系统的内存压力情况，虽然它不能直接显示单个进程的内存使用情况，但可以帮助你了解系统整体的内存状况。\nmemory_pressure 示例\n假设你的服务标签是 com.example.myapp，你可以按以下步骤查看其内存使用情况：\n查找服务的 PID：\nps aux | grep com.example.myapp 假设找到的 PID 是 12345，查看该进程的内存使用情况：\nps -p 12345 -o %mem,%cpu,rss 通过这些方法，你可以轻松地查看 launchctl 服务的内存使用情况。\nmac 上抓取应用的https的包 # 在Mac上抓取应用的HTTPS流量，你需要使用网络分析工具，如Wireshark、Charles Proxy或MITMproxy。由于HTTPS加密了数据传输，直接抓包无法查看具体内容，因此通常需要设置一个代理服务器来进行中间人攻击（Man-in-the-Middle, MITM）来解密和检查HTTPS流量。\n以下是使用Charles Proxy作为例子来说明如何进行HTTPS流量的抓取：\n安装Charles Proxy:\n下载并安装Charles Proxy应用程序到你的Mac电脑上。 配置Charles SSL代理:\n打开Charles，前往Proxy -\u0026gt; SSL Proxying Settings。 在SSL Proxying标签中点击Enable SSL Proxying。 添加你想要监控的应用程序使用的域名端口对，例如对于大多数Web流量是443端口。 安装Charles的SSL证书:\n为了让Charles能够解密HTTPS流量，你需要信任它的SSL证书。 在Charles中前往Help -\u0026gt; SSL Proxying -\u0026gt; Install Charles Root Certificate。 按照提示完成证书安装，并确保系统信任此证书。 配置设备或应用以使用Charles代理:\n如果你想抓取的是Mac本地应用的流量，你需要配置该应用使用Charles作为HTTP/HTTPS代理。 对于某些应用程序，这可能需要更改系统的网络设置，或者在应用内部设置代理服务器地址为localhost或127.0.0.1，端口号通常是8888（默认的Charles监听端口）。 如果是移动设备上的应用，你需要设置设备的Wi-Fi连接使用手动HTTP代理指向运行Charles的Mac的局域网IP地址和端口。 开始抓包:\n现在你可以启动目标应用程序并开始与它交互，所有的HTTPS流量应该会通过Charles被截获，并且如果你正确设置了SSL代理，你应该能看到解密后的流量。 过滤和分析流量:\n使用Charles提供的过滤器和搜索功能来定位你感兴趣的特定请求和响应。 请注意，抓取和解密HTTPS流量可能涉及到隐私问题以及违反服务条款的风险。务必确保你有合法的权利去监视和分析这些流量。如果你是在测试自己的应用，确保遵循公司的政策和法律要求。如果你试图分析第三方应用的流量，请确保你有权这样做。\ncharles # Mac使用Charles进行HTTPS抓包 高颜值抓包工具Charles，实现Mac和IOS端抓取https请求 Configure Charles Root certificate on Mac 需要在keychains里信任证书 Charles Proxy for Mobile apps that use SSL Pinning 8 Ways to Bypass SSL Pinning in iOS questions # 2024-11-15 指纹识别及录入问题 M1 macbookPro 指纹不是识别及其慢就是识别不了，没有反应 电脑插电会有影响，不插电指纹功能是正常的 2025-02-08 Is there a way to download Screen Time data from iPhone or other Apple devices? Timing "},{"id":37,"href":"/zh/zh/post/computer-science/mac/","title":"mac","section":"Computer Science","content":" mac # brew # 查看 brew 服务运行状态 brew services list mysql # 启动 brew services start mysql@8.0 使用命令行连接 mysql mysql -u root reference Macbook通过brew安装mysql8.0 mongodb # mongodb 安装 brew tap mongodb/brew brew update brew install mongodb-community@8.0 启动 mongodb brew services start mongodb-community@8.0 停止 mongodb brew services stop mongodb-community@8.0 mongodb 配置文件位置 vim /opt/homebrew/etc/mongod.conf ffmpeg # 安装 brew install ffmpeg postgresql # Homebrew 安装 postgresql yt-dlp # yt-dlp/yt-dlp 安装 brew install yt-dlp output-template yt-dlp -N 20 https://www.youtube.com/@xiaodaodalang --merge-output-format mp4 # 后台下载 nohup yt-dlp -N 20 https://www.youtube.com/@xiaodaodalang --merge-output-format mp4 \u0026amp; # 加上日期前缀 yt-dlp -N 20 -o \u0026#34;%(upload_date\u0026gt;%Y-%m-%d)s-%(title)s.%(ext)s\u0026#34; https://www.youtube.com/@xiaodaodalang --merge-output-format mp4 player # Mac下最好的视频播放器 IINA disk # DaisyDisk Hidden space 隐藏空间 如何用命令弹出硬盘 查询硬盘挂载路径 df -h 取消挂载 diskutil unmount xxxxx transmit 文件传输工具 把一个java程序配置为一个服务 # 在 macOS 中将 Java 程序配置为服务，可以通过创建一个 LaunchDaemon 或 LaunchAgent 来实现。这里我们以创建一个 LaunchDaemon 为例来说明如何操作。\n准备工作\n确保你的 Java 程序可以无交互地运行：\n你的 Java 应用应该能够从命令行启动，并且不需要用户界面或用户输入。 编写启动脚本（可选）：\n如果你的 Java 程序需要复杂的启动参数或者环境变量设置，建议先编写一个 Shell 脚本来处理这些细节。例如，你可以创建一个名为 start-myapp.sh 的脚本文件，内容如下： #!/bin/bash cd /path/to/your/app export JAVA_OPTS=\u0026#34;-Xms512m -Xmx1024m\u0026#34; exec java $JAVA_OPTS -jar your-application.jar 记得给这个脚本执行权限： chmod +x start-myapp.sh 创建 LaunchDaemon 配置文件\n创建配置文件：\n在 /Library/LaunchDaemons/ 目录下创建一个新的 .plist 文件。文件名应该包含反向域名格式的唯一标识符，例如 com.yourdomain.yourapp.plist。 使用文本编辑器创建并编辑这个文件，内容如下： \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE plist PUBLIC \u0026#34;-//Apple//DTD PLIST 1.0//EN\u0026#34; \u0026#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd\u0026#34;\u0026gt; \u0026lt;plist version=\u0026#34;1.0\u0026#34;\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;Label\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;com.yourdomain.yourapp\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;ProgramArguments\u0026lt;/key\u0026gt; \u0026lt;array\u0026gt; \u0026lt;string\u0026gt;/path/to/start-myapp.sh\u0026lt;/string\u0026gt; \u0026lt;/array\u0026gt; \u0026lt;key\u0026gt;RunAtLoad\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;key\u0026gt;KeepAlive\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;key\u0026gt;StandardOutPath\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;/path/to/yourapp.log\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;StandardErrorPath\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;/path/to/yourapp.err\u0026lt;/string\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;/plist\u0026gt; 解释： Label 是服务的唯一标识符。 ProgramArguments 指定了启动程序的命令及其参数。 RunAtLoad 设置为 true 表示系统启动时自动启动该服务。 KeepAlive 设置为 true 表示如果服务停止，则系统会自动重启它。 StandardOutPath 和 StandardErrorPath 分别指定了标准输出和错误输出的日志文件路径。 加载服务：\n将配置文件保存后，使用以下命令加载服务： sudo launchctl load /Library/LaunchDaemons/com.yourdomain.yourapp.plist 启动服务： sudo launchctl start com.yourdomain.yourapp 停止和卸载服务\n停止服务： sudo launchctl stop com.yourdomain.yourapp 卸载服务： sudo launchctl unload /Library/LaunchDaemons/com.yourdomain.yourapp.plist 以上步骤完成后，你的 Java 应用程序就会作为一个 macOS 服务运行了。如果有任何问题，可以检查指定的日志文件以获取更多信息。\n怎么查看 launchctl 服务的状态 # 在 macOS 中，你可以使用 launchctl 命令来查看服务的状态。以下是几种常见的方法来检查 launchctl 服务的状态：\n查看所有已加载的服务 使用 list 子命令可以列出所有已加载的 launchd 服务及其状态：\nsudo launchctl list 这将显示一个列表，其中包括服务的标签（Label）、进程 ID（PID）以及退出状态（LastExitStatus）。\n查看特定服务的状态 如果你只想查看某个特定服务的状态，可以使用服务的标签（Label）来过滤输出。例如，如果你的服务标签是 com.yourdomain.yourapp，可以使用以下命令：\nsudo launchctl list com.yourdomain.yourapp 查看服务的详细信息 如果你想查看更详细的信息，可以使用 print 子命令。例如：\nsudo launchctl print system/com.yourdomain.yourapp 这将显示关于该服务的详细信息，包括其配置、状态、环境变量等。\n检查服务日志 如果服务有日志输出，可以使用 log 命令来查看日志。例如：\nsudo log show --predicate \u0026#39;process == \u0026#34;yourapp\u0026#34;\u0026#39; --info --debug --last 1h 这将显示过去一小时内与 yourapp 进程相关的所有日志信息。\n示例\n假设你有一个服务标签为 com.example.myapp 的服务，你可以按以下步骤检查其状态：\n查看所有已加载的服务：\nsudo launchctl list 查看特定服务的状态：\nsudo launchctl list com.example.myapp 查看服务的详细信息：\nsudo launchctl print system/com.example.myapp 查看服务日志：\nsudo log show --predicate \u0026#39;process == \u0026#34;myapp\u0026#34;\u0026#39; --info --debug --last 1h 通过这些命令，你可以轻松地检查和管理 launchctl 服务的状态。\n怎么查看 launchctl 中一个服务的内存使用情况 # 在 macOS 中，你可以使用多种方法来查看 launchctl 服务的内存使用情况。以下是几种常见的方法：\n使用 top 命令\ntop 命令是一个实时系统监视工具，可以显示系统的整体状态，包括 CPU 和内存使用情况。你可以通过 top 命令来查找特定服务的进程 ID（PID），然后查看其内存使用情况。\n打开 top 并查找进程：\ntop 在 top 界面中查找你的服务：\n按 P 可以按 CPU 使用率排序。 按 M 可以按内存使用率排序。 查找你的服务进程，通常可以通过进程名称或部分名称来识别。 使用 ps 命令\nps 命令可以显示当前系统中运行的进程信息。你可以结合 grep 命令来查找特定服务的进程信息。\n查找服务的 PID：\nps aux | grep com.yourdomain.yourapp 这将显示与 com.yourdomain.yourapp 相关的所有进程信息。找到你的服务进程的 PID。\n查看特定进程的内存使用情况：\nps -p \u0026lt;PID\u0026gt; -o %mem,%cpu,rss 其中 \u0026lt;PID\u0026gt; 是你在上一步中找到的进程 ID。%mem 显示内存使用百分比，%cpu 显示 CPU 使用百分比，rss 显示常驻集大小（Resident Set Size，即进程占用的实际物理内存）。\n使用 activity monitor\nmacOS 自带的“活动监视器”应用程序也可以用来查看进程的内存使用情况。\n打开“活动监视器”：\n你可以通过 Spotlight 搜索（按 Cmd + Space，然后输入“活动监视器”）来打开它。 切换到“内存”标签页：\n在“活动监视器”中，选择“内存”标签页，这里会显示所有进程的内存使用情况。 查找你的服务：\n在进程列表中查找你的服务名称，查看其内存使用情况。 使用 memory_pressure 命令\nmemory_pressure 命令可以显示系统的内存压力情况，虽然它不能直接显示单个进程的内存使用情况，但可以帮助你了解系统整体的内存状况。\nmemory_pressure 示例\n假设你的服务标签是 com.example.myapp，你可以按以下步骤查看其内存使用情况：\n查找服务的 PID：\nps aux | grep com.example.myapp 假设找到的 PID 是 12345，查看该进程的内存使用情况：\nps -p 12345 -o %mem,%cpu,rss 通过这些方法，你可以轻松地查看 launchctl 服务的内存使用情况。\nmac 上抓取应用的https的包 # 在Mac上抓取应用的HTTPS流量，你需要使用网络分析工具，如Wireshark、Charles Proxy或MITMproxy。由于HTTPS加密了数据传输，直接抓包无法查看具体内容，因此通常需要设置一个代理服务器来进行中间人攻击（Man-in-the-Middle, MITM）来解密和检查HTTPS流量。\n以下是使用Charles Proxy作为例子来说明如何进行HTTPS流量的抓取：\n安装Charles Proxy:\n下载并安装Charles Proxy应用程序到你的Mac电脑上。 配置Charles SSL代理:\n打开Charles，前往Proxy -\u0026gt; SSL Proxying Settings。 在SSL Proxying标签中点击Enable SSL Proxying。 添加你想要监控的应用程序使用的域名端口对，例如对于大多数Web流量是443端口。 安装Charles的SSL证书:\n为了让Charles能够解密HTTPS流量，你需要信任它的SSL证书。 在Charles中前往Help -\u0026gt; SSL Proxying -\u0026gt; Install Charles Root Certificate。 按照提示完成证书安装，并确保系统信任此证书。 配置设备或应用以使用Charles代理:\n如果你想抓取的是Mac本地应用的流量，你需要配置该应用使用Charles作为HTTP/HTTPS代理。 对于某些应用程序，这可能需要更改系统的网络设置，或者在应用内部设置代理服务器地址为localhost或127.0.0.1，端口号通常是8888（默认的Charles监听端口）。 如果是移动设备上的应用，你需要设置设备的Wi-Fi连接使用手动HTTP代理指向运行Charles的Mac的局域网IP地址和端口。 开始抓包:\n现在你可以启动目标应用程序并开始与它交互，所有的HTTPS流量应该会通过Charles被截获，并且如果你正确设置了SSL代理，你应该能看到解密后的流量。 过滤和分析流量:\n使用Charles提供的过滤器和搜索功能来定位你感兴趣的特定请求和响应。 请注意，抓取和解密HTTPS流量可能涉及到隐私问题以及违反服务条款的风险。务必确保你有合法的权利去监视和分析这些流量。如果你是在测试自己的应用，确保遵循公司的政策和法律要求。如果你试图分析第三方应用的流量，请确保你有权这样做。\ncharles # Mac使用Charles进行HTTPS抓包 高颜值抓包工具Charles，实现Mac和IOS端抓取https请求 Configure Charles Root certificate on Mac 需要在keychains里信任证书 Charles Proxy for Mobile apps that use SSL Pinning 8 Ways to Bypass SSL Pinning in iOS questions # 2024-11-15 指纹识别及录入问题 M1 macbookPro 指纹不是识别及其慢就是识别不了，没有反应 电脑插电会有影响，不插电指纹功能是正常的 2025-02-08 Is there a way to download Screen Time data from iPhone or other Apple devices? Timing "},{"id":38,"href":"/zh/post/life/learning-others-log/","title":"other learning","section":"Life","content":" other learning # 2025-01-07 # 美国困局：“新右翼” 的兴起与挑战 # 第1章 2025-01-07 第2章 1 (2025-01-10) 2 (2025-01-10) 3 (2025-01-10) 4 (2025-01-10) 5 (2025-01-10) 第3章 1 (2025-01-11) 2 (2025-01-11) 3 (2025-01-11) 4 (2025-01-11) 5 第4章 1 2 3 4 5 第5章 1 2 3 4 5 第6章 第7章 第8章 第9章 2025-01-04 # 清华韩秀云精品课（第一季，64集） # 清华韩秀云精品课（第一季，64集） ✅ 第一期：国外宏观经济形势 # 1 美国央行大放水 2025-01-04 2 负债率的欧洲和日本 2025-01-04 3 政府发钱刺激经济 2025-01-04 ✅ 第二期：通胀来了，该如何配置资产 # 4 通胀来了怎么办 2025-01-05 5 如何配置你的资产？2025-01-05 6 投资房产考虑什么？2025-01-05 7 投资黄金有必要吗？2025-01-06 8 炒股要注意什么？2025-01-06 ✅ 第三期：我国宏观政策走向 # 9 政府救市与共同富裕 2025-01-06 10 2022年政策与行业机会 2025-01-07 ✅ 第四期：黄金 # 11 黄金的前世今生 2025-01-07 12 美元和黄金挂钩与脱钩 2025-01-07 13 黄金的避险功能 2025-01-08 14 全世界的金库在哪里 2025-01-08 15 投资黄金该注意什么 2025-01-08 ✅ 第五期：石油 # 16 石油的前世今生 2025-01-09 17 洛克菲勒与标准石油 2025-01-09 18 美国石油反垄断 2025-01-09 19 油价为何总在波动 2025-01-11 20 欧佩克的转变 2025-01-11 21 石油的用途 2025-01-11 22 油价为何是负的 2025-01-12 23 什么是石油期货的 2025-01-12 ✅ 第六期：楼市 # 24 房价的成长史的 2025-01-12 25 楼市中看不见的手的 2025-01-13 26 市场决定资源配置的 2025-01-13 27 买房要选稀缺的 2025-01-13 28 买住宅怎么选 2025-01-15 29 买商铺和写字楼 2025-01-15 30 买房看机会成本 2025-01-15 31 买房要注意几件事 2025-01-16 32 买房还是租房好 2025-01-16 33 政府何为要调控楼市 2025-01-16 34 楼市调控还会继续吗？ 2025-01-17 35 房地产税会退出吗？ 2025-01-17 36 房地产税推出后，房价会下跌吗？ 2025-01-17 37 买房防止变成资产 2025-01-19 38 警惕房地产泡沫 2025-01-19 39 全球楼市涨跌互见 2025-01-19 第七期：股市 # 40 炒股要懂经济学 2025-01-20 41 股票是如何诞生的？ 2025-01-20 42 东印度公司的第一张股票 2025-01-20 43 英美为什么发股票 2025-01-21 44 荷兰证券交易所的诞生 2025-01-21 45 纽约证券交易所的由来 2025-01-21 46 道琼斯指数的故事 2025-01-21 47 股票价格与股价指数 2025-01-21 48 股市的投资理念 2025-01-21 49 炒股应该注意什么？2025-02-09 50 参与股市的几种方式 2025-02-09 51 郁金香泡沫 2025-02-09 52 密西西比泡沫 2025-02-10 53 南海泡沫 2025-02-10 54 美国1929年股灾 2025-02-10 55 中国2007年股市暴涨 2025-02-11 56 中国2015年股灾 2025-02-11 57 教你判断股市趋势 2025-02-11 第八期：汇市 # 58 汇率的基本知识 59 人民币汇率 60 美元的霸权 61 欧元的诞生 62 人民币国际化 "},{"id":39,"href":"/zh/zh/post/life/learning-others-log/","title":"other learning","section":"Life","content":" other learning # 2025-01-07 # 美国困局：“新右翼” 的兴起与挑战 # 第1章 2025-01-07 第2章 1 (2025-01-10) 2 (2025-01-10) 3 (2025-01-10) 4 (2025-01-10) 5 (2025-01-10) 第3章 1 (2025-01-11) 2 (2025-01-11) 3 (2025-01-11) 4 (2025-01-11) 5 第4章 1 2 3 4 5 第5章 1 2 3 4 5 第6章 第7章 第8章 第9章 2025-01-04 # 清华韩秀云精品课（第一季，64集） # 清华韩秀云精品课（第一季，64集） ✅ 第一期：国外宏观经济形势 # 1 美国央行大放水 2025-01-04 2 负债率的欧洲和日本 2025-01-04 3 政府发钱刺激经济 2025-01-04 ✅ 第二期：通胀来了，该如何配置资产 # 4 通胀来了怎么办 2025-01-05 5 如何配置你的资产？2025-01-05 6 投资房产考虑什么？2025-01-05 7 投资黄金有必要吗？2025-01-06 8 炒股要注意什么？2025-01-06 ✅ 第三期：我国宏观政策走向 # 9 政府救市与共同富裕 2025-01-06 10 2022年政策与行业机会 2025-01-07 ✅ 第四期：黄金 # 11 黄金的前世今生 2025-01-07 12 美元和黄金挂钩与脱钩 2025-01-07 13 黄金的避险功能 2025-01-08 14 全世界的金库在哪里 2025-01-08 15 投资黄金该注意什么 2025-01-08 ✅ 第五期：石油 # 16 石油的前世今生 2025-01-09 17 洛克菲勒与标准石油 2025-01-09 18 美国石油反垄断 2025-01-09 19 油价为何总在波动 2025-01-11 20 欧佩克的转变 2025-01-11 21 石油的用途 2025-01-11 22 油价为何是负的 2025-01-12 23 什么是石油期货的 2025-01-12 ✅ 第六期：楼市 # 24 房价的成长史的 2025-01-12 25 楼市中看不见的手的 2025-01-13 26 市场决定资源配置的 2025-01-13 27 买房要选稀缺的 2025-01-13 28 买住宅怎么选 2025-01-15 29 买商铺和写字楼 2025-01-15 30 买房看机会成本 2025-01-15 31 买房要注意几件事 2025-01-16 32 买房还是租房好 2025-01-16 33 政府何为要调控楼市 2025-01-16 34 楼市调控还会继续吗？ 2025-01-17 35 房地产税会退出吗？ 2025-01-17 36 房地产税推出后，房价会下跌吗？ 2025-01-17 37 买房防止变成资产 2025-01-19 38 警惕房地产泡沫 2025-01-19 39 全球楼市涨跌互见 2025-01-19 第七期：股市 # 40 炒股要懂经济学 2025-01-20 41 股票是如何诞生的？ 2025-01-20 42 东印度公司的第一张股票 2025-01-20 43 英美为什么发股票 2025-01-21 44 荷兰证券交易所的诞生 2025-01-21 45 纽约证券交易所的由来 2025-01-21 46 道琼斯指数的故事 2025-01-21 47 股票价格与股价指数 2025-01-21 48 股市的投资理念 2025-01-21 49 炒股应该注意什么？2025-02-09 50 参与股市的几种方式 2025-02-09 51 郁金香泡沫 2025-02-09 52 密西西比泡沫 2025-02-10 53 南海泡沫 2025-02-10 54 美国1929年股灾 2025-02-10 55 中国2007年股市暴涨 2025-02-11 56 中国2015年股灾 2025-02-11 57 教你判断股市趋势 2025-02-11 第八期：汇市 # 58 汇率的基本知识 59 人民币汇率 60 美元的霸权 61 欧元的诞生 62 人民币国际化 "},{"id":40,"href":"/zh/post/life/podcast/","title":"podcast","section":"Life","content":" podcast # 小宇宙 # 码农姐妹 经济新闻每日速递 纵横说 "},{"id":41,"href":"/zh/zh/post/life/podcast/","title":"podcast","section":"Life","content":" podcast # 小宇宙 # 码农姐妹 经济新闻每日速递 纵横说 "},{"id":42,"href":"/zh/post/life/politics/","title":"politics","section":"Life","content":" politics # 茶党 # \u0026ldquo;茶党\u0026rdquo;（Tea Party）通常指的是美国的一个政治运动，这个运动始于2009年，主要由保守派共和党支持者组成，强调减少政府开支、降低税收、限制政府权力以及遵守美国宪法。茶党的名字来源于1773年的波士顿茶叶事件，这是一个反对英国殖民统治和高税收的历史事件，象征着对政府过度干预的抗议。\n茶党成员经常组织示威活动，尤其是在经济政策和财政责任方面。他们在2010年的中期选举中对美国政治产生了显著影响，支持了多位共和党候选人的当选，这些候选人随后在美国国会中代表了更加保守的立场。\n随着时间的发展，茶党的影响力有所减弱，但它仍然是美国政治中一个重要的保守力量。如果你有关于茶党的更具体问题，欢迎继续提问。\n茶党和共和党建制派的区别是什么 # 茶党和共和党建制派是美国共和党内两个不同的政治派别，它们在政治立场、策略和目标上存在一些显著差异：\n政治立场：\n茶党：茶党通常被视为共和党内的激进派，强调极端保守的经济政策，比如大幅减税、削减政府开支、反对政府干预市场、减少债务和赤字。此外，茶党成员往往强烈反对奥巴马政府时期的医疗保健改革（即“奥巴马医改”）等政策。 共和党建制派：相比之下，建制派共和党人虽然也支持保守政策，但他们的立场相对温和，愿意与民主党合作以实现政治目标。建制派更倾向于维护共和党的传统利益，包括与大企业和精英阶层的关系。 策略和方法：\n茶党：茶党成员倾向于采取更为激进的策略，包括组织大规模抗议活动、支持极端保守的候选人、反对妥协。他们通常认为现有的政治体系已经腐败，需要彻底改革。 共和党建制派：建制派共和党人更倾向于通过传统政治渠道实现目标，如立法谈判、建立联盟和政治筹款。他们更注重保持共和党的整体稳定和长期利益。 目标：\n茶党：茶党的目标是推动共和党向更加保守的方向发展，减少政府规模和干预，保护个人自由和财产权。 共和党建制派：建制派的目标是保持共和党的主流地位，通过务实的政治策略赢得选举，维护共和党的长期利益和权力。 支持者基础：\n茶党：茶党的支持者通常是中下层中产阶级，他们对经济困境和政府过度干预感到不满，希望通过政治行动表达自己的诉求。 共和党建制派：建制派的支持者更多来自大企业和精英阶层，他们希望通过共和党的政策维护自身的经济利益。 总结来说，茶党和共和党建制派在政治立场、策略和目标上存在明显的差异，茶党更激进、更强调基层动员，而建制派则更温和、更注重政治稳定和长期利益。\n"},{"id":43,"href":"/zh/zh/post/life/politics/","title":"politics","section":"Life","content":" politics # 茶党 # \u0026ldquo;茶党\u0026rdquo;（Tea Party）通常指的是美国的一个政治运动，这个运动始于2009年，主要由保守派共和党支持者组成，强调减少政府开支、降低税收、限制政府权力以及遵守美国宪法。茶党的名字来源于1773年的波士顿茶叶事件，这是一个反对英国殖民统治和高税收的历史事件，象征着对政府过度干预的抗议。\n茶党成员经常组织示威活动，尤其是在经济政策和财政责任方面。他们在2010年的中期选举中对美国政治产生了显著影响，支持了多位共和党候选人的当选，这些候选人随后在美国国会中代表了更加保守的立场。\n随着时间的发展，茶党的影响力有所减弱，但它仍然是美国政治中一个重要的保守力量。如果你有关于茶党的更具体问题，欢迎继续提问。\n茶党和共和党建制派的区别是什么 # 茶党和共和党建制派是美国共和党内两个不同的政治派别，它们在政治立场、策略和目标上存在一些显著差异：\n政治立场：\n茶党：茶党通常被视为共和党内的激进派，强调极端保守的经济政策，比如大幅减税、削减政府开支、反对政府干预市场、减少债务和赤字。此外，茶党成员往往强烈反对奥巴马政府时期的医疗保健改革（即“奥巴马医改”）等政策。 共和党建制派：相比之下，建制派共和党人虽然也支持保守政策，但他们的立场相对温和，愿意与民主党合作以实现政治目标。建制派更倾向于维护共和党的传统利益，包括与大企业和精英阶层的关系。 策略和方法：\n茶党：茶党成员倾向于采取更为激进的策略，包括组织大规模抗议活动、支持极端保守的候选人、反对妥协。他们通常认为现有的政治体系已经腐败，需要彻底改革。 共和党建制派：建制派共和党人更倾向于通过传统政治渠道实现目标，如立法谈判、建立联盟和政治筹款。他们更注重保持共和党的整体稳定和长期利益。 目标：\n茶党：茶党的目标是推动共和党向更加保守的方向发展，减少政府规模和干预，保护个人自由和财产权。 共和党建制派：建制派的目标是保持共和党的主流地位，通过务实的政治策略赢得选举，维护共和党的长期利益和权力。 支持者基础：\n茶党：茶党的支持者通常是中下层中产阶级，他们对经济困境和政府过度干预感到不满，希望通过政治行动表达自己的诉求。 共和党建制派：建制派的支持者更多来自大企业和精英阶层，他们希望通过共和党的政策维护自身的经济利益。 总结来说，茶党和共和党建制派在政治立场、策略和目标上存在明显的差异，茶党更激进、更强调基层动员，而建制派则更温和、更注重政治稳定和长期利益。\n"},{"id":44,"href":"/zh/post/computer-science/raspberrypi/","title":"raspberry pi","section":"Computer Science","content":" raspberry pi # reference # 树莓派文档 clash # reference 为什么全局代理后， CMD 依然 Ping 不通 Google？ 树莓派 Clash 透明代理(TProxy) 在 Raspberry Pi 上运行 Clash 作为透明代理 解决 Clash Meta 中TUN模式无法上网的问题：正确配置DNS设置 解决 树莓派ping: baidu.com: 域名解析暂时失败 树莓派安装clash，实现科学上网 在 Raspberry Pi 上运行 Clash 作为透明代理 http://yacd.haishan.me yt-dlp # 使用这个工具，可以下载 youtube 视频\n后台下载命令 nohup yt-dlp -N 20 {{video_url}} --merge-output-format mp4 \u0026amp; 实时查看后台下载进度 tail -f nohup.out 停止下载 查询后台进程号 ps -aux | grep yt-dlp 杀死进程 kill -9 {{进程号}} tomcat # 树莓派安装Tomcat wget https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.36/bin/apache-tomcat-9.0.36.tar.gz tar zxvf apache-tomcat-9.0.36.tar.gz cd ~/apache-tomcat-9.0.36/bin sudo ./startup.sh dd # dd 命令是一个非常强大的工具，可以用来复制和转换文件。通过创建一个临时文件并测量其读写速度，可以测试存储介质的性能。\n打开终端：您可以通过SSH连接到您的树莓派，或者直接在树莓派上打开终端。\n测试写入速度：\n创建一个 1GB 的临时文件，并测量写入速度： sudo dd if=/dev/zero of=testfile bs=1M count=1024 conv=fdatasync 解释： if=/dev/zero：从 /dev/zero 读取数据（这是一个无限的零流）。 of=testfile：将数据写入名为 testfile 的文件。 bs=1M：每次读写 1MB 的数据块。 count=1024：写入 1024 个 1MB 的数据块，总共 1GB。 conv=fdatasync：确保所有数据都写入磁盘后再结束命令。 测试读取速度：\n读取刚刚创建的文件，并测量读取速度： sudo dd if=testfile of=/dev/null bs=1M 解释： if=testfile：从 testfile 文件读取数据。 of=/dev/null：将数据写入 /dev/null（丢弃数据）。 bs=1M：每次读取 1MB 的数据块。 删除测试文件：\n测试完成后，删除 testfile 以释放空间： sudo rm testfile iwlist # sudo iwlist wlan0 scan sudo iwlist wlan0 scan | grep SSID 定时任务 # 查看当前的定时任务 crontab -l 编辑定时任务 crontab -e 外网登录 # 如何从外网登录访问树莓派Raspberry Pi holer Wisdom wisdom-projects/holer 方式一：使用公开的holer映射或者开通holer服务，通过holer客户端软件经holer服务器实现公网访问 方式二：使用holer服务端软件搭建holer服务，通过holer客户端软件经自己服务器实现公网访问， Holer端口映射软件使用教程 cpolar # cpolar 3.3 将隧道配置为后台服务 Cpolar快速入门教程：树莓派系列 后台管理页面 http://localhost:9200 zsh: corrupt history file /home/me/.zsh_history # 怎样修复zsh历史记录错误：zsh: corrupt history file /home/me/.zsh_history cd ~ mv .zsh_history .zsh_history_bad strings -eS .zsh_history_bad \u0026gt; .zsh_history fc -R .zsh_history "},{"id":45,"href":"/zh/zh/post/computer-science/raspberrypi/","title":"raspberry pi","section":"Computer Science","content":" raspberry pi # reference # 树莓派文档 clash # reference 为什么全局代理后， CMD 依然 Ping 不通 Google？ 树莓派 Clash 透明代理(TProxy) 在 Raspberry Pi 上运行 Clash 作为透明代理 解决 Clash Meta 中TUN模式无法上网的问题：正确配置DNS设置 解决 树莓派ping: baidu.com: 域名解析暂时失败 树莓派安装clash，实现科学上网 在 Raspberry Pi 上运行 Clash 作为透明代理 http://yacd.haishan.me yt-dlp # 使用这个工具，可以下载 youtube 视频\n后台下载命令 nohup yt-dlp -N 20 {{video_url}} --merge-output-format mp4 \u0026amp; 实时查看后台下载进度 tail -f nohup.out 停止下载 查询后台进程号 ps -aux | grep yt-dlp 杀死进程 kill -9 {{进程号}} tomcat # 树莓派安装Tomcat wget https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.36/bin/apache-tomcat-9.0.36.tar.gz tar zxvf apache-tomcat-9.0.36.tar.gz cd ~/apache-tomcat-9.0.36/bin sudo ./startup.sh dd # dd 命令是一个非常强大的工具，可以用来复制和转换文件。通过创建一个临时文件并测量其读写速度，可以测试存储介质的性能。\n打开终端：您可以通过SSH连接到您的树莓派，或者直接在树莓派上打开终端。\n测试写入速度：\n创建一个 1GB 的临时文件，并测量写入速度： sudo dd if=/dev/zero of=testfile bs=1M count=1024 conv=fdatasync 解释： if=/dev/zero：从 /dev/zero 读取数据（这是一个无限的零流）。 of=testfile：将数据写入名为 testfile 的文件。 bs=1M：每次读写 1MB 的数据块。 count=1024：写入 1024 个 1MB 的数据块，总共 1GB。 conv=fdatasync：确保所有数据都写入磁盘后再结束命令。 测试读取速度：\n读取刚刚创建的文件，并测量读取速度： sudo dd if=testfile of=/dev/null bs=1M 解释： if=testfile：从 testfile 文件读取数据。 of=/dev/null：将数据写入 /dev/null（丢弃数据）。 bs=1M：每次读取 1MB 的数据块。 删除测试文件：\n测试完成后，删除 testfile 以释放空间： sudo rm testfile iwlist # sudo iwlist wlan0 scan sudo iwlist wlan0 scan | grep SSID 定时任务 # 查看当前的定时任务 crontab -l 编辑定时任务 crontab -e 外网登录 # 如何从外网登录访问树莓派Raspberry Pi holer Wisdom wisdom-projects/holer 方式一：使用公开的holer映射或者开通holer服务，通过holer客户端软件经holer服务器实现公网访问 方式二：使用holer服务端软件搭建holer服务，通过holer客户端软件经自己服务器实现公网访问， Holer端口映射软件使用教程 cpolar # cpolar 3.3 将隧道配置为后台服务 Cpolar快速入门教程：树莓派系列 后台管理页面 http://localhost:9200 zsh: corrupt history file /home/me/.zsh_history # 怎样修复zsh历史记录错误：zsh: corrupt history file /home/me/.zsh_history cd ~ mv .zsh_history .zsh_history_bad strings -eS .zsh_history_bad \u0026gt; .zsh_history fc -R .zsh_history "},{"id":46,"href":"/zh/post/computer-science/security/","title":"security","section":"Computer Science","content":" security # man-in-the-middle attack 中间人攻击 # SSL Pinning is a technique we use on the client side to avoid a man-in-the-middle attack by validating the server certificates. The developers embed (or pin) a list of trustful certificates in the client application during development and use them to compare against the server certificates during runtime.\nIf there is a mismatch between the server and the local copy of certificates, the connection will be disrupted, and no further user data will be sent to that server. This enforcement ensures that user devices communicate only with dedicated, trustful servers.\nSSL Pinning prevents a man-in-the-middle attack, which means an attacker can not intercept the traffic and modify the data. If an attacker can not intercept the traffic, the application automatically prevents many server-side vulnerabilities. Because an attacker can not perform API-level test cases, implementing SSL is very important.\nSSL pinning # reference Charles Proxy for Mobile apps that use SSL Pinning 8 Ways to Bypass SSL Pinning in iOS "},{"id":47,"href":"/zh/zh/post/computer-science/security/","title":"security","section":"Computer Science","content":" security # man-in-the-middle attack 中间人攻击 # SSL Pinning is a technique we use on the client side to avoid a man-in-the-middle attack by validating the server certificates. The developers embed (or pin) a list of trustful certificates in the client application during development and use them to compare against the server certificates during runtime.\nIf there is a mismatch between the server and the local copy of certificates, the connection will be disrupted, and no further user data will be sent to that server. This enforcement ensures that user devices communicate only with dedicated, trustful servers.\nSSL Pinning prevents a man-in-the-middle attack, which means an attacker can not intercept the traffic and modify the data. If an attacker can not intercept the traffic, the application automatically prevents many server-side vulnerabilities. Because an attacker can not perform API-level test cases, implementing SSL is very important.\nSSL pinning # reference Charles Proxy for Mobile apps that use SSL Pinning 8 Ways to Bypass SSL Pinning in iOS "},{"id":48,"href":"/zh/post/computer-science/vue/","title":"vue","section":"Computer Science","content":" vue # vuejs.org 文档 vue2 教程 Vue 2.0 在 2023 年 12 月 31 日停止更新 vue3 教程 快速上手 # 安装 node.js 使用 brew 安装 brew install node 检查 node 是否安装成功 node -v npm -v 创建 vue 项目 npm create vue@latest cd my-vue-project 修改镜像源 reference npm、yarn、pnpm 最新国内镜像源设置和常见问题解决 npm install npm run dev Local http://localhost:5173 Vue DevTools http://localhost:5173/__devtools__/ reference 如何在 macOS 上安装 Node.js "},{"id":49,"href":"/zh/zh/post/computer-science/vue/","title":"vue","section":"Computer Science","content":" vue # vuejs.org 文档 vue2 教程 Vue 2.0 在 2023 年 12 月 31 日停止更新 vue3 教程 快速上手 # 安装 node.js 使用 brew 安装 brew install node 检查 node 是否安装成功 node -v npm -v 创建 vue 项目 npm create vue@latest cd my-vue-project 修改镜像源 reference npm、yarn、pnpm 最新国内镜像源设置和常见问题解决 npm install npm run dev Local http://localhost:5173 Vue DevTools http://localhost:5173/__devtools__/ reference 如何在 macOS 上安装 Node.js "},{"id":50,"href":"/zh/post/life/goal/","title":"goal","section":"Life","content":" goal # 2025-01-12 # 过年前完成(1月24日内) 面试经典150题(一天完成5道题, 应该完成70道题左右) Spring实战 第6版 Book (读完这本书) 清华韩秀云精品课（第一季，64集）(大概应该看到56集) 美国困局：“新右翼” 的兴起与挑战 (读完这本书) OAuth 2 in Action Microservices Security in Action API Security in Action ActiveMQ in Action RabbitMQ in Depth（Manning，2017年） Alvaro Videla和Jason J.W. Williams合著的RabbitMQ in Action（Manning，2012年） Kafka in Action （Manning，2017年） Enterprise Integration Patterns（Addison-Wesley，2003年） Functional Programming in Java（Manning，2017年） Grokking Functional Programming（Manning，2021年） "},{"id":51,"href":"/zh/zh/post/life/goal/","title":"goal","section":"Life","content":" goal # 2025-01-12 # 过年前完成(1月24日内) 面试经典150题(一天完成5道题, 应该完成70道题左右) Spring实战 第6版 Book (读完这本书) 清华韩秀云精品课（第一季，64集）(大概应该看到56集) 美国困局：“新右翼” 的兴起与挑战 (读完这本书) OAuth 2 in Action Microservices Security in Action API Security in Action ActiveMQ in Action RabbitMQ in Depth（Manning，2017年） Alvaro Videla和Jason J.W. Williams合著的RabbitMQ in Action（Manning，2012年） Kafka in Action （Manning，2017年） Enterprise Integration Patterns（Addison-Wesley，2003年） Functional Programming in Java（Manning，2017年） Grokking Functional Programming（Manning，2021年） "},{"id":52,"href":"/zh/post/life/coffee/","title":"coffee","section":"Life","content":" coffee # 咖啡碎碎念#1 一次探店2家上海“天花板”咖啡馆？！喝到一半老板直接开始上课？#上海VLOG（上） 科普丨意式咖啡傻傻分不清？10分钟带你全部看懂 马克西姆咖啡机 马克西姆使用评测（上）3000+价位段最值得入手半自动意式咖啡机一体机 马克西姆咖啡机评测（下）使用成本低是最好的入手理由 马克西姆咖啡机用了一年，总结出5个使用技巧 马克西姆半自动家用咖啡机，如何调试和定量出品，掌握核心2点，控制好粉重和粉液比 "},{"id":53,"href":"/zh/zh/post/life/coffee/","title":"coffee","section":"Life","content":" coffee # 咖啡碎碎念#1 一次探店2家上海“天花板”咖啡馆？！喝到一半老板直接开始上课？#上海VLOG（上） 科普丨意式咖啡傻傻分不清？10分钟带你全部看懂 马克西姆咖啡机 马克西姆使用评测（上）3000+价位段最值得入手半自动意式咖啡机一体机 马克西姆咖啡机评测（下）使用成本低是最好的入手理由 马克西姆咖啡机用了一年，总结出5个使用技巧 马克西姆半自动家用咖啡机，如何调试和定量出品，掌握核心2点，控制好粉重和粉液比 "},{"id":54,"href":"/zh/post/computer-science/algorithm/","title":"Algorithm","section":"Computer Science","content":" Algorithm # 代码随想录 Tips # 如果我要创建一个列表，并且需要一直在列表的开头插入元素，我要怎么实现代码保证效率 # 在 Java 中，如果你需要频繁在列表的开头插入元素，使用 LinkedList 会比 ArrayList 更高效。因为 LinkedList 在列表开头插入元素的时间复杂度是 O(1)，而 ArrayList 在开头插入元素的时间复杂度是 O(n)，需要移动所有元素。\n使用 LinkedList 的示例代码：\nimport java.util.LinkedList; import java.util.List; public class Main { public static void main(String[] args) { // 创建一个 LinkedList List\u0026lt;Integer\u0026gt; list = new LinkedList\u0026lt;\u0026gt;(); // 在列表开头插入元素 list.add(0, 1); // 插入元素 1 list.add(0, 2); // 插入元素 2 list.add(0, 3); // 插入元素 3 // 输出列表 System.out.println(list); // 输出: [3, 2, 1] } } 为什么 LinkedList 更高效？\nLinkedList 是基于双向链表实现的，插入和删除操作只需要调整节点的指针，时间复杂度为 O(1)。 ArrayList 是基于动态数组实现的，插入和删除操作需要移动元素，时间复杂度为 O(n)。 总结：\n如果你需要频繁在列表开头插入元素，优先选择 LinkedList 以保证效率。\nLinkedList 在任意位置插入和删除节点，时间复杂度都是O(1)吗？ # 不是的，LinkedList 在任意位置插入和删除节点的时间复杂度并不总是 O(1)。具体的时间复杂度取决于操作的位置。\nLinkedList 的时间复杂度分析：\n在头部或尾部插入/删除节点：\n时间复杂度是 O(1)，因为 LinkedList 是双向链表，直接操作头节点或尾节点即可。 在任意位置插入/删除节点：\n时间复杂度是 O(n)，因为需要从头节点或尾节点开始遍历链表，找到目标位置后才能进行操作。 为什么任意位置插入/删除是 O(n)？\nLinkedList 是基于双向链表实现的，虽然插入和删除操作本身只需要调整指针（O(1)），但找到目标位置需要遍历链表。 平均情况下，遍历链表的时间复杂度是 O(n/2) ≈ O(n)。 示例代码：\nimport java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList\u0026lt;Integer\u0026gt; list = new LinkedList\u0026lt;\u0026gt;(); list.add(1); list.add(2); list.add(3); // 在索引 1 处插入元素（需要遍历到索引 1） list.add(1, 10); // 时间复杂度 O(n) // 删除索引 2 处的元素（需要遍历到索引 2） list.remove(2); // 时间复杂度 O(n) System.out.println(list); // 输出: [1, 10, 3] } } 总结：\nLinkedList 在头部或尾部插入/删除节点的时间复杂度是 O(1)。 在任意位置插入/删除节点的时间复杂度是 O(n)，因为需要遍历链表找到目标位置。 如果你需要频繁在任意位置插入或删除节点，并且希望时间复杂度更低，可以考虑使用其他数据结构（如 ArrayList 或自定义数据结构），具体选择取决于你的使用场景。\n如果我要不断往list的末尾添加元素，是使用LinkedList还是ArrayList？ # 如果你需要不断往列表的末尾添加元素，使用 ArrayList 会比 LinkedList 更高效。以下是原因和详细分析：\nArrayList 的优势 时间复杂度： 在末尾添加元素的平均时间复杂度是 O(1)。 只有在数组容量不足时，ArrayList 需要扩容（创建一个新的更大的数组并复制元素），此时时间复杂度是 O(n)。但扩容操作是分摊的，平均下来仍然是 O(1)。 空间效率： ArrayList 是基于数组实现的，内存连续，存储效率高，没有额外的指针开销。 缓存友好： 数组的内存布局是连续的，对 CPU 缓存更友好，访问速度更快。 LinkedList 的劣势 时间复杂度： 在末尾添加元素的时间复杂度是 O(1)，但每次添加都需要创建一个新的节点对象，并调整指针。 空间效率： LinkedList 是基于双向链表实现的，每个节点需要额外的空间存储前驱和后继指针，内存开销更大。 缓存不友好： 链表的内存布局是分散的，对 CPU 缓存不友好，访问速度较慢。 性能对比 ArrayList： 添加元素时，大多数情况下是 O(1)，偶尔扩容时是 O(n)。 内存连续，访问速度快。 LinkedList： 添加元素时，每次都是 O(1)，但需要创建节点对象和调整指针。 内存分散，访问速度慢。 代码示例 使用 ArrayList：\nimport java.util.ArrayList; import java.util.List; public class Main { public static void main(String[] args) { List\u0026lt;Integer\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(); // 不断往末尾添加元素 for (int i = 0; i \u0026lt; 1000000; i++) { list.add(i); // 平均时间复杂度 O(1) } System.out.println(\u0026#34;ArrayList 添加完成\u0026#34;); } } 使用 LinkedList：\nimport java.util.LinkedList; import java.util.List; public class Main { public static void main(String[] args) { List\u0026lt;Integer\u0026gt; list = new LinkedList\u0026lt;\u0026gt;(); // 不断往末尾添加元素 for (int i = 0; i \u0026lt; 1000000; i++) { list.add(i); // 时间复杂度 O(1)，但性能不如 ArrayList } System.out.println(\u0026#34;LinkedList 添加完成\u0026#34;); } } 实测性能 在实际测试中，ArrayList 的性能通常优于 LinkedList，尤其是在大量添加元素时。以下是一个简单的性能对比：\n操作 ArrayList 耗时 LinkedList 耗时 添加 100 万个元素 ~50 ms ~100 ms 添加 1000 万个元素 ~500 ms ~1200 ms 总结 如果你需要不断往列表末尾添加元素，优先选择 ArrayList。 它的时间复杂度更低（平均 O(1)）。 它的内存效率更高，访问速度更快。 只有在需要频繁在列表头部或中间插入/删除元素时，才考虑使用 LinkedList。 希望这个解答对你有帮助！如果还有其他问题，欢迎随时提问！\n如果我想要构造一个字符串，我会不断往字符串头部添加字符，我该怎么编码保证效率 # 如果你需要不断往字符串的头部添加字符，直接使用 Java 的 String 或 StringBuilder 会导致性能问题，因为它们的底层实现不适合频繁在头部插入操作。以下是原因和高效解决方案：\n为什么 String 和 StringBuilder 不适合？ String： String 是不可变的，每次修改都会创建一个新的字符串对象，频繁在头部插入字符会导致大量对象创建和复制，性能极差。 StringBuilder： StringBuilder 是可变的，适合在尾部添加字符（时间复杂度 O(1)），但在头部插入字符的时间复杂度是 O(n)，因为需要移动所有现有字符。 高效解决方案 为了高效地在字符串头部添加字符，可以使用以下数据结构：\n方案 1：使用 LinkedList\u0026lt;Character\u0026gt;\nLinkedList 在头部插入元素的时间复杂度是 O(1)，非常适合频繁在头部添加字符的场景。 插入完成后，可以将 LinkedList 转换为字符串。 方案 2：使用 Deque\u0026lt;Character\u0026gt;（双端队列）\nDeque 是基于双向链表实现的，支持在头部和尾部高效插入和删除元素。 插入完成后，可以将 Deque 转换为字符串。 代码实现 方案 1：使用 LinkedList\u0026lt;Character\u0026gt;\nimport java.util.LinkedList; public class Main { public static void main(String[] args) { // 创建一个 LinkedList 来存储字符 LinkedList\u0026lt;Character\u0026gt; list = new LinkedList\u0026lt;\u0026gt;(); // 不断往头部添加字符 list.addFirst(\u0026#39;a\u0026#39;); // 添加字符 \u0026#39;a\u0026#39; list.addFirst(\u0026#39;b\u0026#39;); // 添加字符 \u0026#39;b\u0026#39; list.addFirst(\u0026#39;c\u0026#39;); // 添加字符 \u0026#39;c\u0026#39; // 将 LinkedList 转换为字符串 StringBuilder sb = new StringBuilder(); for (char c : list) { sb.append(c); } String result = sb.toString(); System.out.println(result); // 输出: cba } } 方案 2：使用 Deque\u0026lt;Character\u0026gt;\nimport java.util.Deque; import java.util.LinkedList; public class Main { public static void main(String[] args) { // 创建一个 Deque 来存储字符 Deque\u0026lt;Character\u0026gt; deque = new LinkedList\u0026lt;\u0026gt;(); // 不断往头部添加字符 deque.addFirst(\u0026#39;a\u0026#39;); // 添加字符 \u0026#39;a\u0026#39; deque.addFirst(\u0026#39;b\u0026#39;); // 添加字符 \u0026#39;b\u0026#39; deque.addFirst(\u0026#39;c\u0026#39;); // 添加字符 \u0026#39;c\u0026#39; // 将 Deque 转换为字符串 StringBuilder sb = new StringBuilder(); for (char c : deque) { sb.append(c); } String result = sb.toString(); System.out.println(result); // 输出: cba } } 性能分析 时间复杂度： 在头部插入字符的时间复杂度是 O(1)。 转换为字符串的时间复杂度是 O(n)，其中 n 是字符的数量。 空间复杂度： 使用 LinkedList 或 Deque 会额外存储每个字符的节点信息（前驱和后继指针），空间开销略高于 StringBuilder。 为什么不直接使用 StringBuilder？ StringBuilder 在头部插入字符的时间复杂度是 O(n)，因为需要移动所有现有字符。 示例： StringBuilder sb = new StringBuilder(); sb.insert(0, \u0026#39;a\u0026#39;); // O(n) sb.insert(0, \u0026#39;b\u0026#39;); // O(n) sb.insert(0, \u0026#39;c\u0026#39;); // O(n) System.out.println(sb.toString()); // 输出: cba 这种方法在频繁插入时性能较差。 总结 如果需要不断往字符串头部添加字符，推荐使用 LinkedList\u0026lt;Character\u0026gt; 或 Deque\u0026lt;Character\u0026gt;。 它们在头部插入字符的时间复杂度是 O(1)，性能最优。 插入完成后，可以将其转换为字符串。 如果插入操作较少，或者主要在尾部添加字符，可以使用 StringBuilder。 希望这个解答对你有帮助！如果还有其他问题，欢迎随时提问！\n面试经典150题 # 面试经典150题 数组/字符串 # 移除元素 # 2025-01-11 击败3.36% class Solution { public int removeElement(int[] nums, int val) { Arrays.sort(nums); int flagIndex = -1; int count = 0; for (int i = 0; i \u0026lt; nums.length; i++) { if (nums[i] == val \u0026amp;\u0026amp; count == 0) { flagIndex = i; count++; } else if (nums[i] == val) { count++; } } if (flagIndex != -1 \u0026amp;\u0026amp; count != 0) { for (int i = flagIndex; i \u0026lt; flagIndex + count; i++) { nums[i] = nums[nums.length - (i - flagIndex) - 1]; } } return nums.length - count; } } 一维动态规划 # 爬楼梯 # 2025-01-11 击败100% class Solution { public int climbStairs(int n) { if (n == 0) return 0; if (n == 1) return 1; if (n == 2) return 2; int[] dp = new int[n + 1]; dp[0] = 0; dp[1] = 1; dp[2] = 2; for (int i = 3; i \u0026lt;= n; i++) { dp[i] = dp[i - 1] + dp[i - 2]; } return dp[n]; } } 面试经典150题 # 面试经典150题 数组/字符串 # 合并两个有序数组 # 合并两个有序数组 2025-01-12 public class Solution88 { public static void merge(int[] nums1, int m, int[] nums2, int n) { if (n == 0) return; int nIndex = 0; for (int i = m; i \u0026lt; m + n; i++) { nums1[i] = nums2[nIndex++]; } Arrays.sort(nums1); } public static void main(String[] args) { int[] nums1 = {1, 2, 3, 0, 0, 0}; int m = 3; int[] nums2 = {2, 5, 6}; int n = 3; merge(nums1, m, nums2, n); for (int i : nums1) { System.out.print(i + \u0026#34; \u0026#34;); } } } 移除元素 # 移除元素 2025-01-11 删除有序数组中的重复项 # 删除有序数组中的重复项 2025-01-11 没有做出来，看的官方题解 2025-01-11 做完删除有序数组中的重复项 II之后再尝试重新解题完成 public class Solution26 { public static int removeDuplicates(int[] nums) { if (nums.length \u0026lt;= 1) return nums.length; int slow = 1; int fast = 1; while (slow \u0026lt;= fast \u0026amp;\u0026amp; fast \u0026lt; nums.length) { if (nums[fast] != nums[fast - 1]) { nums[slow] = nums[fast]; slow++; } fast++; } return slow; } public static void main(String[] args) { int[] nums = {0, 0, 1, 1, 1, 2, 2, 3, 3, 4}; for (int num : nums) { System.out.print(num + \u0026#34; \u0026#34;); } System.out.println(); System.out.println(removeDuplicates(nums)); for (int num : nums) { System.out.print(num + \u0026#34; \u0026#34;); } } } 删除有序数组中的重复项 II # 删除有序数组中的重复项 II 2025-01-11 public class Solution80 { public static int removeDuplicates(int[] nums) { if (nums.length \u0026lt;= 2) return nums.length; int slow = -1; int fast = 1; int count = 1; while (slow \u0026lt;= fast \u0026amp;\u0026amp; fast \u0026lt; nums.length) { if (nums[fast] == nums[fast - 1]) { count++; if (count \u0026gt; 2 \u0026amp;\u0026amp; slow == -1) { slow = fast; } else if (count \u0026lt;= 2 \u0026amp;\u0026amp; slow != -1) { nums[slow] = nums[fast]; slow++; } } else if (nums[fast] != nums[fast - 1]) { if (slow != -1) { nums[slow] = nums[fast]; slow++; } count = 1; } fast++; } return slow == -1 ? nums.length : slow; } public static void main(String[] args) { //int[] nums = {0,0,1,1,1,1,2,3,3}; //int[] nums = {1,2,2}; int[] nums = {1, 1, 1, 2, 2, 2, 3, 3}; for (int num : nums) { System.out.print(num + \u0026#34; \u0026#34;); } System.out.println(); System.out.println(removeDuplicates(nums)); for (int num : nums) { System.out.print(num + \u0026#34; \u0026#34;); } } } 多数元素 # 多数元素 2025-01-12 轮转数组 # 轮转数组 2025-01-18 进阶 尽可能想出更多的解决方案，至少有 三种 不同的方法可以解决这个问题。 你可以使用空间复杂度为 O(1) 的 原地 算法解决这个问题吗？ 买卖股票的最佳时机 # 买卖股票的最佳时机 2025-01-11 看官方题解做出来的 2025-01-17 review 买卖股票的最佳时机 II # 买卖股票的最佳时机 II 官方题解 理解 2025-01-17 方法一：动态规划 方法二：贪心 跳跃游戏 # 跳跃游戏 2025-01-17 官方题解理解 贪心 2025-01-18 跳跃游戏 II # 跳跃游戏 II 2025-01-18 算法超时了 理解官方题解 2025-01-18 方法一：反向查找出发位置 Solution45.jump2 2025-01-18 方法二：正向查找可达到的最大位置 Solution45.jump3 H 指数 # H 指数\n2025-01-18 Tips An easy approach is to sort the array first. What are the possible values of h-index? A faster approach is to use extra space. O(1) 时间插入、删除和获取随机元素\n除自身以外数组的乘积\n加油站\n分发糖果\n接雨水\n罗马数字转整数\n2025-01-12 整数转罗马数字\n最后一个单词的长度\n2025-01-12 最长公共前缀\n2025-01-12 反转字符串中的单词\n2025-01-18 进阶 如果字符串在你使用的编程语言中是一种可变数据类型，请尝试使用 O(1) 额外空间复杂度的 原地 解法。 Z 字形变换\n找出字符串中第一个匹配项的下标\n2025-01-12 文本左右对齐\n双指针 # 验证回文串 # 验证回文串 2025-01-13 判断子序列 # 判断子序列 2025-01-13 两数之和 II - 输入有序数组 # 两数之和 II - 输入有序数组\n2025-01-13 运行有时候会超过时间限制 盛最多水的容器\n三数之和\n滑动窗口 # 长度最小的子数组 # 长度最小的子数组 2025-01-22 无重复字符的最长子串 # 无重复字符的最长子串 2025-01-22 串联所有单词的子串 # 串联所有单词的子串 2025-01-22 最小覆盖子串 # 最小覆盖子串 矩阵 # 有效的数独 # 有效的数独 2025-01-18 螺旋矩阵 # 螺旋矩阵 2025-01-18 旋转图像 # 旋转图像 理解官方题解 2025-01-18 方法一：使用辅助数组 2025-01-18 方法二：原地旋转 有数学公式的推导，需要自己推导一次 2025-01-18 方法三：用翻转代替旋转 有数学公式的推导，需要自己推导一次 矩阵置零 # 矩阵置零 2025-01-18 生命游戏 # 生命游戏 2025-01-18 进阶 你可以使用原地算法解决本题吗？请注意，面板上所有格子需要同时被更新：你不能先更新某些格子，然后使用它们的更新后的值再更新其他格子。 本题中，我们使用二维数组来表示面板。原则上，面板是无限的，但当活细胞侵占了面板边界时会造成问题。你将如何解决这些问题？ ✅ 哈希表 # ✅ 赎金信 # 赎金信 2025-01-13 ✅ 同构字符串 # 同构字符串 2025-01-13 ✅ 单词规律 # 单词规律 2025-01-13 ✅ 有效的字母异位词 # 有效的字母异位词 2025-01-13 ✅ 字母异位词分组 # 字母异位词分组 2025-01-16 第一遍算法超时，看了官方题解思路后实现通过 ✅ 两数之和 # 两数之和 2025-01-13 ✅ 快乐数 # 快乐数 2025-01-13 ✅ 存在重复元素 II # 存在重复元素 II 2025-01-13 ✅ 最长连续序列 # 最长连续序列 2025-01-16 看了官方题解后完成 区间 # 栈 # 有效的括号 # 有效的括号 2025-01-22 简化路径 # 简化路径 2025-01-22 最小栈 # 最小栈 2025-01-22 理解官方题解 文字描述后完成 2025-01-22 理解官方题解 逆波兰表达式求值 # 逆波兰表达式求值 2025-01-22 基本计算器 # 基本计算器 链表 # ✅ 环形链表 # 环形链表 2025-01-20 理解官方题解 2025-01-20 方法一：哈希表 方法二：快慢指针 ✅ 两数相加 # 两数相加 2025-01-20 ✅ 合并两个有序链表 # 合并两个有序链表 2025-01-20 ✅ 随机链表的复制 # 随机链表的复制 2025-01-20 ✅ 反转链表 II # 反转链表 II 2025-01-20 K 个一组翻转链表 # K 个一组翻转链表 ✅ 删除链表的倒数第 N 个结点 # 删除链表的倒数第 N 个结点 2025-01-20 进阶 2025-01-20 你能尝试使用一趟扫描实现吗？ ✅ 删除排序链表中的重复元素 II # 删除排序链表中的重复元素 II 2025-01-21 ✅ 旋转链表 # 旋转链表 给你一个链表的头节点 head ，旋转链表，将链表每个节点向右移动 k 个位置。 2025-01-20 public class Solution61 { public static ListNode rotateRight(ListNode head, int k) { if (head == null || head.next == null) return head; ListNode _head = head; int nodeCount = 1; while (_head.next != null) { _head = _head.next; nodeCount++; } _head.next = head; _head = head; for (int i = 0; i \u0026lt; (nodeCount - k % nodeCount) - 1; i++) { _head = _head.next; } head = _head.next; _head.next = null; return head; } public static void main(String[] args) { test002(); test001(); } public static void test001() { ListNode node0 = new ListNode(1); ListNode node1 = new ListNode(2); ListNode node2 = new ListNode(3); ListNode node3 = new ListNode(4); ListNode node4 = new ListNode(5); node0.next = node1; node1.next = node2; node2.next = node3; node3.next = node4; ListNode listNode = rotateRight(node0, 2); while (listNode != null) { System.out.print(listNode.val + \u0026#34; \u0026#34;); listNode = listNode.next; } System.out.println(); } public static void test002() { ListNode node0 = new ListNode(0); ListNode node1 = new ListNode(1); ListNode node2 = new ListNode(2); node0.next = node1; node1.next = node2; ListNode listNode = rotateRight(node0, 4); while (listNode != null) { System.out.print(listNode.val + \u0026#34; \u0026#34;); listNode = listNode.next; } System.out.println(); } static public class ListNode { int val; ListNode next; ListNode() { } ListNode(int val) { this.val = val; } ListNode(int val, ListNode next) { this.val = val; this.next = next; } } } ✅ 分隔链表 # 分隔链表 2025-01-21 public class Solution86 { public static ListNode partition(ListNode head, int x) { ListNode solder = new ListNode(-1); solder.next = head; ListNode insertPreNode = solder; ListNode insertNode = insertPreNode.next; while (insertNode != null \u0026amp;\u0026amp; insertNode.val \u0026lt; x) { insertPreNode = insertNode; insertNode = insertNode.next; } ListNode preNode = insertPreNode; ListNode currentNode = preNode.next; ListNode nextNode = currentNode != null ? currentNode.next : null; while (currentNode != null) { if (currentNode.val \u0026lt; x) { preNode.next = nextNode; insertPreNode.next = currentNode; currentNode.next = insertNode; insertPreNode = currentNode; } else { preNode = currentNode; } currentNode = nextNode; nextNode = currentNode != null ? currentNode.next : null; } return solder.next; } public static void main(String[] args) { test002(); test001(); } public static void test001() { ListNode node0 = new ListNode(1); ListNode node1 = new ListNode(4); ListNode node2 = new ListNode(3); ListNode node3 = new ListNode(2); ListNode node4 = new ListNode(5); ListNode node5 = new ListNode(2); node0.next = node1; node1.next = node2; node2.next = node3; node3.next = node4; node4.next = node5; ListNode listNode = partition(node0, 3); while (listNode != null) { System.out.print(listNode.val + \u0026#34; \u0026#34;); listNode = listNode.next; } System.out.println(); } public static void test002() { ListNode node0 = new ListNode(2); ListNode node1 = new ListNode(1); node0.next = node1; ListNode listNode = partition(node0, 2); while (listNode != null) { System.out.print(listNode.val + \u0026#34; \u0026#34;); listNode = listNode.next; } System.out.println(); } static public class ListNode { int val; ListNode next; ListNode() { } ListNode(int val) { this.val = val; } ListNode(int val, ListNode next) { this.val = val; this.next = next; } } } ✅ LRU 缓存 # LRU 缓存 2025-01-22 理解官方题解 二叉树 # 二叉树的最大深度 # 二叉树的最大深度 2025-01-15 相同的树 # 相同的树 2025-01-15 翻转二叉树 # 翻转二叉树 2025-01-15 对称二叉树 # 对称二叉树 没做出来，看的官方题解 从前序与中序遍历序列构造二叉树 # 从前序与中序遍历序列构造二叉树 从中序与后序遍历序列构造二叉树 # 从中序与后序遍历序列构造二叉树 填充每个节点的下一个右侧节点指针 II # 填充每个节点的下一个右侧节点指针 II 二叉树展开为链表 # 二叉树展开为链表 路径总和 # 路径总和 求根节点到叶节点数字之和 # 求根节点到叶节点数字之和 二叉树中的最大路径和 # 二叉树中的最大路径和 二叉搜索树迭代器 # 二叉搜索树迭代器 完全二叉树的节点个数 # 完全二叉树的节点个数 二叉树的最近公共祖先 # 二叉树的最近公共祖先 二叉树层次遍历 # 二叉搜索树 # 图 # 图的广度优先搜索 # 字典树 # ✅ 回溯 # ✅ 电话号码的字母组合 # 电话号码的字母组合 2025-01-15 ✅ 组合 # 组合 2025-01-15 ✅ 全排列 # 全排列 2025-01-15 ✅ 组合总和 # 组合总和 2025-01-15 ✅ N 皇后 II # N 皇后 II 2025-01-15 ✅ 括号生成 # 括号生成 2025-01-15 ✅ 单词搜索 # 单词搜索 2025-01-15 分治 # kadane算法 # 二分查找 # 堆 # 位运算 # 二进制求和 # 给你两个二进制字符串 a 和 b ，以二进制字符串的形式返回它们的和。 示例 1： 输入:a = \u0026ldquo;11\u0026rdquo;, b = \u0026ldquo;1\u0026rdquo; 输出：\u0026ldquo;100\u0026rdquo; 示例 2： 输入：a = \u0026ldquo;1010\u0026rdquo;, b = \u0026ldquo;1011\u0026rdquo; -输出：\u0026ldquo;10101\u0026rdquo; 提示： 1 \u0026lt;= a.length, b.length \u0026lt;= 104 a 和 b 仅由字符 \u0026lsquo;0\u0026rsquo; 或 \u0026lsquo;1\u0026rsquo; 组成 字符串如果不是 \u0026ldquo;0\u0026rdquo; ，就不含前导零 二进制求和 2025-01-16 public class Solution67 { public static String addBinary(String a, String b) { StringBuilder sb = new StringBuilder(); int aIndex = a.length() - 1; int bIndex = b.length() - 1; int flag = 0; while (true) { int count = (aIndex \u0026lt; 0 ? \u0026#39;0\u0026#39; : a.charAt(aIndex)) - \u0026#39;0\u0026#39; + (bIndex \u0026lt; 0 ? \u0026#39;0\u0026#39; : b.charAt(bIndex)) - \u0026#39;0\u0026#39; + flag; sb.insert(0, count % 2); flag = count / 2; aIndex--; bIndex--; if (aIndex \u0026lt; 0 \u0026amp;\u0026amp; bIndex \u0026lt; 0 \u0026amp;\u0026amp; flag == 0) break; } return sb.toString(); } public static void main(String[] args) { System.out.println(addBinary(\u0026#34;11\u0026#34;, \u0026#34;1\u0026#34;)); System.out.println(addBinary(\u0026#34;1010\u0026#34;, \u0026#34;1011\u0026#34;)); } } 颠倒二进制位 # 颠倒二进制位 2025-01-16 没做出来, 参考这篇文章LeetCode 190. 颠倒二进制位 （位运算 分治） 2025-01-17 复习了一遍 2025-01-17 新增了中间值打印的代码在算法中 位1的个数 # 位1的个数 2025-01-17 只出现一次的数字 # 只出现一次的数字 2025-01-17 只出现一次的数字 II # 只出现一次的数字 II 2025-01-17 理解了官方题解 方法2 数字范围按位与 # 数字范围按位与 2025-01-17 理解了官方题解 方法2 数学 # 回文数 # 回文数 2025-01-17 不将整数转为字符串来解决这个问题 public class Solution9 { public static boolean isPalindrome(int x) { String numberString = String.valueOf(x); int left = 0; int right = numberString.length() - 1; while (left \u0026lt;= right) { if (numberString.charAt(left) != numberString.charAt(right)) { return false; } left++; // 左边指针向右移动一个位置 right--; // 右边指针向左边移动一个位置 } return true; } public static void main(String[] args) { System.out.println(isPalindrome(121)); System.out.println(isPalindrome(-121)); //负数肯定不是回文数 System.out.println(isPalindrome(10)); } } 加一 # 给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。 最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。 你可以假设除了整数 0 之外，这个整数不会以零开头。 示例 1： 输入：digits = [1,2,3] 输出：[1,2,4] 解释：输入数组表示数字 123。 示例 2： 输入：digits = [4,3,2,1] 输出：[4,3,2,2] 解释：输入数组表示数字 4321。 示例 3： 输入：digits = [9] 输出：[1,0] 解释：输入数组表示数字 9。 加 1 得到了 9 + 1 = 10。 因此，结果应该是 [1,0]。 加一 2025-01-17 public class Solution66 { public static int[] plusOne(int[] digits) { ArrayList\u0026lt;Integer\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(); for (int digit : digits) { list.add(digit); } int flag = 0; // 表示进位 int number = list.get(list.size() - 1); // 最右边一位 int _number = number; number = (_number + 1) % 10; flag = (_number + 1) / 10; list.set(list.size() - 1, number); if (list.size() \u0026gt;= 2) { // 原数字位数大于1 for (int i = list.size() - 2; i \u0026gt;= 0; i--) { int numberTmp = list.get(i); list.set(i, (numberTmp + flag) % 10); flag = (numberTmp + flag) / 10; } } if (flag != 0) { // 如果还有一个进位，就在最左边新增一位 list.add(0, 1); } // 构造一个整数数组返回结果 int[] result = new int[list.size()]; for (int i = 0; i \u0026lt; list.size(); i++) { result[i] = list.get(i); } return result; } public static void main(String[] args) { int[] result = plusOne(new int[]{9, 9}); for (int number : result) { System.out.print(number + \u0026#34; \u0026#34;); } System.out.println(); result = plusOne(new int[]{9}); for (int number : result) { System.out.print(number + \u0026#34; \u0026#34;); } System.out.println(); result = plusOne(new int[]{1, 2, 3}); for (int number : result) { System.out.print(number + \u0026#34; \u0026#34;); } System.out.println(); result = plusOne(new int[]{4, 3, 2, 1}); for (int number : result) { System.out.print(number + \u0026#34; \u0026#34;); } System.out.println(); } } 阶乘后的零 # 给定一个整数 n ，返回 n! 结果中尾随零的数量。 提示 n! = n * (n - 1) * (n - 2) * \u0026hellip; * 3 * 2 * 1 示例 1： 输入：n = 3 输出：0 解释：3! = 6 ，不含尾随 0 示例 2： 输入：n = 5 输出：1 解释：5! = 120 ，有一个尾随 0 示例 3： 输入：n = 0 输出：0 提示：0 \u0026lt;= n \u0026lt;= 10^4 阶乘后的零 2025-01-17 version 1 # public class Solution172 { // 因式分解 public static int trailingZeroes(int n) { int result = 0; int[] countArr = new int[]{0, 0}; for (int i = n; i \u0026gt;= 1; i--) { int number = i; while (number % 10 == 0) { result++; number /= 10; } while (number % 5 == 0) { countArr[1]++; number /= 5; } while (number % 2 == 0) { countArr[0]++; number /= 2; } int min = Math.min(countArr[0], countArr[1]); if (min != 0) { countArr[0] -= min; countArr[1] -= min; result += min; } } return result; } public static void main(String[] args) { for (int i = 5; i \u0026lt; 10000; i++) { System.out.println(i + \u0026#34; : \u0026#34; + trailingZeroes(i)); } } } version 2 # 只需要因式分解 2 和 5 就行了，不用分解 10（已经包含了 2 和 5 ） class Solution { public static int trailingZeroes(int n) { int result = 0; int[] countArr = new int[]{0, 0}; for (int i = n; i \u0026gt;= 1; i--) { int number = i; while (number % 5 == 0) { countArr[1]++; number /= 5; } while (number % 2 == 0) { countArr[0]++; number /= 2; } int min = Math.min(countArr[0], countArr[1]); if (min != 0) { countArr[0] -= min; countArr[1] -= min; result += min; } } return result; } } x 的平方根 # 给你一个非负整数 x ，计算并返回 x 的 算术平方根 由于返回类型是整数，结果只保留 整数部分 ，小数部分将被 舍去 注意：不允许使用任何内置指数函数和算符，例如 pow(x, 0.5) 或者 x ** 0.5 示例 1： 输入：x = 4 输出：2 示例 2： 输入：x = 8 输出：2 解释：8 的算术平方根是 2.82842\u0026hellip;, 由于返回类型是整数，小数部分将被舍去。 提示： 0 \u0026lt;= x \u0026lt;= 2^31 - 1 x 的平方根 2025-01-17 package com.penruins.leetcode; public class Solution69 { public static int mySqrt(int x) { long xLong = Long.valueOf(x).longValue(); if (xLong == 0) return 0; if (xLong == 1) return 1; for (long i = 1; i \u0026lt; xLong; i++) { if (i * i == xLong || (i * i \u0026lt; xLong \u0026amp;\u0026amp; (i + 1) * (i + 1) \u0026gt; xLong)) { return (int) i; } } return -1; } public static void main(String[] args) { System.out.println(mySqrt(2147483647)); System.out.println(2147483647); System.out.println(46340 * 46340); System.out.println(46341l * 46341l); // for (int i = 0; i \u0026lt; Integer.MAX_VALUE; i++) { // System.out.println(i + \u0026#34; : \u0026#34; + mySqrt(i)); // } } } Pow(x, n) # 实现 pow(x, n) ，即计算 x 的整数 n 次幂函数（即，x^n ）。 示例 1： 输入：x = 2.00000, n = 10 输出：1024.00000 示例 2： 输入：x = 2.10000, n = 3 输出：9.26100 示例 3： 输入：x = 2.00000, n = -2 输出：0.25000 解释：2-2 = 1/22 = 1/4 = 0.25 提示： -100.0 \u0026lt; x \u0026lt; 100.0 -2^31 \u0026lt;= n \u0026lt;= 2^31-1 n 是一个整数 要么 x 不为零，要么 n \u0026gt; 0 -10^4 \u0026lt;= xn \u0026lt;= 10^4 Pow(x, n) 2025-01-17 超时了 2025-01-17 看懂了官方题解 直线上最多的点数 # 直线上最多的点数 2025-01-17 看了官方题解，但还是不太理解 一维动态规划 # 爬楼梯 2025-01-11 通过 多维动态规划 # "},{"id":55,"href":"/zh/zh/post/computer-science/algorithm/","title":"Algorithm","section":"Computer Science","content":" Algorithm # 代码随想录 Tips # 如果我要创建一个列表，并且需要一直在列表的开头插入元素，我要怎么实现代码保证效率 # 在 Java 中，如果你需要频繁在列表的开头插入元素，使用 LinkedList 会比 ArrayList 更高效。因为 LinkedList 在列表开头插入元素的时间复杂度是 O(1)，而 ArrayList 在开头插入元素的时间复杂度是 O(n)，需要移动所有元素。\n使用 LinkedList 的示例代码：\nimport java.util.LinkedList; import java.util.List; public class Main { public static void main(String[] args) { // 创建一个 LinkedList List\u0026lt;Integer\u0026gt; list = new LinkedList\u0026lt;\u0026gt;(); // 在列表开头插入元素 list.add(0, 1); // 插入元素 1 list.add(0, 2); // 插入元素 2 list.add(0, 3); // 插入元素 3 // 输出列表 System.out.println(list); // 输出: [3, 2, 1] } } 为什么 LinkedList 更高效？\nLinkedList 是基于双向链表实现的，插入和删除操作只需要调整节点的指针，时间复杂度为 O(1)。 ArrayList 是基于动态数组实现的，插入和删除操作需要移动元素，时间复杂度为 O(n)。 总结：\n如果你需要频繁在列表开头插入元素，优先选择 LinkedList 以保证效率。\nLinkedList 在任意位置插入和删除节点，时间复杂度都是O(1)吗？ # 不是的，LinkedList 在任意位置插入和删除节点的时间复杂度并不总是 O(1)。具体的时间复杂度取决于操作的位置。\nLinkedList 的时间复杂度分析：\n在头部或尾部插入/删除节点：\n时间复杂度是 O(1)，因为 LinkedList 是双向链表，直接操作头节点或尾节点即可。 在任意位置插入/删除节点：\n时间复杂度是 O(n)，因为需要从头节点或尾节点开始遍历链表，找到目标位置后才能进行操作。 为什么任意位置插入/删除是 O(n)？\nLinkedList 是基于双向链表实现的，虽然插入和删除操作本身只需要调整指针（O(1)），但找到目标位置需要遍历链表。 平均情况下，遍历链表的时间复杂度是 O(n/2) ≈ O(n)。 示例代码：\nimport java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList\u0026lt;Integer\u0026gt; list = new LinkedList\u0026lt;\u0026gt;(); list.add(1); list.add(2); list.add(3); // 在索引 1 处插入元素（需要遍历到索引 1） list.add(1, 10); // 时间复杂度 O(n) // 删除索引 2 处的元素（需要遍历到索引 2） list.remove(2); // 时间复杂度 O(n) System.out.println(list); // 输出: [1, 10, 3] } } 总结：\nLinkedList 在头部或尾部插入/删除节点的时间复杂度是 O(1)。 在任意位置插入/删除节点的时间复杂度是 O(n)，因为需要遍历链表找到目标位置。 如果你需要频繁在任意位置插入或删除节点，并且希望时间复杂度更低，可以考虑使用其他数据结构（如 ArrayList 或自定义数据结构），具体选择取决于你的使用场景。\n如果我要不断往list的末尾添加元素，是使用LinkedList还是ArrayList？ # 如果你需要不断往列表的末尾添加元素，使用 ArrayList 会比 LinkedList 更高效。以下是原因和详细分析：\nArrayList 的优势 时间复杂度： 在末尾添加元素的平均时间复杂度是 O(1)。 只有在数组容量不足时，ArrayList 需要扩容（创建一个新的更大的数组并复制元素），此时时间复杂度是 O(n)。但扩容操作是分摊的，平均下来仍然是 O(1)。 空间效率： ArrayList 是基于数组实现的，内存连续，存储效率高，没有额外的指针开销。 缓存友好： 数组的内存布局是连续的，对 CPU 缓存更友好，访问速度更快。 LinkedList 的劣势 时间复杂度： 在末尾添加元素的时间复杂度是 O(1)，但每次添加都需要创建一个新的节点对象，并调整指针。 空间效率： LinkedList 是基于双向链表实现的，每个节点需要额外的空间存储前驱和后继指针，内存开销更大。 缓存不友好： 链表的内存布局是分散的，对 CPU 缓存不友好，访问速度较慢。 性能对比 ArrayList： 添加元素时，大多数情况下是 O(1)，偶尔扩容时是 O(n)。 内存连续，访问速度快。 LinkedList： 添加元素时，每次都是 O(1)，但需要创建节点对象和调整指针。 内存分散，访问速度慢。 代码示例 使用 ArrayList：\nimport java.util.ArrayList; import java.util.List; public class Main { public static void main(String[] args) { List\u0026lt;Integer\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(); // 不断往末尾添加元素 for (int i = 0; i \u0026lt; 1000000; i++) { list.add(i); // 平均时间复杂度 O(1) } System.out.println(\u0026#34;ArrayList 添加完成\u0026#34;); } } 使用 LinkedList：\nimport java.util.LinkedList; import java.util.List; public class Main { public static void main(String[] args) { List\u0026lt;Integer\u0026gt; list = new LinkedList\u0026lt;\u0026gt;(); // 不断往末尾添加元素 for (int i = 0; i \u0026lt; 1000000; i++) { list.add(i); // 时间复杂度 O(1)，但性能不如 ArrayList } System.out.println(\u0026#34;LinkedList 添加完成\u0026#34;); } } 实测性能 在实际测试中，ArrayList 的性能通常优于 LinkedList，尤其是在大量添加元素时。以下是一个简单的性能对比：\n操作 ArrayList 耗时 LinkedList 耗时 添加 100 万个元素 ~50 ms ~100 ms 添加 1000 万个元素 ~500 ms ~1200 ms 总结 如果你需要不断往列表末尾添加元素，优先选择 ArrayList。 它的时间复杂度更低（平均 O(1)）。 它的内存效率更高，访问速度更快。 只有在需要频繁在列表头部或中间插入/删除元素时，才考虑使用 LinkedList。 希望这个解答对你有帮助！如果还有其他问题，欢迎随时提问！\n如果我想要构造一个字符串，我会不断往字符串头部添加字符，我该怎么编码保证效率 # 如果你需要不断往字符串的头部添加字符，直接使用 Java 的 String 或 StringBuilder 会导致性能问题，因为它们的底层实现不适合频繁在头部插入操作。以下是原因和高效解决方案：\n为什么 String 和 StringBuilder 不适合？ String： String 是不可变的，每次修改都会创建一个新的字符串对象，频繁在头部插入字符会导致大量对象创建和复制，性能极差。 StringBuilder： StringBuilder 是可变的，适合在尾部添加字符（时间复杂度 O(1)），但在头部插入字符的时间复杂度是 O(n)，因为需要移动所有现有字符。 高效解决方案 为了高效地在字符串头部添加字符，可以使用以下数据结构：\n方案 1：使用 LinkedList\u0026lt;Character\u0026gt;\nLinkedList 在头部插入元素的时间复杂度是 O(1)，非常适合频繁在头部添加字符的场景。 插入完成后，可以将 LinkedList 转换为字符串。 方案 2：使用 Deque\u0026lt;Character\u0026gt;（双端队列）\nDeque 是基于双向链表实现的，支持在头部和尾部高效插入和删除元素。 插入完成后，可以将 Deque 转换为字符串。 代码实现 方案 1：使用 LinkedList\u0026lt;Character\u0026gt;\nimport java.util.LinkedList; public class Main { public static void main(String[] args) { // 创建一个 LinkedList 来存储字符 LinkedList\u0026lt;Character\u0026gt; list = new LinkedList\u0026lt;\u0026gt;(); // 不断往头部添加字符 list.addFirst(\u0026#39;a\u0026#39;); // 添加字符 \u0026#39;a\u0026#39; list.addFirst(\u0026#39;b\u0026#39;); // 添加字符 \u0026#39;b\u0026#39; list.addFirst(\u0026#39;c\u0026#39;); // 添加字符 \u0026#39;c\u0026#39; // 将 LinkedList 转换为字符串 StringBuilder sb = new StringBuilder(); for (char c : list) { sb.append(c); } String result = sb.toString(); System.out.println(result); // 输出: cba } } 方案 2：使用 Deque\u0026lt;Character\u0026gt;\nimport java.util.Deque; import java.util.LinkedList; public class Main { public static void main(String[] args) { // 创建一个 Deque 来存储字符 Deque\u0026lt;Character\u0026gt; deque = new LinkedList\u0026lt;\u0026gt;(); // 不断往头部添加字符 deque.addFirst(\u0026#39;a\u0026#39;); // 添加字符 \u0026#39;a\u0026#39; deque.addFirst(\u0026#39;b\u0026#39;); // 添加字符 \u0026#39;b\u0026#39; deque.addFirst(\u0026#39;c\u0026#39;); // 添加字符 \u0026#39;c\u0026#39; // 将 Deque 转换为字符串 StringBuilder sb = new StringBuilder(); for (char c : deque) { sb.append(c); } String result = sb.toString(); System.out.println(result); // 输出: cba } } 性能分析 时间复杂度： 在头部插入字符的时间复杂度是 O(1)。 转换为字符串的时间复杂度是 O(n)，其中 n 是字符的数量。 空间复杂度： 使用 LinkedList 或 Deque 会额外存储每个字符的节点信息（前驱和后继指针），空间开销略高于 StringBuilder。 为什么不直接使用 StringBuilder？ StringBuilder 在头部插入字符的时间复杂度是 O(n)，因为需要移动所有现有字符。 示例： StringBuilder sb = new StringBuilder(); sb.insert(0, \u0026#39;a\u0026#39;); // O(n) sb.insert(0, \u0026#39;b\u0026#39;); // O(n) sb.insert(0, \u0026#39;c\u0026#39;); // O(n) System.out.println(sb.toString()); // 输出: cba 这种方法在频繁插入时性能较差。 总结 如果需要不断往字符串头部添加字符，推荐使用 LinkedList\u0026lt;Character\u0026gt; 或 Deque\u0026lt;Character\u0026gt;。 它们在头部插入字符的时间复杂度是 O(1)，性能最优。 插入完成后，可以将其转换为字符串。 如果插入操作较少，或者主要在尾部添加字符，可以使用 StringBuilder。 希望这个解答对你有帮助！如果还有其他问题，欢迎随时提问！\n面试经典150题 # 面试经典150题 数组/字符串 # 移除元素 # 2025-01-11 击败3.36% class Solution { public int removeElement(int[] nums, int val) { Arrays.sort(nums); int flagIndex = -1; int count = 0; for (int i = 0; i \u0026lt; nums.length; i++) { if (nums[i] == val \u0026amp;\u0026amp; count == 0) { flagIndex = i; count++; } else if (nums[i] == val) { count++; } } if (flagIndex != -1 \u0026amp;\u0026amp; count != 0) { for (int i = flagIndex; i \u0026lt; flagIndex + count; i++) { nums[i] = nums[nums.length - (i - flagIndex) - 1]; } } return nums.length - count; } } 一维动态规划 # 爬楼梯 # 2025-01-11 击败100% class Solution { public int climbStairs(int n) { if (n == 0) return 0; if (n == 1) return 1; if (n == 2) return 2; int[] dp = new int[n + 1]; dp[0] = 0; dp[1] = 1; dp[2] = 2; for (int i = 3; i \u0026lt;= n; i++) { dp[i] = dp[i - 1] + dp[i - 2]; } return dp[n]; } } 面试经典150题 # 面试经典150题 数组/字符串 # 合并两个有序数组 # 合并两个有序数组 2025-01-12 public class Solution88 { public static void merge(int[] nums1, int m, int[] nums2, int n) { if (n == 0) return; int nIndex = 0; for (int i = m; i \u0026lt; m + n; i++) { nums1[i] = nums2[nIndex++]; } Arrays.sort(nums1); } public static void main(String[] args) { int[] nums1 = {1, 2, 3, 0, 0, 0}; int m = 3; int[] nums2 = {2, 5, 6}; int n = 3; merge(nums1, m, nums2, n); for (int i : nums1) { System.out.print(i + \u0026#34; \u0026#34;); } } } 移除元素 # 移除元素 2025-01-11 删除有序数组中的重复项 # 删除有序数组中的重复项 2025-01-11 没有做出来，看的官方题解 2025-01-11 做完删除有序数组中的重复项 II之后再尝试重新解题完成 public class Solution26 { public static int removeDuplicates(int[] nums) { if (nums.length \u0026lt;= 1) return nums.length; int slow = 1; int fast = 1; while (slow \u0026lt;= fast \u0026amp;\u0026amp; fast \u0026lt; nums.length) { if (nums[fast] != nums[fast - 1]) { nums[slow] = nums[fast]; slow++; } fast++; } return slow; } public static void main(String[] args) { int[] nums = {0, 0, 1, 1, 1, 2, 2, 3, 3, 4}; for (int num : nums) { System.out.print(num + \u0026#34; \u0026#34;); } System.out.println(); System.out.println(removeDuplicates(nums)); for (int num : nums) { System.out.print(num + \u0026#34; \u0026#34;); } } } 删除有序数组中的重复项 II # 删除有序数组中的重复项 II 2025-01-11 public class Solution80 { public static int removeDuplicates(int[] nums) { if (nums.length \u0026lt;= 2) return nums.length; int slow = -1; int fast = 1; int count = 1; while (slow \u0026lt;= fast \u0026amp;\u0026amp; fast \u0026lt; nums.length) { if (nums[fast] == nums[fast - 1]) { count++; if (count \u0026gt; 2 \u0026amp;\u0026amp; slow == -1) { slow = fast; } else if (count \u0026lt;= 2 \u0026amp;\u0026amp; slow != -1) { nums[slow] = nums[fast]; slow++; } } else if (nums[fast] != nums[fast - 1]) { if (slow != -1) { nums[slow] = nums[fast]; slow++; } count = 1; } fast++; } return slow == -1 ? nums.length : slow; } public static void main(String[] args) { //int[] nums = {0,0,1,1,1,1,2,3,3}; //int[] nums = {1,2,2}; int[] nums = {1, 1, 1, 2, 2, 2, 3, 3}; for (int num : nums) { System.out.print(num + \u0026#34; \u0026#34;); } System.out.println(); System.out.println(removeDuplicates(nums)); for (int num : nums) { System.out.print(num + \u0026#34; \u0026#34;); } } } 多数元素 # 多数元素 2025-01-12 轮转数组 # 轮转数组 2025-01-18 进阶 尽可能想出更多的解决方案，至少有 三种 不同的方法可以解决这个问题。 你可以使用空间复杂度为 O(1) 的 原地 算法解决这个问题吗？ 买卖股票的最佳时机 # 买卖股票的最佳时机 2025-01-11 看官方题解做出来的 2025-01-17 review 买卖股票的最佳时机 II # 买卖股票的最佳时机 II 官方题解 理解 2025-01-17 方法一：动态规划 方法二：贪心 跳跃游戏 # 跳跃游戏 2025-01-17 官方题解理解 贪心 2025-01-18 跳跃游戏 II # 跳跃游戏 II 2025-01-18 算法超时了 理解官方题解 2025-01-18 方法一：反向查找出发位置 Solution45.jump2 2025-01-18 方法二：正向查找可达到的最大位置 Solution45.jump3 H 指数 # H 指数\n2025-01-18 Tips An easy approach is to sort the array first. What are the possible values of h-index? A faster approach is to use extra space. O(1) 时间插入、删除和获取随机元素\n除自身以外数组的乘积\n加油站\n分发糖果\n接雨水\n罗马数字转整数\n2025-01-12 整数转罗马数字\n最后一个单词的长度\n2025-01-12 最长公共前缀\n2025-01-12 反转字符串中的单词\n2025-01-18 进阶 如果字符串在你使用的编程语言中是一种可变数据类型，请尝试使用 O(1) 额外空间复杂度的 原地 解法。 Z 字形变换\n找出字符串中第一个匹配项的下标\n2025-01-12 文本左右对齐\n双指针 # 验证回文串 # 验证回文串 2025-01-13 判断子序列 # 判断子序列 2025-01-13 两数之和 II - 输入有序数组 # 两数之和 II - 输入有序数组\n2025-01-13 运行有时候会超过时间限制 盛最多水的容器\n三数之和\n滑动窗口 # 长度最小的子数组 # 长度最小的子数组 2025-01-22 无重复字符的最长子串 # 无重复字符的最长子串 2025-01-22 串联所有单词的子串 # 串联所有单词的子串 2025-01-22 最小覆盖子串 # 最小覆盖子串 矩阵 # 有效的数独 # 有效的数独 2025-01-18 螺旋矩阵 # 螺旋矩阵 2025-01-18 旋转图像 # 旋转图像 理解官方题解 2025-01-18 方法一：使用辅助数组 2025-01-18 方法二：原地旋转 有数学公式的推导，需要自己推导一次 2025-01-18 方法三：用翻转代替旋转 有数学公式的推导，需要自己推导一次 矩阵置零 # 矩阵置零 2025-01-18 生命游戏 # 生命游戏 2025-01-18 进阶 你可以使用原地算法解决本题吗？请注意，面板上所有格子需要同时被更新：你不能先更新某些格子，然后使用它们的更新后的值再更新其他格子。 本题中，我们使用二维数组来表示面板。原则上，面板是无限的，但当活细胞侵占了面板边界时会造成问题。你将如何解决这些问题？ ✅ 哈希表 # ✅ 赎金信 # 赎金信 2025-01-13 ✅ 同构字符串 # 同构字符串 2025-01-13 ✅ 单词规律 # 单词规律 2025-01-13 ✅ 有效的字母异位词 # 有效的字母异位词 2025-01-13 ✅ 字母异位词分组 # 字母异位词分组 2025-01-16 第一遍算法超时，看了官方题解思路后实现通过 ✅ 两数之和 # 两数之和 2025-01-13 ✅ 快乐数 # 快乐数 2025-01-13 ✅ 存在重复元素 II # 存在重复元素 II 2025-01-13 ✅ 最长连续序列 # 最长连续序列 2025-01-16 看了官方题解后完成 区间 # 栈 # 有效的括号 # 有效的括号 2025-01-22 简化路径 # 简化路径 2025-01-22 最小栈 # 最小栈 2025-01-22 理解官方题解 文字描述后完成 2025-01-22 理解官方题解 逆波兰表达式求值 # 逆波兰表达式求值 2025-01-22 基本计算器 # 基本计算器 链表 # ✅ 环形链表 # 环形链表 2025-01-20 理解官方题解 2025-01-20 方法一：哈希表 方法二：快慢指针 ✅ 两数相加 # 两数相加 2025-01-20 ✅ 合并两个有序链表 # 合并两个有序链表 2025-01-20 ✅ 随机链表的复制 # 随机链表的复制 2025-01-20 ✅ 反转链表 II # 反转链表 II 2025-01-20 K 个一组翻转链表 # K 个一组翻转链表 ✅ 删除链表的倒数第 N 个结点 # 删除链表的倒数第 N 个结点 2025-01-20 进阶 2025-01-20 你能尝试使用一趟扫描实现吗？ ✅ 删除排序链表中的重复元素 II # 删除排序链表中的重复元素 II 2025-01-21 ✅ 旋转链表 # 旋转链表 给你一个链表的头节点 head ，旋转链表，将链表每个节点向右移动 k 个位置。 2025-01-20 public class Solution61 { public static ListNode rotateRight(ListNode head, int k) { if (head == null || head.next == null) return head; ListNode _head = head; int nodeCount = 1; while (_head.next != null) { _head = _head.next; nodeCount++; } _head.next = head; _head = head; for (int i = 0; i \u0026lt; (nodeCount - k % nodeCount) - 1; i++) { _head = _head.next; } head = _head.next; _head.next = null; return head; } public static void main(String[] args) { test002(); test001(); } public static void test001() { ListNode node0 = new ListNode(1); ListNode node1 = new ListNode(2); ListNode node2 = new ListNode(3); ListNode node3 = new ListNode(4); ListNode node4 = new ListNode(5); node0.next = node1; node1.next = node2; node2.next = node3; node3.next = node4; ListNode listNode = rotateRight(node0, 2); while (listNode != null) { System.out.print(listNode.val + \u0026#34; \u0026#34;); listNode = listNode.next; } System.out.println(); } public static void test002() { ListNode node0 = new ListNode(0); ListNode node1 = new ListNode(1); ListNode node2 = new ListNode(2); node0.next = node1; node1.next = node2; ListNode listNode = rotateRight(node0, 4); while (listNode != null) { System.out.print(listNode.val + \u0026#34; \u0026#34;); listNode = listNode.next; } System.out.println(); } static public class ListNode { int val; ListNode next; ListNode() { } ListNode(int val) { this.val = val; } ListNode(int val, ListNode next) { this.val = val; this.next = next; } } } ✅ 分隔链表 # 分隔链表 2025-01-21 public class Solution86 { public static ListNode partition(ListNode head, int x) { ListNode solder = new ListNode(-1); solder.next = head; ListNode insertPreNode = solder; ListNode insertNode = insertPreNode.next; while (insertNode != null \u0026amp;\u0026amp; insertNode.val \u0026lt; x) { insertPreNode = insertNode; insertNode = insertNode.next; } ListNode preNode = insertPreNode; ListNode currentNode = preNode.next; ListNode nextNode = currentNode != null ? currentNode.next : null; while (currentNode != null) { if (currentNode.val \u0026lt; x) { preNode.next = nextNode; insertPreNode.next = currentNode; currentNode.next = insertNode; insertPreNode = currentNode; } else { preNode = currentNode; } currentNode = nextNode; nextNode = currentNode != null ? currentNode.next : null; } return solder.next; } public static void main(String[] args) { test002(); test001(); } public static void test001() { ListNode node0 = new ListNode(1); ListNode node1 = new ListNode(4); ListNode node2 = new ListNode(3); ListNode node3 = new ListNode(2); ListNode node4 = new ListNode(5); ListNode node5 = new ListNode(2); node0.next = node1; node1.next = node2; node2.next = node3; node3.next = node4; node4.next = node5; ListNode listNode = partition(node0, 3); while (listNode != null) { System.out.print(listNode.val + \u0026#34; \u0026#34;); listNode = listNode.next; } System.out.println(); } public static void test002() { ListNode node0 = new ListNode(2); ListNode node1 = new ListNode(1); node0.next = node1; ListNode listNode = partition(node0, 2); while (listNode != null) { System.out.print(listNode.val + \u0026#34; \u0026#34;); listNode = listNode.next; } System.out.println(); } static public class ListNode { int val; ListNode next; ListNode() { } ListNode(int val) { this.val = val; } ListNode(int val, ListNode next) { this.val = val; this.next = next; } } } ✅ LRU 缓存 # LRU 缓存 2025-01-22 理解官方题解 二叉树 # 二叉树的最大深度 # 二叉树的最大深度 2025-01-15 相同的树 # 相同的树 2025-01-15 翻转二叉树 # 翻转二叉树 2025-01-15 对称二叉树 # 对称二叉树 没做出来，看的官方题解 从前序与中序遍历序列构造二叉树 # 从前序与中序遍历序列构造二叉树 从中序与后序遍历序列构造二叉树 # 从中序与后序遍历序列构造二叉树 填充每个节点的下一个右侧节点指针 II # 填充每个节点的下一个右侧节点指针 II 二叉树展开为链表 # 二叉树展开为链表 路径总和 # 路径总和 求根节点到叶节点数字之和 # 求根节点到叶节点数字之和 二叉树中的最大路径和 # 二叉树中的最大路径和 二叉搜索树迭代器 # 二叉搜索树迭代器 完全二叉树的节点个数 # 完全二叉树的节点个数 二叉树的最近公共祖先 # 二叉树的最近公共祖先 二叉树层次遍历 # 二叉搜索树 # 图 # 图的广度优先搜索 # 字典树 # ✅ 回溯 # ✅ 电话号码的字母组合 # 电话号码的字母组合 2025-01-15 ✅ 组合 # 组合 2025-01-15 ✅ 全排列 # 全排列 2025-01-15 ✅ 组合总和 # 组合总和 2025-01-15 ✅ N 皇后 II # N 皇后 II 2025-01-15 ✅ 括号生成 # 括号生成 2025-01-15 ✅ 单词搜索 # 单词搜索 2025-01-15 分治 # kadane算法 # 二分查找 # 堆 # 位运算 # 二进制求和 # 给你两个二进制字符串 a 和 b ，以二进制字符串的形式返回它们的和。 示例 1： 输入:a = \u0026ldquo;11\u0026rdquo;, b = \u0026ldquo;1\u0026rdquo; 输出：\u0026ldquo;100\u0026rdquo; 示例 2： 输入：a = \u0026ldquo;1010\u0026rdquo;, b = \u0026ldquo;1011\u0026rdquo; -输出：\u0026ldquo;10101\u0026rdquo; 提示： 1 \u0026lt;= a.length, b.length \u0026lt;= 104 a 和 b 仅由字符 \u0026lsquo;0\u0026rsquo; 或 \u0026lsquo;1\u0026rsquo; 组成 字符串如果不是 \u0026ldquo;0\u0026rdquo; ，就不含前导零 二进制求和 2025-01-16 public class Solution67 { public static String addBinary(String a, String b) { StringBuilder sb = new StringBuilder(); int aIndex = a.length() - 1; int bIndex = b.length() - 1; int flag = 0; while (true) { int count = (aIndex \u0026lt; 0 ? \u0026#39;0\u0026#39; : a.charAt(aIndex)) - \u0026#39;0\u0026#39; + (bIndex \u0026lt; 0 ? \u0026#39;0\u0026#39; : b.charAt(bIndex)) - \u0026#39;0\u0026#39; + flag; sb.insert(0, count % 2); flag = count / 2; aIndex--; bIndex--; if (aIndex \u0026lt; 0 \u0026amp;\u0026amp; bIndex \u0026lt; 0 \u0026amp;\u0026amp; flag == 0) break; } return sb.toString(); } public static void main(String[] args) { System.out.println(addBinary(\u0026#34;11\u0026#34;, \u0026#34;1\u0026#34;)); System.out.println(addBinary(\u0026#34;1010\u0026#34;, \u0026#34;1011\u0026#34;)); } } 颠倒二进制位 # 颠倒二进制位 2025-01-16 没做出来, 参考这篇文章LeetCode 190. 颠倒二进制位 （位运算 分治） 2025-01-17 复习了一遍 2025-01-17 新增了中间值打印的代码在算法中 位1的个数 # 位1的个数 2025-01-17 只出现一次的数字 # 只出现一次的数字 2025-01-17 只出现一次的数字 II # 只出现一次的数字 II 2025-01-17 理解了官方题解 方法2 数字范围按位与 # 数字范围按位与 2025-01-17 理解了官方题解 方法2 数学 # 回文数 # 回文数 2025-01-17 不将整数转为字符串来解决这个问题 public class Solution9 { public static boolean isPalindrome(int x) { String numberString = String.valueOf(x); int left = 0; int right = numberString.length() - 1; while (left \u0026lt;= right) { if (numberString.charAt(left) != numberString.charAt(right)) { return false; } left++; // 左边指针向右移动一个位置 right--; // 右边指针向左边移动一个位置 } return true; } public static void main(String[] args) { System.out.println(isPalindrome(121)); System.out.println(isPalindrome(-121)); //负数肯定不是回文数 System.out.println(isPalindrome(10)); } } 加一 # 给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。 最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。 你可以假设除了整数 0 之外，这个整数不会以零开头。 示例 1： 输入：digits = [1,2,3] 输出：[1,2,4] 解释：输入数组表示数字 123。 示例 2： 输入：digits = [4,3,2,1] 输出：[4,3,2,2] 解释：输入数组表示数字 4321。 示例 3： 输入：digits = [9] 输出：[1,0] 解释：输入数组表示数字 9。 加 1 得到了 9 + 1 = 10。 因此，结果应该是 [1,0]。 加一 2025-01-17 public class Solution66 { public static int[] plusOne(int[] digits) { ArrayList\u0026lt;Integer\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(); for (int digit : digits) { list.add(digit); } int flag = 0; // 表示进位 int number = list.get(list.size() - 1); // 最右边一位 int _number = number; number = (_number + 1) % 10; flag = (_number + 1) / 10; list.set(list.size() - 1, number); if (list.size() \u0026gt;= 2) { // 原数字位数大于1 for (int i = list.size() - 2; i \u0026gt;= 0; i--) { int numberTmp = list.get(i); list.set(i, (numberTmp + flag) % 10); flag = (numberTmp + flag) / 10; } } if (flag != 0) { // 如果还有一个进位，就在最左边新增一位 list.add(0, 1); } // 构造一个整数数组返回结果 int[] result = new int[list.size()]; for (int i = 0; i \u0026lt; list.size(); i++) { result[i] = list.get(i); } return result; } public static void main(String[] args) { int[] result = plusOne(new int[]{9, 9}); for (int number : result) { System.out.print(number + \u0026#34; \u0026#34;); } System.out.println(); result = plusOne(new int[]{9}); for (int number : result) { System.out.print(number + \u0026#34; \u0026#34;); } System.out.println(); result = plusOne(new int[]{1, 2, 3}); for (int number : result) { System.out.print(number + \u0026#34; \u0026#34;); } System.out.println(); result = plusOne(new int[]{4, 3, 2, 1}); for (int number : result) { System.out.print(number + \u0026#34; \u0026#34;); } System.out.println(); } } 阶乘后的零 # 给定一个整数 n ，返回 n! 结果中尾随零的数量。 提示 n! = n * (n - 1) * (n - 2) * \u0026hellip; * 3 * 2 * 1 示例 1： 输入：n = 3 输出：0 解释：3! = 6 ，不含尾随 0 示例 2： 输入：n = 5 输出：1 解释：5! = 120 ，有一个尾随 0 示例 3： 输入：n = 0 输出：0 提示：0 \u0026lt;= n \u0026lt;= 10^4 阶乘后的零 2025-01-17 version 1 # public class Solution172 { // 因式分解 public static int trailingZeroes(int n) { int result = 0; int[] countArr = new int[]{0, 0}; for (int i = n; i \u0026gt;= 1; i--) { int number = i; while (number % 10 == 0) { result++; number /= 10; } while (number % 5 == 0) { countArr[1]++; number /= 5; } while (number % 2 == 0) { countArr[0]++; number /= 2; } int min = Math.min(countArr[0], countArr[1]); if (min != 0) { countArr[0] -= min; countArr[1] -= min; result += min; } } return result; } public static void main(String[] args) { for (int i = 5; i \u0026lt; 10000; i++) { System.out.println(i + \u0026#34; : \u0026#34; + trailingZeroes(i)); } } } version 2 # 只需要因式分解 2 和 5 就行了，不用分解 10（已经包含了 2 和 5 ） class Solution { public static int trailingZeroes(int n) { int result = 0; int[] countArr = new int[]{0, 0}; for (int i = n; i \u0026gt;= 1; i--) { int number = i; while (number % 5 == 0) { countArr[1]++; number /= 5; } while (number % 2 == 0) { countArr[0]++; number /= 2; } int min = Math.min(countArr[0], countArr[1]); if (min != 0) { countArr[0] -= min; countArr[1] -= min; result += min; } } return result; } } x 的平方根 # 给你一个非负整数 x ，计算并返回 x 的 算术平方根 由于返回类型是整数，结果只保留 整数部分 ，小数部分将被 舍去 注意：不允许使用任何内置指数函数和算符，例如 pow(x, 0.5) 或者 x ** 0.5 示例 1： 输入：x = 4 输出：2 示例 2： 输入：x = 8 输出：2 解释：8 的算术平方根是 2.82842\u0026hellip;, 由于返回类型是整数，小数部分将被舍去。 提示： 0 \u0026lt;= x \u0026lt;= 2^31 - 1 x 的平方根 2025-01-17 package com.penruins.leetcode; public class Solution69 { public static int mySqrt(int x) { long xLong = Long.valueOf(x).longValue(); if (xLong == 0) return 0; if (xLong == 1) return 1; for (long i = 1; i \u0026lt; xLong; i++) { if (i * i == xLong || (i * i \u0026lt; xLong \u0026amp;\u0026amp; (i + 1) * (i + 1) \u0026gt; xLong)) { return (int) i; } } return -1; } public static void main(String[] args) { System.out.println(mySqrt(2147483647)); System.out.println(2147483647); System.out.println(46340 * 46340); System.out.println(46341l * 46341l); // for (int i = 0; i \u0026lt; Integer.MAX_VALUE; i++) { // System.out.println(i + \u0026#34; : \u0026#34; + mySqrt(i)); // } } } Pow(x, n) # 实现 pow(x, n) ，即计算 x 的整数 n 次幂函数（即，x^n ）。 示例 1： 输入：x = 2.00000, n = 10 输出：1024.00000 示例 2： 输入：x = 2.10000, n = 3 输出：9.26100 示例 3： 输入：x = 2.00000, n = -2 输出：0.25000 解释：2-2 = 1/22 = 1/4 = 0.25 提示： -100.0 \u0026lt; x \u0026lt; 100.0 -2^31 \u0026lt;= n \u0026lt;= 2^31-1 n 是一个整数 要么 x 不为零，要么 n \u0026gt; 0 -10^4 \u0026lt;= xn \u0026lt;= 10^4 Pow(x, n) 2025-01-17 超时了 2025-01-17 看懂了官方题解 直线上最多的点数 # 直线上最多的点数 2025-01-17 看了官方题解，但还是不太理解 一维动态规划 # 爬楼梯 2025-01-11 通过 多维动态规划 # "},{"id":56,"href":"/zh/zh/","title":"Penruins","section":"Penruins","content":" Penruins # penruins 的博客，分享技术🤖，生活🤹🏻，电影🎬，骑行🚴🏽‍♂️，English和其他一些有趣的东西(📖学习记录, ⛰️爬山)\n2025-02-05 大年初八 # mac上用safari浏览网页，可以在 screen time 中统计每个网页的浏览时长\n2025-02-04 大年初七 # 超完美地狱 ycx\n开始使用微信输入法，比搜狗输入法更简洁舒服\n开始使用 Aisten，可以用来听英语播客，它会自动生成播客字幕，并且能统计时长，有按周、按月、按年统计时长，很不错\n2025-02-03 大年初六 # 良心护士 ycx。想不通为什么他要用这样的方式杀死那么多无辜的人。\n2025-02-02 大年初五 # 网络谜踪 ycx。电影里苹果全家桶的操作太丝滑了\n2025-01-31 大年初三 # 草海一圈\n2025-01-30 大年初二 # 滇池绿道探路\nApp Store下载了DeepSeek 之后登录不上，查了一下是被攻击了还在修复中，晚一点终于登录上去了。界面和清爽，简单玩了一下\n2025-01-29 大年初一 # 置身事内：中国政府与经济发展\n人工智能入行实战：从校园到职场\n2025-01-27 # 热水袋破了被烫伤了。。。。\n2025-01-26 # 门徒 ycx\n用地图看懂世界格局\n2025-01-19 # 美国困局\n树莓派开始，玩转linux\n2025-01-18 Saturday # 使用 stream 这个app可以抓 ios app 接口的包\n2025-01-16 # Spring实战（第6版）\n2025-01-10 Friday # 卧云山环线练车 #oado\n2025-01-09 # hugo 博客自定义 toc 的深度 Is there any way I can set how deep the level is to show the TOC at right side? #52 2025-01-08 # 四重奏 E07\n2025-01-07 # 开始爬彩云中路的坡\n四重奏 E06\n如果国宝会说话 第三季 2025-01-06 # 四重奏 E05\n2025-01-05 # 四重奏 E04\n2025-01-04 # 身体恢复的差不多了，开始骑车\n四重奏 E03\n如果国宝会说话 第二季 2025-01-03 # 四重奏 E02\n2025-01-02 # 四重奏 E01\n2025-01-01 # 如果国宝会说话 第一季 2024-12-31 # 辛德勒的名单（2）\n2024-12-29 # 生病中\n2024-12-28 # 生病中\n2024-12-26 # 西安 陕西历史博物馆\n西安城墙骑车🚲\n看钟楼夜景\n2024-12-25 # 西安 翠华山\n2024-12-24 # 兵马俑\n骊山\n长恨歌表演\n2024-12-23 # 西安 大雁塔\n大唐不夜城\n2024-10-13 # 金铜盆爬山\n尽吾志也而不能至者，可以无悔矣，其孰能讥之乎？此余之所得也！\n"},{"id":57,"href":"/zh/post/books/computer-science/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/","title":"Java并发编程实战","section":"Computer Science","content":" Java并发编程实战 第1章 简介 # 1.1 并发简史 # 1.2 线程的优势 # 1.3 线程带来的风险 # 1.4 线程无处不在 # 开发线程安全的类比开发非线程安全的类要更加谨慎和细致 每个Java应用程序都会使用线程 当JVM启动时，它将为JVM的内部任务（例如，垃圾收集、终结操作等）创建后台线程，并创建一个主线程来运行main方法。 AWT（Abstract Window Toolkit，抽象窗口工具库）和Swing的用户界面框架将创建线程来管理用户界面事件。 Timer将创建线程来执行延迟任务。 一些组件框架，例如Servlet和RMI，都会创建线程池并调用这些线程中的方法。 当某个框架在应用程序中引入并发性时，通常不可能将并发性仅局限于框架代码，因为框架本身会回调（Callback）应用程序的代码，而这些代码将访问应用程序的状态。 对线程安全性的需求也不能局限于被调用的代码，而是要延伸到需要访问这些代码所访问的程序状态的所有代码路径。因此，对线程安全性的需求将在程序中蔓延开来。 第2章 线程安全性 # 要编写线程安全的代码，其核心在于要对状态访问操作进行管理，特别是对共享的（Shared）和可变的（Mutable）状态的访问。 “共享”意味着变量可以由多个线程同时访问，而“可变”则意味着变量的值在其生命周期内可以发生变化。 一个对象是否需要是线程安全的，取决于它是否被多个线程访问 当多个线程访问某个状态变量并且其中有一个线程执行写入操作时，必须采用同步机制来协同这些线程对变量的访问。 Java中的主要同步机制是关键字synchronized，它提供了一种独占的加锁方式，但“同步”这个术语还包括volatile类型的变量，显式锁（Explicit Lock）以及原子变量。 2.1 什么是线程安全性 # 在线程安全性的定义中，最核心的概念就是正确性。如果对线程安全性的定义是模糊的，那么就是因为缺乏对正确性的清晰定义。 正确性的含义是，某个类的行为与其规范完全一致。在良好的规范中通常会定义各种不变性条件（Invariant）来约束对象的状态，以及定义各种后验条件（Postcondition）来描述对象操作的结果。 线程安全性：当多个线程访问某个类时，这个类始终都能表现出正确的行为，那么就称这个类是线程安全的。 当多个线程访问某个类时，不管运行时环境采用何种调度方式或者这些线程将如何交替执行，并且在主调代码中不需要任何额外的同步或协同，这个类都能表现出正确的行为，那么就称这个类是线程安全的。 在线程安全类中封装了必要的同步机制，因此客户端无须进一步采取同步措施。 无状态对象一定是线程安全的 大多数Servlet都是无状态的，从而极大地降低了在实现Servlet线程安全性时的复杂性。只有当Servlet在处理请求时需要保存一些信息，线程安全性才会成为一个问题。 2.2 原子性 # 在并发编程中，这种由于不恰当的执行时序而出现不正确的结果是一种非常重要的情况，它有一个正式的名字：竞态条件（Race Condition） 2.2.1 竞态条件 # 当某个计算的正确性取决于多个线程的交替执行时序时，那么就会发生竞态条件。换句话说，就是正确的结果要取决于运气 “先检查后执行”：首先观察到某个条件为真（例如文件X不存在），然后根据这个观察结果采用相应的动作（创建文件X），但事实上，在你观察到这个结果以及开始创建文件之间，观察结果可能变得无效（另一个线程在这期间创建了文件X），从而导致各种问题（未预期的异常、数据被覆盖、文件被破坏等）。 2.2.2 示例：延迟初始化中的竞态条件 # 延迟初始化的目的是将对象的初始化操作推迟到实际被使用时才进行，同时要确保只被初始化一次。 假定线程A和线程B同时执行getInstance。A看到instance为空，因而创建一个新的ExpensiveObject实例。B同样需要判断instance是否为空。此时的instance是否为空，要取决于不可预测的时序，包括线程的调度方式，以及A需要花多长时间来初始化ExpensiveObject并设置instance。如果当B检查时，instance为空，那么在两次调用getInstance时可能会得到不同的结果，即使getInstance通常被认为是返回相同的实例。 2.2.3 复合操作 # 要避免竞态条件问题，就必须在某个线程修改该变量时，通过某种方式防止其他线程使用这个变量，从而确保其他线程只能在修改操作完成之前或之后读取和修改状态，而不是在修改状态的过程中。 假定有两个操作A和B，如果从执行A的线程来看，当另一个线程执行B时，要么将B全部执行完，要么完全不执行B，那么A和B对彼此来说是原子的。 原子操作是指，对于访问同一个状态的所有操作（包括该操作本身）来说，这个操作是一个以原子方式执行的操作。 在java.util.concurrent.atomic包中包含了一些原子变量类，用于实现在数值和对象引用上的原子状态转换。通过用AtomicLong来代替long类型的计数器，能够确保所有对计数器状态的访问操作都是原子的。 当在无状态的类中添加一个状态时，如果该状态完全由线程安全的对象来管理，那么这个类仍然是线程安全的 当状态变量的数量由一个变为多个时，并不会像状态变量数量由零个变为一个那样简单 在实际情况中，应尽可能地使用现有的线程安全对象（例如AtomicLong）来管理类的状态。与非线程安全的对象相比，判断线程安全对象的可能状态及其状态转换情况要更为容易，从而也更容易维护和验证线程安全性。 2.3 加锁机制 # 要保持状态的一致性，就需要在单个原子操作中更新所有相关的状态变量。 2.3.1 内置锁 # Java提供了一种内置的锁机制来支持原子性：同步代码块（Synchronized Block）。 以关键字synchronized来修饰的方法就是一种横跨整个方法体的同步代码块，其中该同步代码块的锁就是方法调用所在的对象。静态的synchronized方法以Class对象作为锁。 每个Java对象都可以用做一个实现同步的锁，这些锁被称为内置锁（Intrinsic Lock）或监视器锁（Monitor Lock） 2.3.2 重入 # 当某个线程请求一个由其他线程持有的锁时，发出请求的线程就会阻塞 由于内置锁是可重入的，因此如果某个线程试图获得一个已经由它自己持有的锁，那么这个请求就会成功。“重入”意味着获取锁的操作的粒度是“线程”，而不是“调用” 重入的一种实现方法是，为每个锁关联一个获取计数值和一个所有者线程。 当计数值为0时，这个锁就被认为是没有被任何线程持有。当线程请求一个未被持有的锁时，JVM将记下锁的持有者，并且将获取计数值置为1。如果同一个线程再次获取这个锁，计数值将递增，而当线程退出同步代码块时，计数器会相应地递减。当计数值为0时，这个锁将被释放。 2.4 用锁来保护状态 # 对于可能被多个线程同时访问的可变状态变量，在访问它时都需要持有同一个锁，在这种情况下，我们称状态变量是由这个锁保护的。 之所以每个对象都有一个内置锁，只是为了免去显式地创建锁对象。 每个共享的和可变的变量都应该只由一个锁来保护，从而使维护人员知道是哪一个锁。 一种常见的加锁约定是，将所有的可变状态都封装在对象内部，并通过对象的内置锁对所有访问可变状态的代码路径进行同步，使得在该对象上不会发生并发访问。 并非所有数据都需要锁的保护，只有被多个线程同时访问的可变数据才需要通过锁来保护。 2.5 活跃性与性能 # 不良并发（Poor Concurrency）应用程序：可同时调用的数量，不仅受到可用处理资源的限制，还受到应用程序本身结构的限制。 当实现某个同步策略时，一定不要盲目地为了性能而牺牲简单性（这可能会破坏安全性）。 无论是执行计算密集的操作，还是在执行某个可能阻塞的操作，如果持有锁的时间过长，那么都会带来活跃性或性能问题。 当执行时间较长的计算或者可能无法快速完成的操作时（例如，网络I/O或控制台I/O），一定不要持有锁。 第3章 对象的共享 # 同步还有另一个重要的方面：内存可见性（Memory Visibility）。我们不仅希望防止某个线程正在使用对象状态而另一个线程在同时修改该状态，而且希望确保当一个线程修改了对象状态后，其他线程能够看到发生的状态变化。 3.1 可见性 # 在没有同步的情况下，编译器、处理器以及运行时等都可能对操作的执行顺序进行一些意想不到的调整。 3.1.1 失效数据 # 3.1.2　非原子的64位操作 # 当线程在没有同步的情况下读取变量时，可能会得到一个失效值，但至少这个值是由之前某个线程设置的值，而不是一个随机值。这种安全性保证也被称为最低安全性（out-of-thin-air safety） 最低安全性适用于绝大多数变量，但是存在一个例外：非volatile类型的64位数值变量（double和long，请参见3.1.4节）。Java内存模型要求，变量的读取操作和写入操作都必须是原子操作，但对于非volatile类型的long和double变量，JVM允许将64位的读操作或写操作分解为两个32位的操作。当读取一个非volatile类型的long变量时，如果对该变量的读操作和写操作在不同的线程中执行，那么很可能会读取到某个值的高32位和另一个值的低32位￼。因此，即使不考虑失效数据问题，在多线程程序中使用共享且可变的long和double等类型的变量也是不安全的，除非用关键字volatile来声明它们，或者用锁保护起来。 3.1.3　加锁与可见性 # 加锁的含义不仅仅局限于互斥行为，还包括内存可见性。为了确保所有线程都能看到共享变量的最新值，所有执行读操作或者写操作的线程都必须在同一个锁上同步。 3.1.4　Volatile变量 # Java语言提供了一种稍弱的同步机制，即volatile变量，用来确保将变量的更新操作通知到其他线程。当把变量声明为volatile类型后，编译器与运行时都会注意到这个变量是共享的，因此不会将该变量上的操作与其他内存操作一起重排序。volatile变量不会被缓存在寄存器或者对其他处理器不可见的地方，因此在读取volatile类型的变量时总会返回最新写入的值。 在访问volatile变量时不会执行加锁操作，因此也就不会使执行线程阻塞，因此volatile变量是一种比sychronized关键字更轻量级的同步机制。 在当前大多数处理器架构上，读取volatile变量的开销只比读取非volatile变量的开销略高一些。 我们并不建议过度依赖volatile变量提供的可见性。如果在代码中依赖volatile变量来控制状态的可见性，通常比使用锁的代码更脆弱，也更难以理解。 仅当volatile变量能简化代码的实现以及对同步策略的验证时，才应该使用它们。 如果在验证正确性时需要对可见性进行复杂的判断，那么就不要使用volatile变量。 volatile的语义不足以确保递增操作（count++）的原子性，除非你能确保只有一个线程对变量执行写操作。 加锁机制既可以确保可见性又可以确保原子性，而volatile变量只能确保可见性。 当且仅当满足以下所有条件时，才应该使用volatile变量 对变量的写入操作不依赖变量的当前值，或者你能确保只有单个线程更新变量的值。 该变量不会与其他状态变量一起纳入不变性条件中。 在访问变量时不需要加锁。 调试小提示：对于服务器应用程序，无论在开发阶段还是在测试阶段，当启动JVM时一定都要指定-server命令行选项。server模式的JVM将比client模式的JVM进行更多的优化，例如将循环中未被修改的变量提升到循环外部，因此在开发环境（client模式的JVM）中能正确运行的代码，可能会在部署环境（server模式的JVM）中运行失败。例如，如果在程序清单3-4中“忘记”把asleep变量声明为volatile类型，那么server模式的JVM会将asleep的判断条件提升到循环体外部（这将导致一个无限循环），但client模式的JVM不会这么做。在解决开发环境中出现无限循环问题时，解决这个问题的开销远小于解决在应用环境出现无限循环的开销。 3.2 发布与逸出 # “发布（Publish）”一个对象的意思是指，使对象能够在当前作用域之外的代码中使用。 将一个指向该对象的引用保存到其他代码可以访问的地方，或者在某一个非私有的方法中返回该引用，或者将引用传递到其他类的方法中。在许多情况中，我们要确保对象及其内部状态不被发布。而在某些情况下，我们又需要发布某个对象，但如果在发布时要确保线程安全性，则可能需要同步。发布内部状态可能会破坏封装性，并使得程序难以维持不变性条件。例如，如果在对象构造完成之前就发布该对象，就会破坏线程安全性。当某个不应该发布的对象被发布时，这种情况就被称为逸出（Escape）。 发布对象的最简单方法是将对象的引用保存到一个公有的静态变量中，以便任何类和线程都能看见该对象 一般来说，如果一个已经发布的对象能够通过非私有的变量引用和方法调用到达其他的对象，那么这些对象也都会被发布。 当某个对象逸出后，你必须假设有某个类或线程可能会误用该对象。这正是需要使用封装的最主要原因：封装能够使得对程序的正确性进行分析变得可能，并使得无意中破坏设计约束条件变得更难。 安全的对象构造过程 不要在构造过程中使this引用逸出 在构造过程中使this引用逸出的一个常见错误是，在构造函数中启动一个线程。当对象在其构造函数中创建一个线程时，无论是显式创建（通过将它传给构造函数）还是隐式创建（由于Thread或Runnable是该对象的一个内部类），this引用都会被新创建的线程共享。在对象尚未完全构造之前，新的线程就可以看见它。 在构造函数中创建线程并没有错误，但最好不要立即启动它，而是通过一个start或initialize方法来启动 在构造函数中调用一个可改写的实例方法时（既不是私有方法，也不是终结方法），同样会导致this引用在构造过程中逸出。 如果想在构造函数中注册一个事件监听器或启动线程，那么可以使用一个私有的构造函数和一个公共的工厂方法（Factory Method），从而避免不正确的构造过程 3.3 线程封闭 # Swing应用程序的许多并发错误都是由于错误地在另一个线程中使用了这些被封闭的对象。 线程封闭是在程序设计中的一个考虑因素，必须在程序中实现。 3.3.1 Ad-hoc线程封闭 # 在volatile变量上存在一种特殊的线程封闭。只要你能确保只有单个线程对共享的volatile变量执行写入操作，那么就可以安全地在这些共享的volatile变量上执行“读取-修改-写入”的操作。在这种情况下，相当于将修改操作封闭在单个线程中以防止发生竞态条件，并且volatile变量的可见性保证还确保了其他线程能看到最新的值。 由于Ad-hoc线程封闭技术的脆弱性，因此在程序中尽量少用它，在可能的情况下，应该使用更强的线程封闭技术（例如，栈封闭或ThreadLocal类）。 3.3.2 栈封闭 # 栈封闭是线程封闭的一种特例，在栈封闭中，只能通过局部变量才能访问对象。 由于任何方法都无法获得对基本类型的引用，因此Java语言的这种语义就确保了基本类型的局部变量始终封闭在线程内。 3.3.3 ThreadLocal 类 # ThreadLocal对象通常用于防止对可变的单实例变量（Singleton）或全局变量进行共享。 假设你需要将一个单线程应用程序移植到多线程环境中，通过将共享的全局变量转换为ThreadLocal对象（如果全局变量的语义允许），可以维持线程安全性。 3.4 不变性 # 如果某个对象在被创建后其状态就不能被修改，那么这个对象就称为不可变对象。 不可变对象一定是线程安全的 虽然在Java语言规范和Java内存模型中都没有给出不可变性的正式定义，但不可变性并不等于将对象中所有的域都声明为final类型，即使对象中所有的域都是final类型的，这个对象也仍然是可变的，因为在final类型的域中可以保存对可变对象的引用。 当满足以下条件时，对象才是不可变的： 对象创建以后其状态就不能修改。 对象的所有域都是final类型。 对象是正确创建的（在对象的创建期间，this引用没有逸出）。 3.4.1 Final域 # 关键字final可以视为C++中const机制的一种受限版本，用于构造不可变性对象。final类型的域是不能修改的（但如果final域所引用的对象是可变的，那么这些被引用的对象是可以修改的）。 即使对象是可变的，通过将对象的某些域声明为final类型，仍然可以简化对状态的判断，因此限制对象的可变性也就相当于限制了该对象可能的状态集合。 正如“除非需要更高的可见性，否则应将所有的域都声明为私有域”[EJ Item 12]是一个良好的编程习惯，“除非需要某个域是可变的，否则应将其声明为final域”也是一个良好的编程习惯。 3.4.2 示例：使用volatile类型来发布不可变对象 # 通过使用包含多个状态变量的容器对象来维持不变性条件，并使用一个volatile类型的引用来确保可见性，使得Volatile Cached Factorizer在没有显式地使用锁的情况下仍然是线程安全的 3.5 安全发布 # 3.5.1 不正确的发布：正确的对象被破坏 # 你不能指望一个尚未被完全创建的对象拥有完整性。某个观察该对象的线程将看到对象处于不一致的状态，然后看到对象的状态突然发生变化，即使线程在对象发布后还没有修改过它。 3.5.2 不可变对象与初始化安全性 # 我们已经知道，即使某个对象的引用对其他线程是可见的，也并不意味着对象状态对于使用该对象的线程来说一定是可见的。为了确保对象状态能呈现出一致的视图，就必须使用同步。 任何线程都可以在不需要额外同步的情况下安全地访问不可变对象，即使在发布这些对象时没有使用同步。 在没有额外同步的情况下，也可以安全地访问final类型的域。然而，如果final类型的域所指向的是可变对象，那么在访问这些域所指向的对象的状态时仍然需要同步。 3.5.3 安全发布的常用模式 # 可变对象必须通过安全的方式来发布，这通常意味着在发布和使用该对象的线程时都必须使用同步。 要安全地发布一个对象，对象的引用以及对象的状态必须同时对其他线程可见 在静态初始化函数中初始化一个对象引用。 将对象的引用保存到volatile类型的域或者AtomicReferance对象中。 将对象的引用保存到某个正确构造对象的final类型域中。 将对象的引用保存到一个由锁保护的域中。 在线程安全容器内部的同步意味着，在将对象放入到某个容器，例如Vector或synchronizedList时，将满足上述最后一条需求。如果线程A将对象X放入一个线程安全的容器，随后线程B读取这个对象，那么可以确保B看到A设置的X状态，即便在这段读/写X的应用程序代码中没有包含显式的同步。 线程安全库中的容器类提供了以下的安全发布保证 通过将一个键或者值放入Hashtable、synchronizedMap或者ConcurrentMap中，可以安全地将它发布给任何从这些容器中访问它的线程（无论是直接访问还是通过迭代器访问）。 通过将某个元素放入Vector、CopyOnWriteArrayList、CopyOnWriteArraySet、synchronizedList或synchronizedSet中，可以将该元素安全地发布到任何从这些容器中访问该元素的线程。 通过将某个元素放入BlockingQueue或者ConcurrentLinkedQueue中，可以将该元素安全地发布到任何从这些队列中访问该元素的线程。 要发布一个静态构造的对象，最简单和最安全的方式是使用静态的初始化器 public static Holder holder=new Holder（42） 静态初始化器由JVM在类的初始化阶段执行。由于在JVM内部存在着同步机制，因此通过这种方式初始化的任何对象都可以被安全地发布 3.5.4 事实不可变对象 # 如果对象在发布后不会被修改，那么对于其他在没有额外同步的情况下安全地访问这些对象的线程来说，安全发布是足够的。 如果对象从技术上来看是可变的，但其状态在发布后不会再改变，那么把这种对象称为“事实不可变对象（Effectively Immutable Object）” 通过使用事实不可变对象，不仅可以简化开发过程，而且还能由于减少了同步而提高性能。 例如，Date本身是可变的￼，但如果将它作为不可变对象来使用，那么在多个线程之间共享Date对象时，就可以省去对锁的使用 3.5.5 可变对象 # 如果对象在构造后可以修改，那么安全发布只能确保“发布当时”状态的可见性。对于可变对象，不仅在发布对象时需要使用同步，而且在每次对象访问时同样需要使用同步来确保后续修改操作的可见性。 在并发程序中使用和共享对象时，可以使用一些实用的策略，包括： 线程封闭。线程封闭的对象只能由一个线程拥有，对象被封闭在该线程中，并且只能由这个线程修改。 只读共享。在没有额外同步的情况下，共享的只读对象可以由多个线程并发访问，但任何线程都不能修改它。共享的只读对象包括不可变对象和事实不可变对象。 线程安全共享。线程安全的对象在其内部实现同步，因此多个线程可以通过对象的公有接口来进行访问而不需要进一步的同步。 保护对象。被保护的对象只能通过持有特定的锁来访问。保护对象包括封装在其他线程安全对象中的对象，以及已发布的并且由某个特定锁保护的对象。 3.5.6 安全地共享对象 # 第4章 对象的组合 # 4.1 设计线程安全的类 # 4.2 实例封闭 # 4.3 线程安全性的委托 # 4.4 在现有的线程安全类中添加功能 # 4.5 将同步策略文档化 # 第5章 基础构建模块 # 5.1 同步容器类 # 5.2 并发容器 # 5.3 阻塞队列和生产者-消费者模式 # 5.4 阻塞方法与中断方法 # 5.5 同步工具类 # 5.6 构建高效且可伸缩的结果缓存 # 第6章 任务执行 # 6.1 在线程中执行任务 # 6.2 Executor框架 # 6.3 找出可利用的并行性 # 第7章 取消与关闭 # 7.1 任务取消 # 7.2 停止基于线程的服务 # 7.3 处理非正常的线程终止 # 7.4 JVM关闭 # 第8章 线程池的使用 # 8.1 在任务与执行策略之间的隐性耦合 # 8.2 设置线程池的大小 # 8.3 配置ThreadPoolExecutor # 8.4 扩展ThreadPoolExecutor # 8.5 递归算法的并行化 # 第9章 图形用户界面应用程序 # 9.1 为什么GUI是单线程的 # 9.2 短时间的GUI任务 # 9.3 长时间的GUI任务 # 9.4 共享数据模型 # 9.5 其他形式的单线程子系统 # 第10章 避免活跃性危险 # 10.1 死锁 # 10.2 死锁的避免与诊断 # 10.3 其他活跃性危险 # 第11章 性能与可伸缩性 # 11.1 对性能的思考 # 11.2 Amdahl定律 # 11.3 线程引入的开销 # 11.4 减少锁的竞争 # 11.5 示例：比较Map的性能 # 11.6 减少上下文切换的开销 # 第12章 并发程序的测试 # 12.1 正确性测试 # 12.2 性能测试 # 12.3 避免性能测试的陷阱 # 12.4 其他的测试方法 # 第13章 显式锁 # 13.1 Lock与ReentrantLock # 13.2 性能考虑因素 # 13.3 公平性 # 13.4 在synchronized和ReentrantLock之间进行选择 # 13.5 读-写锁 # 第14章 构建自定义的同步工具 # 14.1 状态依赖性的管理 # 14.2 使用条件队列 # 14.3 显式的Condition对象 # 14.4 Synchronizer剖析 # 14.5 AbstractQueuedSynchronizer # 14.6 java.util.concurrent同步器类中的AQS # 第15章 原子变量与非阻塞同步机制 # 15.1 锁的劣势 # 15.2 硬件对并发的支持 # 15.3 原子变量类 # 15.4 非阻塞算法 # 第16章 Java内存模型 # 16.1 什么是内存模型，为什么需要它 # 16.2 发布 # 16.3 初始化过程中的安全性 # "},{"id":58,"href":"/zh/zh/post/books/computer-science/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/","title":"Java并发编程实战","section":"Computer Science","content":" Java并发编程实战 第1章 简介 # 1.1 并发简史 # 1.2 线程的优势 # 1.3 线程带来的风险 # 1.4 线程无处不在 # 开发线程安全的类比开发非线程安全的类要更加谨慎和细致 每个Java应用程序都会使用线程 当JVM启动时，它将为JVM的内部任务（例如，垃圾收集、终结操作等）创建后台线程，并创建一个主线程来运行main方法。 AWT（Abstract Window Toolkit，抽象窗口工具库）和Swing的用户界面框架将创建线程来管理用户界面事件。 Timer将创建线程来执行延迟任务。 一些组件框架，例如Servlet和RMI，都会创建线程池并调用这些线程中的方法。 当某个框架在应用程序中引入并发性时，通常不可能将并发性仅局限于框架代码，因为框架本身会回调（Callback）应用程序的代码，而这些代码将访问应用程序的状态。 对线程安全性的需求也不能局限于被调用的代码，而是要延伸到需要访问这些代码所访问的程序状态的所有代码路径。因此，对线程安全性的需求将在程序中蔓延开来。 第2章 线程安全性 # 要编写线程安全的代码，其核心在于要对状态访问操作进行管理，特别是对共享的（Shared）和可变的（Mutable）状态的访问。 “共享”意味着变量可以由多个线程同时访问，而“可变”则意味着变量的值在其生命周期内可以发生变化。 一个对象是否需要是线程安全的，取决于它是否被多个线程访问 当多个线程访问某个状态变量并且其中有一个线程执行写入操作时，必须采用同步机制来协同这些线程对变量的访问。 Java中的主要同步机制是关键字synchronized，它提供了一种独占的加锁方式，但“同步”这个术语还包括volatile类型的变量，显式锁（Explicit Lock）以及原子变量。 2.1 什么是线程安全性 # 在线程安全性的定义中，最核心的概念就是正确性。如果对线程安全性的定义是模糊的，那么就是因为缺乏对正确性的清晰定义。 正确性的含义是，某个类的行为与其规范完全一致。在良好的规范中通常会定义各种不变性条件（Invariant）来约束对象的状态，以及定义各种后验条件（Postcondition）来描述对象操作的结果。 线程安全性：当多个线程访问某个类时，这个类始终都能表现出正确的行为，那么就称这个类是线程安全的。 当多个线程访问某个类时，不管运行时环境采用何种调度方式或者这些线程将如何交替执行，并且在主调代码中不需要任何额外的同步或协同，这个类都能表现出正确的行为，那么就称这个类是线程安全的。 在线程安全类中封装了必要的同步机制，因此客户端无须进一步采取同步措施。 无状态对象一定是线程安全的 大多数Servlet都是无状态的，从而极大地降低了在实现Servlet线程安全性时的复杂性。只有当Servlet在处理请求时需要保存一些信息，线程安全性才会成为一个问题。 2.2 原子性 # 在并发编程中，这种由于不恰当的执行时序而出现不正确的结果是一种非常重要的情况，它有一个正式的名字：竞态条件（Race Condition） 2.2.1 竞态条件 # 当某个计算的正确性取决于多个线程的交替执行时序时，那么就会发生竞态条件。换句话说，就是正确的结果要取决于运气 “先检查后执行”：首先观察到某个条件为真（例如文件X不存在），然后根据这个观察结果采用相应的动作（创建文件X），但事实上，在你观察到这个结果以及开始创建文件之间，观察结果可能变得无效（另一个线程在这期间创建了文件X），从而导致各种问题（未预期的异常、数据被覆盖、文件被破坏等）。 2.2.2 示例：延迟初始化中的竞态条件 # 延迟初始化的目的是将对象的初始化操作推迟到实际被使用时才进行，同时要确保只被初始化一次。 假定线程A和线程B同时执行getInstance。A看到instance为空，因而创建一个新的ExpensiveObject实例。B同样需要判断instance是否为空。此时的instance是否为空，要取决于不可预测的时序，包括线程的调度方式，以及A需要花多长时间来初始化ExpensiveObject并设置instance。如果当B检查时，instance为空，那么在两次调用getInstance时可能会得到不同的结果，即使getInstance通常被认为是返回相同的实例。 2.2.3 复合操作 # 要避免竞态条件问题，就必须在某个线程修改该变量时，通过某种方式防止其他线程使用这个变量，从而确保其他线程只能在修改操作完成之前或之后读取和修改状态，而不是在修改状态的过程中。 假定有两个操作A和B，如果从执行A的线程来看，当另一个线程执行B时，要么将B全部执行完，要么完全不执行B，那么A和B对彼此来说是原子的。 原子操作是指，对于访问同一个状态的所有操作（包括该操作本身）来说，这个操作是一个以原子方式执行的操作。 在java.util.concurrent.atomic包中包含了一些原子变量类，用于实现在数值和对象引用上的原子状态转换。通过用AtomicLong来代替long类型的计数器，能够确保所有对计数器状态的访问操作都是原子的。 当在无状态的类中添加一个状态时，如果该状态完全由线程安全的对象来管理，那么这个类仍然是线程安全的 当状态变量的数量由一个变为多个时，并不会像状态变量数量由零个变为一个那样简单 在实际情况中，应尽可能地使用现有的线程安全对象（例如AtomicLong）来管理类的状态。与非线程安全的对象相比，判断线程安全对象的可能状态及其状态转换情况要更为容易，从而也更容易维护和验证线程安全性。 2.3 加锁机制 # 要保持状态的一致性，就需要在单个原子操作中更新所有相关的状态变量。 2.3.1 内置锁 # Java提供了一种内置的锁机制来支持原子性：同步代码块（Synchronized Block）。 以关键字synchronized来修饰的方法就是一种横跨整个方法体的同步代码块，其中该同步代码块的锁就是方法调用所在的对象。静态的synchronized方法以Class对象作为锁。 每个Java对象都可以用做一个实现同步的锁，这些锁被称为内置锁（Intrinsic Lock）或监视器锁（Monitor Lock） 2.3.2 重入 # 当某个线程请求一个由其他线程持有的锁时，发出请求的线程就会阻塞 由于内置锁是可重入的，因此如果某个线程试图获得一个已经由它自己持有的锁，那么这个请求就会成功。“重入”意味着获取锁的操作的粒度是“线程”，而不是“调用” 重入的一种实现方法是，为每个锁关联一个获取计数值和一个所有者线程。 当计数值为0时，这个锁就被认为是没有被任何线程持有。当线程请求一个未被持有的锁时，JVM将记下锁的持有者，并且将获取计数值置为1。如果同一个线程再次获取这个锁，计数值将递增，而当线程退出同步代码块时，计数器会相应地递减。当计数值为0时，这个锁将被释放。 2.4 用锁来保护状态 # 对于可能被多个线程同时访问的可变状态变量，在访问它时都需要持有同一个锁，在这种情况下，我们称状态变量是由这个锁保护的。 之所以每个对象都有一个内置锁，只是为了免去显式地创建锁对象。 每个共享的和可变的变量都应该只由一个锁来保护，从而使维护人员知道是哪一个锁。 一种常见的加锁约定是，将所有的可变状态都封装在对象内部，并通过对象的内置锁对所有访问可变状态的代码路径进行同步，使得在该对象上不会发生并发访问。 并非所有数据都需要锁的保护，只有被多个线程同时访问的可变数据才需要通过锁来保护。 2.5 活跃性与性能 # 不良并发（Poor Concurrency）应用程序：可同时调用的数量，不仅受到可用处理资源的限制，还受到应用程序本身结构的限制。 当实现某个同步策略时，一定不要盲目地为了性能而牺牲简单性（这可能会破坏安全性）。 无论是执行计算密集的操作，还是在执行某个可能阻塞的操作，如果持有锁的时间过长，那么都会带来活跃性或性能问题。 当执行时间较长的计算或者可能无法快速完成的操作时（例如，网络I/O或控制台I/O），一定不要持有锁。 第3章 对象的共享 # 同步还有另一个重要的方面：内存可见性（Memory Visibility）。我们不仅希望防止某个线程正在使用对象状态而另一个线程在同时修改该状态，而且希望确保当一个线程修改了对象状态后，其他线程能够看到发生的状态变化。 3.1 可见性 # 在没有同步的情况下，编译器、处理器以及运行时等都可能对操作的执行顺序进行一些意想不到的调整。 3.1.1 失效数据 # 3.1.2　非原子的64位操作 # 当线程在没有同步的情况下读取变量时，可能会得到一个失效值，但至少这个值是由之前某个线程设置的值，而不是一个随机值。这种安全性保证也被称为最低安全性（out-of-thin-air safety） 最低安全性适用于绝大多数变量，但是存在一个例外：非volatile类型的64位数值变量（double和long，请参见3.1.4节）。Java内存模型要求，变量的读取操作和写入操作都必须是原子操作，但对于非volatile类型的long和double变量，JVM允许将64位的读操作或写操作分解为两个32位的操作。当读取一个非volatile类型的long变量时，如果对该变量的读操作和写操作在不同的线程中执行，那么很可能会读取到某个值的高32位和另一个值的低32位￼。因此，即使不考虑失效数据问题，在多线程程序中使用共享且可变的long和double等类型的变量也是不安全的，除非用关键字volatile来声明它们，或者用锁保护起来。 3.1.3　加锁与可见性 # 加锁的含义不仅仅局限于互斥行为，还包括内存可见性。为了确保所有线程都能看到共享变量的最新值，所有执行读操作或者写操作的线程都必须在同一个锁上同步。 3.1.4　Volatile变量 # Java语言提供了一种稍弱的同步机制，即volatile变量，用来确保将变量的更新操作通知到其他线程。当把变量声明为volatile类型后，编译器与运行时都会注意到这个变量是共享的，因此不会将该变量上的操作与其他内存操作一起重排序。volatile变量不会被缓存在寄存器或者对其他处理器不可见的地方，因此在读取volatile类型的变量时总会返回最新写入的值。 在访问volatile变量时不会执行加锁操作，因此也就不会使执行线程阻塞，因此volatile变量是一种比sychronized关键字更轻量级的同步机制。 在当前大多数处理器架构上，读取volatile变量的开销只比读取非volatile变量的开销略高一些。 我们并不建议过度依赖volatile变量提供的可见性。如果在代码中依赖volatile变量来控制状态的可见性，通常比使用锁的代码更脆弱，也更难以理解。 仅当volatile变量能简化代码的实现以及对同步策略的验证时，才应该使用它们。 如果在验证正确性时需要对可见性进行复杂的判断，那么就不要使用volatile变量。 volatile的语义不足以确保递增操作（count++）的原子性，除非你能确保只有一个线程对变量执行写操作。 加锁机制既可以确保可见性又可以确保原子性，而volatile变量只能确保可见性。 当且仅当满足以下所有条件时，才应该使用volatile变量 对变量的写入操作不依赖变量的当前值，或者你能确保只有单个线程更新变量的值。 该变量不会与其他状态变量一起纳入不变性条件中。 在访问变量时不需要加锁。 调试小提示：对于服务器应用程序，无论在开发阶段还是在测试阶段，当启动JVM时一定都要指定-server命令行选项。server模式的JVM将比client模式的JVM进行更多的优化，例如将循环中未被修改的变量提升到循环外部，因此在开发环境（client模式的JVM）中能正确运行的代码，可能会在部署环境（server模式的JVM）中运行失败。例如，如果在程序清单3-4中“忘记”把asleep变量声明为volatile类型，那么server模式的JVM会将asleep的判断条件提升到循环体外部（这将导致一个无限循环），但client模式的JVM不会这么做。在解决开发环境中出现无限循环问题时，解决这个问题的开销远小于解决在应用环境出现无限循环的开销。 3.2 发布与逸出 # “发布（Publish）”一个对象的意思是指，使对象能够在当前作用域之外的代码中使用。 将一个指向该对象的引用保存到其他代码可以访问的地方，或者在某一个非私有的方法中返回该引用，或者将引用传递到其他类的方法中。在许多情况中，我们要确保对象及其内部状态不被发布。而在某些情况下，我们又需要发布某个对象，但如果在发布时要确保线程安全性，则可能需要同步。发布内部状态可能会破坏封装性，并使得程序难以维持不变性条件。例如，如果在对象构造完成之前就发布该对象，就会破坏线程安全性。当某个不应该发布的对象被发布时，这种情况就被称为逸出（Escape）。 发布对象的最简单方法是将对象的引用保存到一个公有的静态变量中，以便任何类和线程都能看见该对象 一般来说，如果一个已经发布的对象能够通过非私有的变量引用和方法调用到达其他的对象，那么这些对象也都会被发布。 当某个对象逸出后，你必须假设有某个类或线程可能会误用该对象。这正是需要使用封装的最主要原因：封装能够使得对程序的正确性进行分析变得可能，并使得无意中破坏设计约束条件变得更难。 安全的对象构造过程 不要在构造过程中使this引用逸出 在构造过程中使this引用逸出的一个常见错误是，在构造函数中启动一个线程。当对象在其构造函数中创建一个线程时，无论是显式创建（通过将它传给构造函数）还是隐式创建（由于Thread或Runnable是该对象的一个内部类），this引用都会被新创建的线程共享。在对象尚未完全构造之前，新的线程就可以看见它。 在构造函数中创建线程并没有错误，但最好不要立即启动它，而是通过一个start或initialize方法来启动 在构造函数中调用一个可改写的实例方法时（既不是私有方法，也不是终结方法），同样会导致this引用在构造过程中逸出。 如果想在构造函数中注册一个事件监听器或启动线程，那么可以使用一个私有的构造函数和一个公共的工厂方法（Factory Method），从而避免不正确的构造过程 3.3 线程封闭 # Swing应用程序的许多并发错误都是由于错误地在另一个线程中使用了这些被封闭的对象。 线程封闭是在程序设计中的一个考虑因素，必须在程序中实现。 3.3.1 Ad-hoc线程封闭 # 在volatile变量上存在一种特殊的线程封闭。只要你能确保只有单个线程对共享的volatile变量执行写入操作，那么就可以安全地在这些共享的volatile变量上执行“读取-修改-写入”的操作。在这种情况下，相当于将修改操作封闭在单个线程中以防止发生竞态条件，并且volatile变量的可见性保证还确保了其他线程能看到最新的值。 由于Ad-hoc线程封闭技术的脆弱性，因此在程序中尽量少用它，在可能的情况下，应该使用更强的线程封闭技术（例如，栈封闭或ThreadLocal类）。 3.3.2 栈封闭 # 栈封闭是线程封闭的一种特例，在栈封闭中，只能通过局部变量才能访问对象。 由于任何方法都无法获得对基本类型的引用，因此Java语言的这种语义就确保了基本类型的局部变量始终封闭在线程内。 3.3.3 ThreadLocal 类 # ThreadLocal对象通常用于防止对可变的单实例变量（Singleton）或全局变量进行共享。 假设你需要将一个单线程应用程序移植到多线程环境中，通过将共享的全局变量转换为ThreadLocal对象（如果全局变量的语义允许），可以维持线程安全性。 3.4 不变性 # 如果某个对象在被创建后其状态就不能被修改，那么这个对象就称为不可变对象。 不可变对象一定是线程安全的 虽然在Java语言规范和Java内存模型中都没有给出不可变性的正式定义，但不可变性并不等于将对象中所有的域都声明为final类型，即使对象中所有的域都是final类型的，这个对象也仍然是可变的，因为在final类型的域中可以保存对可变对象的引用。 当满足以下条件时，对象才是不可变的： 对象创建以后其状态就不能修改。 对象的所有域都是final类型。 对象是正确创建的（在对象的创建期间，this引用没有逸出）。 3.4.1 Final域 # 关键字final可以视为C++中const机制的一种受限版本，用于构造不可变性对象。final类型的域是不能修改的（但如果final域所引用的对象是可变的，那么这些被引用的对象是可以修改的）。 即使对象是可变的，通过将对象的某些域声明为final类型，仍然可以简化对状态的判断，因此限制对象的可变性也就相当于限制了该对象可能的状态集合。 正如“除非需要更高的可见性，否则应将所有的域都声明为私有域”[EJ Item 12]是一个良好的编程习惯，“除非需要某个域是可变的，否则应将其声明为final域”也是一个良好的编程习惯。 3.4.2 示例：使用volatile类型来发布不可变对象 # 通过使用包含多个状态变量的容器对象来维持不变性条件，并使用一个volatile类型的引用来确保可见性，使得Volatile Cached Factorizer在没有显式地使用锁的情况下仍然是线程安全的 3.5 安全发布 # 3.5.1 不正确的发布：正确的对象被破坏 # 你不能指望一个尚未被完全创建的对象拥有完整性。某个观察该对象的线程将看到对象处于不一致的状态，然后看到对象的状态突然发生变化，即使线程在对象发布后还没有修改过它。 3.5.2 不可变对象与初始化安全性 # 我们已经知道，即使某个对象的引用对其他线程是可见的，也并不意味着对象状态对于使用该对象的线程来说一定是可见的。为了确保对象状态能呈现出一致的视图，就必须使用同步。 任何线程都可以在不需要额外同步的情况下安全地访问不可变对象，即使在发布这些对象时没有使用同步。 在没有额外同步的情况下，也可以安全地访问final类型的域。然而，如果final类型的域所指向的是可变对象，那么在访问这些域所指向的对象的状态时仍然需要同步。 3.5.3 安全发布的常用模式 # 可变对象必须通过安全的方式来发布，这通常意味着在发布和使用该对象的线程时都必须使用同步。 要安全地发布一个对象，对象的引用以及对象的状态必须同时对其他线程可见 在静态初始化函数中初始化一个对象引用。 将对象的引用保存到volatile类型的域或者AtomicReferance对象中。 将对象的引用保存到某个正确构造对象的final类型域中。 将对象的引用保存到一个由锁保护的域中。 在线程安全容器内部的同步意味着，在将对象放入到某个容器，例如Vector或synchronizedList时，将满足上述最后一条需求。如果线程A将对象X放入一个线程安全的容器，随后线程B读取这个对象，那么可以确保B看到A设置的X状态，即便在这段读/写X的应用程序代码中没有包含显式的同步。 线程安全库中的容器类提供了以下的安全发布保证 通过将一个键或者值放入Hashtable、synchronizedMap或者ConcurrentMap中，可以安全地将它发布给任何从这些容器中访问它的线程（无论是直接访问还是通过迭代器访问）。 通过将某个元素放入Vector、CopyOnWriteArrayList、CopyOnWriteArraySet、synchronizedList或synchronizedSet中，可以将该元素安全地发布到任何从这些容器中访问该元素的线程。 通过将某个元素放入BlockingQueue或者ConcurrentLinkedQueue中，可以将该元素安全地发布到任何从这些队列中访问该元素的线程。 要发布一个静态构造的对象，最简单和最安全的方式是使用静态的初始化器 public static Holder holder=new Holder（42） 静态初始化器由JVM在类的初始化阶段执行。由于在JVM内部存在着同步机制，因此通过这种方式初始化的任何对象都可以被安全地发布 3.5.4 事实不可变对象 # 如果对象在发布后不会被修改，那么对于其他在没有额外同步的情况下安全地访问这些对象的线程来说，安全发布是足够的。 如果对象从技术上来看是可变的，但其状态在发布后不会再改变，那么把这种对象称为“事实不可变对象（Effectively Immutable Object）” 通过使用事实不可变对象，不仅可以简化开发过程，而且还能由于减少了同步而提高性能。 例如，Date本身是可变的￼，但如果将它作为不可变对象来使用，那么在多个线程之间共享Date对象时，就可以省去对锁的使用 3.5.5 可变对象 # 如果对象在构造后可以修改，那么安全发布只能确保“发布当时”状态的可见性。对于可变对象，不仅在发布对象时需要使用同步，而且在每次对象访问时同样需要使用同步来确保后续修改操作的可见性。 在并发程序中使用和共享对象时，可以使用一些实用的策略，包括： 线程封闭。线程封闭的对象只能由一个线程拥有，对象被封闭在该线程中，并且只能由这个线程修改。 只读共享。在没有额外同步的情况下，共享的只读对象可以由多个线程并发访问，但任何线程都不能修改它。共享的只读对象包括不可变对象和事实不可变对象。 线程安全共享。线程安全的对象在其内部实现同步，因此多个线程可以通过对象的公有接口来进行访问而不需要进一步的同步。 保护对象。被保护的对象只能通过持有特定的锁来访问。保护对象包括封装在其他线程安全对象中的对象，以及已发布的并且由某个特定锁保护的对象。 3.5.6 安全地共享对象 # 第4章 对象的组合 # 4.1 设计线程安全的类 # 4.2 实例封闭 # 4.3 线程安全性的委托 # 4.4 在现有的线程安全类中添加功能 # 4.5 将同步策略文档化 # 第5章 基础构建模块 # 5.1 同步容器类 # 5.2 并发容器 # 5.3 阻塞队列和生产者-消费者模式 # 5.4 阻塞方法与中断方法 # 5.5 同步工具类 # 5.6 构建高效且可伸缩的结果缓存 # 第6章 任务执行 # 6.1 在线程中执行任务 # 6.2 Executor框架 # 6.3 找出可利用的并行性 # 第7章 取消与关闭 # 7.1 任务取消 # 7.2 停止基于线程的服务 # 7.3 处理非正常的线程终止 # 7.4 JVM关闭 # 第8章 线程池的使用 # 8.1 在任务与执行策略之间的隐性耦合 # 8.2 设置线程池的大小 # 8.3 配置ThreadPoolExecutor # 8.4 扩展ThreadPoolExecutor # 8.5 递归算法的并行化 # 第9章 图形用户界面应用程序 # 9.1 为什么GUI是单线程的 # 9.2 短时间的GUI任务 # 9.3 长时间的GUI任务 # 9.4 共享数据模型 # 9.5 其他形式的单线程子系统 # 第10章 避免活跃性危险 # 10.1 死锁 # 10.2 死锁的避免与诊断 # 10.3 其他活跃性危险 # 第11章 性能与可伸缩性 # 11.1 对性能的思考 # 11.2 Amdahl定律 # 11.3 线程引入的开销 # 11.4 减少锁的竞争 # 11.5 示例：比较Map的性能 # 11.6 减少上下文切换的开销 # 第12章 并发程序的测试 # 12.1 正确性测试 # 12.2 性能测试 # 12.3 避免性能测试的陷阱 # 12.4 其他的测试方法 # 第13章 显式锁 # 13.1 Lock与ReentrantLock # 13.2 性能考虑因素 # 13.3 公平性 # 13.4 在synchronized和ReentrantLock之间进行选择 # 13.5 读-写锁 # 第14章 构建自定义的同步工具 # 14.1 状态依赖性的管理 # 14.2 使用条件队列 # 14.3 显式的Condition对象 # 14.4 Synchronizer剖析 # 14.5 AbstractQueuedSynchronizer # 14.6 java.util.concurrent同步器类中的AQS # 第15章 原子变量与非阻塞同步机制 # 15.1 锁的劣势 # 15.2 硬件对并发的支持 # 15.3 原子变量类 # 15.4 非阻塞算法 # 第16章 Java内存模型 # 16.1 什么是内存模型，为什么需要它 # 16.2 发布 # 16.3 初始化过程中的安全性 # "},{"id":59,"href":"/zh/post/computer-science/linux/","title":"linux","section":"Computer Science","content":" linux # resources # 鸟哥的Linux私房菜：基础学习篇 第四版 tail # tail -f xxxx "},{"id":60,"href":"/zh/zh/post/computer-science/linux/","title":"linux","section":"Computer Science","content":" linux # resources # 鸟哥的Linux私房菜：基础学习篇 第四版 tail # tail -f xxxx "},{"id":61,"href":"/zh/post/books/computer-science/python%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/","title":"Python神经网络编程","section":"Computer Science","content":" 第1章 神经网络如何工作 # "},{"id":62,"href":"/zh/zh/post/books/computer-science/python%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/","title":"Python神经网络编程","section":"Computer Science","content":" 第1章 神经网络如何工作 # "},{"id":63,"href":"/zh/post/books/computer-science/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/","title":"Redis设计与实现","section":"Computer Science","content":" 第2章 简单动态字符串 # Redis只会使用C字符串作为字面量，在大多数情况下，Redis使用SDS（Simple Dynamic String，简单动态字符串）作为字符串表示。 比起C字符串，SDS具有以下优点： 1）常数复杂度获取字符串长度。 2）杜绝缓冲区溢出。 3）减少修改字符串长度时所需的内存重分配次数。 4）二进制安全。 5）兼容部分C字符串函数 第3章 链表 # 链表被广泛用于实现Redis的各种功能，比如列表键、发布与订阅、慢查询、监视器等。 每个链表节点由一个listNode结构来表示，每个节点都有一个指向前置节点和后置节点的指针，所以Redis的链表实现是双端链表。 每个链表使用一个list结构来表示，这个结构带有表头节点指针、表尾节点指针，以及链表长度等信息。 因为链表表头节点的前置节点和表尾节点的后置节点都指向NULL，所以Redis的链表实现是无环链表。 通过为链表设置不同的类型特定函数，Redis的链表可以用于保存各种不同类型的值。 第4章 字典 # 字典被广泛用于实现Redis的各种功能，其中包括数据库和哈希键。 Redis中的字典使用哈希表作为底层实现，每个字典带有两个哈希表，一个平时使用，另一个仅在进行rehash时使用。 当字典被用作数据库的底层实现，或者哈希键的底层实现时，Redis使用MurmurHash2算法来计算键的哈希值。 哈希表使用链地址法来解决键冲突，被分配到同一个索引上的多个键值对会连接成一个单向链表。 在对哈希表进行扩展或者收缩操作时，程序需要将现有哈希表包含的所有键值对rehash到新哈希表里面，并且这个rehash过程并不是一次性地完成的，而是渐进式地完成的。 第5章 跳跃表 # 跳跃表是有序集合的底层实现之一。 Redis的跳跃表实现由zskiplist和zskiplistNode两个结构组成，其中zskiplist用于保存跳跃表信息（比如表头节点、表尾节点、长度），而zskiplistNode则用于表示跳跃表节点。 每个跳跃表节点的层高都是1至32之间的随机数。 在同一个跳跃表中，多个节点可以包含相同的分值，但每个节点的成员对象必须是唯一的。 跳跃表中的节点按照分值大小进行排序，当分值相同时，节点按照成员对象的大小进行排序。 第6章 整数集合 # 整数集合是集合键的底层实现之一 整数集合的底层实现为数组，这个数组以有序、无重复的方式保存集合元素，在有需要时，程序会根据新添加元素的类型，改变这个数组的类型 升级操作为整数集合带来了操作上的灵活性，并且尽可能地节约了内存 整数集合只支持升级操作，不支持降级操作 第7章 压缩列表 # 压缩列表是一种为节约内存而开发的顺序型数据结构 压缩列表被用作列表键和哈希键的底层实现之一 压缩列表可以包含多个节点，每个节点可以保存一个字节数组或者整数值 添加新节点到压缩列表，或者从压缩列表中删除节点，可能会引发连锁更新操作，但这种操作出现的几率并不高 第8章 对象 # Redis使用对象来表示数据库中的键和值，每次当我们在Redis的数据库中新创建一个键值对时，我们至少会创建两个对象，一个对象用作键值对的键（键对象），另一个对象用作键值对的值（值对象） 对象的类型 字符串对象 REDIS_STRING 列表对象 REDIS_LIST 哈希对象 REDIS_HASH 集合对象 REDIS_SET 有序集合对象 REDIS_ZSET 对于Redis数据库保存的键值对来说，键总是一个字符串对象，而值则可以是字符串对象、列表对象、哈希对象、集合对象或者有序集合对象的其中一种 当我们称呼一个数据库键为“字符串键”时，我们指的是“这个数据库键所对应的值为字符串对象” 当我们称呼一个键为“列表键”时，我们指的是“这个数据库键所对应的值为列表对象” TYPE命令的实现方式也与此类似，当我们对一个数据库键执行TYPE命令时，命令返回的结果为数据库键对应的值对象的类型，而不是键对象的类型 因为键的类型始终为字符串 "},{"id":64,"href":"/zh/zh/post/books/computer-science/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/","title":"Redis设计与实现","section":"Computer Science","content":" 第2章 简单动态字符串 # Redis只会使用C字符串作为字面量，在大多数情况下，Redis使用SDS（Simple Dynamic String，简单动态字符串）作为字符串表示。 比起C字符串，SDS具有以下优点： 1）常数复杂度获取字符串长度。 2）杜绝缓冲区溢出。 3）减少修改字符串长度时所需的内存重分配次数。 4）二进制安全。 5）兼容部分C字符串函数 第3章 链表 # 链表被广泛用于实现Redis的各种功能，比如列表键、发布与订阅、慢查询、监视器等。 每个链表节点由一个listNode结构来表示，每个节点都有一个指向前置节点和后置节点的指针，所以Redis的链表实现是双端链表。 每个链表使用一个list结构来表示，这个结构带有表头节点指针、表尾节点指针，以及链表长度等信息。 因为链表表头节点的前置节点和表尾节点的后置节点都指向NULL，所以Redis的链表实现是无环链表。 通过为链表设置不同的类型特定函数，Redis的链表可以用于保存各种不同类型的值。 第4章 字典 # 字典被广泛用于实现Redis的各种功能，其中包括数据库和哈希键。 Redis中的字典使用哈希表作为底层实现，每个字典带有两个哈希表，一个平时使用，另一个仅在进行rehash时使用。 当字典被用作数据库的底层实现，或者哈希键的底层实现时，Redis使用MurmurHash2算法来计算键的哈希值。 哈希表使用链地址法来解决键冲突，被分配到同一个索引上的多个键值对会连接成一个单向链表。 在对哈希表进行扩展或者收缩操作时，程序需要将现有哈希表包含的所有键值对rehash到新哈希表里面，并且这个rehash过程并不是一次性地完成的，而是渐进式地完成的。 第5章 跳跃表 # 跳跃表是有序集合的底层实现之一。 Redis的跳跃表实现由zskiplist和zskiplistNode两个结构组成，其中zskiplist用于保存跳跃表信息（比如表头节点、表尾节点、长度），而zskiplistNode则用于表示跳跃表节点。 每个跳跃表节点的层高都是1至32之间的随机数。 在同一个跳跃表中，多个节点可以包含相同的分值，但每个节点的成员对象必须是唯一的。 跳跃表中的节点按照分值大小进行排序，当分值相同时，节点按照成员对象的大小进行排序。 第6章 整数集合 # 整数集合是集合键的底层实现之一 整数集合的底层实现为数组，这个数组以有序、无重复的方式保存集合元素，在有需要时，程序会根据新添加元素的类型，改变这个数组的类型 升级操作为整数集合带来了操作上的灵活性，并且尽可能地节约了内存 整数集合只支持升级操作，不支持降级操作 第7章 压缩列表 # 压缩列表是一种为节约内存而开发的顺序型数据结构 压缩列表被用作列表键和哈希键的底层实现之一 压缩列表可以包含多个节点，每个节点可以保存一个字节数组或者整数值 添加新节点到压缩列表，或者从压缩列表中删除节点，可能会引发连锁更新操作，但这种操作出现的几率并不高 第8章 对象 # Redis使用对象来表示数据库中的键和值，每次当我们在Redis的数据库中新创建一个键值对时，我们至少会创建两个对象，一个对象用作键值对的键（键对象），另一个对象用作键值对的值（值对象） 对象的类型 字符串对象 REDIS_STRING 列表对象 REDIS_LIST 哈希对象 REDIS_HASH 集合对象 REDIS_SET 有序集合对象 REDIS_ZSET 对于Redis数据库保存的键值对来说，键总是一个字符串对象，而值则可以是字符串对象、列表对象、哈希对象、集合对象或者有序集合对象的其中一种 当我们称呼一个数据库键为“字符串键”时，我们指的是“这个数据库键所对应的值为字符串对象” 当我们称呼一个键为“列表键”时，我们指的是“这个数据库键所对应的值为列表对象” TYPE命令的实现方式也与此类似，当我们对一个数据库键执行TYPE命令时，命令返回的结果为数据库键对应的值对象的类型，而不是键对象的类型 因为键的类型始终为字符串 "},{"id":65,"href":"/zh/post/books/computer-science/spring-cloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E4%B8%8E%E8%BF%9B%E9%98%B6/","title":"Spring Cloud微服务：入门、实战与进阶","section":"Computer Science","content":" 1.3 什么是Spring Cloud # Eureka 服务注册中心，用于服务管理 Ribbon 基于客户端的负载均衡组件 Hystrix 容错框架，能够防止服务的雪崩效应 Feign Web服务客户端，能够简化HTTP接口的调用 Zuul API网关，提供路由转发、请求过滤等功能 Config 分布式配置管理 Sleuth 服务跟踪 Stream 构建消息驱动的微服务应用程序的框架 Bus 消息代理的集群消息总线。 第3章　Eureka注册中心 # Spring Cloud Eureka是一个基于REST的服务，并且提供了基于Java的客户端组件，能够非常方便地将服务注册到Spring Cloud Eureka中进行统一管理。 服务治理是微服务架构中必不可少的一部分，阿里开源的Dubbo框架就是针对服务治理的。服务治理必须要有一个注册中心，除了用Eureka作为注册中心外，我们还可以使用Consul、Etcd、Zookeeper等来作为服务的注册中心。 用过Dubbo的读者应该清楚，Dubbo中也有几种注册中心，比如基于Zookeeper、基于Redis等，不过用得最多的还是Zookeeper方式。至于使用哪种方式都是可以的，注册中心无非就是管理所有服务的信息和状态。 程序也是一样，当你需要调用某一个服务的时候，你会先去Eureka中去拉取服务列表，查看你调用的服务在不在其中，在的话就拿到服务地址、端口等信息，然后调用。 为什么Eureka比Zookeeper更适合作为注册中心呢？ 主要是因为Eureka是基于AP原则构建的，而ZooKeeper是基于CP原则构建的。在分布式系统领域有个著名的CAP定理，即C为数据一致性；A为服务可用性；P为服务对网络分区故障的容错性。这三个特性在任何分布式系统中都不能同时满足，最多同时满足两个。 Zookeeper有一个Leader，而且在这个Leader无法使用的时候通过Paxos(ZAB)算法选举出一个新的Leader。这个Leader的任务就是保证写数据的时候只向这个Leader写入，Leader会同步信息到其他节点。通过这个操作就可以保证数据的一致性。 总而言之，想要保证AP就要用Eureka，想要保证CP就要用Zookeeper。Dubbo中大部分都是基于Zookeeper作为注册中心的。Spring Cloud中当然首选Eureka。 第4章　客户端负载均衡Ribbon # 目前主流的负载方案分为两种：一种是集中式负载均衡，在消费者和服务提供方中间使用独立的代理方式进行负载，有硬件的（比如F5），也有软件的（比如Nginx）。另一种则是客户端自己做负载均衡，根据自己的请求情况做负载，Ribbon就属于客户端自己做负载。 Ribbon作为一款客户端负载均衡框架，默认的负载策略是轮询，同时也提供了很多其他的策略，能够让用户根据自身的业务需求进行选择。 第6章　Hystrix服务容错处理 # 在微服务架构中存在多个可直接调用的服务，这些服务若在调用时出现故障会导致连锁效应，也就是可能会让整个系统变得不可用，这种情况我们称之为服务雪崩效应。 Hystrix是Netflix针对微服务分布式系统采用的熔断保护中间件，相当于电路中的保险丝。 "},{"id":66,"href":"/zh/zh/post/books/computer-science/spring-cloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E4%B8%8E%E8%BF%9B%E9%98%B6/","title":"Spring Cloud微服务：入门、实战与进阶","section":"Computer Science","content":" 1.3 什么是Spring Cloud # Eureka 服务注册中心，用于服务管理 Ribbon 基于客户端的负载均衡组件 Hystrix 容错框架，能够防止服务的雪崩效应 Feign Web服务客户端，能够简化HTTP接口的调用 Zuul API网关，提供路由转发、请求过滤等功能 Config 分布式配置管理 Sleuth 服务跟踪 Stream 构建消息驱动的微服务应用程序的框架 Bus 消息代理的集群消息总线。 第3章　Eureka注册中心 # Spring Cloud Eureka是一个基于REST的服务，并且提供了基于Java的客户端组件，能够非常方便地将服务注册到Spring Cloud Eureka中进行统一管理。 服务治理是微服务架构中必不可少的一部分，阿里开源的Dubbo框架就是针对服务治理的。服务治理必须要有一个注册中心，除了用Eureka作为注册中心外，我们还可以使用Consul、Etcd、Zookeeper等来作为服务的注册中心。 用过Dubbo的读者应该清楚，Dubbo中也有几种注册中心，比如基于Zookeeper、基于Redis等，不过用得最多的还是Zookeeper方式。至于使用哪种方式都是可以的，注册中心无非就是管理所有服务的信息和状态。 程序也是一样，当你需要调用某一个服务的时候，你会先去Eureka中去拉取服务列表，查看你调用的服务在不在其中，在的话就拿到服务地址、端口等信息，然后调用。 为什么Eureka比Zookeeper更适合作为注册中心呢？ 主要是因为Eureka是基于AP原则构建的，而ZooKeeper是基于CP原则构建的。在分布式系统领域有个著名的CAP定理，即C为数据一致性；A为服务可用性；P为服务对网络分区故障的容错性。这三个特性在任何分布式系统中都不能同时满足，最多同时满足两个。 Zookeeper有一个Leader，而且在这个Leader无法使用的时候通过Paxos(ZAB)算法选举出一个新的Leader。这个Leader的任务就是保证写数据的时候只向这个Leader写入，Leader会同步信息到其他节点。通过这个操作就可以保证数据的一致性。 总而言之，想要保证AP就要用Eureka，想要保证CP就要用Zookeeper。Dubbo中大部分都是基于Zookeeper作为注册中心的。Spring Cloud中当然首选Eureka。 第4章　客户端负载均衡Ribbon # 目前主流的负载方案分为两种：一种是集中式负载均衡，在消费者和服务提供方中间使用独立的代理方式进行负载，有硬件的（比如F5），也有软件的（比如Nginx）。另一种则是客户端自己做负载均衡，根据自己的请求情况做负载，Ribbon就属于客户端自己做负载。 Ribbon作为一款客户端负载均衡框架，默认的负载策略是轮询，同时也提供了很多其他的策略，能够让用户根据自身的业务需求进行选择。 第6章　Hystrix服务容错处理 # 在微服务架构中存在多个可直接调用的服务，这些服务若在调用时出现故障会导致连锁效应，也就是可能会让整个系统变得不可用，这种情况我们称之为服务雪崩效应。 Hystrix是Netflix针对微服务分布式系统采用的熔断保护中间件，相当于电路中的保险丝。 "},{"id":67,"href":"/zh/post/books/%E5%AE%8F%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6-%E7%AC%AC%E4%B8%89%E7%89%88/","title":"宏观经济学 第三版","section":"Books","content":" 宏观经济学 第三版 # 第1章 经济学原理的实践 # 第2章 经济科学：运用数据和模型理解世界 # 第3章 优化：竭力做到最好 # 第4章 需求，供给与均衡 # 第5章 国家财富：定义和测算宏观经济总量 # 第6章 总收入 # 第7章 经济增长 # 第8章 为什么很多地区仍然不发达？ # 第9章 就业与失业 # 第10章 信贷市场 # 信贷：我们把包括企业家、购房者和学生在内的借款主体称为债务人，他们所借入的资金被称为信贷\n借款当然不是免费的，借款人需要支付利息。借款的初始金额被称为本金。利率是借款者在偿还本金之外，需要（在满一年时）为每1美元贷款支付的额外费用。也可以说，利率就是一笔1美元贷款的年度成本。\n如果你借了1年期利率为i的L美元，1年后你要偿还本金L美元加上i×L美元的利息。为了和实际利率区分开来，我们把利率i称为名义利率。\n实际利率=名义利率-通货膨胀率\n实际GDP=名义GDP-通货膨胀率 几乎所有的贷款都是以名义利率发放的 我现在理解了韩秀云说的贷款买房比全款买房更好，因为实际利率会随着通货膨胀越来越低，甚至可能低于越来的本金 通货膨胀率指的是整体经济中物价上涨的速度。\n其他条件不变时，通货膨胀率越高，企业销售的商品和服务价格就会越高，在给定的名义利率下偿还贷款就会越容易。 信贷需求曲线：信贷需求量与实际利率之间的关系\n政府所感知到的商业机会变化、家庭偏好或预期的变化、政府政策的变化，会使得信贷需求曲线左移或右移 实际利率：人们因存钱而得到的回报，因为今天存的1美元，在一年后的购买力是1+r美元，其中r是实际利率\n换句话说，实际利率是当前消费的机会成本，也就是你基于未来的购买力而放弃的东西。因此，较高的实际利率会增加当前消费的机会成本，鼓励更高水平的储蓄。 真实市场中，为了补偿出借人，具有不同违约风险的借款者需面对不同的实际利率。 信贷供给曲线：信贷供给量与实际利率之间的关系\n信贷供给曲线的移动则源于实际利率不变的情况下，追求优化的经济主体储蓄动机的变化（家庭储蓄动机的变化、企业储蓄动机的变化） 人们为什么要储蓄？\n为退休储蓄 为孩子存钱 为一些可预见的大额支出而存钱 投资个人事业而存钱 以备不时之需 信贷市场：借款者从储蓄者那里获取资金的市场，有时也被称为可贷资金市场\n信贷市场均衡：信贷供给曲线与信贷需求曲线的交点所对应的实际利率和信贷量 交点决定了市场中的信贷总量(Q*)和均衡实际利率(r*)。在均衡实际利率下，信贷需求量等于信贷供给量。实际利率高于均衡水平将导致超额的信贷供给，这通常会给实际利率带来下行压力。实际利率低于均衡水平将导致超额的信贷需求，给实际利率带来上行压力。 信贷市场的作用：通过使储蓄者把多余的钱出借给借款者，信贷市场改善了经济中的资源配置\n金融资本：金融资本存在多种不同的形式，包括信贷（也被称为债务）和股权。\n当一个储蓄者将其存款变成信贷时，他就把自己的储蓄借给了另一个人，换来的是连本带息偿还贷款的承诺。 当一个储蓄者把自己的存款变成股权时，他就利用其储蓄变成了一家公司的股东，这意味着他获得了公司的所有权和对公司未来利润的索取权。这些利润会以股息的形式支付给公司股东。 独角兽：越来越多科技初创公司的市值超过10亿美元。在向公众发行股票之前估值超过这一门槛的公司被称为独角兽。\n第11章 货币体系 # 第12章 短期波动 # 第13章 逆周期宏观经济政策 # 第14章 宏观经济学和国际贸易 # 第15章 开放经济的宏观经济学 # "},{"id":68,"href":"/zh/zh/post/books/%E5%AE%8F%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6-%E7%AC%AC%E4%B8%89%E7%89%88/","title":"宏观经济学 第三版","section":"Books","content":" 宏观经济学 第三版 # 第1章 经济学原理的实践 # 第2章 经济科学：运用数据和模型理解世界 # 第3章 优化：竭力做到最好 # 第4章 需求，供给与均衡 # 第5章 国家财富：定义和测算宏观经济总量 # 第6章 总收入 # 第7章 经济增长 # 第8章 为什么很多地区仍然不发达？ # 第9章 就业与失业 # 第10章 信贷市场 # 信贷：我们把包括企业家、购房者和学生在内的借款主体称为债务人，他们所借入的资金被称为信贷\n借款当然不是免费的，借款人需要支付利息。借款的初始金额被称为本金。利率是借款者在偿还本金之外，需要（在满一年时）为每1美元贷款支付的额外费用。也可以说，利率就是一笔1美元贷款的年度成本。\n如果你借了1年期利率为i的L美元，1年后你要偿还本金L美元加上i×L美元的利息。为了和实际利率区分开来，我们把利率i称为名义利率。\n实际利率=名义利率-通货膨胀率\n实际GDP=名义GDP-通货膨胀率 几乎所有的贷款都是以名义利率发放的 我现在理解了韩秀云说的贷款买房比全款买房更好，因为实际利率会随着通货膨胀越来越低，甚至可能低于越来的本金 通货膨胀率指的是整体经济中物价上涨的速度。\n其他条件不变时，通货膨胀率越高，企业销售的商品和服务价格就会越高，在给定的名义利率下偿还贷款就会越容易。 信贷需求曲线：信贷需求量与实际利率之间的关系\n政府所感知到的商业机会变化、家庭偏好或预期的变化、政府政策的变化，会使得信贷需求曲线左移或右移 实际利率：人们因存钱而得到的回报，因为今天存的1美元，在一年后的购买力是1+r美元，其中r是实际利率\n换句话说，实际利率是当前消费的机会成本，也就是你基于未来的购买力而放弃的东西。因此，较高的实际利率会增加当前消费的机会成本，鼓励更高水平的储蓄。 真实市场中，为了补偿出借人，具有不同违约风险的借款者需面对不同的实际利率。 信贷供给曲线：信贷供给量与实际利率之间的关系\n信贷供给曲线的移动则源于实际利率不变的情况下，追求优化的经济主体储蓄动机的变化（家庭储蓄动机的变化、企业储蓄动机的变化） 人们为什么要储蓄？\n为退休储蓄 为孩子存钱 为一些可预见的大额支出而存钱 投资个人事业而存钱 以备不时之需 信贷市场：借款者从储蓄者那里获取资金的市场，有时也被称为可贷资金市场\n信贷市场均衡：信贷供给曲线与信贷需求曲线的交点所对应的实际利率和信贷量 交点决定了市场中的信贷总量(Q*)和均衡实际利率(r*)。在均衡实际利率下，信贷需求量等于信贷供给量。实际利率高于均衡水平将导致超额的信贷供给，这通常会给实际利率带来下行压力。实际利率低于均衡水平将导致超额的信贷需求，给实际利率带来上行压力。 信贷市场的作用：通过使储蓄者把多余的钱出借给借款者，信贷市场改善了经济中的资源配置\n金融资本：金融资本存在多种不同的形式，包括信贷（也被称为债务）和股权。\n当一个储蓄者将其存款变成信贷时，他就把自己的储蓄借给了另一个人，换来的是连本带息偿还贷款的承诺。 当一个储蓄者把自己的存款变成股权时，他就利用其储蓄变成了一家公司的股东，这意味着他获得了公司的所有权和对公司未来利润的索取权。这些利润会以股息的形式支付给公司股东。 独角兽：越来越多科技初创公司的市值超过10亿美元。在向公众发行股票之前估值超过这一门槛的公司被称为独角兽。\n第11章 货币体系 # 第12章 短期波动 # 第13章 逆周期宏观经济政策 # 第14章 宏观经济学和国际贸易 # 第15章 开放经济的宏观经济学 # "},{"id":69,"href":"/zh/post/books/computer-science/%E5%89%91%E6%8C%87offer/","title":"剑指Offer","section":"Computer Science","content":" 剑指Offer（专项突破版） 第1章 整数 # 1.1 整数的基础知识 # 1.2 二进制 # 1.3 本章小结 # 第2章 数组 # 2.1 数组的基础知识 # 2.2 双指针 # 2.3 累加数组数字求子数组之和 22 # 2.4 本章小结 28 # 第3章 字符串 30 # 3.1 字符串的基础知识 30 # 3.2 双指针 31 # 3.3 回文字符串 41 # 3.4 本章小结 45 # 第4章 链表 46 # 4.1 链表的基础知识 46 # 4.2 哨兵节点 47 # 4.3 双指针 50 # 4.4 反转链表 58 # 4.5 双向链表和循环链表 66 # 4.6 本章小结 71 # 第5章 哈希表 73 # 5.1 哈希表的基础知识 73 # 5.2 哈希表的设计 74 # 5.3 哈希表的应用 82 # 5.4 本章小结 91 # 第6章 栈 92 # 6.1 栈的基础知识 92 # 6.2 栈的应用 93 # 6.3 本章小结 108 # 第7章 队列 109 # 7.1 队列的基础知识 109 # 7.2 队列的应用 110 # 7.3 二叉树的广度优先搜索 114 # 7.4 本章小结 125 # 第8章 树 126 # 8.1 树的基础知识 126 # 8.2 二叉树的深度优先搜索 127 # 8.3 二叉搜索树 141 # 8.4 TreeSet和TreeMap的应用 153 # 8.5 本章小结 160 # 第9章 堆 161 # 9.1 堆的基础知识 161 # 9.2 堆的应用 165 # 9.3 本章小结 172 # 第10章 前缀树 174 # 10.1 前缀树的基础知识 174 # 10.2 前缀树的应用 179 # 10.3 本章小结 191 # 第11章 二分查找 192 # 11.1 二分查找的基础知识 192 # 11.2 在排序数组中二分查找 193 # 11.3 在数值范围内二分查找 201 # 11.4 本章小结 205 # 第12章 排序 206 # 12.1 排序的基础知识 206 # 12.2 计数排序 208 # 12.3 快速排序 211 # 12.4 归并排序 215 # 12.5 本章小结 222 # 第13章 回溯法 224 # 13.1 回溯法的基础知识 224 # 13.2 集合的组合、排列 226 # 13.3 回溯法解决其他类型问题 235 # 13.4 本章小结 239 # 第14章 动态规划 241 # 14.1 动态规划的基础知识 241 # 14.2 单序列问题 248 # 14.3 双序列问题 266 # 14.4 矩阵路径问题 # 面试题98：路径的数目 # 分析确定状态转移方程 # 根据状态转移方程写递归代码 # 递归代码 # 优化空间效率 # 面试题99：最小路径之和 # 面试题100：三角形中最小路径之和 # 14.5 背包问题 # 0-1 背包问题 多重背包问题 完全背包问题 面试题101：分割等和子集 # 分析确定状态转移方程 # 根据状态转移方程写递归代码 # 根据状态转移方程写迭代代码 # 优化空间效率 # 面试题102：加减的目标值 # 面试题103：最小的硬币数目 # 分析确定状态转移方程 # 根据状态转移方程写代码 # 另一种思路 # 面试题104：排列的数目 # int[] nums = new int[1 2 3]; i = 3; f(i) = f(i - nums[0]) + f(i - nums[1]) + f(i - nums[2]); f(0) = 1; f(1) = f(0) + f(-1) + f(-2) = 1; f(2) = f(1) + f(0) + f(-1) = 2; f(3) = f(2) + f(1) + f(0) = 4; f(2) {1,1} {2} f(1) {1} f(0) {} 14.6 本章小结 # 第15章 图 305 # 15.1 图的基础知识 305 # 15.2 图的搜索 307 # 15.3 拓扑排序 333 # 15.4 并查集 342 # 15.5 本章小结 354 # "},{"id":70,"href":"/zh/zh/post/books/computer-science/%E5%89%91%E6%8C%87offer/","title":"剑指Offer","section":"Computer Science","content":" 剑指Offer（专项突破版） 第1章 整数 # 1.1 整数的基础知识 # 1.2 二进制 # 1.3 本章小结 # 第2章 数组 # 2.1 数组的基础知识 # 2.2 双指针 # 2.3 累加数组数字求子数组之和 22 # 2.4 本章小结 28 # 第3章 字符串 30 # 3.1 字符串的基础知识 30 # 3.2 双指针 31 # 3.3 回文字符串 41 # 3.4 本章小结 45 # 第4章 链表 46 # 4.1 链表的基础知识 46 # 4.2 哨兵节点 47 # 4.3 双指针 50 # 4.4 反转链表 58 # 4.5 双向链表和循环链表 66 # 4.6 本章小结 71 # 第5章 哈希表 73 # 5.1 哈希表的基础知识 73 # 5.2 哈希表的设计 74 # 5.3 哈希表的应用 82 # 5.4 本章小结 91 # 第6章 栈 92 # 6.1 栈的基础知识 92 # 6.2 栈的应用 93 # 6.3 本章小结 108 # 第7章 队列 109 # 7.1 队列的基础知识 109 # 7.2 队列的应用 110 # 7.3 二叉树的广度优先搜索 114 # 7.4 本章小结 125 # 第8章 树 126 # 8.1 树的基础知识 126 # 8.2 二叉树的深度优先搜索 127 # 8.3 二叉搜索树 141 # 8.4 TreeSet和TreeMap的应用 153 # 8.5 本章小结 160 # 第9章 堆 161 # 9.1 堆的基础知识 161 # 9.2 堆的应用 165 # 9.3 本章小结 172 # 第10章 前缀树 174 # 10.1 前缀树的基础知识 174 # 10.2 前缀树的应用 179 # 10.3 本章小结 191 # 第11章 二分查找 192 # 11.1 二分查找的基础知识 192 # 11.2 在排序数组中二分查找 193 # 11.3 在数值范围内二分查找 201 # 11.4 本章小结 205 # 第12章 排序 206 # 12.1 排序的基础知识 206 # 12.2 计数排序 208 # 12.3 快速排序 211 # 12.4 归并排序 215 # 12.5 本章小结 222 # 第13章 回溯法 224 # 13.1 回溯法的基础知识 224 # 13.2 集合的组合、排列 226 # 13.3 回溯法解决其他类型问题 235 # 13.4 本章小结 239 # 第14章 动态规划 241 # 14.1 动态规划的基础知识 241 # 14.2 单序列问题 248 # 14.3 双序列问题 266 # 14.4 矩阵路径问题 # 面试题98：路径的数目 # 分析确定状态转移方程 # 根据状态转移方程写递归代码 # 递归代码 # 优化空间效率 # 面试题99：最小路径之和 # 面试题100：三角形中最小路径之和 # 14.5 背包问题 # 0-1 背包问题 多重背包问题 完全背包问题 面试题101：分割等和子集 # 分析确定状态转移方程 # 根据状态转移方程写递归代码 # 根据状态转移方程写迭代代码 # 优化空间效率 # 面试题102：加减的目标值 # 面试题103：最小的硬币数目 # 分析确定状态转移方程 # 根据状态转移方程写代码 # 另一种思路 # 面试题104：排列的数目 # int[] nums = new int[1 2 3]; i = 3; f(i) = f(i - nums[0]) + f(i - nums[1]) + f(i - nums[2]); f(0) = 1; f(1) = f(0) + f(-1) + f(-2) = 1; f(2) = f(1) + f(0) + f(-1) = 2; f(3) = f(2) + f(1) + f(0) = 4; f(2) {1,1} {2} f(1) {1} f(0) {} 14.6 本章小结 # 第15章 图 305 # 15.1 图的基础知识 305 # 15.2 图的搜索 307 # 15.3 拓扑排序 333 # 15.4 并查集 342 # 15.5 本章小结 354 # "},{"id":71,"href":"/zh/post/books/computer-science/%E4%B8%80%E6%9C%AC%E4%B9%A6%E8%AE%B2%E9%80%8F-elasticsearch%E5%8E%9F%E7%90%86%E8%BF%9B%E9%98%B6%E4%B8%8E%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/","title":"一本书讲透 ElasticSearch：原理、进阶与工程实践","section":"Computer Science","content":" 第1章 Elastic Stack全景 # 首先，Elasticsearch支持各类应用、网站等的全文搜索，包括淘宝、京东等电商平台的搜索，360手机助手、豌豆荚等应用市场平台的搜索，以及腾讯文档、石墨文档等平台的全文检索服务。 许多知名企业，如58集团、唯品会、日志易、国投瑞银等，都使用Elasticsearch来快速分析和处理大量的日志数据，从而对业务运行状况进行实时的监控和故障排查。 许多知名企业的商业智能系统，如睿思BI、百度数据可视化Sugar BI、永洪BI等，都借助Elasticsearch的高效、实时的数据分析和可视化能力，帮助企业更好地理解市场趋势、优化决策过程。 ClickHouse ClickHouse是一款由俄罗斯搜索引擎Yandex开发并开源的列式存储数据库，专为**OLAP（在线分析处理）**场景设计。ClickHouse具有高速查询分析的能力，支持实时添加数据和修改结构，并且能够实现高度数据压缩比，从而有效节省存储空间。此外，ClickHouse支持SQL查询，易于使用和集成。 第2章 Elasticsearch基础知识 # 倒排索引 一本C语言图书末页的索引结构。这种结构揭示了核心关键词与页码之间的对应关系。这种关系模式可以视为倒排索引的实际例证。在此结构中，我们可以根据关键词快速找到包含这个关键词的内容的页码。这与倒排索引在接收关键词输入后能够迅速定位包含该关键词的文档的性质是一致的。借由这种类比，我们可以更为直观地理解倒排索引在数据查询中的关键作用。 数据索引化 数据索引化指的是数据在写入搜索引擎（本书中主要指Elasticsearch）的过程中，扫描文档中的每一个词项，结合分词器和词典对必要的词项建立倒排索引，同时指明该词项在文章中出现的次数和位置。 全文检索的前提是待检索的数据已经索引化，当用户查询时能根据建立的倒排索引进行查找。 全文检索的特点如下 只处理文本，不处理语义。 结果列表有相关度排序。 支持高亮显示结果数据。 原始的文本被切分为单个单词、短语或特殊标记后进行存储。 给定词与它的变体（如近义词）会被折叠为一个词，如electrification和ectric、mice和mouse、“土豆”和“马铃薯”、“西红柿”和“番茄”等，每组词均被视为同一个词。 2.2 Elasticsearch的核心概念 # 集群 Elasticsearch集群常用于处理大规模数据集，目的是实现容错和高可用。Elasticsearch集群需要一个唯一标识的集群名称来防止不必要的节点加入。集群大小从单个节点到数千个节点不等，具体大小取决于实际业务场景。 节点 节点是指一个Elasticsearch实例，更确切地说，它是一个Elasticsearch进程。节点可以部署到物理机或者虚拟机上。每当Elasticsearch启动时，节点就会开始运行。每个节点都有唯一标识的名称，在部署多节点集群环境的时候我们要注意不要写错节点名称。 索引 索引可以看作数据库中的一个表，它包含了一组具有相似结构的文档 在Elasticsearch中，数据以JSON格式的文档存储在索引内。 每个索引具有唯一的名称，以便在执行搜索、更新和删除操作时进行引用。 索引的名称可以由用户自定义，但必须全部小写。 分片 在了解分片是什么之前，让我们谈谈为什么需要分片。假设你有一个包含超大规模文档的索引，有总计1TB的数据。当前集群中有两个节点，每个节点有512GB的空间可用于存储数据。显然，整个索引无法存储在任何一个节点上，因此有必要以某种方式拆分索引的数据，否则会导致数据存储不完整。在这种情况下，索引的大小超过了单个节点的硬件限制，分片就派上用场了。分片通过将索引分成更小的部分来解决这个问题。 当处理涉及多个数据分片的查询时，Elasticsearch会将查询请求分发到各个相关的分片，并将它们的结果集进行聚合。 副本 分片可以被复制，被复制的分片称为“主分片”，如图2-3中的主分片1～4；主分片的复制版本称为“副本分片”或简称为“副本”，如图2-3中的副本1～4 创建索引时需要指定主分片，且主分片数一经指定就不支持动态更新了。而副本同样需要在创建索引时指定，每个分片可以有0或多个副本，副本数支持动态更新。 当某主分片所在的数据节点不可用时，会导致主分片丢失现象，若短时间内不对此采取补救措施，集群会将该分片对应的副本提升为新的主分片。 文档 关系型数据库将数据以行或元组为单位存储在数据库表中，而Elasticsearch将数据以文档为单位存储在索引中。 作为Elasticsearch的基本存储单元，文档是指存储在Elasticsearch索引中的JSON对象。文档中的数据由键值对构成。键是字段的名称，值是不同数据类型的字段。不同的数据类型包含但不限于字符串类型、数字类型、布尔类型、对象类型等。 字段 字段是Elasticsearch中最小的单个数据单元，类似于关系型数据库表中的字段。一般实战项目前期的设计环节都是根据业务需求拆分、定义字段，并且敲定字段类型。在上面航空类索引的示例中，“FlightNum”是字段，其含义为“航班号”，字段类型为keyword。 与关系型数据库不同的是，Elasticsearch的一个字段可以设定两种或两种以上的数据类型，通过定义multi-field来灵活地满足复杂的业务需求。 映射 不少初学者对映射(Mapping)这个概念会感觉不好理解。映射类似于关系型数据库中的Schema，可以近似地理解为**“表结构”**。 我们拿到一个业务需求后，往往会将业务细分会几个索引。每个索引都需要一个相对固定的表结构，包含但不限于字段名称、字段类型、是否需要分词、是否需要索引、是否需要存储、是否需要多字段类型等。这些都是设计映射时要考虑的问题。 分词 在英文文本中，空格就是切分语句或短语的“屏障”。但中文文本中则没有了这道“屏障”，于是分词就变得就不那么简单，需要由专门的分词算法构建的分词器来实现。 第3章 Elasticsearch集群部署 # 什么是堆内存\nJava中的堆是JVM所管理的最大的一块内存空间，主要用于存放各种类的实例对象。在Java中，堆被划分成两个不同的区域：新生代(Young)和老年代(Old)。新生代又被划分为3个区域：Eden、From Survivor、To Survivor。 这样划分的目的是使JVM更好地管理堆内存中的对象，包括内存的分配以及回收。 堆内存的作用是什么\n堆内存的唯一目的就是创建对象实例，所有的对象实例和数组都要在堆上分配。 堆内存如何配置\n默认情况下，Elasticsearch JVM使用的堆内存最小和最大值均为4 GB（8.X版本以上） 在转移到生产环境时，配置足够容量的堆大小以确保Elasticsearch功能和性能是必要的。 Elasticsearch将通过对Xms（最小堆大小）和Xmx（最大堆大小）的设置来分配jvm.options中指定的整个堆。 堆内存的值取决于服务器上可用的内存大小。Elasticsearch堆内存设置对其性能表现来说十分关键。建议将堆大小配置为服务器可用内存的50%，上限为32GB，且预留足够的内存给操作系统以提升缓存效率。合理调整堆内存大小可减轻垃圾回收工作的压力，优化查询速度和索引效率。请务必进行监控并根据实际需求来调整堆内存大小。 为什么堆内存不能超过物理机内存的一半\n堆对Elasticsearch来说绝对重要，它用于许多内存数据结构的快速操作。但还有另外一个非常重要的内存使用者——Lucene。 Lucene旨在利用底层操作系统来缓存内存中的数据结构。Lucene段存储在单个文件中。因为段一旦形成就不会改变，所以它们非常容易进行缓存，并且，底层操作系统会将热段保留在内存中以便更快地进行访问。这些段包括倒排索引（用于全文搜索）和正排索引（用于聚合）。 Lucene的性能依赖于与操作系统的这种交互。如果把所有可用的内存都给Elasticsearch堆，那么Lucene就不会有任何剩余的内存，这会严重影响其性能。针对内存的分配，通常的建议是将可用内存的一半分配给Elasticsearch堆，而保留剩下的一半。这种操作的核心在于平衡Elasticsearch堆和Lucene。剩余的内存看起来空闲，但其实并非如此，因为Lucene会利用这些“空闲”内存来提高搜索和索引的性能。这种内存分配策略确保了Elasticsearch与Lucene之间的高效协作，进而能够提升整体系统性能。 如果实际业务不需要在字符串字段上做聚合操作（开启text类型的fielddata），则可以考虑进一步降低堆大小。堆较小，就可以从Elasticsearch（更快的GC）和Lucene（更多内存缓存）中获得更好的性能。 Elasticsearch集群节点角色划分\n节点类型 主节点：负责集群管理和元数据维护，确保集群正常运行。 数据节点：负责存储、检索和处理数据，提供搜索和聚合功能。 协调节点：处理客户端请求，协调数据节点工作，优化分布式搜索。 ingest节点：即预处理节点，负责数据预处理，如过滤、转换等，准备好数据再将其索引到数据节点。 在Elasticsearch 8.X版本中，节点类型升级为节点角色。节点角色分得很细，包括数据节点角色、主节点角色、ingest节点角色、热节点角色等。 在Elasticsearch集群中，每个启动的Elasticsearch进程都可以叫作一个节点。以Elasticsearch 8.X版本集群为例，如果我们不手动设置节点角色，则默认节点角色为cdfhilmrstw 主节点 专用候选主节点(dedicated master-eligible node) 仅投票主节点(voting-only master-eligible node) 关于集群主节点配置，要强调一点：高可用性集群需要至少3个符合主节点资格的节点，其中至少两个不是仅投票节点。这样即使其中一个节点发生故障，该集群也能够选举出一个主节点。 数据节点 内容数据节点 热数据节点 热数据节点的用途主要是保存最近、最常访问的热数据，即经常被访问和更新的数据 温数据节点 冷数据节点 冷冻数据节点 ingest节点 这类节点通常执行由预处理管道组成的预处理任务 仅协调节点 这类节点的作用类似于智能负载均衡器，负责路由分发请求、聚拢（或叫作收集，可理解为分发的反过程）搜索或聚合结果 远程节点 这类节点用于跨集群检索或跨集群复制 机器学习节点 机器学习节点是一类特殊类型的节点，它专门用于运行机器学习功能。它们负责运行数据分析任务，如异常检测、预测和回归等。这类节点的功能是收费的，Elasticsearch开源版本并不提供。 转换节点 转换节点是一个特殊类型的节点，负责执行数据转换任务。数据转换是指将数据从一种格式或结构转换为另一种格式或结构的过程。在Elasticsearch中，这通常涉及对原始数据创建新的索引，并对新索引中的数据进行汇总、分组或其他转换操作，以便更有效地进行分析和查询。 Nginx+Elasticsearch Coordinate+Elasticsearch Master+Elasticsearch Node应该如何安装配置呢？可以只安装一个节点，然后拷贝并更改其他节点角色吗？\n先划分节点角色。节点不多的话可以一个个手动部署（部署好一个以后，可以在其他部署中进行拷贝，再修改角色、IP等）；节点非常多的话可以借助Ansible等脚本工具快速部署。 在Elasticsearch部署上，节点角色分为m、d、i等多种，它们在部署上各有什么优势？更推荐哪种？\nm代表主节点master，d代表数据节点data，i代表数据预处理节点ingest。不同节点角色有不同的应用场景，建议根据集群规模进行综合考虑。 请问在写入海量数据时，应该连接什么角色的节点，是专用协调节点还是数据节点？\n这要看节点规模和节点角色划分。如果已经有了独立协调节点，则连接独立协调节点。如果没有，则连接硬件配置较高的节点。 在进行节点角色的配置时，data_hot、data_warm、data_cold等角色和早期版本中自定义的attr属性有区别吗？\n新版本具有新特性，所以有区别。新的方式配置更为简洁，并且可读性强、用户体验优。 Elasticsearch的角色data、data_content、data_hot、data_warm、data_cold之间有什么区别？\n这涉及冷热集群架构的数据节点的分层处理机制。对于早期版本冷热集群架构中手动配置节点属性的部分，Elasticsearch 8.X版本做了精细切分，使得数据的冷热集群管理更为高效。尤其在默认迁移自动实现机制之后，早期版本的分片分配策略手动配置（如下方代码所示）变得不再必要。 Elasticsearch 8.X的data_content角色是什么？它和协调节点有什么区别？\n它们是两种完全不同的节点。data_content属于数据节点，是永久存储数据的地方。而协调节点是用来请求路由分发、结果汇聚处理的。 Elasticsearch集群核心配置解读\n开发模式和生产模式 默认情况下，Elasticsearch工作在开发模式(development mode)下。在该模式下，如果配置错误，则警告信息会写入日志文件，但节点依然是能启动的。而在生产模式(production mode)下，一旦出现配置错误，节点就无法正常启动了。这本质上是一种保护机制。 开发模式和生产模式的界限在于：当修改network.host的默认值之后，默认的开发模式会升级为生产模式。通俗地讲，如果开发者个人搭建集群，则推荐使用开发模式；如果企业级开发环境，务必使用生产模式。 Linux前置配置 修改文件描述符数目 首先，Elasticsearch在节点和HTTP客户端之间进行通信使用了大量的套接字，而套接字需要足够的文件描述符支持。 其次，在许多Linux发行版本中，每个进程默认有1024个文件描述符，这对Elasticsearch节点来说实在是太低了，何况该节点要处理数以百计的索引，所以要调大这个默认值。 修改最大映射数量 Elasticsearch对各种文件混合使用了niofs（非阻塞文件系统）和mmapfs（内存映射文件系统），以实现对各种文件的优化处理。为了保证系统的顺畅运行，需要合理配置最大映射数量(MMP)，以便有足够的虚拟内存可用于内存映射的文件。 path.data配置注意事项：\n不要修改data路径下的任何文件，手动修改会有数据损坏或丢失的风险。 不要尝试对数据目录进行备份，因为Elasticsearch不支持文件备份后的恢复操作。 使用快照snapshot命令对集群进行备份，使用restore命令进行恢复。 不要对数据路径进行病毒扫描，病毒扫描可能会阻止Elasticsearch工作，甚至修改数据目录内容。 在Elasticsearch系统中，为了保证数据安全，不同节点间的通信和数据传输通常采用HTTPS的加密协议。这样的设计能有效防止数据在传输过程中被窃取或篡改。同样，Elasticsearch与Kibana之间的互动也使用了HTTPS，以确保数据在交互过程中的安全性。\n第4章 Elasticsearch索引 # 4.1 索引的定义 # 索引是具有相同结构的文档的集合，由唯一索引名称标定。\n实战场景1：将采集的不同业务类型的数据存储到不同的索引。\n微博业务对应的索引weibo_index 新闻业务对应的索引news_index 博客业务对应的索引blog_index 以上3个索引包含的字段个数、字段名称、字段类型可能不完全一致。 实战场景2：按日期切分存储日志索引\n2025年1月的日志对应logs_202501 2025年3月的日志对应logs_202503 索引设置\n静态设置(static index settings)，只允许在创建索引时或者针对已关闭的索引进行设置。 设置主分片大小的参数是index.number_of_shards，只在创建索引时生效，不支持动态修改。默认主分片大小为1，且每个索引的分片数量上限默认为1024。此限制是一个安全限制，可防止索引分片数过多导致集群不稳定。 动态设置(dynamic index settings)，可以借助更新设置(update settings)的方式进行动态更新，更新后立即生效。 设置副本数参数为index.number_of_replicas，可以动态修改。 设置刷新频率参数为index.refresh_interval，可以动态修改。默认刷新频率参数值为1s，即每秒刷新一次。这1s决定了Elasticsearch是近实时的搜索引擎，而非准实时搜索引擎。如果业务层面对实时性的要求不高，可以考虑将该值调大。因为如果采用1s，则每秒都会生成一个新的分段，会影响写入性能。 max_result_window是Elasticsearch中的一个设置参数，用于控制搜索结果的最大窗口的大小。默认情况下，max_result_window的值为10000。这意味着在分页搜索时最多可以返回10000条数据。如果每页可显示10条数据，那么最多可以翻到1000页。 增大max_result_window的值可能会对Elasticsearch集群的性能产生影响，尤其是在处理大量数据时。因此，在根据实际需求调整此参数时，要权衡性能和查询范围之间的关系。如果需要遍历大量数据，则建议使用scroll API或search_after参数，以更高效地进行处理。 4.3 索引别名 # 场景1：面对PB级别的增量数据，对外提供服务的是基于日期切分的n个不同索引，每次检索都要指定数十个甚至数百个索引，非常麻烦。 场景2：线上提供服务的某个索引设计不合理，比如某字段分词定义不准确，那么如何保证对外提供服务不停止，也就是在不更改业务代码的前提下更换索引？ "},{"id":72,"href":"/zh/zh/post/books/computer-science/%E4%B8%80%E6%9C%AC%E4%B9%A6%E8%AE%B2%E9%80%8F-elasticsearch%E5%8E%9F%E7%90%86%E8%BF%9B%E9%98%B6%E4%B8%8E%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/","title":"一本书讲透 ElasticSearch：原理、进阶与工程实践","section":"Computer Science","content":" 第1章 Elastic Stack全景 # 首先，Elasticsearch支持各类应用、网站等的全文搜索，包括淘宝、京东等电商平台的搜索，360手机助手、豌豆荚等应用市场平台的搜索，以及腾讯文档、石墨文档等平台的全文检索服务。 许多知名企业，如58集团、唯品会、日志易、国投瑞银等，都使用Elasticsearch来快速分析和处理大量的日志数据，从而对业务运行状况进行实时的监控和故障排查。 许多知名企业的商业智能系统，如睿思BI、百度数据可视化Sugar BI、永洪BI等，都借助Elasticsearch的高效、实时的数据分析和可视化能力，帮助企业更好地理解市场趋势、优化决策过程。 ClickHouse ClickHouse是一款由俄罗斯搜索引擎Yandex开发并开源的列式存储数据库，专为**OLAP（在线分析处理）**场景设计。ClickHouse具有高速查询分析的能力，支持实时添加数据和修改结构，并且能够实现高度数据压缩比，从而有效节省存储空间。此外，ClickHouse支持SQL查询，易于使用和集成。 第2章 Elasticsearch基础知识 # 倒排索引 一本C语言图书末页的索引结构。这种结构揭示了核心关键词与页码之间的对应关系。这种关系模式可以视为倒排索引的实际例证。在此结构中，我们可以根据关键词快速找到包含这个关键词的内容的页码。这与倒排索引在接收关键词输入后能够迅速定位包含该关键词的文档的性质是一致的。借由这种类比，我们可以更为直观地理解倒排索引在数据查询中的关键作用。 数据索引化 数据索引化指的是数据在写入搜索引擎（本书中主要指Elasticsearch）的过程中，扫描文档中的每一个词项，结合分词器和词典对必要的词项建立倒排索引，同时指明该词项在文章中出现的次数和位置。 全文检索的前提是待检索的数据已经索引化，当用户查询时能根据建立的倒排索引进行查找。 全文检索的特点如下 只处理文本，不处理语义。 结果列表有相关度排序。 支持高亮显示结果数据。 原始的文本被切分为单个单词、短语或特殊标记后进行存储。 给定词与它的变体（如近义词）会被折叠为一个词，如electrification和ectric、mice和mouse、“土豆”和“马铃薯”、“西红柿”和“番茄”等，每组词均被视为同一个词。 2.2 Elasticsearch的核心概念 # 集群 Elasticsearch集群常用于处理大规模数据集，目的是实现容错和高可用。Elasticsearch集群需要一个唯一标识的集群名称来防止不必要的节点加入。集群大小从单个节点到数千个节点不等，具体大小取决于实际业务场景。 节点 节点是指一个Elasticsearch实例，更确切地说，它是一个Elasticsearch进程。节点可以部署到物理机或者虚拟机上。每当Elasticsearch启动时，节点就会开始运行。每个节点都有唯一标识的名称，在部署多节点集群环境的时候我们要注意不要写错节点名称。 索引 索引可以看作数据库中的一个表，它包含了一组具有相似结构的文档 在Elasticsearch中，数据以JSON格式的文档存储在索引内。 每个索引具有唯一的名称，以便在执行搜索、更新和删除操作时进行引用。 索引的名称可以由用户自定义，但必须全部小写。 分片 在了解分片是什么之前，让我们谈谈为什么需要分片。假设你有一个包含超大规模文档的索引，有总计1TB的数据。当前集群中有两个节点，每个节点有512GB的空间可用于存储数据。显然，整个索引无法存储在任何一个节点上，因此有必要以某种方式拆分索引的数据，否则会导致数据存储不完整。在这种情况下，索引的大小超过了单个节点的硬件限制，分片就派上用场了。分片通过将索引分成更小的部分来解决这个问题。 当处理涉及多个数据分片的查询时，Elasticsearch会将查询请求分发到各个相关的分片，并将它们的结果集进行聚合。 副本 分片可以被复制，被复制的分片称为“主分片”，如图2-3中的主分片1～4；主分片的复制版本称为“副本分片”或简称为“副本”，如图2-3中的副本1～4 创建索引时需要指定主分片，且主分片数一经指定就不支持动态更新了。而副本同样需要在创建索引时指定，每个分片可以有0或多个副本，副本数支持动态更新。 当某主分片所在的数据节点不可用时，会导致主分片丢失现象，若短时间内不对此采取补救措施，集群会将该分片对应的副本提升为新的主分片。 文档 关系型数据库将数据以行或元组为单位存储在数据库表中，而Elasticsearch将数据以文档为单位存储在索引中。 作为Elasticsearch的基本存储单元，文档是指存储在Elasticsearch索引中的JSON对象。文档中的数据由键值对构成。键是字段的名称，值是不同数据类型的字段。不同的数据类型包含但不限于字符串类型、数字类型、布尔类型、对象类型等。 字段 字段是Elasticsearch中最小的单个数据单元，类似于关系型数据库表中的字段。一般实战项目前期的设计环节都是根据业务需求拆分、定义字段，并且敲定字段类型。在上面航空类索引的示例中，“FlightNum”是字段，其含义为“航班号”，字段类型为keyword。 与关系型数据库不同的是，Elasticsearch的一个字段可以设定两种或两种以上的数据类型，通过定义multi-field来灵活地满足复杂的业务需求。 映射 不少初学者对映射(Mapping)这个概念会感觉不好理解。映射类似于关系型数据库中的Schema，可以近似地理解为**“表结构”**。 我们拿到一个业务需求后，往往会将业务细分会几个索引。每个索引都需要一个相对固定的表结构，包含但不限于字段名称、字段类型、是否需要分词、是否需要索引、是否需要存储、是否需要多字段类型等。这些都是设计映射时要考虑的问题。 分词 在英文文本中，空格就是切分语句或短语的“屏障”。但中文文本中则没有了这道“屏障”，于是分词就变得就不那么简单，需要由专门的分词算法构建的分词器来实现。 第3章 Elasticsearch集群部署 # 什么是堆内存\nJava中的堆是JVM所管理的最大的一块内存空间，主要用于存放各种类的实例对象。在Java中，堆被划分成两个不同的区域：新生代(Young)和老年代(Old)。新生代又被划分为3个区域：Eden、From Survivor、To Survivor。 这样划分的目的是使JVM更好地管理堆内存中的对象，包括内存的分配以及回收。 堆内存的作用是什么\n堆内存的唯一目的就是创建对象实例，所有的对象实例和数组都要在堆上分配。 堆内存如何配置\n默认情况下，Elasticsearch JVM使用的堆内存最小和最大值均为4 GB（8.X版本以上） 在转移到生产环境时，配置足够容量的堆大小以确保Elasticsearch功能和性能是必要的。 Elasticsearch将通过对Xms（最小堆大小）和Xmx（最大堆大小）的设置来分配jvm.options中指定的整个堆。 堆内存的值取决于服务器上可用的内存大小。Elasticsearch堆内存设置对其性能表现来说十分关键。建议将堆大小配置为服务器可用内存的50%，上限为32GB，且预留足够的内存给操作系统以提升缓存效率。合理调整堆内存大小可减轻垃圾回收工作的压力，优化查询速度和索引效率。请务必进行监控并根据实际需求来调整堆内存大小。 为什么堆内存不能超过物理机内存的一半\n堆对Elasticsearch来说绝对重要，它用于许多内存数据结构的快速操作。但还有另外一个非常重要的内存使用者——Lucene。 Lucene旨在利用底层操作系统来缓存内存中的数据结构。Lucene段存储在单个文件中。因为段一旦形成就不会改变，所以它们非常容易进行缓存，并且，底层操作系统会将热段保留在内存中以便更快地进行访问。这些段包括倒排索引（用于全文搜索）和正排索引（用于聚合）。 Lucene的性能依赖于与操作系统的这种交互。如果把所有可用的内存都给Elasticsearch堆，那么Lucene就不会有任何剩余的内存，这会严重影响其性能。针对内存的分配，通常的建议是将可用内存的一半分配给Elasticsearch堆，而保留剩下的一半。这种操作的核心在于平衡Elasticsearch堆和Lucene。剩余的内存看起来空闲，但其实并非如此，因为Lucene会利用这些“空闲”内存来提高搜索和索引的性能。这种内存分配策略确保了Elasticsearch与Lucene之间的高效协作，进而能够提升整体系统性能。 如果实际业务不需要在字符串字段上做聚合操作（开启text类型的fielddata），则可以考虑进一步降低堆大小。堆较小，就可以从Elasticsearch（更快的GC）和Lucene（更多内存缓存）中获得更好的性能。 Elasticsearch集群节点角色划分\n节点类型 主节点：负责集群管理和元数据维护，确保集群正常运行。 数据节点：负责存储、检索和处理数据，提供搜索和聚合功能。 协调节点：处理客户端请求，协调数据节点工作，优化分布式搜索。 ingest节点：即预处理节点，负责数据预处理，如过滤、转换等，准备好数据再将其索引到数据节点。 在Elasticsearch 8.X版本中，节点类型升级为节点角色。节点角色分得很细，包括数据节点角色、主节点角色、ingest节点角色、热节点角色等。 在Elasticsearch集群中，每个启动的Elasticsearch进程都可以叫作一个节点。以Elasticsearch 8.X版本集群为例，如果我们不手动设置节点角色，则默认节点角色为cdfhilmrstw 主节点 专用候选主节点(dedicated master-eligible node) 仅投票主节点(voting-only master-eligible node) 关于集群主节点配置，要强调一点：高可用性集群需要至少3个符合主节点资格的节点，其中至少两个不是仅投票节点。这样即使其中一个节点发生故障，该集群也能够选举出一个主节点。 数据节点 内容数据节点 热数据节点 热数据节点的用途主要是保存最近、最常访问的热数据，即经常被访问和更新的数据 温数据节点 冷数据节点 冷冻数据节点 ingest节点 这类节点通常执行由预处理管道组成的预处理任务 仅协调节点 这类节点的作用类似于智能负载均衡器，负责路由分发请求、聚拢（或叫作收集，可理解为分发的反过程）搜索或聚合结果 远程节点 这类节点用于跨集群检索或跨集群复制 机器学习节点 机器学习节点是一类特殊类型的节点，它专门用于运行机器学习功能。它们负责运行数据分析任务，如异常检测、预测和回归等。这类节点的功能是收费的，Elasticsearch开源版本并不提供。 转换节点 转换节点是一个特殊类型的节点，负责执行数据转换任务。数据转换是指将数据从一种格式或结构转换为另一种格式或结构的过程。在Elasticsearch中，这通常涉及对原始数据创建新的索引，并对新索引中的数据进行汇总、分组或其他转换操作，以便更有效地进行分析和查询。 Nginx+Elasticsearch Coordinate+Elasticsearch Master+Elasticsearch Node应该如何安装配置呢？可以只安装一个节点，然后拷贝并更改其他节点角色吗？\n先划分节点角色。节点不多的话可以一个个手动部署（部署好一个以后，可以在其他部署中进行拷贝，再修改角色、IP等）；节点非常多的话可以借助Ansible等脚本工具快速部署。 在Elasticsearch部署上，节点角色分为m、d、i等多种，它们在部署上各有什么优势？更推荐哪种？\nm代表主节点master，d代表数据节点data，i代表数据预处理节点ingest。不同节点角色有不同的应用场景，建议根据集群规模进行综合考虑。 请问在写入海量数据时，应该连接什么角色的节点，是专用协调节点还是数据节点？\n这要看节点规模和节点角色划分。如果已经有了独立协调节点，则连接独立协调节点。如果没有，则连接硬件配置较高的节点。 在进行节点角色的配置时，data_hot、data_warm、data_cold等角色和早期版本中自定义的attr属性有区别吗？\n新版本具有新特性，所以有区别。新的方式配置更为简洁，并且可读性强、用户体验优。 Elasticsearch的角色data、data_content、data_hot、data_warm、data_cold之间有什么区别？\n这涉及冷热集群架构的数据节点的分层处理机制。对于早期版本冷热集群架构中手动配置节点属性的部分，Elasticsearch 8.X版本做了精细切分，使得数据的冷热集群管理更为高效。尤其在默认迁移自动实现机制之后，早期版本的分片分配策略手动配置（如下方代码所示）变得不再必要。 Elasticsearch 8.X的data_content角色是什么？它和协调节点有什么区别？\n它们是两种完全不同的节点。data_content属于数据节点，是永久存储数据的地方。而协调节点是用来请求路由分发、结果汇聚处理的。 Elasticsearch集群核心配置解读\n开发模式和生产模式 默认情况下，Elasticsearch工作在开发模式(development mode)下。在该模式下，如果配置错误，则警告信息会写入日志文件，但节点依然是能启动的。而在生产模式(production mode)下，一旦出现配置错误，节点就无法正常启动了。这本质上是一种保护机制。 开发模式和生产模式的界限在于：当修改network.host的默认值之后，默认的开发模式会升级为生产模式。通俗地讲，如果开发者个人搭建集群，则推荐使用开发模式；如果企业级开发环境，务必使用生产模式。 Linux前置配置 修改文件描述符数目 首先，Elasticsearch在节点和HTTP客户端之间进行通信使用了大量的套接字，而套接字需要足够的文件描述符支持。 其次，在许多Linux发行版本中，每个进程默认有1024个文件描述符，这对Elasticsearch节点来说实在是太低了，何况该节点要处理数以百计的索引，所以要调大这个默认值。 修改最大映射数量 Elasticsearch对各种文件混合使用了niofs（非阻塞文件系统）和mmapfs（内存映射文件系统），以实现对各种文件的优化处理。为了保证系统的顺畅运行，需要合理配置最大映射数量(MMP)，以便有足够的虚拟内存可用于内存映射的文件。 path.data配置注意事项：\n不要修改data路径下的任何文件，手动修改会有数据损坏或丢失的风险。 不要尝试对数据目录进行备份，因为Elasticsearch不支持文件备份后的恢复操作。 使用快照snapshot命令对集群进行备份，使用restore命令进行恢复。 不要对数据路径进行病毒扫描，病毒扫描可能会阻止Elasticsearch工作，甚至修改数据目录内容。 在Elasticsearch系统中，为了保证数据安全，不同节点间的通信和数据传输通常采用HTTPS的加密协议。这样的设计能有效防止数据在传输过程中被窃取或篡改。同样，Elasticsearch与Kibana之间的互动也使用了HTTPS，以确保数据在交互过程中的安全性。\n第4章 Elasticsearch索引 # 4.1 索引的定义 # 索引是具有相同结构的文档的集合，由唯一索引名称标定。\n实战场景1：将采集的不同业务类型的数据存储到不同的索引。\n微博业务对应的索引weibo_index 新闻业务对应的索引news_index 博客业务对应的索引blog_index 以上3个索引包含的字段个数、字段名称、字段类型可能不完全一致。 实战场景2：按日期切分存储日志索引\n2025年1月的日志对应logs_202501 2025年3月的日志对应logs_202503 索引设置\n静态设置(static index settings)，只允许在创建索引时或者针对已关闭的索引进行设置。 设置主分片大小的参数是index.number_of_shards，只在创建索引时生效，不支持动态修改。默认主分片大小为1，且每个索引的分片数量上限默认为1024。此限制是一个安全限制，可防止索引分片数过多导致集群不稳定。 动态设置(dynamic index settings)，可以借助更新设置(update settings)的方式进行动态更新，更新后立即生效。 设置副本数参数为index.number_of_replicas，可以动态修改。 设置刷新频率参数为index.refresh_interval，可以动态修改。默认刷新频率参数值为1s，即每秒刷新一次。这1s决定了Elasticsearch是近实时的搜索引擎，而非准实时搜索引擎。如果业务层面对实时性的要求不高，可以考虑将该值调大。因为如果采用1s，则每秒都会生成一个新的分段，会影响写入性能。 max_result_window是Elasticsearch中的一个设置参数，用于控制搜索结果的最大窗口的大小。默认情况下，max_result_window的值为10000。这意味着在分页搜索时最多可以返回10000条数据。如果每页可显示10条数据，那么最多可以翻到1000页。 增大max_result_window的值可能会对Elasticsearch集群的性能产生影响，尤其是在处理大量数据时。因此，在根据实际需求调整此参数时，要权衡性能和查询范围之间的关系。如果需要遍历大量数据，则建议使用scroll API或search_after参数，以更高效地进行处理。 4.3 索引别名 # 场景1：面对PB级别的增量数据，对外提供服务的是基于日期切分的n个不同索引，每次检索都要指定数十个甚至数百个索引，非常麻烦。 场景2：线上提供服务的某个索引设计不合理，比如某字段分词定义不准确，那么如何保证对外提供服务不停止，也就是在不更改业务代码的前提下更换索引？ "},{"id":73,"href":"/zh/post/books/%E8%8B%B1%E4%BC%9F%E8%BE%BE-%E9%BB%84%E4%BB%81%E5%8B%8B%E4%B9%8B%E8%8A%AF/","title":"英伟达-黄仁勋之芯","section":"Books","content":" 黄仁勋-英伟达之芯 # 第1章 求学生涯 # 第2章 职涯早期 # 第3章 从餐厅起步的Nvidia # 第4章 英伟达遭遇绝境 # 第5章 咸鱼翻身 # 第6章 新机器时代曙光初现 # 第7章 死亡竞赛 # 第8章 游戏玩家拯救英伟达 # 第9章 光速之道 # 第10章 同频共振 # 第11章 范式转变的时刻 # 第12章 千载难逢的机会 # 第13章 由机器引领的时代 # 克里泽夫斯基：辛顿在多伦多大学时的学生 因为无法解释神经网络的计算过程，学术界不认可这种方法 辛顿给苏茨克弗和克里泽夫斯基布置了一项艰巨的任务：利用英伟达的GPU训练计算机学会图像识别 卡坦扎罗 2011年加入英伟达 cuDNN cuda deep neural network 矩阵乘法 优秀的神经网络软件应该注重速度而不是精度 马克思与黄仁勋的分歧 马斯克认为，先进的人工智能可能带来灭绝级威胁。这一观点得到了包括辛顿和苏茨克弗在内的大批技术专家的认同，他们还是最初那篇关于AlexNet的论文的合著者。然而黄仁勋完全不这么认为。他竟觉得人工智能毫无风险，真是令我吃惊。 第14章 AI行业的佼佼者 # 2016年，英伟达的股价飙升了224%，这让黄仁勋重获荣光，再度跻身亿万富翁行列。不过，在当年的标准普尔500指数中，表现最抢眼的股票并非英伟达，而是其长期竞争对手AMD，其股价涨幅高达309%。黄仁勋并不甘心位居次席。 Omniverse 第15章 AI工厂 # 乌斯科雷特把这套学习机制命名为“自注意力” 第16章 全球最具价值的半导体企业 # 在2018年的GTC大会上，黄仁勋指出，在短短5年内，英伟达的GPU处理速度提升了25倍，这一成绩远超摩尔定律的预测。接着，他展示了一张图，这张图显示在2012年的显卡上需要一周的时间才能训练出AlexNet，而在他推出的新款计算机DGX-2上则仅需18分钟就能完成训练。 2020年7月，英伟达的市值终于超越了英特尔。没过多久，英伟达的市值又超越了AMD。 第17章 这个时代最重要的科技公司 # 第18章 人类需要更多智慧 # 第19章 更多电力更大算力 # 第20章 地球上最重要的股票 # 第21章 向理性本身发起挑战 # 第22章 深不见底的恐惧 # 第23章 思考机器 # "},{"id":74,"href":"/zh/zh/post/books/%E8%8B%B1%E4%BC%9F%E8%BE%BE-%E9%BB%84%E4%BB%81%E5%8B%8B%E4%B9%8B%E8%8A%AF/","title":"英伟达-黄仁勋之芯","section":"Books","content":" 黄仁勋-英伟达之芯 # 第1章 求学生涯 # 第2章 职涯早期 # 第3章 从餐厅起步的Nvidia # 第4章 英伟达遭遇绝境 # 第5章 咸鱼翻身 # 第6章 新机器时代曙光初现 # 第7章 死亡竞赛 # 第8章 游戏玩家拯救英伟达 # 第9章 光速之道 # 第10章 同频共振 # 第11章 范式转变的时刻 # 第12章 千载难逢的机会 # 第13章 由机器引领的时代 # 克里泽夫斯基：辛顿在多伦多大学时的学生 因为无法解释神经网络的计算过程，学术界不认可这种方法 辛顿给苏茨克弗和克里泽夫斯基布置了一项艰巨的任务：利用英伟达的GPU训练计算机学会图像识别 卡坦扎罗 2011年加入英伟达 cuDNN cuda deep neural network 矩阵乘法 优秀的神经网络软件应该注重速度而不是精度 马克思与黄仁勋的分歧 马斯克认为，先进的人工智能可能带来灭绝级威胁。这一观点得到了包括辛顿和苏茨克弗在内的大批技术专家的认同，他们还是最初那篇关于AlexNet的论文的合著者。然而黄仁勋完全不这么认为。他竟觉得人工智能毫无风险，真是令我吃惊。 第14章 AI行业的佼佼者 # 2016年，英伟达的股价飙升了224%，这让黄仁勋重获荣光，再度跻身亿万富翁行列。不过，在当年的标准普尔500指数中，表现最抢眼的股票并非英伟达，而是其长期竞争对手AMD，其股价涨幅高达309%。黄仁勋并不甘心位居次席。 Omniverse 第15章 AI工厂 # 乌斯科雷特把这套学习机制命名为“自注意力” 第16章 全球最具价值的半导体企业 # 在2018年的GTC大会上，黄仁勋指出，在短短5年内，英伟达的GPU处理速度提升了25倍，这一成绩远超摩尔定律的预测。接着，他展示了一张图，这张图显示在2012年的显卡上需要一周的时间才能训练出AlexNet，而在他推出的新款计算机DGX-2上则仅需18分钟就能完成训练。 2020年7月，英伟达的市值终于超越了英特尔。没过多久，英伟达的市值又超越了AMD。 第17章 这个时代最重要的科技公司 # 第18章 人类需要更多智慧 # 第19章 更多电力更大算力 # 第20章 地球上最重要的股票 # 第21章 向理性本身发起挑战 # 第22章 深不见底的恐惧 # 第23章 思考机器 # "}]