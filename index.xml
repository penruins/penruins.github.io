<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Penruins</title>
    <link>/</link>
    <description>Recent content on Penruins</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 10 Aug 2025 16:50:29 +0800</lastBuildDate>
    <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Algorithm</title>
      <link>/post/computer-science/algorithm/algorithm/</link>
      <pubDate>Thu, 14 Nov 2024 08:59:49 +0800</pubDate>
      <guid>/post/computer-science/algorithm/algorithm/</guid>
      <description>&lt;h1 id=&#34;algorithm&#34;&gt;&#xA;  Algorithm&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#algorithm&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.programmercarl.com/&#34;&gt;代码随想录&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;tips&#34;&gt;&#xA;  Tips&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#tips&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;如果我要创建一个列表并且需要一直在列表的开头插入元素我要怎么实现代码保证效率&#34;&gt;&#xA;  如果我要创建一个列表，并且需要一直在列表的开头插入元素，我要怎么实现代码保证效率&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%a6%82%e6%9e%9c%e6%88%91%e8%a6%81%e5%88%9b%e5%bb%ba%e4%b8%80%e4%b8%aa%e5%88%97%e8%a1%a8%e5%b9%b6%e4%b8%94%e9%9c%80%e8%a6%81%e4%b8%80%e7%9b%b4%e5%9c%a8%e5%88%97%e8%a1%a8%e7%9a%84%e5%bc%80%e5%a4%b4%e6%8f%92%e5%85%a5%e5%85%83%e7%b4%a0%e6%88%91%e8%a6%81%e6%80%8e%e4%b9%88%e5%ae%9e%e7%8e%b0%e4%bb%a3%e7%a0%81%e4%bf%9d%e8%af%81%e6%95%88%e7%8e%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;在 Java 中，如果你需要频繁在列表的开头插入元素，使用 &lt;code&gt;LinkedList&lt;/code&gt; 会比 &lt;code&gt;ArrayList&lt;/code&gt; 更高效。因为 &lt;code&gt;LinkedList&lt;/code&gt; 在列表开头插入元素的时间复杂度是 O(1)，而 &lt;code&gt;ArrayList&lt;/code&gt; 在开头插入元素的时间复杂度是 O(n)，需要移动所有元素。&lt;/p&gt;&#xA;&lt;p&gt;使用 &lt;code&gt;LinkedList&lt;/code&gt; 的示例代码：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.util.LinkedList;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.util.List;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Main&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 创建一个 LinkedList&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 在列表开头插入元素&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        list.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(0, 1);  &lt;span style=&#34;color:#75715e&#34;&gt;// 插入元素 1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        list.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(0, 2);  &lt;span style=&#34;color:#75715e&#34;&gt;// 插入元素 2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        list.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(0, 3);  &lt;span style=&#34;color:#75715e&#34;&gt;// 插入元素 3&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 输出列表&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(list);  &lt;span style=&#34;color:#75715e&#34;&gt;// 输出: [3, 2, 1]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为什么 &lt;code&gt;LinkedList&lt;/code&gt; 更高效？&lt;/p&gt;</description>
    </item>
    <item>
      <title>about me</title>
      <link>/post/others/about-me/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/others/about-me/</guid>
      <description>&lt;h1 id=&#34;about-me&#34;&gt;&#xA;  about me&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#about-me&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;家乡 云南昆明&lt;/li&gt;&#xA;&lt;li&gt;骑行 &lt;a href=&#34;https://www.strava.com/athletes/24928841&#34;&gt;Strava&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;电影 &lt;a href=&#34;https://www.douban.com/people/191687379&#34;&gt;douban&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../movies-log&#34;&gt;观影记录&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;研究各种提升效率的小工具&#xA;&lt;ul&gt;&#xA;&lt;li&gt;vim&lt;/li&gt;&#xA;&lt;li&gt;双拼&lt;/li&gt;&#xA;&lt;li&gt;raspberry pi&lt;/li&gt;&#xA;&lt;li&gt;ios shortcut&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>books</title>
      <link>/post/life/books/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/life/books/</guid>
      <description>&lt;h1 id=&#34;2025-07&#34;&gt;&#xA;  2025-07&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2025-07&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;台北人&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;好久没有读到这样的文字了，读起来不流畅。我选的那个版本在正文故事之后有好几篇对台北人的书评和分析，看这些的时候感觉自己更投入一些，才理解了这本书的深层含义&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;简读中国史&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;从中华文化的起源开始读历史应该是初中了吧，高中也都没有好好看教材。以现在的认知来看又对一些概念有了更深的理解，例如礼乐是什么，青铜文化传入到中国之后发展的独特性，礼乐崩坏指的是什么，分封制和郡县制，周秦之变，法家思想的极端，罢黜百家。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;不止读书&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;里面提到的书可以慢慢看&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;读书的人&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;里面提到的书可以慢慢看&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;被讨厌的勇气&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;以对话的方式来论述阿德勒（个体心理学）的一些主要观点。我觉得人生是连续的刹那，这个观点很有意思&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 健身路线图&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;解构现代化 温铁军&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;开了个头读不下去了，概念太多，后面再来吧（2025-07-30）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;2025-06&#34;&gt;&#xA;  2025-06&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2025-06&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;看见&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;柴静发了视频讲看见书里的故事，就想着就把书拿来看了吧。看完书也把一些第一个10年的一些重要的新闻事件回顾了一下，文字中有对新闻事件的陈述，社会问题的思考，作者本人的思考。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 超越百岁：长寿的科学与艺术&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;倦怠社会&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;里面提出的绩效社会对人心理的影响很有新意，但是读起来很不流畅，很晦涩，概念太多，没有得出结论的过程。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 商业就是这样：不可不知的商业常识&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;2025-05&#34;&gt;&#xA;  2025-05&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2025-05&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;天朝的崩溃：鸦片战争再研究&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;宋哥推荐我看的。作者对结论的推理非常严谨认真，尤其是在军事实力的对比上，严谨细致程度是之前读历史相关的书所没有接触到的。书中的主要结论在绪论中就表述很清楚了。我看书有时候总喜欢把绪论或者推荐序跳了直接看正文，这本书是和宋哥聊起来这本书的时候他说绪论是对整本书的总结，肯定要读，后面才补上的。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 多谈谈问题&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;薄世宁医学通识讲义&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;讲了医学的发展历程，医学的核心概念，挺好的科普书&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;不被支配：为什么我们会被情感绑架&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;西西弗高速的一期提到了这本书，就找来看了看。远离自恋型人格障碍的人。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 简读日本史&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 二手时间&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;2025-04&#34;&gt;&#xA;  2025-04&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2025-04&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;东京八平米&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;找到工作之后读的第一本书，准备面试的时候一直在看技术书，读不动了，找了一本轻松一点的书来看看&lt;/li&gt;&#xA;&lt;li&gt;印象深的是那个三四点开门的咖啡店，专门给赶早去做工的人做咖啡。老板还专门把自己的咖啡送给临终的老顾客。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Jenkins 2.x 实践指南&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Git: Mastering Version Control&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 凤凰项目：一个IT运维的传奇故事&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 精通Scrapy网络爬虫&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 软件方法：业务建模和需求&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;2025-03&#34;&gt;&#xA;  2025-03&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2025-03&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 高性能MySQL&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 从程序员到架构师&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; PostgreSQL实战&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 搞定系统设计：面试敲开大厂的门&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 大模型应用开发 动手做 AI Agent&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Redis 设计与实现&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 深入浅出 Spring Boot 3.x&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 大模型应用开发极简入门&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;2025-02&#34;&gt;&#xA;  2025-02&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2025-02&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Java并发编程实战&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;黄仁勋：英伟达之芯&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;英伟达那么火，就找来看看了。讲了黄仁勋与英伟达一开始建立到人工智能爆发中间的故事，以及后面的故事。人工智能的部分除了显卡，还讲了辛顿（反向传播算法），李飞飞（图片标注集）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 计算机网络&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 深入浅出HTTPS：从原理到实战&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Python神经网络编程&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Spring Cloud微服务：入门、实战与进阶&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 深入理解Java虚拟机&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 凤凰架构：构建可靠的大型分布式系统&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;2025-01&#34;&gt;&#xA;  2025-01&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2025-01&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Java实战&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Spring实战&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 美国困局：新右翼的兴起与挑战&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;置身事内：中国政府与经济发展&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;中国分税制改革的背景（第一次从这本书相对详细的了解具体是什么）；市场经济一开始政府对重点行业的扶持；分税制改革对中国房地产行业发展的影响。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;树莓派开始：玩转Linux&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;看这本书主要是因为手上也有个树莓派，其次是可以以一个电脑的角度来输入命令行。看了多进程编程的代码，有了一些初步认识。复习了一些Linux的知识，例如进程间通信。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;用地图看懂世界格局&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;这本书豆瓣评分不高，但还是读了。对所谓的世界格局也没有任何的知识，能读下去就读了呗&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 宏观经济学&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 人工智能入门实战：从校园到职场&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 剑指Offer&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 图解宏观经济学&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;2024-12&#34;&gt;&#xA;  2024-12&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2024-12&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 改变未来的九大算法&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 古希腊文明的光芒 赵林&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;2023&#34;&gt;&#xA;  2023&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2023&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;重来3：跳出疯狂的忙碌&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;书单&#34;&gt;&#xA;  书单&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b9%a6%e5%8d%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;那么作家约瑟夫·康拉德的《黑暗之心》则帮助我们看清了，我们对领导能力（即争取最高头衔）的严重曲解所带来的问题，或者说招致的罪恶。这部杰作为电影《现代启示录》提供了原型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;《黑暗之心》围绕着帝国主义、殖民主义、种族关系以及人性的黑暗展开，主题并不难以理解。但它揭示的另外一层含义是官僚主义。该书中的“公司”（作者是用大写字母C来强调的）具有规则、程序和等级制度，有掌权者和争权夺势者，跟任何其他官僚体系并无差异。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;《米德尔马契》&#xA;&lt;ul&gt;&#xA;&lt;li&gt;之所以你我能够享受稳定的生活，有一半应归功于那些不为人知、踏踏实实为了自己的理想而生活的先辈。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;《世界是平的》&lt;/li&gt;&#xA;&lt;li&gt;《一个青年艺术家的画像》则以戏剧性的夸张手法描述了宗教信仰向人文艺术的过渡。故事主人公斯蒂芬·迪达勒斯放弃天主教会的神职，因此放弃了获得圣餐变体的机会，他选择投身于文学的奇迹，引用书中的话则是，“把每日平凡的生活经历转化为永恒的发光的生命”，即凝结为不朽的艺术作品。&lt;/li&gt;&#xA;&lt;li&gt;麦田里的守望者&lt;/li&gt;&#xA;&lt;li&gt;莎士比亚的《麦克白》或者美国家喻户晓的《黑道家族》体现了人性中的野心&lt;/li&gt;&#xA;&lt;li&gt;契诃夫或费里尼的作品呈现了社会的倦怠&lt;/li&gt;&#xA;&lt;li&gt;以及美国作家拉尔夫·埃利森和印度作家阿兰达蒂·洛伊笔下的边缘人群&lt;/li&gt;&#xA;&lt;li&gt;但丁教会了我爱与恨并非对立，两者相辅相成&lt;/li&gt;&#xA;&lt;li&gt;英国小说家E.M.福斯特让我明白了自由心态常常是虚荣和无知的遮羞布&lt;/li&gt;&#xA;&lt;li&gt;作家玛丽·盖茨基尔向我揭示了灵魂在肉体上的体现方式&lt;/li&gt;&#xA;&lt;li&gt;在《婚变》这部小说中，杰弗里·尤金尼德斯讲述了20世纪80年代初从布朗大学毕业的3位学生的故事。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在他回答问题的时候，他已经全然忘记了这是一份学校试卷。他已经不是为了成绩在答题，而是在思考他自己及身边同龄人一直以来的困境。这是一种奇特的感觉。虽然笔下明明在引用蒂利希和海德格尔的话来阐述观点，但是在他脑海里浮现的却是自己和他的朋友们……在回答论文的问题时，米切尔不断地将自己的答案引向跟实际生活相关的内容。他在思考他的存在以及如何度过自己的一生。这是多么完美的结束大学生涯的方式。教育最终引领米切尔走进了生活。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Chinese History</title>
      <link>/post/history/chinese-history/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/history/chinese-history/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;中国文明并不是世界上最早出现的文明。以有文字和建筑能证明国家的出现而论，中国比苏美尔要晚近2000年，比埃及也要晚了1500年&#xA;&lt;ul&gt;&#xA;&lt;li&gt;但是中国后发先至。在西周时期，中国在人类历史上第一次建立起整饬的大一统封建制度，比欧洲早了近1800年。&lt;/li&gt;&#xA;&lt;li&gt;接下来，中国又率先在世界上建立了大一统中央集权国家，同样比欧洲早了近2000年。&lt;/li&gt;&#xA;&lt;li&gt;早在公元前3世纪，中国就实现了中央政权对基层社会的直接统治和严密控制，能够在全国范围内大规模调动资源&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;西欧中央集权国家和中国的中央集权的形成过程相当不同。欧洲是在议会、自治城市、行会等多种社会力量发育起来之后才出现中央集权国家的。因此，在欧洲的民族国家中，君主的专制权力是有限的，君主权力不仅受法律、议会的制约，也受到各社会阶层、利益团体的限制&lt;/li&gt;&#xA;&lt;li&gt;欧洲的中央集权之路，还进行过多种探索和比较&#xA;&lt;ul&gt;&#xA;&lt;li&gt;英国之所以后来能超越西班牙，就是因为它的体制既比荷兰松散的城邦联合体更有凝聚力，同时又比西班牙的君权受到更大的约束&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;三代之治&lt;/li&gt;&#xA;&lt;li&gt;周秦之变&lt;/li&gt;&#xA;&lt;li&gt;分封制 和 郡县制 的区别&#xA;&lt;ul&gt;&#xA;&lt;li&gt;中世纪欧洲的政治体制和分封制的相似之处&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;议会制度&lt;/li&gt;&#xA;&lt;li&gt;管理北京委员会&lt;/li&gt;&#xA;&lt;li&gt;20世纪40年代土耳其政治民主化以后，数量庞大的底层民众开始显示力量，伊斯兰因素又堂而皇之地一步步彰显存在，到近些年达到高峰。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;违背了科学的民主，最终会变得不民主！让专制体制下的臣民进行选举，他们只会选举出比较好的君主，而不是选出一个支持民主的公民；让宗教信徒进行选举，他们也只会选出宗教领袖，而不是选出一个具有科学精神的公民！&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;拉丁美洲的民选政治也步入泥潭。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在贫富差距和社会动荡中焦虑不安的拉美民众很容易受到那些激进口号的影响，他们喜欢那些提出诱人目标和简单快速的解决方式的领导人，谁的气质和姿态最权威，最像“父亲”，谁的许诺最直接、最简单、最激进，就最容易上台。&lt;/li&gt;&#xA;&lt;li&gt;比如委内瑞拉的查韦斯许诺要为穷人提供“超福利”（免费住房、免费汽油），因此迅速崛起于政治舞台。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;上台之后，为了兑现承诺，查韦斯大力推行国有化，把所有行业都收归国有。&lt;/li&gt;&#xA;&lt;li&gt;但赶走了有管理能力的外国投资者之后，委内瑞拉本国却没有成熟的企业家阶层接手，国有企业陷入效率低下和严重腐败当中，激进的国有化不久之后就导致各种物资短缺。堂堂的“石油富国”已经沦落到需要进口石油，超级市场没有食物，人们到垃圾箱去捡东西吃。&lt;/li&gt;&#xA;&lt;li&gt;国家的经济崩溃了，穷人获得的福利也自然随之成为泡影。委内瑞拉的经济困境，反映的其实是政治上的不成熟。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;清教文化，儒家文化&lt;/li&gt;&#xA;&lt;li&gt;中国的历史、文化和地理，决定了它的大一统趋向&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>computer science</title>
      <link>/post/computer-science/computer-science/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/computer-science/</guid>
      <description>&lt;h1 id=&#34;computer-science&#34;&gt;&#xA;  computer science&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#computer-science&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;main&#34;&gt;&#xA;  main&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#main&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;github&#34;&gt;&#xA;  github&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#github&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618&#34;&gt;&lt;strong&gt;yihong0618&lt;/strong&gt;&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/Kindle_download_helper&#34;&gt;Kindle_download_helper&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/198&#34;&gt;巧妙利用 iOS 的快捷指令配合 GitHub Actions 实现自动化&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.kawabangga.com/posts/4117&#34;&gt;玩了一下 Github 个人首页的 Profile （使用 Action 自动更新）&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.ruanyifeng.com/blog/&#34;&gt;&lt;strong&gt;阮一峰的网络日志&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/theniceboy&#34;&gt;theniceboy&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;bilibili theCW&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/Ovilia&#34;&gt;Ovilia&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/SigureMo&#34;&gt;SigureMo&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/yutto-dev/bilili&#34;&gt;bilili&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/yutto-dev/yutto&#34;&gt;yutto&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;nacos&#34;&gt;&#xA;  nacos&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#nacos&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://nacos.io/zh-cn/docs/what-is-nacos.html&#34;&gt;nacos 官方文档&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;配置更新监听&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://juejin.cn/post/7198073902882177082&#34;&gt;Spring中动态监听Nacos配置更新&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;依赖里面没有 &lt;code&gt;NacosConfigManager&lt;/code&gt; 这个类，是因为必须使用 &lt;code&gt;spring cloud alibaba&lt;/code&gt; ?&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://nacos.io/docs/v2/ecology/use-nacos-with-spring/?spm=5238cd80.723fb8c7.0.0.738c73c6cZGRyq&#34;&gt;Nacos 融合 Spring，成为注册配置中心&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://nacos.io/docs/latest/ecology/use-nacos-with-spring-cloud/?spm=5238cd80.1f77ca18.0.0.4d31e37evrX5Qy&#34;&gt;Nacos 融合 Spring Cloud，成为注册配置中心&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;这个是最新的文档&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://nacos.io/docs/v2/ecology/use-nacos-with-spring/?spm=5238cd80.5e8a737d.0.0.47517e84j4hrrA&#34;&gt;2.x 的文档&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://nacos.io/docs/v2/ecology/use-nacos-with-spring/?spm=5238cd80.5e8a737d.0.0.47517e84j4hrrA#4-%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8&#34;&gt;事件驱动&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;最后配置变更是通过 spring 的框架的事件监听来实现的&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@Autowired&#xA;private Environment environment;&#xA;&#xA;@EventListener&#xA;public void handleEnvironmentChange(EnvironmentChangeEvent event) {&#xA;    // TODO&#xA;    String key = event.getKeys().get(xxxx);&#xA;    String value = environment.getProperty(key)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;博客搭建&#34;&gt;&#xA;  博客搭建&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8d%9a%e5%ae%a2%e6%90%ad%e5%bb%ba&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Built with &lt;code&gt;Sphinx&lt;/code&gt; using a &lt;code&gt;theme&lt;/code&gt; provided by &lt;code&gt;Read the Docs&lt;/code&gt;.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.sphinx-doc.org/en/master/&#34;&gt;e.g.&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>java basic</title>
      <link>/post/computer-science/java/java-basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/java/java-basic/</guid>
      <description>&lt;h1 id=&#34;java-basic&#34;&gt;&#xA;  java basic&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#java-basic&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;mess&#34;&gt;&#xA;  mess&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mess&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;八大数据类型&#34;&gt;&#xA;  八大数据类型&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%ab%e5%a4%a7%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;byte&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;char&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;short&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;int&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;long&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;float&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;double&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;transient-关键字的作用是什么&#34;&gt;&#xA;  transient 关键字的作用是什么？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#transient-%e5%85%b3%e9%94%ae%e5%ad%97%e7%9a%84%e4%bd%9c%e7%94%a8%e6%98%af%e4%bb%80%e4%b9%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在一个类中如果变量被 transient 关键字修饰，在对类的对象进行序列化的时候就会忽略这个变量&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;什么是深拷贝什么是浅拷贝&#34;&gt;&#xA;  什么是深拷贝？什么是浅拷贝？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%80%e4%b9%88%e6%98%af%e6%b7%b1%e6%8b%b7%e8%b4%9d%e4%bb%80%e4%b9%88%e6%98%af%e6%b5%85%e6%8b%b7%e8%b4%9d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;深拷贝：递归地复制对象及其所有嵌套的子对象，生成一个完全独立的新对象。两个对象之间不共享引用&lt;/li&gt;&#xA;&lt;li&gt;浅拷贝：创建一个新的对象，但只复制对象的最外层属性的引用&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;string&#34;&gt;&#xA;  String&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#string&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;equals与--区别&#34;&gt;&#xA;  equals与 == 区别&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#equals%e4%b8%8e--%e5%8c%ba%e5%88%ab&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;equals&lt;/code&gt; 比较的是两个字符串的内容是否是相等的&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;==&lt;/code&gt; 比较的是两个变量指向的引用是否是相等的&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;stringbuilder-stringbuffer区别&#34;&gt;&#xA;  StringBuilder StringBuffer区别&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#stringbuilder-stringbuffer%e5%8c%ba%e5%88%ab&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;StringBuilder 线程不安全&lt;/li&gt;&#xA;&lt;li&gt;StringBuffer 线程安全&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;stringbuffer-是怎么保证线程安全的&#34;&gt;&#xA;  StringBuffer 是怎么保证线程安全的？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#stringbuffer-%e6%98%af%e6%80%8e%e4%b9%88%e4%bf%9d%e8%af%81%e7%ba%bf%e7%a8%8b%e5%ae%89%e5%85%a8%e7%9a%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对字符串操作的方法都通过 synchronized 关键字修饰，保证线程安全&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;stringbuffer-和-stringbuilder-字符串在底层是以什么数据结构保存的&#34;&gt;&#xA;  StringBuffer 和 StringBuilder 字符串在底层是以什么数据结构保存的&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#stringbuffer-%e5%92%8c-stringbuilder-%e5%ad%97%e7%ac%a6%e4%b8%b2%e5%9c%a8%e5%ba%95%e5%b1%82%e6%98%af%e4%bb%a5%e4%bb%80%e4%b9%88%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e4%bf%9d%e5%ad%98%e7%9a%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;两个类都继承子 &lt;code&gt;AbstractStringBuilder&lt;/code&gt; 均使用 &lt;code&gt;char[] value&lt;/code&gt; 保存字符串数据&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;hashmap&#34;&gt;&#xA;  HashMap&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#hashmap&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;hashmap底层的数据结构是怎样的&#34;&gt;&#xA;  HashMap底层的数据结构是怎样的？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#hashmap%e5%ba%95%e5%b1%82%e7%9a%84%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e6%98%af%e6%80%8e%e6%a0%b7%e7%9a%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;java 1.8 之前 数组 + 链表&lt;/li&gt;&#xA;&lt;li&gt;java 1.8 之后 数组 + 链表/红黑树&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;hashmap-是否线程安全如何保证线程安全&#34;&gt;&#xA;  HashMap 是否线程安全，如何保证线程安全&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#hashmap-%e6%98%af%e5%90%a6%e7%ba%bf%e7%a8%8b%e5%ae%89%e5%85%a8%e5%a6%82%e4%bd%95%e4%bf%9d%e8%af%81%e7%ba%bf%e7%a8%8b%e5%ae%89%e5%85%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;不是线程安全的&lt;/li&gt;&#xA;&lt;li&gt;如何保证线程安全&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Collections.synchronizedMap()&lt;/li&gt;&#xA;&lt;li&gt;ConcurrentHashMap&lt;/li&gt;&#xA;&lt;li&gt;读写锁 ReadWriteLock&lt;/li&gt;&#xA;&lt;li&gt;局部使用 HashMap&lt;/li&gt;&#xA;&lt;li&gt;初始化写，后续只读&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;hashmap-get-时间复杂度&#34;&gt;&#xA;  HashMap get 时间复杂度&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#hashmap-get-%e6%97%b6%e9%97%b4%e5%a4%8d%e6%9d%82%e5%ba%a6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;最好的情况是O(1)&lt;/li&gt;&#xA;&lt;li&gt;若发生哈希碰撞，对应到桶之后还需要查询链表或红黑树，时间复杂度下降到O(N)或O(logN)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;hashmap-和-hashtable-有什么区别&#34;&gt;&#xA;  HashMap 和 Hashtable 有什么区别？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#hashmap-%e5%92%8c-hashtable-%e6%9c%89%e4%bb%80%e4%b9%88%e5%8c%ba%e5%88%ab&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;线程安全性&#xA;&lt;ul&gt;&#xA;&lt;li&gt;HashMap是线程不安全的，HashTable是线程安全的&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;对空值的支持&#xA;&lt;ul&gt;&#xA;&lt;li&gt;HashMap的key和value都支持空值，HashTable不支持key或value为空值&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;list&#34;&gt;&#xA;  List&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#list&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;collection-和-collections-有什么区别&#34;&gt;&#xA;  Collection 和 Collections 有什么区别？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#collection-%e5%92%8c-collections-%e6%9c%89%e4%bb%80%e4%b9%88%e5%8c%ba%e5%88%ab&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Collection 是集合类的一个接口&lt;/li&gt;&#xA;&lt;li&gt;Collections 是集合的一个工具类&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;linkedlist-删除时间复杂度&#34;&gt;&#xA;  LinkedList 删除时间复杂度&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#linkedlist-%e5%88%a0%e9%99%a4%e6%97%b6%e9%97%b4%e5%a4%8d%e6%9d%82%e5%ba%a6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;删除头和尾的时间复杂度为O(1)，因为在LinkedList中维护了头和尾2个指针&lt;/li&gt;&#xA;&lt;li&gt;其他位置的时间复杂度为O(n)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;函数式编程&#34;&gt;&#xA;  函数式编程&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%87%bd%e6%95%b0%e5%bc%8f%e7%bc%96%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;java的函数式编程包含哪些内容&#34;&gt;&#xA;  java的函数式编程包含哪些内容？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#java%e7%9a%84%e5%87%bd%e6%95%b0%e5%bc%8f%e7%bc%96%e7%a8%8b%e5%8c%85%e5%90%ab%e5%93%aa%e4%ba%9b%e5%86%85%e5%ae%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;java的函数式编程的概念中将只包含一个方法的接口称为函数式接口，可以通过Lambda表达式简化匿名类的定义&lt;/li&gt;&#xA;&lt;li&gt;提供流操作了API，可以将集合的迭代操作变为链式操作，提供了并行处理集合的方法&lt;/li&gt;&#xA;&lt;li&gt;提供了Optional类用来处理空指针的情况&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;io&#34;&gt;&#xA;  I/O&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#io&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;网络io分为哪几种&#34;&gt;&#xA;  网络io分为哪几种&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bd%91%e7%bb%9cio%e5%88%86%e4%b8%ba%e5%93%aa%e5%87%a0%e7%a7%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;网络 I/O 模型主要分为以下五种：&lt;/p&gt;</description>
    </item>
    <item>
      <title>摘抄分享</title>
      <link>/post/life/%E6%91%98%E6%8A%84%E5%88%86%E4%BA%AB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/life/%E6%91%98%E6%8A%84%E5%88%86%E4%BA%AB/</guid>
      <description>&lt;h1 id=&#34;摘抄分享&#34;&gt;&#xA;  摘抄分享&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%91%98%e6%8a%84%e5%88%86%e4%ba%ab&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;2025&#34;&gt;&#xA;  2025&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2025&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;2025-08-10-sunday&#34;&gt;&#xA;  2025-08-10 Sunday&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2025-08-10-sunday&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;你老丈人好吗？这老先生可不简单，别看是一介书生，很有战略眼光，他这一点拨，我有点醍醐灌顶的感觉。什么？老先生成了右派啦？乱弹琴，怎么他妈的到处是右派？ #亮剑&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;1号，现在我们的弹药已全部用光，该是告别的时候了，我代表战友们向首长和同志们告别了，请炮兵向4号地区开火，请覆盖4号地区，快点儿，开火，开火…… #亮剑&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;1959年1月，历时四个月的大炮战结束了，不过象征性的炮战还在继续，双方的炮弹都打到无人区，双方的广播站在开火之前都预先发出警告，让对方隐蔽好，以免出现不必要的伤亡。从此，这种奇特的、象征性的炮战持续了二十多年。 #亮剑&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;这辈子除了田先生，没人拿咱当过人，我老K这才明白，人和人真他妈的不一样呀，坏的人坏起来简直是坏得流油，好的人让你奇怪这世上怎么还有这么好的人 #亮剑&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;‘孩子，将来你出息了，可别忘了穷乡亲，别忘了你也是穷人家的孩子。’ #亮剑&lt;/p&gt;&#xA;&lt;h3 id=&#34;2025-08-06&#34;&gt;&#xA;  2025-08-06&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2025-08-06&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;宋志平指出，像水泥、钢铁、光伏等产品，没有太大的价格弹性，降价是没用的，一家企业降了价，其他企业也降，需求还是那些。因此，要想产销平衡，必须限产。但限产后，价格上来了，企业又有了扩产能的冲动。限产量和限产能还得同时进行，才能保住价格。 #财经-2025-16&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;地方政府热衷于扶持同质化产业，一是增值税是地方财政收入的主要税种；二是扭曲的政绩观，地方政府往往盯着中央的产业政策目录，却没有基于比较优势、因地制宜地发展本地产业。 #财经-2025-16&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;黄少卿认为，财税关系的调整是关键，唯有如此，才能改变对地方政府的激励机制。如果地方政府的财政收入转为以物业税为主，将极大地激励地方政府改善营商环境、治安环境，加大知识产权保护。此外，地方政府的经济决策权和干预权，很多时候是通过地方立法和设立行政审批权等方式自我赋予的，建议中央可以对各地的行政审批事项进行逐一审核。 #财经-2025-16&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;接受较低的实际GDP增长目标，削减过剩产能将导致实际GDP增长放缓。设定较低的实际GDP增长目标也将消除继续加大制造业和基础设施投资的动机。最后是提振国内消费。 #财经-2025-16&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;摩根士丹利预计，2025年中国低通胀压力还会持续，2026年大概率也会如此，但2027年有更大可能是中国经济整体走出低通胀的第一年。未来12个月到18个月，中国低通胀压力将逐渐改善。 #财经-2025-16&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;“现在有一种坏现象，价格战比的是谁的配置低，成本不断往下降。这样是坚决不行的，比如刹车系统，单个零件可能只差个几百块钱，但是在关键时候就是能不能保命的区别。卷价格是低层次的，质量才是最核心的。”一汽解放董事长、党委书记李胜感叹道。 #财经-2025-16&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;“内卷”(Involution)源于人类学家克利福德·格尔茨的研究，原指一种社会发展模式停滞的状态：即所有人都付出更多努力，但整体收益却没提高，甚至下降。正常竞争的特点是：竞争能推动整体进步（企业持续创新→行业技术升级），个体在竞争中成长（通过学习提升能力）；而内卷的特点是：竞争只导致内耗（压价格→全行业利润下降），在竞争中被消耗。 #财经-2025-16  #内卷&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;面对强大的对手，明知不敌，也要毅然亮剑，即使倒下，也要成为一座山、一道岭。 #亮剑&lt;/p&gt;&#xA;&lt;h3 id=&#34;2025-08-05&#34;&gt;&#xA;  2025-08-05&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2025-08-05&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;我一般不习惯为了多元化而吹嘘“多元性”的价值，但是我不得不承认多元背景在公立大学课堂上的贡献和美妙之处。在我教授的一门研讨课上，有位女生来自巴基斯坦，有位来自孟加拉国，有位是坐轮椅的黑人，还有一位是以色列人，学生群体的多样性彻底影响了我们对东方文化的学术讨论。在这种氛围下，你无法对“他者”的概念进行简单的抽象和草率的分析。 #优秀的绵羊&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;如果一所精英大学邀请我去发表新生入学演讲，我会告诉这些年轻人：你们或许确实很聪明，也很努力，但你们能来到这里，最主要的原因在于，你们很走运。你们或许的确通过竞争打败了自己的同龄对手，但事实上，你们的对手中有90％在比赛开始之前就已经出局了。 #优秀的绵羊&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;很多人发现，精英学校的学生大都有一种优越感：因为他们的SAT分数比普通人高，所以他们自然就应该享有一些他人享受不到的特权。而事实上，真正的逻辑应当是：他们的SAT分数之所以比别人高，是因为他们本来得到的就比别人多。 #优秀的绵羊&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;你无法通过沉思来同情不同背景的人，更不用说了解他们了。要想真正了解与自己背景不同的人，你只能实际进入他们的世界：不是去进行所谓的“奉献”，更不是请人喝杯咖啡，或带着屈尊俯就的态度去向下层人民嘘寒问暖一番。你如果要做到把对方当成与你平等的人，就得去了解他们本来的样子。 #优秀的绵羊&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;我知道，很多人都夸你很聪明，但其实你并没有那么聪明；你只是在某些地方比别人聪明一些，而且只是比你周围的那群人聪明一些而已。名校之外还有很多聪明人，他们之所以没进名校，可能就是因为他们在这个世界上的阶层地位。很多不“聪明”的人其实很聪明。 #优秀的绵羊&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;正如约翰·罗斯金告诉一位年轻精英人士的那样：“用大脑去尽力抢占一切并不比用拳头抢占更高尚。没错，这个社会总是要有分工的，有人要干活，有人要管理，但管理者并不应该拿走所有的利益。” #优秀的绵羊&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;密涅瓦的猫头鹰总在黄昏起飞&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;一位在波莫纳学院招生办公室工作的学生告诉我，她在面试中最喜欢的申请人是那些在高中阶段有过失败经历的人，她认为这样的人很有趣，但遗憾的是，这样的学生从来不会被录取。有人建议，在递交申请资料时，除了列出自己的成绩以外，申请者们还应当提交一份“失败履历”。 #优秀的绵羊&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;要想在某一领域做到真正优秀，你必须学会专一，集中精力，听从自己的直觉，而不是去在意自己的履历是否丰富多彩。 #优秀的绵羊&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;凯特琳·弗拉纳根曾说过，那些进入名校的人，大都接受过足够的教育，知道该如何保持政治正确，但他们所受的教育不足以让他们“认为精英大学的理念令人反感”。 #优秀的绵羊&lt;/p&gt;&#xA;&lt;h3 id=&#34;2025-08-04&#34;&gt;&#xA;  2025-08-04&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2025-08-04&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;一个人之所以有意思是因为他大量阅读，习惯思考，放慢脚步，投入深度对话，并为自己创建了一个丰满的内心世界。 #优秀的绵羊&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;真正意义上的拥有自信本来就不会太在意考试成绩。真正的拥有自信是不管他人试图给你灌输什么理念，自己都始终坚信“我”的价值远远超过成绩，真正的拥有自信是自己决定什么是成功。 #优秀的绵羊&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;我们会羡慕有人从名校退学并创业，成为下一个马克·扎克伯格，但不能理解有人完成大学学业仅仅是为了成为一名社会工作者。 #优秀的绵羊&lt;/p&gt;</description>
    </item>
    <item>
      <title>java</title>
      <link>/post/computer-science/java/java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/java/java/</guid>
      <description>&lt;h1 id=&#34;github-repository&#34;&gt;&#xA;  github repository&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#github-repository&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/binarywang/qrcode-utils&#34;&gt;binarywang/qrcode-utils&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;二维码生成工具&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;string&#34;&gt;&#xA;  String&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#string&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;stringbuffer-是怎么保证线程安全的&#34;&gt;&#xA;  StringBuffer 是怎么保证线程安全的？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#stringbuffer-%e6%98%af%e6%80%8e%e4%b9%88%e4%bf%9d%e8%af%81%e7%ba%bf%e7%a8%8b%e5%ae%89%e5%85%a8%e7%9a%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;StringBuffer&lt;/code&gt; 是通过 &lt;strong&gt;同步机制&lt;/strong&gt; 来保证线程安全的。具体来说，它的所有关键方法（如 &lt;code&gt;append()&lt;/code&gt;、&lt;code&gt;insert()&lt;/code&gt;、&lt;code&gt;delete()&lt;/code&gt;、&lt;code&gt;reverse()&lt;/code&gt; 等）都使用了 &lt;code&gt;synchronized&lt;/code&gt;&#xA;关键字进行修饰，确保同一时间只有一个线程可以执行这些方法&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;2&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;7&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;h3 id=&#34;1-同步方法&#34;&gt;&#xA;  1. &lt;strong&gt;同步方法&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e5%90%8c%e6%ad%a5%e6%96%b9%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;StringBuffer&lt;/code&gt; 的方法在设计时都加了 &lt;code&gt;synchronized&lt;/code&gt; 关键字，例如：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;synchronized&lt;/span&gt; StringBuffer &lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;(String str){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 方法实现&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这种机制确保了在多线程环境下，只有一个线程可以访问和修改 &lt;code&gt;StringBuffer&lt;/code&gt; 的内容，避免了竞态条件（Race Condition）和数据不一致的问题&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;2&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;h3 id=&#34;2-锁机制&#34;&gt;&#xA;  2. &lt;strong&gt;锁机制&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e9%94%81%e6%9c%ba%e5%88%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;StringBuffer&lt;/code&gt; 内部使用了一个锁对象（即 &lt;code&gt;this&lt;/code&gt; 锁），当一个线程调用 &lt;code&gt;StringBuffer&lt;/code&gt;&#xA;的同步方法时，会获取这个锁，其他线程必须等待锁释放后才能继续执行。这种锁机制保证了线程间的同步&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;7&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;h3 id=&#34;3-性能影响&#34;&gt;&#xA;  3. &lt;strong&gt;性能影响&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-%e6%80%a7%e8%83%bd%e5%bd%b1%e5%93%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;虽然 &lt;code&gt;StringBuffer&lt;/code&gt; 的同步机制确保了线程安全，但也带来了性能开销。因为在多线程环境下，每次只能有一个线程操作 &lt;code&gt;StringBuffer&lt;/code&gt;&#xA;，其他线程会被阻塞。因此，在单线程环境下，推荐使用性能更高的 &lt;code&gt;StringBuilder&lt;/code&gt;，它没有同步机制&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;5&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;8&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;h3 id=&#34;4-适用场景&#34;&gt;&#xA;  4. &lt;strong&gt;适用场景&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4-%e9%80%82%e7%94%a8%e5%9c%ba%e6%99%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;多线程环境&lt;/strong&gt;：如果需要在多线程环境下对字符串进行操作，&lt;code&gt;StringBuffer&lt;/code&gt; 是合适的选择，因为它确保了线程安全&lt;a href=&#34;@ref&#34;&gt;2&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;9&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;单线程环境&lt;/strong&gt;：在单线程环境下，建议使用 &lt;code&gt;StringBuilder&lt;/code&gt;，因为它没有同步开销，性能更高&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;8&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;总结&#34;&gt;&#xA;  总结&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%80%bb%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;StringBuffer&lt;/code&gt; 通过 &lt;code&gt;synchronized&lt;/code&gt;&#xA;关键字实现的同步机制，确保了多线程环境下的线程安全性。虽然这种机制带来了性能开销，但在需要线程安全的场景下，它是一个可靠的选择&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;2&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;7&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>新知</title>
      <link>/post/life/%E6%96%B0%E7%9F%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/life/%E6%96%B0%E7%9F%A5/</guid>
      <description>&lt;h1 id=&#34;新知&#34;&gt;&#xA;  新知&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%96%b0%e7%9f%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;如果有朋友有心在看这个page，需要提醒您一下，这个页面主要是我对我看的书，视频，电影的回忆，不会校正正确性，可能是不太准确的。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;2025-07-30&#34;&gt;&#xA;  2025-07-30&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2025-07-30&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;青铜文明是从中亚传到中国的。牛，羊，小麦也是从中亚传过来的 （简读中国史）&lt;/li&gt;&#xA;&lt;li&gt;从分封制到郡县制是为了加强皇帝的权利触及到最底层，加强中央集权（简读中国史）&lt;/li&gt;&#xA;&lt;li&gt;法家思想推行到极致就变成了极端的功利主义，于人民于君主于推崇者都是输的结果（简读中国史）&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>prometheus</title>
      <link>/post/computer-science/monitor/prometheus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/monitor/prometheus/</guid>
      <description>&lt;h1 id=&#34;prometheus&#34;&gt;&#xA;  prometheus&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#prometheus&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;brew&#34;&gt;&#xA;  brew&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#brew&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;如果是使用 brew 安装的话，配置文件在这个位置 &lt;code&gt;/opt/homebrew/etc/prometheus.yml&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;grafana&#34;&gt;&#xA;  grafana&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#grafana&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://grafana.com/grafana/dashboards/&#34;&gt;grafana dashboard&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;springboot&#34;&gt;&#xA;  springboot&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#springboot&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/qq_37958845/article/details/118024020&#34;&gt;SpringBoot + Prometheus + Grafana 实现自定义监控&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;database&#34;&gt;&#xA;  database&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#database&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://gitee.com/x5y22r/druid-prometheus-monitor&#34;&gt;x5y22r/druid-prometheus-monitor&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>推荐</title>
      <link>/post/computer-science/computer-science-recommend/</link>
      <pubDate>Thu, 14 Nov 2024 08:59:49 +0800</pubDate>
      <guid>/post/computer-science/computer-science-recommend/</guid>
      <description>&lt;h1 id=&#34;推荐&#34;&gt;&#xA;  推荐&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8e%a8%e8%8d%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com&#34;&gt;github&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/alex-shpak/hugo-book&#34;&gt;alex-shpak/hugo-book&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;这个博客就是用这个项目搭建的&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://news.ycombinator.com&#34;&gt;hacker news&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;有很多关于计算机相关的文章，每天都会更新&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;资源下载相关&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/pingf/annie&#34;&gt;pingf/annie&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;可以用来下载B站视频&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/yt-dlp/yt-dlp&#34;&gt;yt-dlp/yt-dlp&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;下载 youtube 视频&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/yutto-dev/bilili&#34;&gt;yutto-dev/bilili&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;下载 bilibili 视频(项目已经归档不再维护,目前还能用，可以使用yutto)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/yutto-dev/yutto&#34;&gt;yutto-dev/yutto&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://notes.kamacoder.com/home/&#34;&gt;卡码笔记&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;代码随想录的网站，里面整理了一些计算机相关的知识点（非算法相关）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/cdk8s-zelda/IntelliJ-IDEA-Tutorial?tab=readme-ov-file&#34;&gt;cdk8s-zelda/IntelliJ-IDEA-Tutorial&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;介绍一些 idea 的使用技巧的&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://segmentfault.com/blogs&#34;&gt;segment fault&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/cdk8s/cdk8s-team-style&#34;&gt;cdk8s/cdk8s-team-style&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/cdk8s/cdk8s-team-style/blob/master/full-stack/4-backend.md&#34;&gt;【从开公司到开发全平台产品】4.后端开发的思考、实践-UPUPMO&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/cdk8s/cdk8s-team-style/blob/master/full-stack/3-architecture.md&#34;&gt;【从开公司到开发全平台产品】3.软件开发设计阶段的思考、实践-UPUPMO&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;blog&#34;&gt;&#xA;  blog&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#blog&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/&#34;&gt;阮一峰的网络日志&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.yinwang.org&#34;&gt;王垠&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;github&#34;&gt;&#xA;  github&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#github&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618&#34;&gt;yihong0618&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;large-language-modelllm&#34;&gt;&#xA;  Large Language Model(LLM)&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#large-language-modelllm&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://tongyi.aliyun.com/qianwen/&#34;&gt;通义千问&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;algorithms&#34;&gt;&#xA;  Algorithms&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#algorithms&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/TheAlgorithms/Java?tab=readme-ov-file&#34;&gt;TheAlgorithms/Java&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>学习记录</title>
      <link>/post/computer-science/computer-science-learning-log/</link>
      <pubDate>Thu, 14 Nov 2024 08:59:49 +0800</pubDate>
      <guid>/post/computer-science/computer-science-learning-log/</guid>
      <description>&lt;h1 id=&#34;学习记录&#34;&gt;&#xA;  学习记录&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ad%a6%e4%b9%a0%e8%ae%b0%e5%bd%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;2025-03-30-sunday&#34;&gt;&#xA;  2025-03-30 Sunday&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2025-03-30-sunday&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../llm/2025-03-30-1-%e5%88%86%e5%8c%ba%e8%a1%a8%e7%9a%84%e7%b4%a2%e5%bc%95%e5%a6%82%e4%bd%95%e5%88%9b%e5%bb%ba-%e8%af%b7%e4%bb%a5postgresql%e4%b8%be%e4%be%8b&#34;&gt;分区表的索引如何创建, 请以postgresql举例&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../llm/2025-03-30-2-postgresql%e4%b8%ad%e5%88%86%e5%8c%ba%e9%94%ae%e4%bc%9a%e8%87%aa%e5%8a%a8%e5%88%9b%e5%bb%ba%e7%b4%a2%e5%bc%95%e5%90%97&#34;&gt;postgresql中分区键会自动创建索引吗&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../llm/2025-03-30-3-kafka%e5%a6%82%e4%bd%95%e5%ae%9e%e7%8e%b0%e9%ab%98%e5%90%9e%e5%90%90%e9%87%8f&#34;&gt;kafka如何实现高吞吐量&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../llm/2025-03-30-4-%e4%b8%8d%e5%90%8c%e6%b6%88%e6%81%af%e9%98%9f%e5%88%97%e6%b6%88%e6%81%af%e5%86%99%e5%85%a5%e6%96%b9%e5%bc%8f%e5%af%b9%e6%af%94&#34;&gt;不同消息队列消息写入方式对比&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../llm/2025-03-30-5-kafka%e5%a6%82%e4%bd%95%e4%bf%9d%e9%9a%9c%e9%a1%ba%e5%ba%8f%e6%b6%88%e8%b4%b9&#34;&gt;kafka如何保障顺序消费&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../llm/2025-03-30-6-Kafka%e7%9a%84%e9%a1%ba%e5%ba%8f%e6%b6%88%e8%b4%b9%e8%83%bd%e5%8a%9b%e4%b8%8e%e5%85%b6%e4%bb%96%e6%b6%88%e6%81%af%e9%98%9f%e5%88%97%e7%b3%bb%e7%bb%9f%e7%9b%b8%e6%af%94%e6%9c%89%e4%bd%95%e4%bc%98%e5%8a%bf&#34;&gt;Kafka的顺序消费能力与其他消息队列系统相比有何优势&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../llm/2025-03-30-7-kafka%e4%b8%80%e4%b8%aa%e5%88%86%e5%8c%ba%e6%9c%89%e5%a4%9a%e4%b8%aa%e6%b6%88%e8%b4%b9%e8%80%85%e6%b6%88%e8%b4%b9%e9%a1%ba%e5%ba%8f%e6%98%af%e6%80%8e%e6%a0%b7%e7%9a%84&#34;&gt;kafka一个分区有多个消费者消费顺序是怎样的&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../llm/2025-03-30-8-kafka%e5%8f%91%e9%80%81%e5%a4%b1%e8%b4%a5%e5%a6%82%e4%bd%95%e5%a4%84%e7%90%86&#34;&gt;kafka发送失败如何处理&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../llm/2025-03-30-9-Kafka%e7%aa%81%e7%84%b6%e5%ae%95%e6%9c%ba%e4%ba%86%e6%b6%88%e6%81%af%e4%bc%9a%e4%b8%8d%e4%bc%9a%e4%b8%a2%e5%a4%b1&#34;&gt;Kafka突然宕机了消息会不会丢失&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2025-01-17&#34;&gt;&#xA;  2025-01-17&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2025-01-17&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;剑指offer-book&#34;&gt;&#xA;  剑指Offer Book&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%89%91%e6%8c%87offer-book&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/25910559/&#34;&gt;剑指Offer&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;第1章-面试的流程-1&#34;&gt;&#xA;  第1章 面试的流程 1&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac1%e7%ab%a0-%e9%9d%a2%e8%af%95%e7%9a%84%e6%b5%81%e7%a8%8b-1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1.1 面试官谈面试 1&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1.2 面试的三种形式 2&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1.2.1 电话面试 2&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1.2.2 共享桌面远程面试 3&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1.2.3 现场面试 4&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1.3 面试的三个环节 5&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1.3.1 行为面试环节 5&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 应聘者的项目经验 6&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 应聘者掌握的技能 7&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 回答“为什么跳槽” 8&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1.3.2 技术面试环节 10&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 扎实的基础知识 10&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 高质量的代码 11&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 清晰的思路 14&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 优化效率的能力 15&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 优秀的综合能力 16&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1.3.3 应聘者提问环节 17&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1.4 本章小结 18&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;第2章-面试需要的基础知识-20&#34;&gt;&#xA;  第2章 面试需要的基础知识 20&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac2%e7%ab%a0-%e9%9d%a2%e8%af%95%e9%9c%80%e8%a6%81%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86-20&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;2.1 面试官谈基础知识 20&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2.2 编程语言 22&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2.2.1 C++ 22&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题1：赋值运算符函数 24&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 经典的解法，适用于初级程序员 25&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 考虑异常安全性的解法，高级程序员必备 26&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2.2.2 C# 27&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题2：实现Singleton模式 31&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 不好的解法一：只适用于单线程 31&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 不好的解法二：可用于多线程但效率不高 32&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 可行的解法：同步锁前后两次判断 33&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 推荐的解法一：利用静态构造函数 34&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 推荐的解法二：按需创建实例 34&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 解法比较 35&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2.3 数据结构 36&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2.3.1 数组 36&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题3：二维数组中的查找 38&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2.3.2 字符串 42&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题4：替换空格 44&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; O(n2)的解法，不足以拿到Offer 45&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; O(n)的解法，搞定Offer就靠它 46&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2.3.3 链表 49&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题5：从尾到头打印链表 51&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2.3.4 树 53&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题6：重建二叉树 55&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2.3.5 栈和队列 58&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题7：用两个栈实现队列 59&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2.4 算法和数据操作 62&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2.4.1 查找和排序 63&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题8：旋转数组的最小数字 66&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2.4.2 递归和循环 71&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题9：斐波那契数列 73&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 效率很低的解法，面试官不会喜欢 73&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试官期待的实用解法 74&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; O(logn)但不够实用的解法 74&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 解法比较 75&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2.4.3 位运算 77&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题10：二进制中1的个数 78&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 可能引起死循环的解法 79&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 常规解法 79&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 能给面试官带来惊喜的解法 80&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2.5 本章小结 82&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;第3章-高质量的代码-84&#34;&gt;&#xA;  第3章 高质量的代码 84&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac3%e7%ab%a0-%e9%ab%98%e8%b4%a8%e9%87%8f%e7%9a%84%e4%bb%a3%e7%a0%81-84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 3.1 面试官谈代码质量 84&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 3.2 代码的规范性 86&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 3.3 代码的完整性 87&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 从3方面确保代码的完整性 87&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 3种错误处理的方法 88&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题11：数值的整数次方 90&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 自以为题目简单的解法 90&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 全面但不够高效的解法，离Offer已经很近了 90&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 全面又高效的解法，确保能拿到Offer 92&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题12：打印1到最大的n位数 94&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 跳进面试官陷阱 94&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 在字符串上模拟数字加法 94&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 把问题转换成数字排列 97&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题13：在O(1)时间删除链表结点 99&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题14：调整数组顺序使奇数位于偶数前面 102&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 只完成基本功能的解法，仅适用于初级程序员 102&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 考虑可扩展性的解法，能秒杀Offer 104&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 3.4 代码的鲁棒性 106&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题15：链表中倒数第k个结点 107&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题16：反转链表 112&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题17：合并两个排序的链表 114&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题18：树的子结构 117&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 3.5 本章小结 121&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;第4章-解决面试题的思路-123&#34;&gt;&#xA;  第4章 解决面试题的思路 123&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac4%e7%ab%a0-%e8%a7%a3%e5%86%b3%e9%9d%a2%e8%af%95%e9%a2%98%e7%9a%84%e6%80%9d%e8%b7%af-123&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 4.1 面试官谈面试思路 123&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题19：二叉树的镜像 125&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 4.2 画图让抽象问题形象化 125&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题20：顺时针打印矩阵 127&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 4.3 举例让抽象问题具体化 131&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题21：包含min函数的栈 132&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题22：栈的压入、弹出序列 134&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题23：从上往下打印二叉树 137&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题24：二叉搜索树的后序遍历序列 140&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题25：二叉树中和为某一值的路径 143&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 4.4 分解让复杂问题简单化 146&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题26：复杂链表的复制 147&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题27：二叉搜索树与双向链表 151&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题28：字符串的排列 154&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 4.5 本章小结 158&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;第5章-优化时间和空间效率-160&#34;&gt;&#xA;  第5章 优化时间和空间效率 160&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac5%e7%ab%a0-%e4%bc%98%e5%8c%96%e6%97%b6%e9%97%b4%e5%92%8c%e7%a9%ba%e9%97%b4%e6%95%88%e7%8e%87-160&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 5.1 面试官谈效率 160&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 5.2 时间效率 162&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题29：数组中出现次数超过一半的数字 163&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 基于Partition函数的O(n)算法 163&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 利用数组特点的O(n)算法 165&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 解法比较 166&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题30：最小的k个数 167&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; O(n)的算法，只当可以修改输入数组时可用 167&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; O(nlogk)的算法，适合处理海量数据 168&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 解法比较 169&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题31：连续子数组的最大和 171&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 举例分析数组的规律 171&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 应用动态规划法 173&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题32：从1到n整数中1出现的次数 174&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 不考虑效率的解法，想拿Offer有点难 174&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 明显提高效率的解法，让面试官耳目一新 175&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题33：把数组排成最小的数 177&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 5.3 时间效率与空间效率的平衡 181&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题34：丑数 182&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 逐个判断整数是不是丑数的解法 182&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 创建数组保存已经找到的丑数的解法 183&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题35：第一个只出现一次的字符 186&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题36：数组中的逆序对 189&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题37：两个链表的第一个公共结点 193&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 5.4 本章小结 196&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;第6章-面试中的各项能力-198&#34;&gt;&#xA;  第6章 面试中的各项能力 198&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac6%e7%ab%a0-%e9%9d%a2%e8%af%95%e4%b8%ad%e7%9a%84%e5%90%84%e9%a1%b9%e8%83%bd%e5%8a%9b-198&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 6.1 面试官谈能力 198&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 6.2 沟通能力和学习能力 200&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 沟通能力 200&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 学习能力 200&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 善于学习、沟通的人也善于提问 201&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 6.3 知识迁移能力 203&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题38：数字在排序数组中出现的次数 204&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题39：二叉树的深度 207&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 重复遍历结点的解法，不足以打动面试官 209&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 只遍历结点一次的解法，正是面试官喜欢的 209&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题40：数组中只出现一次的数字 211&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题41：和为s的两个数字VS和为s的连续正数序列 214&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题42：翻转单词顺序 VS左旋转字符串 218&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 6.4 抽象建模能力 222&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题43：n个骰子的点数 223&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 基于递归求骰子点数，时间效率不够高 223&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 基于循环求骰子点数，时间性能好 224&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题44：扑克牌的顺子 226&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题45：圆圈中最后剩下的数字 228&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 经典的解法，用循环链表模拟圆圈 229&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 创新的解法，拿到Offer不在话下 230&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 6.5 发散思维能力 232&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题46：求1+2+…+n 233&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 利用构造函数求解 234&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 利用虚函数求解 234&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 利用函数指针求解 235&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 利用模板类型求解 236&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题47：不用加减乘除做加法 237&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题48：不能被继承的类 239&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 常规的解法：把构造函数设为私有函数 239&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 新奇的解法：利用虚拟继承 240&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 6.6 本章小结 241&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;第7章-两个面试案例-243&#34;&gt;&#xA;  第7章 两个面试案例 243&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac7%e7%ab%a0-%e4%b8%a4%e4%b8%aa%e9%9d%a2%e8%af%95%e6%a1%88%e4%be%8b-243&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 7.1 案例一：（面试题49）把字符串转换成整数 244&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 7.2 案例二：（面试题50）树中两个结点的最低公共祖先 252&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;第8章-英文版新增面试题-261&#34;&gt;&#xA;  第8章 英文版新增面试题 261&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac8%e7%ab%a0-%e8%8b%b1%e6%96%87%e7%89%88%e6%96%b0%e5%a2%9e%e9%9d%a2%e8%af%95%e9%a2%98-261&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 8.1 数组 261&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题51：数组中重复的数字 261&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题52：构建乘积数组 263&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 8.2 字符串 265&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题53：正则表达式匹配 265&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题54：表示数值的字符串 267&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题55：字符流中第一个不重复的字符 269&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 8.3 链表 270&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题56：链表中环的入口结点 270&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题57：删除链表中重复的结点 273&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 8.4 树 275&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题58：二叉树的下一个结点 275&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题59：对称的二叉树 277&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题60：把二叉树打印成多行 278&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题61：按之字形顺序打印二叉树 280&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题62：序列化二叉树 283&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题63：二叉搜索树的第k个结点 285&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题64：数据流中的中位数 286&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 8.5 栈和队列 290&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题65：滑动窗口的最大值 290&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 8.6 回溯法 294&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题66：矩阵中的路径 294&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试题67：机器人的运动范围 296&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2025-01-11&#34;&gt;&#xA;  2025-01-11&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2025-01-11&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;leetcode-刷题&#34;&gt;&#xA;  leetcode 刷题&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#leetcode-%e5%88%b7%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;面试经典150题&#34;&gt;&#xA;  面试经典150题&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e7%bb%8f%e5%85%b8150%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.cn/studyplan/top-interview-150/&#34;&gt;面试经典150题&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;数组字符串&#34;&gt;&#xA;  数组/字符串&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e7%bb%84%e5%ad%97%e7%ac%a6%e4%b8%b2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/merge-sorted-array/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;合并两个有序数组&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution88.java&#34;&gt;2025-01-12&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/remove-element/submissions/592471220/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;移除元素&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2025-01-11&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 删除有序数组中的重复项&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2025-01-11 没有做出来，看的官方题解&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution26.java&#34;&gt;2025-01-11&lt;/a&gt; 做完&lt;code&gt;删除有序数组中的重复项 II&lt;/code&gt;之后再尝试重新解题完成&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 删除有序数组中的重复项 II&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution80.java&#34;&gt;2025-01-11&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/majority-element/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;多数元素&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution169.java&#34;&gt;2025-01-12&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/rotate-array/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;轮转数组&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution189.java&#34;&gt;2025-01-18&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;进阶&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 尽可能想出更多的解决方案，至少有 三种 不同的方法可以解决这个问题。&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 你可以使用空间复杂度为 O(1) 的 原地 算法解决这个问题吗？&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;买卖股票的最佳时机&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2025-01-11 看官方题解做出来的&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2025-01-17 review&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;买卖股票的最佳时机 II&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 官方题解 理解&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2025-01-17 方法一：动态规划&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 方法二：贪心&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/jump-game/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;跳跃游戏&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2025-01-17 官方题解理解 贪心&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution55.java&#34;&gt;2025-01-18&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/jump-game-ii/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;跳跃游戏 II&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution45.java&#34;&gt;2025-01-18 算法超时了&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 理解官方题解&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2025-01-18 方法一：反向查找出发位置&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Solution45.jump2&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2025-01-18 方法二：正向查找可达到的最大位置&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Solution45.jump3&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/h-index/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;H 指数&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution274.java&#34;&gt;2025-01-18&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Tips&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; An easy approach is to sort the array first.&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; What are the possible values of h-index?&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; A faster approach is to use extra space.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; O(1) 时间插入、删除和获取随机元素&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 除自身以外数组的乘积&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 加油站&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 分发糖果&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 接雨水&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/roman-to-integer/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;罗马数字转整数&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution13.java&#34;&gt;2025-01-12&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 整数转罗马数字&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/length-of-last-word/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;最后一个单词的长度&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution58.java&#34;&gt;2025-01-12&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/longest-common-prefix/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;最长公共前缀&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution14.java&#34;&gt;2025-01-12&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/reverse-words-in-a-string/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;反转字符串中的单词&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution151.java&#34;&gt;2025-01-18&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;进阶&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 如果字符串在你使用的编程语言中是一种可变数据类型，请尝试使用 O(1) 额外空间复杂度的 原地 解法。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Z 字形变换&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;找出字符串中第一个匹配项的下标&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution28.java&#34;&gt;2025-01-12&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 文本左右对齐&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;双指针&#34;&gt;&#xA;  双指针&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%8c%e6%8c%87%e9%92%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/valid-palindrome/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;验证回文串&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution125.java&#34;&gt;2025-01-13&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/is-subsequence/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;判断子序列&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution392.java&#34;&gt;2025-01-13&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/two-sum-ii-input-array-is-sorted/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;两数之和 II - 输入有序数组&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution167.java&#34;&gt;2025-01-13&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 运行有时候会超过时间限制&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/container-with-most-water/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;盛最多水的容器&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 三数之和&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;滑动窗口&#34;&gt;&#xA;  滑动窗口&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%bb%91%e5%8a%a8%e7%aa%97%e5%8f%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/minimum-size-subarray-sum/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;长度最小的子数组&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution209.java&#34;&gt;2025-01-22&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/longest-substring-without-repeating-characters/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;无重复字符的最长子串&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution3.java&#34;&gt;2025-01-22&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/substring-with-concatenation-of-all-words/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;串联所有单词的子串&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution30.java&#34;&gt;2025-01-22&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/minimum-window-substring/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;最小覆盖子串&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;矩阵&#34;&gt;&#xA;  矩阵&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%9f%a9%e9%98%b5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/valid-sudoku/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;有效的数独&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution36.java&#34;&gt;2025-01-18&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/spiral-matrix/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;螺旋矩阵&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution54.java&#34;&gt;2025-01-18&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/rotate-image/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;旋转图像&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 理解官方题解&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2025-01-18 方法一：使用辅助数组&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2025-01-18 方法二：原地旋转&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 有数学公式的推导，需要自己推导一次&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2025-01-18 方法三：用翻转代替旋转&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 有数学公式的推导，需要自己推导一次&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/set-matrix-zeroes/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;矩阵置零&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution73.java&#34;&gt;2025-01-18&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/game-of-life/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;生命游戏&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution289.java&#34;&gt;2025-01-18&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;进阶&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 你可以使用原地算法解决本题吗？请注意，面板上所有格子需要同时被更新：你不能先更新某些格子，然后使用它们的更新后的值再更新其他格子。&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 本题中，我们使用二维数组来表示面板。原则上，面板是无限的，但当活细胞侵占了面板边界时会造成问题。你将如何解决这些问题？&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;-哈希表&#34;&gt;&#xA;  ✅ 哈希表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e5%93%88%e5%b8%8c%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/ransom-note/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;赎金信&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution383.java&#34;&gt;2025-01-13&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/isomorphic-strings/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;同构字符串&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution205.java&#34;&gt;2025-01-13&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/word-pattern/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;单词规律&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution290.java&#34;&gt;2025-01-13&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/valid-anagram/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;有效的字母异位词&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution242.java&#34;&gt;2025-01-13&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/group-anagrams/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;字母异位词分组&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution49.java&#34;&gt;2025-01-16&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;第一遍算法超时，看了官方题解思路后实现通过&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/two-sum/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;两数之和&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution1.java&#34;&gt;2025-01-13&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/happy-number/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;快乐数&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution202.java&#34;&gt;2025-01-13&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/contains-duplicate-ii/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;存在重复元素 II&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution219.java&#34;&gt;2025-01-13&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/longest-consecutive-sequence/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;最长连续序列&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution128.java&#34;&gt;2025-01-16&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;看了官方题解后完成&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;区间&#34;&gt;&#xA;  区间&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8c%ba%e9%97%b4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;栈&#34;&gt;&#xA;  栈&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/valid-parentheses/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;有效的括号&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution20.java&#34;&gt;2025-01-22&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/simplify-path/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;简化路径&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution71.java&#34;&gt;2025-01-22&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/min-stack/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;最小栈&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution155.java&#34;&gt;2025-01-22&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;理解官方题解 文字描述后完成&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2025-01-22 理解官方题解&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/evaluate-reverse-polish-notation/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;逆波兰表达式求值&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution150.java&#34;&gt;2025-01-22&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 基本计算器&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;链表&#34;&gt;&#xA;  链表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/linked-list-cycle/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;环形链表&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution141.java&#34;&gt;2025-01-20&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;理解官方题解&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2025-01-20 方法一：哈希表&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 方法二：快慢指针&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/add-two-numbers/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;两数相加&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution2.java&#34;&gt;2025-01-20&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/merge-two-sorted-lists/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;合并两个有序链表&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution21.java&#34;&gt;2025-01-20&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/copy-list-with-random-pointer/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;随机链表的复制&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution138.java&#34;&gt;2025-01-20&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/reverse-linked-list-ii/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;反转链表 II&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution92.java&#34;&gt;2025-01-20&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/reverse-nodes-in-k-group/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;K 个一组翻转链表&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/remove-nth-node-from-end-of-list/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;删除链表的倒数第 N 个结点&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution19.java&#34;&gt;2025-01-20&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;进阶&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2025-01-20 你能尝试使用一趟扫描实现吗？&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/remove-duplicates-from-sorted-list-ii/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;删除排序链表中的重复元素 II&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution82.java&#34;&gt;2025-01-21&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/rotate-list/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;旋转链表&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution61.java&#34;&gt;2025-01-20&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/partition-list/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;分隔链表&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution86.java&#34;&gt;2025-01-21&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/lru-cache/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;LRU 缓存&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution146.java&#34;&gt;2025-01-22&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 理解官方题解&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;二叉树&#34;&gt;&#xA;  二叉树&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e5%8f%89%e6%a0%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/maximum-depth-of-binary-tree/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;二叉树的最大深度&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution104.java&#34;&gt;2025-01-15&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/same-tree/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;相同的树&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution100.java&#34;&gt;2025-01-15&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/invert-binary-tree/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;翻转二叉树&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution226.java&#34;&gt;2025-01-15&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 对称二叉树&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 没做出来，看的官方题解&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 从前序与中序遍历序列构造二叉树&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 从中序与后序遍历序列构造二叉树&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 填充每个节点的下一个右侧节点指针 II&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 二叉树展开为链表&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 路径总和&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 求根节点到叶节点数字之和&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 二叉树中的最大路径和&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 二叉搜索树迭代器&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 完全二叉树的节点个数&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 二叉树的最近公共祖先&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;二叉树层次遍历&#34;&gt;&#xA;  二叉树层次遍历&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e5%8f%89%e6%a0%91%e5%b1%82%e6%ac%a1%e9%81%8d%e5%8e%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;二叉搜索树&#34;&gt;&#xA;  二叉搜索树&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e5%8f%89%e6%90%9c%e7%b4%a2%e6%a0%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;图&#34;&gt;&#xA;  图&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9b%be&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;图的广度优先搜索&#34;&gt;&#xA;  图的广度优先搜索&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9b%be%e7%9a%84%e5%b9%bf%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;字典树&#34;&gt;&#xA;  字典树&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ad%97%e5%85%b8%e6%a0%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-回溯&#34;&gt;&#xA;  ✅ 回溯&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e5%9b%9e%e6%ba%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/letter-combinations-of-a-phone-number/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;电话号码的字母组合&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution17.java&#34;&gt;2025-01-15&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/combinations/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;组合&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution77.java&#34;&gt;2025-01-15&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/permutations/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;全排列&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution46.java&#34;&gt;2025-01-15&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/combination-sum/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;组合总和&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution39.java&#34;&gt;2025-01-15&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/n-queens-ii/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;N 皇后 II&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution52.java&#34;&gt;2025-01-15&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/generate-parentheses/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;括号生成&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution22.java&#34;&gt;2025-01-15&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/word-search/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;单词搜索&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution79.java&#34;&gt;2025-01-15&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;分治&#34;&gt;&#xA;  分治&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e6%b2%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;kadane算法&#34;&gt;&#xA;  kadane算法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#kadane%e7%ae%97%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;二分查找&#34;&gt;&#xA;  二分查找&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e5%88%86%e6%9f%a5%e6%89%be&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;堆&#34;&gt;&#xA;  堆&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%a0%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;位运算&#34;&gt;&#xA;  位运算&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bd%8d%e8%bf%90%e7%ae%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/add-binary/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;二进制求和&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution67.java&#34;&gt;2025-01-16&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/reverse-bits/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;颠倒二进制位&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2025-01-16 没做出来, 参考这篇文章&lt;a href=&#34;https://blog.csdn.net/QuantumYou/article/details/119998894&#34;&gt;LeetCode 190. 颠倒二进制位 （位运算 分治）&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2025-01-17 复习了一遍&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution190.java&#34;&gt;2025-01-17 新增了中间值打印的代码在算法中&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/number-of-1-bits/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;位1的个数&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution191.java&#34;&gt;2025-01-17&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/single-number/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;只出现一次的数字&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution136.java&#34;&gt;2025-01-17&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/single-number-ii/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;只出现一次的数字 II&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2025-01-17 理解了官方题解 方法2&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/bitwise-and-of-numbers-range/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;数字范围按位与&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2025-01-17 理解了官方题解 方法2&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;数学&#34;&gt;&#xA;  数学&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e5%ad%a6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/palindrome-number/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;回文数&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution9.java&#34;&gt;2025-01-17&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 不将整数转为字符串来解决这个问题&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/plus-one/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;加一&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution66.java&#34;&gt;2025-01-17&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/factorial-trailing-zeroes/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;阶乘后的零&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution172.java&#34;&gt;2025-01-17&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/sqrtx/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;x 的平方根&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution69.java&#34;&gt;2025-01-17&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/powx-n/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;Pow(x, n)&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/penruins/algorithm-practice/blob/main/algorithm-practice-code/src/main/java/com/penruins/leetcode/Solution50.java&#34;&gt;2025-01-17&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;超时了&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2025-01-17 看懂了官方题解&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 直线上最多的点数&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2025-01-17 看了官方题解，但还是不太理解&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;一维动态规划&#34;&gt;&#xA;  一维动态规划&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e7%bb%b4%e5%8a%a8%e6%80%81%e8%a7%84%e5%88%92&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.cn/problems/climbing-stairs/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;爬楼梯&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2025-01-11 通过&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;多维动态规划&#34;&gt;&#xA;  多维动态规划&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%a4%9a%e7%bb%b4%e5%8a%a8%e6%80%81%e8%a7%84%e5%88%92&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h2 id=&#34;2025-01-09&#34;&gt;&#xA;  2025-01-09&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2025-01-09&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;-spring实战-第6版-book&#34;&gt;&#xA;  ✅ Spring实战 第6版 Book&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-spring%e5%ae%9e%e6%88%98-%e7%ac%ac6%e7%89%88-book&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 第1章 Spring 起步&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1.1 什么是Spring &lt;code&gt;2025-01-09&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1.2 初始化 spring 应用 &lt;code&gt;2025-01-09&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1.3 编写 Spring 应用 &lt;code&gt;2025-01-09&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1.4 俯瞰 Spring 风景线 &lt;code&gt;2025-01-09&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 第2章&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2.1 展现信息 &lt;code&gt;2025-01-09&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2.2 处理表单提交 &lt;code&gt;2025-01-09&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2.3 校验表单输入 &lt;code&gt;2025-01-09&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2.4 使用视图控制器 &lt;code&gt;2025-01-09&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2.5 选择视图模板库 &lt;code&gt;2025-01-09&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 第3章 使用数据&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 3.1 &lt;code&gt;2025-01-09&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 3.2 &lt;code&gt;2025-01-11&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 3.3 &lt;code&gt;2025-01-11&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 第4章 使用非关系型数据&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 4.1 &lt;code&gt;2025-01-11&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 4.2 &lt;code&gt;2025-01-11&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 第5章 保护Spring&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 5.1 &lt;code&gt;2025-01-11&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 5.2 &lt;code&gt;2025-01-11&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 5.3 &lt;code&gt;2025-01-11&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 5.4 &lt;code&gt;2025-01-11&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 5.5 &lt;code&gt;2025-01-12&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 第6章 使用配置属性&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 6.1 &lt;code&gt;2025-01-12&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 6.2 &lt;code&gt;2025-01-12&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 6.3 &lt;code&gt;2025-01-12&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 第7章 创建REST服务&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 7.1 &lt;code&gt;2025-01-12&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 7.2 &lt;code&gt;2025-01-12&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 7.3 &lt;code&gt;2025-01-12&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 第8章 保护REST&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 8.1 &lt;code&gt;2025-01-12&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 8.2 &lt;code&gt;2025-01-12&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 8.3 &lt;code&gt;2025-01-12&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 8.4 &lt;code&gt;2025-01-12&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 第9章 发送异步消息&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 9.1 &lt;code&gt;2025-01-13&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 9.2 &lt;code&gt;2025-01-13&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 9.3 &lt;code&gt;2025-01-13&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 第10章 Spring集成&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 10.1 &lt;code&gt;2025-01-13&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 10.2 &lt;code&gt;2025-01-13&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 10.3 &lt;code&gt;2025-01-13&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 第11章 理解反应式编程&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 11.1 &lt;code&gt;2025-01-13&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 11.2 &lt;code&gt;2025-01-13&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 11.3 &lt;code&gt;2025-01-13&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 第12章 开发反应式API&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 12.1 &lt;code&gt;2025-01-13&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 12.2 &lt;code&gt;2025-01-13&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 12.3 &lt;code&gt;2025-01-13&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 12.4 &lt;code&gt;2025-01-13&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 12.5 &lt;code&gt;2025-01-13&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 第13章 反应式持久化数据&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 13.1 &lt;code&gt;2025-01-14&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 13.2 &lt;code&gt;2025-01-14&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 13.3 &lt;code&gt;2025-01-14&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 第14章 使用RSocket&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 14.1 &lt;code&gt;2025-01-14&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 14.2 &lt;code&gt;2025-01-15&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 14.3 &lt;code&gt;2025-01-15&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 第15章 部署Spring&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 15.1 &lt;code&gt;2025-01-15&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 15.2 &lt;code&gt;2025-01-15&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 15.3 &lt;code&gt;2025-01-15&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 15.4 &lt;code&gt;2025-01-15&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 第16章 管理Spring&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 16.1 &lt;code&gt;2025-01-15&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 16.2 &lt;code&gt;2025-01-15&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 16.3 &lt;code&gt;2025-01-15&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 第17章 使用JMX监控Spring&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 17.1 &lt;code&gt;2025-01-15&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 17.2 &lt;code&gt;2025-01-15&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 17.3 &lt;code&gt;2025-01-15&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 第18章 部署Spring&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 18.1 &lt;code&gt;2025-01-15&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 18.2 &lt;code&gt;2025-01-15&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 18.3 &lt;code&gt;2025-01-15&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 18.4 &lt;code&gt;2025-01-15&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 18.5 &lt;code&gt;2025-01-15&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;javaguide-文档阅读&#34;&gt;&#xA;  JavaGuide 文档阅读&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#javaguide-%e6%96%87%e6%a1%a3%e9%98%85%e8%af%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://javaguide.cn/home.html&#34;&gt;JavaGuide&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 必看&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试准备&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Java&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 计算机基础&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 数据库&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 开发工具&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 常用框架&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Spring&amp;amp;Spring Boot&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; MyBatis常见面试题总结&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2025-01-09 太过总结性，需要看一些更基础的文章&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Netty常见面试题总结&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 系统设计&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 分布式&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 高性能&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 高可用&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2025-01-08&#34;&gt;&#xA;  2025-01-08&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2025-01-08&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;计算机教育中缺失的学期&#34;&gt;&#xA;  计算机教育中缺失的学期&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%ae%a1%e7%ae%97%e6%9c%ba%e6%95%99%e8%82%b2%e4%b8%ad%e7%bc%ba%e5%a4%b1%e7%9a%84%e5%ad%a6%e6%9c%9f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://space.bilibili.com/695281681/lists?sid=4245283&amp;amp;spm_id_from=333.788.0.0&#34;&gt;计算机教育中缺失的学期&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;阮一峰博客阅读&#34;&gt;&#xA;  阮一峰博客阅读&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%98%ae%e4%b8%80%e5%b3%b0%e5%8d%9a%e5%ae%a2%e9%98%85%e8%af%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/&#34;&gt;阮一峰的网络日志&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;&#34;&gt;散文&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;&#34;&gt;观点与感想&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;&#34;&gt;算法与数学&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;&#34;&gt;开发者手册&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;&#34;&gt;理解计算机&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;&#34;&gt;JavaScript&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;&#34;&gt;计算机行业历史&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;&#34;&gt;周刊&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;&#34;&gt;创业&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;&#34;&gt;译文集&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;&#34;&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;&#34;&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;&#34;&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;&#34;&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;&#34;&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;&#34;&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;&#34;&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;&#34;&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2025-01-05&#34;&gt;&#xA;  2025-01-05&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2025-01-05&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;spring-基础知识点-视频&#34;&gt;&#xA;  spring 基础知识点 视频&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring-%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86%e7%82%b9-%e8%a7%86%e9%a2%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1vLaceeEMY?spm_id_from=333.788.videopod.episodes&amp;amp;vd_source=867426e6965781e5a2c5ef2fc1a0f8f8&#34;&gt;B站大学终于把Spring做成动画片了，一周刷爆，2024最新版，学完即可面试，拿走不谢，学不会我退出IT圈！&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1 2025-01-05&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Spring 是如何整合MyBatis管理Mapper接口的 2025-01-05&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2 2025-01-06&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 3 2025-01-06&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 4 2025-01-06&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 5 2025-01-06&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 6 2025-01-06&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 7 2025-01-06&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 8 2025-01-06&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 9 2025-01-06&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 10 2025-01-06&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 11 (January 6, 2025 at 18:43:04 GMT+8)&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 12 (January 6, 2025 at 18:50:57 GMT+8)&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 13 (January 6, 2025 at 18:57:05 GMT+8)&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 14 (January 6, 2025 at 18:59:15 GMT+8)&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 15 2025-01-07&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 16 2025-01-07&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 17&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 18&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 19&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 20&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 21&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 22&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 23&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 24&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 25&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 26&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 27&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 28&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 29&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 30&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 31&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 32&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 33&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 34&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 35&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 36&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 37&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 38&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 39&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 40&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 41&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 42&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 43&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 44&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 45&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 46&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 47&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 48&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 49&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 50&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 51&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 52&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 53&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 54&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 55&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 56&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 57&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 58&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 3&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 4&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 5&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 6&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 7&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 8&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 9&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 10&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 11&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 12&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 13&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 14&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 15&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 16&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 17&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 18&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 19&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 20&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 21&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 22&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 23&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 24&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 25&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 26&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 27&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 28&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 29&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 30&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 31&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 32&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 33&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 34&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 35&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 36&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 37&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 38&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 39&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 40&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 41&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 42&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 43&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 44&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 45&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 46&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 47&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 48&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 49&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 50&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 51&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 52&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 53&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 54&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 55&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 56&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 57&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 58&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 59&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 60&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 61&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 62&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 63&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 64&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 65&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 66&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 67&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 68&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 69&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 70&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 71&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 72&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 73&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 74&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 75&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 76&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 77&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 78&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 79&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 80&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 100&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2025-01-03&#34;&gt;&#xA;  2025-01-03&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2025-01-03&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;代码随想录-视频&#34;&gt;&#xA;  代码随想录 视频&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%a3%e7%a0%81%e9%9a%8f%e6%83%b3%e5%bd%95-%e8%a7%86%e9%a2%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1fA4y1o715&#34;&gt;代码随想录&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;数组&#34;&gt;&#xA;  数组&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e7%bb%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;链表-1&#34;&gt;&#xA;  链表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%93%be%e8%a1%a8-1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;哈希表&#34;&gt;&#xA;  哈希表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%93%88%e5%b8%8c%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;字符串&#34;&gt;&#xA;  字符串&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ad%97%e7%ac%a6%e4%b8%b2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;栈与队列&#34;&gt;&#xA;  栈与队列&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%88%e4%b8%8e%e9%98%9f%e5%88%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;二叉树-1&#34;&gt;&#xA;  二叉树&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e5%8f%89%e6%a0%91-1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1 &lt;a href=&#34;https://www.bilibili.com/video/BV1Hy4y1t7ij?vd_source=867426e6965781e5a2c5ef2fc1a0f8f8&amp;amp;spm_id_from=333.788.videopod.sections&#34;&gt;理论基础&lt;/a&gt; 2025-01-09&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2 递归遍历 (Leetcode 144, 145, 94) 2025-01-09&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 3 非递归遍历 2025-01-09&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 4 非递归遍历-中序 2025-01-11&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 5 层序遍历（广度优先搜索）&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 6 翻转二叉树&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 7 对称二叉树&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 8 二叉树的最大深度&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 9 二叉树的最小深度&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 10 完全二叉树节点的数量&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 11 平衡二叉树&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 12 二叉树的所有路径&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 13 左叶子之和&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 14 找左下角的值&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 15 路径总和&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 16 从中序和后序遍历序列构造二叉树&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 17 最大二叉树&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 18 合并二叉树&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 19 &lt;a href=&#34;https://www.bilibili.com/video/BV1wG411g7sF?vd_source=867426e6965781e5a2c5ef2fc1a0f8f8&amp;amp;spm_id_from=333.788.videopod.sections&#34;&gt;二叉搜索树中的搜索&lt;/a&gt; (Leetcode 700) 2025-01-08&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 20 验证二叉搜索树 (Leetcode 98) 2025-01-08&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 21 二叉搜索树的最小绝对差 (Leetcode 530) 2025-01-08&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 22 二叉搜索树中的众数(Leetcode 501) 2025-01-09&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 23 二叉树的最近公共祖先(Leetcode 236) 2025-01-09&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 24 二叉搜索树的最近公共祖先 2025-01-09&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 25 二叉搜索树中的插入操作(Leetcode 701) 2025-01-09&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 26 &lt;a href=&#34;https://www.bilibili.com/video/BV1tP41177us?vd_source=867426e6965781e5a2c5ef2fc1a0f8f8&amp;amp;spm_id_from=333.788.player.switch&#34;&gt;删除二叉搜索树中的节点(Leetcode 450)&lt;/a&gt; 2025-01-09&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 27 修剪二叉搜索树 (Leetcode 669) 2025-01-09&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 28 将有序数组转换为二叉搜索树 (Leetcode 108) 2025-01-09&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 29 把二叉搜索树转换为累加树(Leetcode 538) 2025-01-09&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;-回溯法&#34;&gt;&#xA;  ✅ 回溯法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e5%9b%9e%e6%ba%af%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1 理论篇 2025-01-03&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2 组合问题（对应力扣题目：77.组合） 2025-01-03&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 3 组合问题的剪枝操作（对应力扣题目：77.组合）2025-01-03&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 4 回溯算法如何剪枝？| LeetCode：216.组合总和III 2025-01-03&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 5 LeetCode：17.电话号码的字母组合 2025-01-03&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 6 组合总和（对应「leetcode」力扣题目：39.组合总和） 2025-01-03&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 7 LeetCode:40.组合总和II 2025-01-03&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 8 分割回文串 2025-01-04&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 9 复原IP地址 2025-01-04&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 10 子集 （Leetcode 78） 2025-01-04&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 11 子集2（Leetcode 90） 2025-01-04&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 12 递增子序列（Leetcode 491） 2025-01-04&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 13 全排列（Leetcode 46） 2025-01-04&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 14 全排列2（Leetcode 47）2025-01-04&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 15 N皇后（Leetcode 51） 2025-01-05&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 16 解数独（Leetcode 37） 2025-01-05&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;-贪心算法&#34;&gt;&#xA;  ✅ 贪心算法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e8%b4%aa%e5%bf%83%e7%ae%97%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 理论基础 2025-01-05&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1 分发饼干 leetcode 455 2025-01-05&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2 摆动序列 Leetcode 376 2025-01-05&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 3 最大子序和 2025-01-06&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 4 买卖股票最佳时机2 2025-01-06&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 5 跳跃游戏（Leetcode 55） 2025-01-06&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 6 跳跃游戏2 （Leetcode 45） 2025-01-06&#xA;&lt;ul&gt;&#xA;&lt;li&gt;这道题没听懂&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 7 K次取反后最大化的数组和 （Leetcode 1005） 2025-01-06&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 8 加油站（Leetcode 134） 2025-01-06&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 9 分发糖果（Leetcode 135） 2025-01-06&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 10 柠檬水找零（Leetcode 860） 2025-01-06&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 11 根据身高重建队列（Leetcode 406） 2025-01-06&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 12 用最少数量的箭引爆气球(Leetcode 452) 2025-01-06&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 13 无重叠区间(Leetcode 435) 2025-01-06&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 14 划分字母区间 (Leetcode 763) 2025-01-06&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 15 合并区间 （Leetcode 56） (January 7, 2025 at 15:18:40 GMT+8)&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 16 单调自增的数字（Leetcode 738）(January 7, 2025 at 15:41:59 GMT+8)&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 17 监督二叉树（Leetcode 968） (January 7, 2025 at 16:11:51 GMT+8)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;动态规划&#34;&gt;&#xA;  动态规划&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8a%a8%e6%80%81%e8%a7%84%e5%88%92&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1 理论基础   (January 7, 2025 at 16:34:49 GMT+8)&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2 斐波那契数列 （Leetcode 509） (January 7, 2025 at 16:46:54 GMT+8)&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 3 爬楼梯（Leetcode 70） (January 7, 2025 at 16:57:46 GMT+8)&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 4 &lt;a href=&#34;https://www.bilibili.com/video/BV16G411c7yZ&#34;&gt;使用最小花费爬楼梯&lt;/a&gt; (Leetcode 746)  2025-01-08&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 5 不同路径 2025-01-08&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 6 不同路径2 (Leetcode 63) 2025-01-08&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 7 整数拆分 (Leetcode 343)  2025-01-08&#xA;&lt;ul&gt;&#xA;&lt;li&gt;这道题没太听懂&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 8 不同的二叉搜索树（Leetcode 96）&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 9 0-1背包问题理论基础&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 10 0-1背包问题之滚动数组&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 11 分割等和子集&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 12 最后一块石头的重量2&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 13 目标和&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 14 一和零&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 15 完全背包理论基础&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 16 零钱兑换2&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 17 组合综合4&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 18 零钱兑换&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 19 完全平方数&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 20 单词拆分&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 21 打家劫舍&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 22 打家劫舍2&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 23 打家劫舍3&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 24 买卖股票的最佳时机1&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 25 买卖股票的最佳时机2&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 26 买卖股票的最佳时机3&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 27 买卖股票的最佳时机4&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 28 买卖股票的最佳时机含冷冻期&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 29 买卖股票的最佳时机含手续费&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 30 最长递增子序列&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 31 最长连续递增序列&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 32 最长重复子数组&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 33 最长公共子序列&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 34 不相交的线&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 35 最大子序和&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 36 判断子序列&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 37 不同的子序列&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 38 两个字符串的删除操作&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 39 编辑距离&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 40 回文子串&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 42 最长回文子序列&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;单调栈&#34;&gt;&#xA;  单调栈&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8d%95%e8%b0%83%e6%a0%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h2 id=&#34;2024-11-14&#34;&gt;&#xA;  2024-11-14&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2024-11-14&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://challahscript.com/what_i_wish_someone_told_me_about_postgres&#34;&gt;What I Wish Someone Told Me About Postgres&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;介绍了 postgresql 相关的一些知识点，可以看一看&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.wired.com/story/the-wired-guide-to-protecting-yourself-from-government-surveillance/&#34;&gt;The WIRED Guide to Protecting Yourself From Government Surveillance&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://arstechnica.com/ai/2024/11/how-a-stubborn-computer-scientist-accidentally-launched-the-deep-learning-boom/&#34;&gt;How a stubborn computer scientist accidentally launched the deep learning boom&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;可以了解到 辛顿、黄仁勋、李飞飞 的工作是如何推动神经网络的发展的&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>观影记录</title>
      <link>/post/life/movies-log/</link>
      <pubDate>Thu, 14 Nov 2024 08:59:49 +0800</pubDate>
      <guid>/post/life/movies-log/</guid>
      <description>&lt;h1 id=&#34;观影记录&#34;&gt;&#xA;  观影记录&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%a7%82%e5%bd%b1%e8%ae%b0%e5%bd%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;2025&#34;&gt;&#xA;  2025&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2025&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 太和的房间 恐怖游轮&#xA;&lt;ul&gt;&#xA;&lt;li&gt;本来打算看原片，但是氛围太惊悚了，还是看看影评得了。。。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2025-08-07 木鱼水心 电影史话 宫崎骏 下&#xA;&lt;ul&gt;&#xA;&lt;li&gt;三个小时只差几分钟了，木鱼水心真的很用心&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;虽然B站有枪版的鬼灭无限之城，但画质确实不太行，等有画质好的在看了&lt;/li&gt;&#xA;&lt;li&gt;皮诺那么努力但还是在最后一届环法没有拿到一个赛段冠军，突围还是被无情超越了。他有一集里说，他有时候觉得自己配不上自己所得到的关注度，当一次次无法实现自己的目标时，你越来越难以自洽，听着挺感慨的。还有就是莫霍里奇突围得了冠军采访的时候说的那段话，真的不容易。皮德科克下坡超神赢了第一个环法赛段冠军，第二年无法真正担起英力士主将的角色，承受很大压力，但也没办法拿到更好的成绩。&lt;/li&gt;&#xA;&lt;li&gt;2025-07-27 Sunday&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 逆风飞驰 S1 E6&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2025-07-26 Saturday&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 逆风飞驰 S2 E8&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2025-07-25 Friday&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 逆风飞驰 S2 E7&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2025-07-24 Thursday&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 逆风飞驰 S2 E6&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2025-07-23 Wednesday&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 逆风飞驰 S2 E5&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2025-07-22 Tuesday&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 逆风飞驰 S2 E4&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2025-07-21 Monday&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 逆风飞驰 S2 E3&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2025-07-20 Sunday&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 逆风飞驰 S2 E2&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2025-07-19&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 逆风飞驰 S2 E1&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2025-07-11&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 我们与恶的距离2&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2025-07-06&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 环法自行车赛：逆风飞驰 第三季&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2025-06-06&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 盗钥匙的方法&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一部喜剧，轻松愉快&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2025-05-20&#xA;&lt;ul&gt;&#xA;&lt;li&gt;百变狸猫&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2025-05-18&#xA;&lt;ul&gt;&#xA;&lt;li&gt;卧虎藏龙&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2025-05-05&#xA;&lt;ul&gt;&#xA;&lt;li&gt;斯蒂芬 库里：被低估&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2025-05-03&#xA;&lt;ul&gt;&#xA;&lt;li&gt;再见瓦城&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2025-05-01&#xA;&lt;ul&gt;&#xA;&lt;li&gt;妇女参政论者&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2025-02-05&#xA;&lt;ul&gt;&#xA;&lt;li&gt;全金属外壳&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2025-02-04&#xA;&lt;ul&gt;&#xA;&lt;li&gt;超完美地狱&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2025-02-03&#xA;&lt;ul&gt;&#xA;&lt;li&gt;良心护士&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2025-02-02&#xA;&lt;ul&gt;&#xA;&lt;li&gt;网络谜踪2&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2025-01-26&#xA;&lt;ul&gt;&#xA;&lt;li&gt;门徒&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2025-01-23&#xA;&lt;ul&gt;&#xA;&lt;li&gt;东京爱情故事&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2025-01-12&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 敦煌&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1 &lt;code&gt;2025-01-12&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2 &lt;code&gt;2025-01-15&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 3 &lt;code&gt;2025-01-16&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 4 &lt;code&gt;2025-01-18&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 5 &lt;code&gt;2025-01-20&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 6 ``&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 7 ``&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 8 ``&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 9 ``&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 10 ``&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2025-01-11&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 如果国宝会说话 第四季&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 东京爱情故事&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1 &lt;code&gt;2025-01-11&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2 &lt;code&gt;2025-01-12&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 3 &lt;code&gt;2025-01-13&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 4 &lt;code&gt;2025-01-15&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 5 &lt;code&gt;2025-01-16&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 6 &lt;code&gt;2025-01-17&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 7 &lt;code&gt;2025-01-18&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 8 &lt;code&gt;2025-01-19&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 9 &lt;code&gt;2025-01-20&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 10 &lt;code&gt;2025-01-22&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 11 ``&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2025-01-10&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 飞屋环游记&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2025-01-07&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 如果国宝会说话 第三季&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2025-01-04&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 如果国宝会说话 第二季&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2025-01-03&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 辛德勒的名单（2）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2025-01-02&#xA;&lt;ul&gt;&#xA;&lt;li&gt;四重奏&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1 2025-01-02&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2 2025-01-03&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 3 2025-01-04&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 4 2025-01-05&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 5 2025-01-06&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 6 2025-01-07&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 7 2025-01-08&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 8 2025-01-09&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 9 2025-01-10&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;10&lt;/code&gt; 2025-01-10&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2025-01-01&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 如果国宝会说话 第一季&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2024&#34;&gt;&#xA;  2024&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2024&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;2024-12-01&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 金色梦乡&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2024-11-30&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Better Call Saul S04E07&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2024-11-29&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Better Call Saul S04E06&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2024-11-28&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Better Call Saul S04E05&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2024-11-27&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Better Call Saul S04E03-04&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2024-11-26&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Better Call Saul S04E01-02&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2024-11-25&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Better Call Saul S03E09-10&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2024-11-23&#xA;&lt;ul&gt;&#xA;&lt;li&gt;热血警探&lt;/li&gt;&#xA;&lt;li&gt;铁雨 ⭐⭐⭐⭐&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2024-11-18&#xA;&lt;ul&gt;&#xA;&lt;li&gt;东邪西毒 终极版&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2024-11-17&#xA;&lt;ul&gt;&#xA;&lt;li&gt;甲方乙方&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2024-11-16&#xA;&lt;ul&gt;&#xA;&lt;li&gt;正义回廊 ⭐⭐⭐⭐&lt;/li&gt;&#xA;&lt;li&gt;有话好好说 ⭐⭐⭐⭐&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2024-11-15&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Better Call Saul S03E07&lt;/li&gt;&#xA;&lt;li&gt;Better Call Saul S03E08&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2024-11-14&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Better Call Saul S03E06&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2024-11-13&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Better Call Saul S03E05&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2024-11-12&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Better Call Saul S03E04&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2024-11-12&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Better Call Saul S03E02&lt;/li&gt;&#xA;&lt;li&gt;Better Call Saul S03E03&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2024-10-24&#xA;&lt;ul&gt;&#xA;&lt;li&gt;哈利波特与死亡圣器 下&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2024-10-23&#xA;&lt;ul&gt;&#xA;&lt;li&gt;哈利波特与死亡圣器 上&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2024-10-22&#xA;&lt;ul&gt;&#xA;&lt;li&gt;哈利波特与混血王子&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2024-10-20&#xA;&lt;ul&gt;&#xA;&lt;li&gt;哈利波特与凤凰社&lt;/li&gt;&#xA;&lt;li&gt;哈利波特与火焰杯&lt;/li&gt;&#xA;&lt;li&gt;哈利波特与阿兹卡班的囚徒&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2024-10-19&#xA;&lt;ul&gt;&#xA;&lt;li&gt;哈利波特与密室&lt;/li&gt;&#xA;&lt;li&gt;哈利波特与魔法石&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2024-10-07&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 燃情岁月 ⭐⭐⭐⭐&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 抓娃娃&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2024-10-06&#xA;&lt;ul&gt;&#xA;&lt;li&gt;赛德克巴莱&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2024-10-05&#xA;&lt;ul&gt;&#xA;&lt;li&gt;名侦探柯南：百万美元的五棱星&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2024-10-04&#xA;&lt;ul&gt;&#xA;&lt;li&gt;年会不能停&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2024-09-17&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://movie.douban.com/subject/26304212/?dt_dapp=1&#34;&gt;市场法则&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 过季 ⭐⭐⭐⭐&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://movie.douban.com/subject/35902857/?dt_dapp=1&#34;&gt;完美的日子&lt;/a&gt; ⭐⭐⭐⭐⭐&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2024-09-15&#xA;&lt;ul&gt;&#xA;&lt;li&gt;幽灵公主&lt;/li&gt;&#xA;&lt;li&gt;鬼灭之刃 那田蜘蛛山篇&lt;/li&gt;&#xA;&lt;li&gt;鬼灭之刃 柱训练篇&lt;/li&gt;&#xA;&lt;li&gt;鬼灭之刃 锻刀村篇&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2024-09-08&#xA;&lt;ul&gt;&#xA;&lt;li&gt;不要抬头&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://movie.douban.com/subject/25878808/?dt_dapp=1&#34;&gt;2024-08-18 一部关于咖啡的电影&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;2024-07-14&#xA;&lt;ul&gt;&#xA;&lt;li&gt;鬼灭之刃 游郭篇&lt;/li&gt;&#xA;&lt;li&gt;鬼灭之刃 无限列车篇&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2024-07-07&#xA;&lt;ul&gt;&#xA;&lt;li&gt;朗读者&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2024-06-15&#xA;&lt;ul&gt;&#xA;&lt;li&gt;环法自行车赛：逆风飞驰 第二季&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2024-06-09&#xA;&lt;ul&gt;&#xA;&lt;li&gt;江湖儿女&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2024-05-19&#xA;&lt;ul&gt;&#xA;&lt;li&gt;红猪&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2024-05-12&#xA;&lt;ul&gt;&#xA;&lt;li&gt;繁花&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2024-05-04&#xA;&lt;ul&gt;&#xA;&lt;li&gt;极速车王&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2024-05-03&#xA;&lt;ul&gt;&#xA;&lt;li&gt;大佛普拉斯&lt;/li&gt;&#xA;&lt;li&gt;芝加哥七君子审判&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2024-04-22&#xA;&lt;ul&gt;&#xA;&lt;li&gt;寻梦环游记&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2024-04-21&#xA;&lt;ul&gt;&#xA;&lt;li&gt;你想活出怎样的人生&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2024-04-06&#xA;&lt;ul&gt;&#xA;&lt;li&gt;黄海&lt;/li&gt;&#xA;&lt;li&gt;逃离乌托邦&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2024-04-04&#xA;&lt;ul&gt;&#xA;&lt;li&gt;坠落的审判&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2024-03-15&#xA;&lt;ul&gt;&#xA;&lt;li&gt;周处除三害&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2024-03-13&#xA;&lt;ul&gt;&#xA;&lt;li&gt;巾帼枭雄之义海豪情&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2024-02-20&#xA;&lt;ul&gt;&#xA;&lt;li&gt;新闻女王&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2024-02-18&#xA;&lt;ul&gt;&#xA;&lt;li&gt;飞驰人生2&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2024-02-09&#xA;&lt;ul&gt;&#xA;&lt;li&gt;阿尔法围棋&lt;/li&gt;&#xA;&lt;li&gt;哈利波特20周年：回到霍格沃茨&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2024-02-08&#xA;&lt;ul&gt;&#xA;&lt;li&gt;三大队&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2024-01-20&#xA;&lt;ul&gt;&#xA;&lt;li&gt;土拨鼠之日&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2024-01-10&#xA;&lt;ul&gt;&#xA;&lt;li&gt;请回答1988&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2023&#34;&gt;&#xA;  2023&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2023&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2023年5月2日 &lt;strong&gt;婚姻生活&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2023年4月29日 &lt;strong&gt;惠子，凝视&lt;/strong&gt; ⭐⭐⭐⭐&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2023年3月18日 &lt;strong&gt;黑暗荣耀 第二季&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2023年3月05日 &lt;strong&gt;乒乓&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2023年2月12日 &lt;strong&gt;健听女孩&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2023年1月30日 &lt;strong&gt;黑匣子&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2023年1月29日 &lt;strong&gt;巴斯克·斯克鲁格斯的歌谣&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2023年1月27日 &lt;strong&gt;马拉多纳2019&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2023年1月26日 &lt;strong&gt;马拉多纳之死&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2023年1月26日 &lt;strong&gt;打扰伯格曼&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2023年1月26日 &lt;strong&gt;误杀瞒天记&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2023年1月26日 &lt;strong&gt;我即闪电&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2023年1月25日 &lt;strong&gt;风骚律师 第六季&lt;/strong&gt; ⭐⭐⭐⭐⭐&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2023年1月25日 &lt;strong&gt;宿敌&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2023年1月24日 &lt;strong&gt;互联网之子&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2023年1月22日 &lt;strong&gt;互联网之子&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2023年1月22日 &lt;strong&gt;万圣节的新娘&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2023年1月22日 &lt;strong&gt;伊卡洛斯&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2023年1月22日 &lt;strong&gt;老师，您能坐我旁边吗？&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2022&#34;&gt;&#xA;  2022&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2022&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2022年10月07日 &lt;strong&gt;真相捕捉 第二季&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2022年10月03日 &lt;strong&gt;黑洞&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2022年09月10日 &lt;strong&gt;六号车厢&lt;/strong&gt; ⭐⭐⭐⭐&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2022年08月10日 &lt;strong&gt;我的天才女友 第三季&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2022年07月31日 &lt;strong&gt;命运喜欢恶作剧&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2022年07月30日 &lt;strong&gt;人生大事&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2022年07月26日 &lt;strong&gt;渔业阴谋&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2022年02月08日 &lt;strong&gt;Tinder诈骗王&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2022年02月07日 &lt;strong&gt;亢奋 第一季&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2022年02月03日 &lt;strong&gt;情事&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2022年02月03日 &lt;strong&gt;火口的两人&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2022年02月03日 &lt;strong&gt;激情&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2022年02月02日 &lt;strong&gt;偶然与想象&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2022年02月02日 &lt;strong&gt;东城梦魇&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2022年02月01日 &lt;strong&gt;2020去死&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2022年01月31日 &lt;strong&gt;瀑布&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2022年01月31日 &lt;strong&gt;天注定&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2022年01月30日 &lt;strong&gt;T省的 84·85年&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2022年01月30日 &lt;strong&gt;天道&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2022年01月20日 &lt;strong&gt;405谋杀案&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2022年01月19日 &lt;strong&gt;背靠背，脸对脸&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2022年01月18日 &lt;strong&gt;黑炮事件&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2022年01月17日 &lt;strong&gt;成瘾剂量&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2022年01月09日 &lt;strong&gt;驾驶我的车&lt;/strong&gt; ⭐⭐⭐⭐&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2022年01月01日 &lt;strong&gt;踏雪寻梅&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2021&#34;&gt;&#xA;  2021&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2021&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2021年12月26日 &lt;strong&gt;困在时间里的父亲&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2021年11月19日 &lt;strong&gt;扬名立万&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2021年11月13日 &lt;strong&gt;不老奇事&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2021年10月31日 &lt;strong&gt;沙丘&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2021年10月31日 &lt;strong&gt;007:无暇赴死&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2021年10月16日 &lt;strong&gt;长津湖&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2021年10月10日 &lt;strong&gt;吗啡&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2021年09月25日 &lt;strong&gt;峰爆&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2021年09月22日 &lt;strong&gt;教室里的一头牦牛&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2021年09月20日 &lt;strong&gt;无依之地&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2021年09月03日 &lt;strong&gt;失控玩家&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2021年08月29日 &lt;strong&gt;让子弹飞&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2021年08月15日 &lt;strong&gt;心灵奇旅&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2021年08月10日 &lt;strong&gt;脸庞，村庄&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2021年08月07日 &lt;strong&gt;沉默的真相&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2021年08月02日 &lt;strong&gt;隐秘的角落&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2021年07月31日 &lt;strong&gt;花束般的恋爱&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2021年07月30日 &lt;strong&gt;热带往事&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2021年07月30日 &lt;strong&gt;大阪直美&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2021年07月26日 &lt;strong&gt;俗女养成记&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2021年07月07日 &lt;strong&gt;巴萨提的颜色&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2021年07月04日 &lt;strong&gt;真心半解&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2021年06月11日 &lt;strong&gt;过把瘾&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2021年06月08日 &lt;strong&gt;射雕英雄传&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2021年05月27日 &lt;strong&gt;茶馆&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2021年05月16日 &lt;strong&gt;人间的条件 5,6&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2021年05月15日 &lt;strong&gt;人间的条件 3,4&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2021年05月14日&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;热带雨&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;人间的条件 1,2&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2021年05月13日 &lt;strong&gt;南海十三郎&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2021年05月11日 &lt;strong&gt;笨鸟&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2021年05月10日 &lt;strong&gt;无言的山丘&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2021年05月09日 &lt;strong&gt;恐怖分子&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2021年05月08日 &lt;strong&gt;海滩的一日&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2021年05月08日 &lt;strong&gt;麻将&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2021年05月07日&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;青梅竹马&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;盲山&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;万箭穿心&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2021年05月06日 &lt;strong&gt;倒霉性爱，发狂黄片&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2021年05月05日 &lt;strong&gt;龙争虎斗&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;零水日&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2021年05月04日 &lt;strong&gt;若水&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2021年05月04日 &lt;strong&gt;剩女&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2021-04-13&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 盗火者：中国教育改革调查&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;others&#34;&gt;&#xA;  others&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#others&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://b23.tv/dL20Yu5&#34;&gt;【风骚律师杂谈】我爱你——86年&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title></title>
      <link>/post/others/english-learning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/others/english-learning/</guid>
      <description>&lt;h1 id=&#34;english-learning&#34;&gt;&#xA;  English Learning&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#english-learning&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://lite.cnn.com&#34;&gt;lite cnn&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;纯文字版的cnn，没有图片&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://lite.cnn.com/world/china&#34;&gt;lite cnn &lt;strong&gt;China&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.chinadaily.com.cn&#34;&gt;China Daily&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;中国官方最大的英语新闻网站？&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.21voa.com/special_english/&#34;&gt;voa special English&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;这个网站听 voa special 不用翻墙&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://restofworld.org&#34;&gt;rest of world&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;这个网站很有设计感&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://restofworld.org/region/china/&#34;&gt;China&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.theverge.com&#34;&gt;verge&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://news.ycombinator.com/&#34;&gt;Hacker News&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;技术文章也能学习英语&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.scmp.com&#34;&gt;南华早报&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.bbc.com/news&#34;&gt;bbc&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.bbc.com/news/world/asia/china&#34;&gt;China&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.quora.com&#34;&gt;quora&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;国外的知乎&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;log&#34;&gt;&#xA;  log&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#log&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;2025-01-07&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://mp.weixin.qq.com/s/nu1-Pg_kDNW4kpFwz3MCWw&#34;&gt;2024-12-14 “羽绒服”英语怎么说？你绝对想不到！&lt;/a&gt; 2025-01-07&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://mp.weixin.qq.com/s/IRaYk7ir1s-KU0s3L59WaQ&#34;&gt;2025-01-06 “年会”英文怎么说？“Year Meeting”还是“Annual Party？” 都错啦！&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;voa-special-english&#34;&gt;&#xA;  voa special English&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#voa-special-english&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.21voa.com/special_english/&#34;&gt;voa special English&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;others&#34;&gt;&#xA;  others&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#others&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sspai.com/post/92623&#34;&gt;如何利用 AI 更好地学外语&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://greycoder.com/a-list-of-text-only-new-sites/&#34;&gt;A List Of Text-Only &amp;amp; Minimalist News Sites&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2022&#34;&gt;&#xA;  2022&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2022&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Monkeypox outbreak&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;猴痘病毒爆发&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Russia-Ukraine War&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;November&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.cbsnews.com/live-updates/2022-elections-midterms-results-house-senate-polls-2022-11-09/&#34;&gt;&lt;strong&gt;A projected &amp;ldquo;red wave&amp;rdquo; fizzled, as Republicans won a slim majority in the House, and Democrats held control of the United States Senate&lt;/strong&gt;&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;随着共和党在众议院赢得微弱多数，民主党控制了美国参议院，预计中的“红色浪潮”落空了&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2022-11-09&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://dougallj.wordpress.com/2022/11/09/why-is-rosetta-2-fast/&#34;&gt;Why is Apple Rosetta 2 fast?&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;为什么 Apple Rosetta 2 速度很快？&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;October&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.cbsnews.com/news/elon-musk-twitter-sale-official-44-billion/&#34;&gt;&lt;strong&gt;Elon Musk took control of Twitter, bringing to the social media giant a brash leadership style – along with thousands of layoffs&lt;/strong&gt;&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;埃隆·马斯克 （Elon Musk） 控制了 Twitter，为这家社交媒体巨头带来了傲慢的领导风格——以及数千人的裁员&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;September&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.cbsnews.com/news/queen-elizabeth-ii-dies-age-96-britains-longest-reigning-monarch/&#34;&gt;&lt;strong&gt;Britain&amp;rsquo;s Queen Elizabeth II died in Scotland, at the age of 96. Her son Charles succeeded her as king&lt;/strong&gt;&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;英国女王伊丽莎白二世在苏格兰去世，享年 96 岁。她的儿子查理继承了她的国王之位&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;August&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.cbsnews.com/news/trump-mar-a-lago-search-fbi-documents-boxes/&#34;&gt;&lt;strong&gt;The FBI conducted a search of Mar-a-Lago, the home of former president Donald Trump, and found classified materials, including documents labeled &amp;ldquo;top secret.&amp;rdquo;&lt;/strong&gt;&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;联邦调查局对前总统唐纳德·特朗普的家马阿拉歌庄园进行了搜查，发现了机密材料，包括标记为“绝密”的文件。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;July&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.cbsnews.com/news/shinzo-abe-death-shooting-former-japanese-prime-minister/&#34;&gt;&lt;strong&gt;Former Japanese prime minister Shinzo Abe was assassinated, just two days before that country&amp;rsquo;s parliamentary elections&lt;/strong&gt;&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;日本前首相安倍晋三在该国议会选举前两天被暗杀&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;June&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.cbsnews.com/live-updates/supreme-court-roe-v-wade-abortion-rights/&#34;&gt;&lt;strong&gt;The Supreme Court overturned Roe v. Wade, effectively criminalizing abortion in much of the nation&lt;/strong&gt;&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;最高法院推翻了罗伊诉韦德案（Roe v. Wade），实际上在全国大部分地区将堕胎定为刑事犯罪。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;May&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.cbsnews.com/live-updates/texas-school-shooting-robb-elementary-uvalde/&#34;&gt;&lt;strong&gt;A gunman in Uvalde, Texas killed 19 students and two teachers at Robb Elementary School. It was the third-deadliest school shooting in U.S. history&lt;/strong&gt;&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;德克萨斯州尤瓦尔迪的一名枪手在罗布小学杀死了 19 名学生和两名教师。这是美国历史上第三致命的校园枪击事件&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;2021&#34;&gt;&#xA;  2021&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2021&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;December&#xA;&lt;ul&gt;&#xA;&lt;li&gt;In December, tornadoes ripped through the South and Midwest, killing at least 91 people &amp;hellip;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;12 月，龙卷风席卷南部和中西部，造成至少 91 人死亡&amp;hellip;&amp;hellip;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;October&#xA;&lt;ul&gt;&#xA;&lt;li&gt;October brought the welcome news that the World Health Organization had endorsed the world&amp;rsquo;s first vaccine against malaria. 10 月带来了一个可喜的消息，即世界卫生组织批准了世界上第一种疟疾疫苗&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;September&#xA;&lt;ul&gt;&#xA;&lt;li&gt;September saw the implementation of the Texas Heartbeat Act, which bans abortions after roughly six weeks. The Supreme Court has declined to block the law, saying it&amp;rsquo;s a question for lower courts. 9 月，德克萨斯州心跳法案 （Texas Heartbeat Act） 实施，该法案禁止在大约六周后堕胎。最高法院拒绝阻止这项法律，称这是下级法院的问题&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;August&#xA;&lt;ul&gt;&#xA;&lt;li&gt;August saw the withdrawal of American troops from Afghanistan after a two-decade war that took the lives of over 2,400 U.S. service personnel. 8 月，美国军队在经历了二十年的战争后从阿富汗撤军，这场战争夺走了 2,400 多名美国军人的生命&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;July&#xA;&lt;ul&gt;&#xA;&lt;li&gt;July brought the 32nd Summer Olympic games to Tokyo, a year after being postponed. The U.S. topped the medal count with 113. 第 32 届夏季奥运会在推迟一年后于 7 月在东京举行。美国以 113 枚奖牌位居榜首&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;June&#xA;&lt;ul&gt;&#xA;&lt;li&gt;June saw the partial collapse of a 12-story condominium in Surfside, Florida, killing 98 residents. 6 月，佛罗里达州瑟夫赛德 （Surfside） 的一栋 12 层公寓部分倒塌，造成 98 名居民死亡&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;March&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The container ship Ever Given ran aground in the Suez Canal in March, holding up billions in trade. The ship was freed six days later. 3 月，集装箱船 Ever Given 在苏伊士运河搁浅，阻碍了数十亿美元的贸易。六天后，这艘船被释放&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;February&#xA;&lt;ul&gt;&#xA;&lt;li&gt;In February, the United States formally re-joined the Paris Climate Agreement, an international treaty aimed at limiting global warming. 今年 2 月，美国正式重新加入旨在限制全球变暖的国际条约《巴黎气候协定》。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Janurary&#xA;&lt;ul&gt;&#xA;&lt;li&gt;In January Joe Biden was inaugurated as our 46th president … 1 月，乔·拜登就任我们的第 46 任总统&amp;hellip;&amp;hellip;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;2020&#34;&gt;&#xA;  2020&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2020&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;The United Kingdom left the European Union; Brexit&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;2019&#34;&gt;&#xA;  2019&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2019&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Global SARS-Cov-2 (COVID-19) Pandemic&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;Hong Kong Protests in 2019. 2019 年香港抗议活动&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;2018&#34;&gt;&#xA;  2018&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2018&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;The Yellow Vests Movement in France&lt;/strong&gt; 法国巴黎黄背心运动&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;World&amp;rsquo;s longest sea-crossing bridge: Hong Kong-Zhuhai-Macao Bridge&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;The China-US trade War Started in 2018. 2018 年开始的中美贸易战&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;2015&#34;&gt;&#xA;  2015&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2015&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The Legalization of Same-Sex Marriage in the United States 美国同性婚姻合法化&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;2014&#34;&gt;&#xA;  2014&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2014&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Catastrophic Aviation Disasters of 2014. 2014 年的灾难性航空灾难&lt;/li&gt;&#xA;&lt;li&gt;The Annexation of Crimea by Russia 俄罗斯吞并克里米亚&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;2012&#34;&gt;&#xA;  2012&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2012&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The “God Particle” Is (Probably) Discovered “上帝粒子”被发现&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;2011&#34;&gt;&#xA;  2011&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2011&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Japan’s 2011 Tōhoku Earthquake and Tsunami 日本 2011 年东北地震和海啸&lt;/li&gt;&#xA;&lt;li&gt;Bin Laden Killed 本·拉登被击毙&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;2010&#34;&gt;&#xA;  2010&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2010&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Instagram was launched&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Apple Inc. releasd the first tablet touch screen computer iPad&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;2009-2017&#34;&gt;&#xA;  2009-2017&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2009-2017&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Barack Obama, the 44th U.S. President. The 1st African American President of the United States&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;2009&#34;&gt;&#xA;  2009&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2009&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;Bitcoin&lt;/strong&gt; 比特币&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>/post/others/mathematics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/others/mathematics/</guid>
      <description></description>
    </item>
    <item>
      <title>algorithm practice 剑指 offer</title>
      <link>/post/computer-science/algorithm/algorithm-practice-%E5%89%91%E6%8C%87-offer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/algorithm/algorithm-practice-%E5%89%91%E6%8C%87-offer/</guid>
      <description>&lt;h2 id=&#34;algorithm-practice-剑指-offer&#34;&gt;&#xA;  algorithm practice 剑指 offer&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#algorithm-practice-%e5%89%91%e6%8c%87-offer&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;第1章-整数&#34;&gt;&#xA;  第1章 整数&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac1%e7%ab%a0-%e6%95%b4%e6%95%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;11-整数的基础知识&#34;&gt;&#xA;  1.1 整数的基础知识&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#11-%e6%95%b4%e6%95%b0%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题1整数除法&#34;&gt;&#xA;  面试题1：整数除法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%981%e6%95%b4%e6%95%b0%e9%99%a4%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;12-二进制&#34;&gt;&#xA;  1.2 二进制&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#12-%e4%ba%8c%e8%bf%9b%e5%88%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题2二进制加法&#34;&gt;&#xA;  面试题2：二进制加法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%982%e4%ba%8c%e8%bf%9b%e5%88%b6%e5%8a%a0%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题3前n个数字二进制形式中1的个数&#34;&gt;&#xA;  面试题3：前n个数字二进制形式中1的个数&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%983%e5%89%8dn%e4%b8%aa%e6%95%b0%e5%ad%97%e4%ba%8c%e8%bf%9b%e5%88%b6%e5%bd%a2%e5%bc%8f%e4%b8%ad1%e7%9a%84%e4%b8%aa%e6%95%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;简单计算每个整数的二进制形式中1的个数&#34;&gt;&#xA;  简单计算每个整数的二进制形式中1的个数&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ae%80%e5%8d%95%e8%ae%a1%e7%ae%97%e6%af%8f%e4%b8%aa%e6%95%b4%e6%95%b0%e7%9a%84%e4%ba%8c%e8%bf%9b%e5%88%b6%e5%bd%a2%e5%bc%8f%e4%b8%ad1%e7%9a%84%e4%b8%aa%e6%95%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;根据ii-1计算i的二进制形式中1的个数&#34;&gt;&#xA;  根据“i&amp;amp;（i-1）”计算i的二进制形式中1的个数&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%b9%e6%8d%aeii-1%e8%ae%a1%e7%ae%97i%e7%9a%84%e4%ba%8c%e8%bf%9b%e5%88%b6%e5%bd%a2%e5%bc%8f%e4%b8%ad1%e7%9a%84%e4%b8%aa%e6%95%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;根据i2计算i的二进制形式中1的个数&#34;&gt;&#xA;  根据“i/2”计算i的二进制形式中1的个数&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%b9%e6%8d%aei2%e8%ae%a1%e7%ae%97i%e7%9a%84%e4%ba%8c%e8%bf%9b%e5%88%b6%e5%bd%a2%e5%bc%8f%e4%b8%ad1%e7%9a%84%e4%b8%aa%e6%95%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h5 id=&#34;面试题4只出现一次的数字&#34;&gt;&#xA;  面试题4：只出现一次的数字&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%984%e5%8f%aa%e5%87%ba%e7%8e%b0%e4%b8%80%e6%ac%a1%e7%9a%84%e6%95%b0%e5%ad%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题5单词长度的最大乘积&#34;&gt;&#xA;  面试题5：单词长度的最大乘积&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%985%e5%8d%95%e8%af%8d%e9%95%bf%e5%ba%a6%e7%9a%84%e6%9c%80%e5%a4%a7%e4%b9%98%e7%a7%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;用哈希表记录字符串中出现的字符&#34;&gt;&#xA;  用哈希表记录字符串中出现的字符&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%94%a8%e5%93%88%e5%b8%8c%e8%a1%a8%e8%ae%b0%e5%bd%95%e5%ad%97%e7%ac%a6%e4%b8%b2%e4%b8%ad%e5%87%ba%e7%8e%b0%e7%9a%84%e5%ad%97%e7%ac%a6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;用整数的二进制数位记录字符串中出现的字符&#34;&gt;&#xA;  用整数的二进制数位记录字符串中出现的字符&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%94%a8%e6%95%b4%e6%95%b0%e7%9a%84%e4%ba%8c%e8%bf%9b%e5%88%b6%e6%95%b0%e4%bd%8d%e8%ae%b0%e5%bd%95%e5%ad%97%e7%ac%a6%e4%b8%b2%e4%b8%ad%e5%87%ba%e7%8e%b0%e7%9a%84%e5%ad%97%e7%ac%a6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h4 id=&#34;13-本章小结&#34;&gt;&#xA;  1.3 本章小结&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#13-%e6%9c%ac%e7%ab%a0%e5%b0%8f%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;第2章-数组&#34;&gt;&#xA;  第2章 数组&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac2%e7%ab%a0-%e6%95%b0%e7%bb%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;21-数组的基础知识&#34;&gt;&#xA;  2.1 数组的基础知识&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#21-%e6%95%b0%e7%bb%84%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;22-双指针&#34;&gt;&#xA;  2.2 双指针&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#22-%e5%8f%8c%e6%8c%87%e9%92%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题6排序数组中的两个数字之和&#34;&gt;&#xA;  面试题6：排序数组中的两个数字之和&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%986%e6%8e%92%e5%ba%8f%e6%95%b0%e7%bb%84%e4%b8%ad%e7%9a%84%e4%b8%a4%e4%b8%aa%e6%95%b0%e5%ad%97%e4%b9%8b%e5%92%8c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题7数组中和为0的3个数字&#34;&gt;&#xA;  面试题7：数组中和为0的3个数字&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%987%e6%95%b0%e7%bb%84%e4%b8%ad%e5%92%8c%e4%b8%ba0%e7%9a%843%e4%b8%aa%e6%95%b0%e5%ad%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题8和大于或等于k的最短子数组&#34;&gt;&#xA;  面试题8：和大于或等于k的最短子数组&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%988%e5%92%8c%e5%a4%a7%e4%ba%8e%e6%88%96%e7%ad%89%e4%ba%8ek%e7%9a%84%e6%9c%80%e7%9f%ad%e5%ad%90%e6%95%b0%e7%bb%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题9乘积小于k的子数组&#34;&gt;&#xA;  面试题9：乘积小于k的子数组&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%989%e4%b9%98%e7%a7%af%e5%b0%8f%e4%ba%8ek%e7%9a%84%e5%ad%90%e6%95%b0%e7%bb%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;23-累加数组数字求子数组之和&#34;&gt;&#xA;  2.3 累加数组数字求子数组之和&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#23-%e7%b4%af%e5%8a%a0%e6%95%b0%e7%bb%84%e6%95%b0%e5%ad%97%e6%b1%82%e5%ad%90%e6%95%b0%e7%bb%84%e4%b9%8b%e5%92%8c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题10和为k的子数组&#34;&gt;&#xA;  面试题10：和为k的子数组&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9810%e5%92%8c%e4%b8%bak%e7%9a%84%e5%ad%90%e6%95%b0%e7%bb%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题110和1个数相同的子数组&#34;&gt;&#xA;  面试题11：0和1个数相同的子数组&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%98110%e5%92%8c1%e4%b8%aa%e6%95%b0%e7%9b%b8%e5%90%8c%e7%9a%84%e5%ad%90%e6%95%b0%e7%bb%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题12左右两边子数组的和相等&#34;&gt;&#xA;  面试题12：左右两边子数组的和相等&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9812%e5%b7%a6%e5%8f%b3%e4%b8%a4%e8%be%b9%e5%ad%90%e6%95%b0%e7%bb%84%e7%9a%84%e5%92%8c%e7%9b%b8%e7%ad%89&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题13二维子矩阵的数字之和&#34;&gt;&#xA;  面试题13：二维子矩阵的数字之和&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9813%e4%ba%8c%e7%bb%b4%e5%ad%90%e7%9f%a9%e9%98%b5%e7%9a%84%e6%95%b0%e5%ad%97%e4%b9%8b%e5%92%8c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;24-本章小结&#34;&gt;&#xA;  2.4 本章小结&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#24-%e6%9c%ac%e7%ab%a0%e5%b0%8f%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;第3章-字符串&#34;&gt;&#xA;  第3章 字符串&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac3%e7%ab%a0-%e5%ad%97%e7%ac%a6%e4%b8%b2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;31-字符串的基础知识&#34;&gt;&#xA;  3.1 字符串的基础知识&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#31-%e5%ad%97%e7%ac%a6%e4%b8%b2%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;32-双指针&#34;&gt;&#xA;  3.2 双指针&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#32-%e5%8f%8c%e6%8c%87%e9%92%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题14字符串中的变位词&#34;&gt;&#xA;  面试题14：字符串中的变位词&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9814%e5%ad%97%e7%ac%a6%e4%b8%b2%e4%b8%ad%e7%9a%84%e5%8f%98%e4%bd%8d%e8%af%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题15字符串中的所有变位词&#34;&gt;&#xA;  面试题15：字符串中的所有变位词&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9815%e5%ad%97%e7%ac%a6%e4%b8%b2%e4%b8%ad%e7%9a%84%e6%89%80%e6%9c%89%e5%8f%98%e4%bd%8d%e8%af%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题16不含重复字符的最长子字符串&#34;&gt;&#xA;  面试题16：不含重复字符的最长子字符串&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9816%e4%b8%8d%e5%90%ab%e9%87%8d%e5%a4%8d%e5%ad%97%e7%ac%a6%e7%9a%84%e6%9c%80%e9%95%bf%e5%ad%90%e5%ad%97%e7%ac%a6%e4%b8%b2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;需要多次遍历整个哈希表的解法&#34;&gt;&#xA;  需要多次遍历整个哈希表的解法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9c%80%e8%a6%81%e5%a4%9a%e6%ac%a1%e9%81%8d%e5%8e%86%e6%95%b4%e4%b8%aa%e5%93%88%e5%b8%8c%e8%a1%a8%e7%9a%84%e8%a7%a3%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;避免多次遍历整个哈希表的解法&#34;&gt;&#xA;  避免多次遍历整个哈希表的解法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%81%bf%e5%85%8d%e5%a4%9a%e6%ac%a1%e9%81%8d%e5%8e%86%e6%95%b4%e4%b8%aa%e5%93%88%e5%b8%8c%e8%a1%a8%e7%9a%84%e8%a7%a3%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h5 id=&#34;面试题17包含所有字符的最短字符串&#34;&gt;&#xA;  面试题17：包含所有字符的最短字符串&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9817%e5%8c%85%e5%90%ab%e6%89%80%e6%9c%89%e5%ad%97%e7%ac%a6%e7%9a%84%e6%9c%80%e7%9f%ad%e5%ad%97%e7%ac%a6%e4%b8%b2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;33-回文字符串&#34;&gt;&#xA;  3.3 回文字符串&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#33-%e5%9b%9e%e6%96%87%e5%ad%97%e7%ac%a6%e4%b8%b2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题18有效的回文&#34;&gt;&#xA;  面试题18：有效的回文&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9818%e6%9c%89%e6%95%88%e7%9a%84%e5%9b%9e%e6%96%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题19最多删除一个字符得到回文&#34;&gt;&#xA;  面试题19：最多删除一个字符得到回文&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9819%e6%9c%80%e5%a4%9a%e5%88%a0%e9%99%a4%e4%b8%80%e4%b8%aa%e5%ad%97%e7%ac%a6%e5%be%97%e5%88%b0%e5%9b%9e%e6%96%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题20回文子字符串的个数&#34;&gt;&#xA;  面试题20：回文子字符串的个数&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9820%e5%9b%9e%e6%96%87%e5%ad%90%e5%ad%97%e7%ac%a6%e4%b8%b2%e7%9a%84%e4%b8%aa%e6%95%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;34-本章小结&#34;&gt;&#xA;  3.4 本章小结&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#34-%e6%9c%ac%e7%ab%a0%e5%b0%8f%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;第4章-链表&#34;&gt;&#xA;  第4章 链表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac4%e7%ab%a0-%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;41-链表的基础知识&#34;&gt;&#xA;  4.1 链表的基础知识&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#41-%e9%93%be%e8%a1%a8%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;42-哨兵节点&#34;&gt;&#xA;  4.2 哨兵节点&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#42-%e5%93%a8%e5%85%b5%e8%8a%82%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;用哨兵节点简化链表插入操作&#34;&gt;&#xA;  用哨兵节点简化链表插入操作&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%94%a8%e5%93%a8%e5%85%b5%e8%8a%82%e7%82%b9%e7%ae%80%e5%8c%96%e9%93%be%e8%a1%a8%e6%8f%92%e5%85%a5%e6%93%8d%e4%bd%9c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;用哨兵节点简化链表删除操作&#34;&gt;&#xA;  用哨兵节点简化链表删除操作&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%94%a8%e5%93%a8%e5%85%b5%e8%8a%82%e7%82%b9%e7%ae%80%e5%8c%96%e9%93%be%e8%a1%a8%e5%88%a0%e9%99%a4%e6%93%8d%e4%bd%9c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;43-双指针&#34;&gt;&#xA;  4.3 双指针&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#43-%e5%8f%8c%e6%8c%87%e9%92%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题21删除倒数第k个节点&#34;&gt;&#xA;  面试题21：删除倒数第k个节点&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9821%e5%88%a0%e9%99%a4%e5%80%92%e6%95%b0%e7%ac%ack%e4%b8%aa%e8%8a%82%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题22链表中环的入口节点&#34;&gt;&#xA;  面试题22：链表中环的入口节点&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9822%e9%93%be%e8%a1%a8%e4%b8%ad%e7%8e%af%e7%9a%84%e5%85%a5%e5%8f%a3%e8%8a%82%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;需要知道环中节点数目的解法&#34;&gt;&#xA;  需要知道环中节点数目的解法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9c%80%e8%a6%81%e7%9f%a5%e9%81%93%e7%8e%af%e4%b8%ad%e8%8a%82%e7%82%b9%e6%95%b0%e7%9b%ae%e7%9a%84%e8%a7%a3%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;不需要知道环中节点数目的解法&#34;&gt;&#xA;  不需要知道环中节点数目的解法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%8d%e9%9c%80%e8%a6%81%e7%9f%a5%e9%81%93%e7%8e%af%e4%b8%ad%e8%8a%82%e7%82%b9%e6%95%b0%e7%9b%ae%e7%9a%84%e8%a7%a3%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h5 id=&#34;面试题23两个链表的第1个重合节点&#34;&gt;&#xA;  面试题23：两个链表的第1个重合节点&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9823%e4%b8%a4%e4%b8%aa%e9%93%be%e8%a1%a8%e7%9a%84%e7%ac%ac1%e4%b8%aa%e9%87%8d%e5%90%88%e8%8a%82%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;44-反转链表&#34;&gt;&#xA;  4.4 反转链表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#44-%e5%8f%8d%e8%bd%ac%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题24反转链表&#34;&gt;&#xA;  面试题24：反转链表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9824%e5%8f%8d%e8%bd%ac%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题25链表中的数字相加&#34;&gt;&#xA;  面试题25：链表中的数字相加&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9825%e9%93%be%e8%a1%a8%e4%b8%ad%e7%9a%84%e6%95%b0%e5%ad%97%e7%9b%b8%e5%8a%a0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题26重排链表&#34;&gt;&#xA;  面试题26：重排链表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9826%e9%87%8d%e6%8e%92%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题27回文链表&#34;&gt;&#xA;  面试题27：回文链表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9827%e5%9b%9e%e6%96%87%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;45-双向链表和循环链表&#34;&gt;&#xA;  4.5 双向链表和循环链表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#45-%e5%8f%8c%e5%90%91%e9%93%be%e8%a1%a8%e5%92%8c%e5%be%aa%e7%8e%af%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题28展平多级双向链&#34;&gt;&#xA;  面试题28：展平多级双向链&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9828%e5%b1%95%e5%b9%b3%e5%a4%9a%e7%ba%a7%e5%8f%8c%e5%90%91%e9%93%be&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题29排序的循环链表&#34;&gt;&#xA;  面试题29：排序的循环链表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9829%e6%8e%92%e5%ba%8f%e7%9a%84%e5%be%aa%e7%8e%af%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;46-本章小结&#34;&gt;&#xA;  4.6 本章小结&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#46-%e6%9c%ac%e7%ab%a0%e5%b0%8f%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;第5章-哈希表&#34;&gt;&#xA;  第5章 哈希表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac5%e7%ab%a0-%e5%93%88%e5%b8%8c%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;51-哈希表的基础知识&#34;&gt;&#xA;  5.1 哈希表的基础知识&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#51-%e5%93%88%e5%b8%8c%e8%a1%a8%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;52-哈希表的设计&#34;&gt;&#xA;  5.2 哈希表的设计&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#52-%e5%93%88%e5%b8%8c%e8%a1%a8%e7%9a%84%e8%ae%be%e8%ae%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;53-哈希表的应用&#34;&gt;&#xA;  5.3 哈希表的应用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#53-%e5%93%88%e5%b8%8c%e8%a1%a8%e7%9a%84%e5%ba%94%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;54-本章小结&#34;&gt;&#xA;  5.4 本章小结&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#54-%e6%9c%ac%e7%ab%a0%e5%b0%8f%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;第6章-栈&#34;&gt;&#xA;  第6章 栈&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac6%e7%ab%a0-%e6%a0%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;61-栈的基础知识&#34;&gt;&#xA;  6.1 栈的基础知识&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#61-%e6%a0%88%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;62-栈的应用&#34;&gt;&#xA;  6.2 栈的应用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#62-%e6%a0%88%e7%9a%84%e5%ba%94%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题36后缀表达式&#34;&gt;&#xA;  面试题36：后缀表达式&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9836%e5%90%8e%e7%bc%80%e8%a1%a8%e8%be%be%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题37小行星碰撞&#34;&gt;&#xA;  面试题37：小行星碰撞&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9837%e5%b0%8f%e8%a1%8c%e6%98%9f%e7%a2%b0%e6%92%9e&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题38每日温度&#34;&gt;&#xA;  面试题38：每日温度&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9838%e6%af%8f%e6%97%a5%e6%b8%a9%e5%ba%a6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题39直方图最大矩形面积&#34;&gt;&#xA;  面试题39：直方图最大矩形面积&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9839%e7%9b%b4%e6%96%b9%e5%9b%be%e6%9c%80%e5%a4%a7%e7%9f%a9%e5%bd%a2%e9%9d%a2%e7%a7%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;蛮力法&#34;&gt;&#xA;  蛮力法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%9b%ae%e5%8a%9b%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;分治法&#34;&gt;&#xA;  分治法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e6%b2%bb%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;单调栈法&#34;&gt;&#xA;  单调栈法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8d%95%e8%b0%83%e6%a0%88%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h5 id=&#34;面试题40矩阵中的最大矩形&#34;&gt;&#xA;  面试题40：矩阵中的最大矩形&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9840%e7%9f%a9%e9%98%b5%e4%b8%ad%e7%9a%84%e6%9c%80%e5%a4%a7%e7%9f%a9%e5%bd%a2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;63-本章小结&#34;&gt;&#xA;  6.3 本章小结&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#63-%e6%9c%ac%e7%ab%a0%e5%b0%8f%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;第7章-队列&#34;&gt;&#xA;  第7章 队列&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac7%e7%ab%a0-%e9%98%9f%e5%88%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;71-队列的基础知识&#34;&gt;&#xA;  7.1 队列的基础知识&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#71-%e9%98%9f%e5%88%97%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;72-队列的应用&#34;&gt;&#xA;  7.2 队列的应用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#72-%e9%98%9f%e5%88%97%e7%9a%84%e5%ba%94%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题41滑动窗口的平均值&#34;&gt;&#xA;  面试题41：滑动窗口的平均值&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9841%e6%bb%91%e5%8a%a8%e7%aa%97%e5%8f%a3%e7%9a%84%e5%b9%b3%e5%9d%87%e5%80%bc&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题42最近请求次数&#34;&gt;&#xA;  面试题42：最近请求次数&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9842%e6%9c%80%e8%bf%91%e8%af%b7%e6%b1%82%e6%ac%a1%e6%95%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;73-二叉树的广度优先搜索-solution0703001&#34;&gt;&#xA;  7.3 二叉树的广度优先搜索 Solution0703001&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#73-%e4%ba%8c%e5%8f%89%e6%a0%91%e7%9a%84%e5%b9%bf%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2-solution0703001&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;广度优先搜索&#34;&gt;&#xA;  广度优先搜索&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b9%bf%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bfs&lt;/span&gt;(TreeNode root) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; queue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (root &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(root);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;()) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TreeNode node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        result.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (node.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (node.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;面试题43在完全二叉树中添加节点&#34;&gt;&#xA;  面试题43：在完全二叉树中添加节点&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9843%e5%9c%a8%e5%ae%8c%e5%85%a8%e4%ba%8c%e5%8f%89%e6%a0%91%e4%b8%ad%e6%b7%bb%e5%8a%a0%e8%8a%82%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// CBT Complete Binary Tree&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CBTInserter&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; queue;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; TreeNode root;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CBTInserter&lt;/span&gt;(TreeNode root) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        queue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;peek&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;peek&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            TreeNode node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TreeNode parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;peek&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TreeNode node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TreeNode(v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (parent.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            parent.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            parent.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(parent.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(parent.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; parent.&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; TreeNode &lt;span style=&#34;color:#a6e22e&#34;&gt;get_root&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;面试题44二叉树中每层的最大值&#34;&gt;&#xA;  面试题44：二叉树中每层的最大值&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9844%e4%ba%8c%e5%8f%89%e6%a0%91%e4%b8%ad%e6%af%8f%e5%b1%82%e7%9a%84%e6%9c%80%e5%a4%a7%e5%80%bc&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;用一个队列实现二叉树的广度优先搜索&#34;&gt;&#xA;  用一个队列实现二叉树的广度优先搜索&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%94%a8%e4%b8%80%e4%b8%aa%e9%98%9f%e5%88%97%e5%ae%9e%e7%8e%b0%e4%ba%8c%e5%8f%89%e6%a0%91%e7%9a%84%e5%b9%bf%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;largestValues&lt;/span&gt;(TreeNode root) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; queue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (root &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(root);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; max &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Integer.&lt;span style=&#34;color:#a6e22e&#34;&gt;MIN_VALUE&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;()) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TreeNode node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        current&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        max &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(max.&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (node.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            next&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (node.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            next&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (current &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; 0) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            result.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(max);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            max &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Integer.&lt;span style=&#34;color:#a6e22e&#34;&gt;MIN_VALUE&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h6 id=&#34;用两个队列实现二叉树的广度优先搜索&#34;&gt;&#xA;  用两个队列实现二叉树的广度优先搜索&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%94%a8%e4%b8%a4%e4%b8%aa%e9%98%9f%e5%88%97%e5%ae%9e%e7%8e%b0%e4%ba%8c%e5%8f%89%e6%a0%91%e7%9a%84%e5%b9%bf%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;largestValues&lt;/span&gt;(TreeNode root) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; queue1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; queue2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (root &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        queue1.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(root);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; max &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(max, node.&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (node.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        queue2.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (node.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        queue2.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (queue1.&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;()) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        result.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(max);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        max &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Integer.&lt;span style=&#34;color:#a6e22e&#34;&gt;MIN_VALUE&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        queue1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; queue2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        queue2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;面试题45二叉树最低层最左边的值&#34;&gt;&#xA;  面试题45：二叉树最低层最左边的值&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9845%e4%ba%8c%e5%8f%89%e6%a0%91%e6%9c%80%e4%bd%8e%e5%b1%82%e6%9c%80%e5%b7%a6%e8%be%b9%e7%9a%84%e5%80%bc&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findBottomLeftValue&lt;/span&gt;(TreeNode root) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; queue1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; queue2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    queue1.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(root);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; bottomLeft &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root.&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;()) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TreeNode node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; queue1.&lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (node.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            queue2.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (node.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            queue2.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (queue1.&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;()) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            queue1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; queue2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            queue2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;queue1.&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;()) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                bottomLeft &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; queue1.&lt;span style=&#34;color:#a6e22e&#34;&gt;peek&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bottomLeft;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;面试题46二叉树的右侧视图&#34;&gt;&#xA;  面试题46：二叉树的右侧视图&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9846%e4%ba%8c%e5%8f%89%e6%a0%91%e7%9a%84%e5%8f%b3%e4%be%a7%e8%a7%86%e5%9b%be&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rightSideView&lt;/span&gt;(TreeNode root) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; view &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (root &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; view;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; queue1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; queue2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    queue1.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(root);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;queue1.&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;()) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TreeNode node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; queue1.&lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (node.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            queue2.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (node.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            queue2.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (queue1.&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;()) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            view.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            queue1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; queue2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            queue2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; view;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;74-本章小结&#34;&gt;&#xA;  7.4 本章小结&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#74-%e6%9c%ac%e7%ab%a0%e5%b0%8f%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;第8章-树&#34;&gt;&#xA;  第8章 树&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac8%e7%ab%a0-%e6%a0%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;81-树的基础知识&#34;&gt;&#xA;  8.1 树的基础知识&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#81-%e6%a0%91%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TreeNode&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; val;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    TreeNode left;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    TreeNode right;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    TreeNode(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;82-二叉树的深度优先搜索&#34;&gt;&#xA;  8.2 二叉树的深度优先搜索&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#82-%e4%ba%8c%e5%8f%89%e6%a0%91%e7%9a%84%e6%b7%b1%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;中序遍历&#34;&gt;&#xA;  中序遍历&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%ad%e5%ba%8f%e9%81%8d%e5%8e%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inorderTraversal&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dfs(root, nodes);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; nodes;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt;(TreeNode root, List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; nodes) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (root &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dfs(root.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;, nodes);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        nodes.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(root.&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dfs(root.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;, nodes);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h6 id=&#34;迭代&#34;&gt;&#xA;  迭代&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%bf%ad%e4%bb%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// left -&amp;gt; current -&amp;gt; right&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inorderTraversal&lt;/span&gt;(TreeNode root) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; stack &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    TreeNode cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (cur &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;stack.&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;()) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (cur &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            stack.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(cur);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cur.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; stack.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        nodes.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(cur.&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// current node&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cur.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; nodes;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;前序遍历&#34;&gt;&#xA;  前序遍历&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%89%8d%e5%ba%8f%e9%81%8d%e5%8e%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;preorderTraversal&lt;/span&gt;(TreeNode root) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dfs(root, nodes);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; nodes;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt;(TreeNode root, List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; nodes) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (root &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        nodes.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(root.&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dfs(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;, nodes);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dfs(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;, nodes);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h6 id=&#34;迭代-1&#34;&gt;&#xA;  迭代&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%bf%ad%e4%bb%a3-1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// current -&amp;gt; left -&amp;gt; right&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;preorderTraversal&lt;/span&gt;(TreeNode root) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; stack &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    TreeNode cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (cur &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;stack.&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;()) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (cur &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            result.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(cur.&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// current node&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            stack.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(cur);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cur.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; stack.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cur.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;后序遍历&#34;&gt;&#xA;  后序遍历&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%90%8e%e5%ba%8f%e9%81%8d%e5%8e%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;迭代-2&#34;&gt;&#xA;  迭代&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%bf%ad%e4%bb%a3-2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;postorderTraversal&lt;/span&gt;(TreeNode root) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; stack &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    TreeNode cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    TreeNode prev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (cur &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;stack.&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;()) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (cur &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            stack.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(cur);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cur.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; stack.&lt;span style=&#34;color:#a6e22e&#34;&gt;peek&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (cur.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cur.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; prev) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            stack.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            result.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(cur.&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            prev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cur;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;3种遍历方法小结&#34;&gt;&#xA;  3种遍历方法小结&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3%e7%a7%8d%e9%81%8d%e5%8e%86%e6%96%b9%e6%b3%95%e5%b0%8f%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题47二叉树剪枝&#34;&gt;&#xA;  面试题47：二叉树剪枝&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9847%e4%ba%8c%e5%8f%89%e6%a0%91%e5%89%aa%e6%9e%9d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; TreeNode &lt;span style=&#34;color:#a6e22e&#34;&gt;pruneTree&lt;/span&gt;(TreeNode root) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (root &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; root;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    root.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pruneTree(root.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    root.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pruneTree(root.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (root.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; root.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; root.&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; 0) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; root;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;面试题48序列化和反序列化二叉树&#34;&gt;&#xA;  面试题48：序列化和反序列化二叉树&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9848%e5%ba%8f%e5%88%97%e5%8c%96%e5%92%8c%e5%8f%8d%e5%ba%8f%e5%88%97%e5%8c%96%e4%ba%8c%e5%8f%89%e6%a0%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;序列化&#34;&gt;&#xA;  序列化&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ba%8f%e5%88%97%e5%8c%96&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;serialize&lt;/span&gt;(TreeNode root) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (root &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    String leftStr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; serialize(root.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    String right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; serialize(root.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; String.&lt;span style=&#34;color:#a6e22e&#34;&gt;valueOf&lt;/span&gt;(root.&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; leftStr &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; rightStr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h6 id=&#34;反序列化&#34;&gt;&#xA;  反序列化&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%8d%e5%ba%8f%e5%88%97%e5%8c%96&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; TreeNode &lt;span style=&#34;color:#a6e22e&#34;&gt;deserialize&lt;/span&gt;(String data) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; nodeStrs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data.&lt;span style=&#34;color:#a6e22e&#34;&gt;split&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {0};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dfs(nodeStrs, i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; TreeNode &lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt;(String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; strs, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; i) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    String str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; strs&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    i&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]++&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (str.&lt;span style=&#34;color:#a6e22e&#34;&gt;equals&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#&amp;#34;&lt;/span&gt;)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    TreeNode node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TreeNode(Integer.&lt;span style=&#34;color:#a6e22e&#34;&gt;valueOf&lt;/span&gt;(str));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    node.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dfs(strs, i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    node.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dfs(strs, i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; node;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;面试题49从根节点到叶节点的路径数字之和&#34;&gt;&#xA;  面试题49：从根节点到叶节点的路径数字之和&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9849%e4%bb%8e%e6%a0%b9%e8%8a%82%e7%82%b9%e5%88%b0%e5%8f%b6%e8%8a%82%e7%82%b9%e7%9a%84%e8%b7%af%e5%be%84%e6%95%b0%e5%ad%97%e4%b9%8b%e5%92%8c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sumNumbers&lt;/span&gt;(TreeNode root) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dfs(root, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt;(TreeNode root, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; path) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (root &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; path &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; 10 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; root.&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (root.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; root.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; path;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dfs(root.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;, path) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dfs(root.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;, path);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;面试题50向下的路径节点值之和&#34;&gt;&#xA;  面试题50：向下的路径节点值之和&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9850%e5%90%91%e4%b8%8b%e7%9a%84%e8%b7%af%e5%be%84%e8%8a%82%e7%82%b9%e5%80%bc%e4%b9%8b%e5%92%8c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pathSum&lt;/span&gt;(TreeNode root, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sum) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer, Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; map &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; HashMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    map.&lt;span style=&#34;color:#a6e22e&#34;&gt;put&lt;/span&gt;(0, 1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dfs(root, sum, map, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt;(TreeNode root, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sum,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer, Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; map, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; path) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (root &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    path &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; root.&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map.&lt;span style=&#34;color:#a6e22e&#34;&gt;getOrDefault&lt;/span&gt;(path &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; sum, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;面试题51节点值之和最大的路径&#34;&gt;&#xA;  面试题51：节点值之和最大的路径&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9851%e8%8a%82%e7%82%b9%e5%80%bc%e4%b9%8b%e5%92%8c%e6%9c%80%e5%a4%a7%e7%9a%84%e8%b7%af%e5%be%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;83-二叉搜索树&#34;&gt;&#xA;  8.3 二叉搜索树&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#83-%e4%ba%8c%e5%8f%89%e6%90%9c%e7%b4%a2%e6%a0%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题52展平二叉搜索树&#34;&gt;&#xA;  面试题52：展平二叉搜索树&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9852%e5%b1%95%e5%b9%b3%e4%ba%8c%e5%8f%89%e6%90%9c%e7%b4%a2%e6%a0%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题53二叉搜索树的下一个节点&#34;&gt;&#xA;  面试题53：二叉搜索树的下一个节点&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9853%e4%ba%8c%e5%8f%89%e6%90%9c%e7%b4%a2%e6%a0%91%e7%9a%84%e4%b8%8b%e4%b8%80%e4%b8%aa%e8%8a%82%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;时间复杂度on的解法&#34;&gt;&#xA;  时间复杂度O(n)的解法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%97%b6%e9%97%b4%e5%a4%8d%e6%9d%82%e5%ba%a6on%e7%9a%84%e8%a7%a3%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;时间复杂度oh的解法&#34;&gt;&#xA;  时间复杂度O(h)的解法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%97%b6%e9%97%b4%e5%a4%8d%e6%9d%82%e5%ba%a6oh%e7%9a%84%e8%a7%a3%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h5 id=&#34;面试题54所有大于或等于节点的值之和&#34;&gt;&#xA;  面试题54：所有大于或等于节点的值之和&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9854%e6%89%80%e6%9c%89%e5%a4%a7%e4%ba%8e%e6%88%96%e7%ad%89%e4%ba%8e%e8%8a%82%e7%82%b9%e7%9a%84%e5%80%bc%e4%b9%8b%e5%92%8c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题55二叉搜索树迭代器&#34;&gt;&#xA;  面试题55：二叉搜索树迭代器&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9855%e4%ba%8c%e5%8f%89%e6%90%9c%e7%b4%a2%e6%a0%91%e8%bf%ad%e4%bb%a3%e5%99%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题56二叉搜索树种两个节点的值之和&#34;&gt;&#xA;  面试题56：二叉搜索树种两个节点的值之和&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9856%e4%ba%8c%e5%8f%89%e6%90%9c%e7%b4%a2%e6%a0%91%e7%a7%8d%e4%b8%a4%e4%b8%aa%e8%8a%82%e7%82%b9%e7%9a%84%e5%80%bc%e4%b9%8b%e5%92%8c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;利用哈希表空间复杂度为on的解法&#34;&gt;&#xA;  利用哈希表，空间复杂度为O（n）的解法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%a9%e7%94%a8%e5%93%88%e5%b8%8c%e8%a1%a8%e7%a9%ba%e9%97%b4%e5%a4%8d%e6%9d%82%e5%ba%a6%e4%b8%baon%e7%9a%84%e8%a7%a3%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;应用双指针空间复杂度为oh的解法&#34;&gt;&#xA;  应用双指针，空间复杂度为O（h）的解法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ba%94%e7%94%a8%e5%8f%8c%e6%8c%87%e9%92%88%e7%a9%ba%e9%97%b4%e5%a4%8d%e6%9d%82%e5%ba%a6%e4%b8%baoh%e7%9a%84%e8%a7%a3%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h4 id=&#34;84-treeset和treemap的应用&#34;&gt;&#xA;  8.4 TreeSet和TreeMap的应用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#84-treeset%e5%92%8ctreemap%e7%9a%84%e5%ba%94%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题57值和下标之差都在给定的范围内&#34;&gt;&#xA;  面试题57：值和下标之差都在给定的范围内&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9857%e5%80%bc%e5%92%8c%e4%b8%8b%e6%a0%87%e4%b9%8b%e5%b7%ae%e9%83%bd%e5%9c%a8%e7%bb%99%e5%ae%9a%e7%9a%84%e8%8c%83%e5%9b%b4%e5%86%85&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;时间复杂度为onlogk的解法&#34;&gt;&#xA;  时间复杂度为O（nlogk）的解法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%97%b6%e9%97%b4%e5%a4%8d%e6%9d%82%e5%ba%a6%e4%b8%baonlogk%e7%9a%84%e8%a7%a3%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;时间复杂度为on的解法&#34;&gt;&#xA;  时间复杂度为O（n）的解法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%97%b6%e9%97%b4%e5%a4%8d%e6%9d%82%e5%ba%a6%e4%b8%baon%e7%9a%84%e8%a7%a3%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h5 id=&#34;面试题58日程表&#34;&gt;&#xA;  面试题58：日程表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9858%e6%97%a5%e7%a8%8b%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;85-本章小结&#34;&gt;&#xA;  8.5 本章小结&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#85-%e6%9c%ac%e7%ab%a0%e5%b0%8f%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;第9章-堆&#34;&gt;&#xA;  第9章 堆&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac9%e7%ab%a0-%e5%a0%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;91-堆的基础知识&#34;&gt;&#xA;  9.1 堆的基础知识&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#91-%e5%a0%86%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;92-堆的应用&#34;&gt;&#xA;  9.2 堆的应用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#92-%e5%a0%86%e7%9a%84%e5%ba%94%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;-面试题59数据流的第k大数字-jzoffer59java&#34;&gt;&#xA;  ✅ 面试题59：数据流的第k大数字 JZOffer59.java&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e9%9d%a2%e8%af%95%e9%a2%9859%e6%95%b0%e6%8d%ae%e6%b5%81%e7%9a%84%e7%ac%ack%e5%a4%a7%e6%95%b0%e5%ad%97-jzoffer59java&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-面试题60出现频率最高的k个数字-jzoffer60java&#34;&gt;&#xA;  ✅ 面试题60：出现频率最高的k个数字 JZOffer60.java&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e9%9d%a2%e8%af%95%e9%a2%9860%e5%87%ba%e7%8e%b0%e9%a2%91%e7%8e%87%e6%9c%80%e9%ab%98%e7%9a%84k%e4%b8%aa%e6%95%b0%e5%ad%97-jzoffer60java&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-面试题61和最小的k个数对-jzoffer61java&#34;&gt;&#xA;  ✅ 面试题61：和最小的k个数对 JZOffer61.java&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e9%9d%a2%e8%af%95%e9%a2%9861%e5%92%8c%e6%9c%80%e5%b0%8f%e7%9a%84k%e4%b8%aa%e6%95%b0%e5%af%b9-jzoffer61java&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;使用最大堆&#34;&gt;&#xA;  使用最大堆&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bd%bf%e7%94%a8%e6%9c%80%e5%a4%a7%e5%a0%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;使用最小堆&#34;&gt;&#xA;  使用最小堆&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bd%bf%e7%94%a8%e6%9c%80%e5%b0%8f%e5%a0%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;kSmallestPairs&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;93-本章小结&#34;&gt;&#xA;  9.3 本章小结&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#93-%e6%9c%ac%e7%ab%a0%e5%b0%8f%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;第10章-前缀树&#34;&gt;&#xA;  第10章 前缀树&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac10%e7%ab%a0-%e5%89%8d%e7%bc%80%e6%a0%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;101-前缀树的基础知识&#34;&gt;&#xA;  10.1 前缀树的基础知识&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#101-%e5%89%8d%e7%bc%80%e6%a0%91%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;-面试题62实现前缀树-jzoffer62java&#34;&gt;&#xA;  ✅ 面试题62：实现前缀树 JZOffer62.java&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e9%9d%a2%e8%af%95%e9%a2%9862%e5%ae%9e%e7%8e%b0%e5%89%8d%e7%bc%80%e6%a0%91-jzoffer62java&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;102-前缀树的应用&#34;&gt;&#xA;  10.2 前缀树的应用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#102-%e5%89%8d%e7%bc%80%e6%a0%91%e7%9a%84%e5%ba%94%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;-面试题63替换单词--jzoffer63java&#34;&gt;&#xA;  ✅ 面试题63：替换单词  JZOffer63.java&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e9%9d%a2%e8%af%95%e9%a2%9863%e6%9b%bf%e6%8d%a2%e5%8d%95%e8%af%8d--jzoffer63java&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题64神奇的字典&#34;&gt;&#xA;  面试题64：神奇的字典&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9864%e7%a5%9e%e5%a5%87%e7%9a%84%e5%ad%97%e5%85%b8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题65最短的单词编码&#34;&gt;&#xA;  面试题65：最短的单词编码&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9865%e6%9c%80%e7%9f%ad%e7%9a%84%e5%8d%95%e8%af%8d%e7%bc%96%e7%a0%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题66单词之和&#34;&gt;&#xA;  面试题66：单词之和&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9866%e5%8d%95%e8%af%8d%e4%b9%8b%e5%92%8c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题67最大的异或&#34;&gt;&#xA;  面试题67：最大的异或&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9867%e6%9c%80%e5%a4%a7%e7%9a%84%e5%bc%82%e6%88%96&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;103-本章小结&#34;&gt;&#xA;  10.3 本章小结&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#103-%e6%9c%ac%e7%ab%a0%e5%b0%8f%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;第11章-二分查找&#34;&gt;&#xA;  第11章 二分查找&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac11%e7%ab%a0-%e4%ba%8c%e5%88%86%e6%9f%a5%e6%89%be&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;111-二分查找的基础知识&#34;&gt;&#xA;  11.1 二分查找的基础知识&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#111-%e4%ba%8c%e5%88%86%e6%9f%a5%e6%89%be%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;-二分查找算法-compenruinsjzofferbinarysearchjava&#34;&gt;&#xA;  ✅ 二分查找算法 com.penruins.JZOffer.BinarySearch.java&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e4%ba%8c%e5%88%86%e6%9f%a5%e6%89%be%e7%ae%97%e6%b3%95-compenruinsjzofferbinarysearchjava&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;112-在排序数组中二分查找&#34;&gt;&#xA;  11.2 在排序数组中二分查找&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#112-%e5%9c%a8%e6%8e%92%e5%ba%8f%e6%95%b0%e7%bb%84%e4%b8%ad%e4%ba%8c%e5%88%86%e6%9f%a5%e6%89%be&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题68查找插入位置&#34;&gt;&#xA;  面试题68：查找插入位置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9868%e6%9f%a5%e6%89%be%e6%8f%92%e5%85%a5%e4%bd%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题69山峰数组的顶部&#34;&gt;&#xA;  面试题69：山峰数组的顶部&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9869%e5%b1%b1%e5%b3%b0%e6%95%b0%e7%bb%84%e7%9a%84%e9%a1%b6%e9%83%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题70排序数组中只出现一次的数字-compenruinsjzofferjzoffer70java&#34;&gt;&#xA;  面试题70：排序数组中只出现一次的数字 com.penruins.JZOffer.JZOffer70.java&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9870%e6%8e%92%e5%ba%8f%e6%95%b0%e7%bb%84%e4%b8%ad%e5%8f%aa%e5%87%ba%e7%8e%b0%e4%b8%80%e6%ac%a1%e7%9a%84%e6%95%b0%e5%ad%97-compenruinsjzofferjzoffer70java&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;singleNonDuplicate 用异或运算的方式实现&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;面试题71按权重生成随机数&#34;&gt;&#xA;  面试题71：按权重生成随机数&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9871%e6%8c%89%e6%9d%83%e9%87%8d%e7%94%9f%e6%88%90%e9%9a%8f%e6%9c%ba%e6%95%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;113-在数值范围内二分查找&#34;&gt;&#xA;  11.3 在数值范围内二分查找&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#113-%e5%9c%a8%e6%95%b0%e5%80%bc%e8%8c%83%e5%9b%b4%e5%86%85%e4%ba%8c%e5%88%86%e6%9f%a5%e6%89%be&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题72求平方根&#34;&gt;&#xA;  面试题72：求平方根&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9872%e6%b1%82%e5%b9%b3%e6%96%b9%e6%a0%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题73狒狒吃香蕉&#34;&gt;&#xA;  面试题73：狒狒吃香蕉&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9873%e7%8b%92%e7%8b%92%e5%90%83%e9%a6%99%e8%95%89&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;114-本章小结&#34;&gt;&#xA;  11.4 本章小结&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#114-%e6%9c%ac%e7%ab%a0%e5%b0%8f%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;第12章-排序&#34;&gt;&#xA;  第12章 排序&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac12%e7%ab%a0-%e6%8e%92%e5%ba%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;121-排序的基础知识&#34;&gt;&#xA;  12.1 排序的基础知识&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#121-%e6%8e%92%e5%ba%8f%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题74合并区间&#34;&gt;&#xA;  面试题74：合并区间&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9874%e5%90%88%e5%b9%b6%e5%8c%ba%e9%97%b4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;122-计数排序&#34;&gt;&#xA;  12.2 计数排序&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#122-%e8%ae%a1%e6%95%b0%e6%8e%92%e5%ba%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题75数组相对排序&#34;&gt;&#xA;  面试题75：数组相对排序&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9875%e6%95%b0%e7%bb%84%e7%9b%b8%e5%af%b9%e6%8e%92%e5%ba%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;123-快速排序&#34;&gt;&#xA;  12.3 快速排序&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#123-%e5%bf%ab%e9%80%9f%e6%8e%92%e5%ba%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;快速排序算法-compenruinsjzofferquicksort&#34;&gt;&#xA;  快速排序算法 com.penruins.JZOffer.QuickSort&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bf%ab%e9%80%9f%e6%8e%92%e5%ba%8f%e7%ae%97%e6%b3%95-compenruinsjzofferquicksort&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题76数组中第k大的数字&#34;&gt;&#xA;  面试题76：数组中第k大的数字&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9876%e6%95%b0%e7%bb%84%e4%b8%ad%e7%ac%ack%e5%a4%a7%e7%9a%84%e6%95%b0%e5%ad%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;124-归并排序&#34;&gt;&#xA;  12.4 归并排序&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#124-%e5%bd%92%e5%b9%b6%e6%8e%92%e5%ba%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题77链表排序&#34;&gt;&#xA;  面试题77：链表排序&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9877%e9%93%be%e8%a1%a8%e6%8e%92%e5%ba%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题78合并排序链表&#34;&gt;&#xA;  面试题78：合并排序链表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9878%e5%90%88%e5%b9%b6%e6%8e%92%e5%ba%8f%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;利用最小堆选取值最小的节点&#34;&gt;&#xA;  利用最小堆选取值最小的节点&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%a9%e7%94%a8%e6%9c%80%e5%b0%8f%e5%a0%86%e9%80%89%e5%8f%96%e5%80%bc%e6%9c%80%e5%b0%8f%e7%9a%84%e8%8a%82%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;按照归并排序的思路合并链表&#34;&gt;&#xA;  按照归并排序的思路合并链表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8c%89%e7%85%a7%e5%bd%92%e5%b9%b6%e6%8e%92%e5%ba%8f%e7%9a%84%e6%80%9d%e8%b7%af%e5%90%88%e5%b9%b6%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h4 id=&#34;125-本章小结&#34;&gt;&#xA;  12.5 本章小结&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#125-%e6%9c%ac%e7%ab%a0%e5%b0%8f%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;第13章-回溯法&#34;&gt;&#xA;  第13章 回溯法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac13%e7%ab%a0-%e5%9b%9e%e6%ba%af%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;131-回溯法的基础知识&#34;&gt;&#xA;  13.1 回溯法的基础知识&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#131-%e5%9b%9e%e6%ba%af%e6%b3%95%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;132-集合的组合排列&#34;&gt;&#xA;  13.2 集合的组合、排列&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#132-%e9%9b%86%e5%90%88%e7%9a%84%e7%bb%84%e5%90%88%e6%8e%92%e5%88%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;133-回溯法解决其他类型问题&#34;&gt;&#xA;  13.3 回溯法解决其他类型问题&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#133-%e5%9b%9e%e6%ba%af%e6%b3%95%e8%a7%a3%e5%86%b3%e5%85%b6%e4%bb%96%e7%b1%bb%e5%9e%8b%e9%97%ae%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;134-本章小结&#34;&gt;&#xA;  13.4 本章小结&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#134-%e6%9c%ac%e7%ab%a0%e5%b0%8f%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;第14章-动态规划&#34;&gt;&#xA;  第14章 动态规划&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac14%e7%ab%a0-%e5%8a%a8%e6%80%81%e8%a7%84%e5%88%92&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;141-动态规划的基础知识&#34;&gt;&#xA;  14.1 动态规划的基础知识&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#141-%e5%8a%a8%e6%80%81%e8%a7%84%e5%88%92%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;142-单序列问题&#34;&gt;&#xA;  14.2 单序列问题&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#142-%e5%8d%95%e5%ba%8f%e5%88%97%e9%97%ae%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;143-双序列问题&#34;&gt;&#xA;  14.3 双序列问题&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#143-%e5%8f%8c%e5%ba%8f%e5%88%97%e9%97%ae%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;144-矩阵路径问题&#34;&gt;&#xA;  14.4 矩阵路径问题&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#144-%e7%9f%a9%e9%98%b5%e8%b7%af%e5%be%84%e9%97%ae%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题98路径的数目&#34;&gt;&#xA;  面试题98：路径的数目&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9898%e8%b7%af%e5%be%84%e7%9a%84%e6%95%b0%e7%9b%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;分析确定状态转移方程&#34;&gt;&#xA;  分析确定状态转移方程&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e6%9e%90%e7%a1%ae%e5%ae%9a%e7%8a%b6%e6%80%81%e8%bd%ac%e7%a7%bb%e6%96%b9%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;根据状态转移方程写递归代码&#34;&gt;&#xA;  根据状态转移方程写递归代码&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%b9%e6%8d%ae%e7%8a%b6%e6%80%81%e8%bd%ac%e7%a7%bb%e6%96%b9%e7%a8%8b%e5%86%99%e9%80%92%e5%bd%92%e4%bb%a3%e7%a0%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;递归代码&#34;&gt;&#xA;  递归代码&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%80%92%e5%bd%92%e4%bb%a3%e7%a0%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;优化空间效率&#34;&gt;&#xA;  优化空间效率&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bc%98%e5%8c%96%e7%a9%ba%e9%97%b4%e6%95%88%e7%8e%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h5 id=&#34;面试题99最小路径之和&#34;&gt;&#xA;  面试题99：最小路径之和&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9899%e6%9c%80%e5%b0%8f%e8%b7%af%e5%be%84%e4%b9%8b%e5%92%8c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题100三角形中最小路径之和&#34;&gt;&#xA;  面试题100：三角形中最小路径之和&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%98100%e4%b8%89%e8%a7%92%e5%bd%a2%e4%b8%ad%e6%9c%80%e5%b0%8f%e8%b7%af%e5%be%84%e4%b9%8b%e5%92%8c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;145-背包问题&#34;&gt;&#xA;  14.5 背包问题&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#145-%e8%83%8c%e5%8c%85%e9%97%ae%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;0-1 背包问题&lt;/li&gt;&#xA;&lt;li&gt;多重背包问题&lt;/li&gt;&#xA;&lt;li&gt;完全背包问题&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;面试题101分割等和子集&#34;&gt;&#xA;  面试题101：分割等和子集&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%98101%e5%88%86%e5%89%b2%e7%ad%89%e5%92%8c%e5%ad%90%e9%9b%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;分析确定状态转移方程-1&#34;&gt;&#xA;  分析确定状态转移方程&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e6%9e%90%e7%a1%ae%e5%ae%9a%e7%8a%b6%e6%80%81%e8%bd%ac%e7%a7%bb%e6%96%b9%e7%a8%8b-1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;根据状态转移方程写递归代码-1&#34;&gt;&#xA;  根据状态转移方程写递归代码&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%b9%e6%8d%ae%e7%8a%b6%e6%80%81%e8%bd%ac%e7%a7%bb%e6%96%b9%e7%a8%8b%e5%86%99%e9%80%92%e5%bd%92%e4%bb%a3%e7%a0%81-1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;根据状态转移方程写迭代代码&#34;&gt;&#xA;  根据状态转移方程写迭代代码&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%b9%e6%8d%ae%e7%8a%b6%e6%80%81%e8%bd%ac%e7%a7%bb%e6%96%b9%e7%a8%8b%e5%86%99%e8%bf%ad%e4%bb%a3%e4%bb%a3%e7%a0%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;优化空间效率-1&#34;&gt;&#xA;  优化空间效率&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bc%98%e5%8c%96%e7%a9%ba%e9%97%b4%e6%95%88%e7%8e%87-1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h5 id=&#34;面试题102加减的目标值&#34;&gt;&#xA;  面试题102：加减的目标值&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%98102%e5%8a%a0%e5%87%8f%e7%9a%84%e7%9b%ae%e6%a0%87%e5%80%bc&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题103最小的硬币数目&#34;&gt;&#xA;  面试题103：最小的硬币数目&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%98103%e6%9c%80%e5%b0%8f%e7%9a%84%e7%a1%ac%e5%b8%81%e6%95%b0%e7%9b%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;分析确定状态转移方程-2&#34;&gt;&#xA;  分析确定状态转移方程&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e6%9e%90%e7%a1%ae%e5%ae%9a%e7%8a%b6%e6%80%81%e8%bd%ac%e7%a7%bb%e6%96%b9%e7%a8%8b-2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;根据状态转移方程写代码&#34;&gt;&#xA;  根据状态转移方程写代码&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%b9%e6%8d%ae%e7%8a%b6%e6%80%81%e8%bd%ac%e7%a7%bb%e6%96%b9%e7%a8%8b%e5%86%99%e4%bb%a3%e7%a0%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;另一种思路&#34;&gt;&#xA;  另一种思路&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%a6%e4%b8%80%e7%a7%8d%e6%80%9d%e8%b7%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;h5 id=&#34;面试题104排列的数目&#34;&gt;&#xA;  面试题104：排列的数目&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%98104%e6%8e%92%e5%88%97%e7%9a%84%e6%95%b0%e7%9b%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int[] nums = new int[1 2 3];&#xA;i = 3;&#xA;f(i) = f(i - nums[0]) + f(i - nums[1]) + f(i - nums[2]);&#xA;f(0) = 1;&#xA;f(1) = f(0) + f(-1) + f(-2) = 1;&#xA;f(2) = f(1) + f(0) + f(-1) = 2;&#xA;f(3) = f(2) + f(1) + f(0) = 4;&#xA;f(2) {1,1} {2}&#xA;f(1) {1}&#xA;f(0) {}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;146-本章小结&#34;&gt;&#xA;  14.6 本章小结&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#146-%e6%9c%ac%e7%ab%a0%e5%b0%8f%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;第15章-图-305&#34;&gt;&#xA;  第15章 图 305&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac15%e7%ab%a0-%e5%9b%be-305&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;151-图的基础知识-305&#34;&gt;&#xA;  15.1 图的基础知识 305&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#151-%e5%9b%be%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86-305&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;152-图的搜索-307&#34;&gt;&#xA;  15.2 图的搜索 307&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#152-%e5%9b%be%e7%9a%84%e6%90%9c%e7%b4%a2-307&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;153-拓扑排序-333&#34;&gt;&#xA;  15.3 拓扑排序 333&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#153-%e6%8b%93%e6%89%91%e6%8e%92%e5%ba%8f-333&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;154-并查集-342&#34;&gt;&#xA;  15.4 并查集 342&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#154-%e5%b9%b6%e6%9f%a5%e9%9b%86-342&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;155-本章小结-354&#34;&gt;&#xA;  15.5 本章小结 354&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#155-%e6%9c%ac%e7%ab%a0%e5%b0%8f%e7%bb%93-354&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;</description>
    </item>
    <item>
      <title>bilibili</title>
      <link>/post/life/bilibili/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/life/bilibili/</guid>
      <description>&lt;h1 id=&#34;bilibili&#34;&gt;&#xA;  bilibili&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#bilibili&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;movies&#34;&gt;&#xA;  movies&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#movies&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://b23.tv/Im7lGG9&#34;&gt;木鱼水心&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://b23.tv/kSzCtZK&#34;&gt;电影广角镜&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;world&#34;&gt;&#xA;  world&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#world&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://b23.tv/PtgvbW2&#34;&gt;Yooupi食途&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://b23.tv/zfDIHWd&#34;&gt;星球研究所&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://b23.tv/aimvkGQ&#34;&gt;世茹很如意&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;digital&#34;&gt;&#xA;  digital&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#digital&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://b23.tv/i0TPoh6&#34;&gt;那岩KJMX&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://space.bilibili.com/11336264&#34;&gt;TESTV官方频道&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://space.bilibili.com/91527228&#34;&gt;黄杨ME&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;cycling&#34;&gt;&#xA;  cycling&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#cycling&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://space.bilibili.com/407656186&#34;&gt;Contayu_Cycling&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://space.bilibili.com/1911394754&#34;&gt;道长说车&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://space.bilibili.com/601150167&#34;&gt;club100&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://space.bilibili.com/352037317&#34;&gt;周四青年&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://space.bilibili.com/204850019&#34;&gt;艾慕葡萄&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;table-tennis&#34;&gt;&#xA;  table tennis&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#table-tennis&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://space.bilibili.com/280156719&#34;&gt;-我是派派-&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;computer-science&#34;&gt;&#xA;  computer science&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#computer-science&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://space.bilibili.com/13081489/&#34;&gt;TheCW&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://space.bilibili.com/288339968/&#34;&gt;PegasusWang&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://b23.tv/mvac29i&#34;&gt;神州数码云基地&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://b23.tv/Y94ogWO&#34;&gt;Koala聊开源&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://b23.tv/Nq9jpyj&#34;&gt;JavaEE之Spring框架&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://space.bilibili.com/525037536&#34;&gt;开源社KAIYUANSHE&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://space.bilibili.com/18937923&#34;&gt;美团技术团队&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://space.bilibili.com/165659472&#34;&gt;技术胖&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://space.bilibili.com/525438321&#34;&gt;代码随想录&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://space.bilibili.com/17124132&#34;&gt;张老师和杜老师编程课&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;photography&#34;&gt;&#xA;  photography&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#photography&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://b23.tv/AG2fzjT&#34;&gt;影视飓风&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;music&#34;&gt;&#xA;  music&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#music&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://space.bilibili.com/14114630&#34;&gt;94不曈&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;bilibili-knowledge&#34;&gt;&#xA;  bilibili-knowledge&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#bilibili-knowledge&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://b23.tv/CvSjDAR&#34;&gt;量子位&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://space.bilibili.com/26798384&#34;&gt;柴知道&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;other&#34;&gt;&#xA;  other&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#other&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://b23.tv/9ghFVSS&#34;&gt;M2档案&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>concurrent</title>
      <link>/post/computer-science/java/concurrent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/java/concurrent/</guid>
      <description>&lt;h1 id=&#34;concurrent&#34;&gt;&#xA;  concurrent&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#concurrent&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;synchronized&#34;&gt;&#xA;  synchronized&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#synchronized&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;synchronized-的底层原理是什么&#34;&gt;&#xA;  synchronized 的底层原理是什么？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#synchronized-%e7%9a%84%e5%ba%95%e5%b1%82%e5%8e%9f%e7%90%86%e6%98%af%e4%bb%80%e4%b9%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;基于 jvm 的 Monitor 机制&lt;/li&gt;&#xA;&lt;li&gt;通过进入和退出 Monitor 对象来实现方法和代码块的同步&lt;/li&gt;&#xA;&lt;li&gt;字节码指令&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;monitorenter&lt;/code&gt; 获取 Monitor 的所有权&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;monitorexit&lt;/code&gt; 释放 Monitor 的所有权&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;同步方法的实现&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ACC_SYNCHRONIZED 标志：当方法被 synchronized 修饰时，JVM 会在方法常量池中设置 ACC_SYNCHRONIZED 标志。&lt;/li&gt;&#xA;&lt;li&gt;调用方法时，JVM 检查该标志。如果设置了，线程必须先获取 Monitor 才能执行方法，执行完成后释放 Monitor&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;锁的优化&#xA;&lt;ul&gt;&#xA;&lt;li&gt;为了提升性能，JVM 对 synchronized 进行了优化，包括&#xA;&lt;ul&gt;&#xA;&lt;li&gt;偏向锁（Biased Locking）：当锁始终由同一线程持有时，JVM 会将锁标记为偏向锁，减少锁获取的开销&lt;/li&gt;&#xA;&lt;li&gt;轻量级锁（Lightweight Locking）：当存在多个线程交替执行时，JVM 会将锁升级为轻量级锁，通过 CAS 操作减少阻塞&lt;/li&gt;&#xA;&lt;li&gt;重量级锁（Heavyweight Locking）：当锁竞争激烈时，JVM 会将锁升级为重量级锁，依赖于操作系统的互斥量（Mutex）实现&lt;/li&gt;&#xA;&lt;li&gt;自旋锁（Spin Locking）：当线程无法获取锁时，会进行有限次数的自旋尝试，避免直接进入阻塞状态&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;concurrenthashmap&#34;&gt;&#xA;  ConcurrentHashMap&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#concurrenthashmap&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;concurrentlinkedhashmap&#34;&gt;&#xA;  ConcurrentLinkedHashMap&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#concurrentlinkedhashmap&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;比较-concurrenthash-和-concurrentlinkedhashmap&#34;&gt;&#xA;  比较 ConcurrentHash 和 ConcurrentLinkedHashMap&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%af%94%e8%be%83-concurrenthash-%e5%92%8c-concurrentlinkedhashmap&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在ConcurrentHashMap的基础上，增加了&lt;strong&gt;双向链表&lt;/strong&gt;来维护插入顺序或访问顺序&lt;/li&gt;&#xA;&lt;li&gt;支持LRU缓存淘汰策略，通过Weigher计算存储单元数，自动清理最近最少使用的数据&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;线程池&#34;&gt;&#xA;  线程池&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ba%bf%e7%a8%8b%e6%b1%a0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;线程池的核心参数&#34;&gt;&#xA;  线程池的核心参数&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ba%bf%e7%a8%8b%e6%b1%a0%e7%9a%84%e6%a0%b8%e5%bf%83%e5%8f%82%e6%95%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;核心线程数 corePoolSize&lt;/li&gt;&#xA;&lt;li&gt;最大线程数 maximumPoolSize&lt;/li&gt;&#xA;&lt;li&gt;空闲线程存活时间 keepAliveTime&lt;/li&gt;&#xA;&lt;li&gt;时间单位 unit&lt;/li&gt;&#xA;&lt;li&gt;任务队列 workQueue&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ArrayBlockingQueue 基于数组的&lt;strong&gt;有界&lt;/strong&gt;队列&lt;/li&gt;&#xA;&lt;li&gt;LinkedBlockingQueue 基于链表的&lt;strong&gt;无界&lt;/strong&gt;队列&lt;/li&gt;&#xA;&lt;li&gt;SynchronousQueue 不存储元素的队列，直接交给线程处理&lt;/li&gt;&#xA;&lt;li&gt;PriorityBlockingQueue 支持优先级的&lt;strong&gt;无界&lt;/strong&gt;队列&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;线程工厂 threadFactory&lt;/li&gt;&#xA;&lt;li&gt;拒绝策略 handler&#xA;&lt;ul&gt;&#xA;&lt;li&gt;AbortPolicy 抛弃任务并抛出异常 RejectedExecutionException&lt;/li&gt;&#xA;&lt;li&gt;DiscardPolicy 抛弃任务但不抛出异常&lt;/li&gt;&#xA;&lt;li&gt;CallerRunsPolicy 由提交任务的线程自己执行任务&lt;/li&gt;&#xA;&lt;li&gt;DiscardOldestPolicy 抛弃优先级最低的任务&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;线程池的关键参数比如核心线程数等待队列拒绝策略在创建的时候做什么考虑&#34;&gt;&#xA;  线程池的关键参数，比如核心线程数、等待队列、拒绝策略，在创建的时候做什么考虑&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ba%bf%e7%a8%8b%e6%b1%a0%e7%9a%84%e5%85%b3%e9%94%ae%e5%8f%82%e6%95%b0%e6%af%94%e5%a6%82%e6%a0%b8%e5%bf%83%e7%ba%bf%e7%a8%8b%e6%95%b0%e7%ad%89%e5%be%85%e9%98%9f%e5%88%97%e6%8b%92%e7%bb%9d%e7%ad%96%e7%95%a5%e5%9c%a8%e5%88%9b%e5%bb%ba%e7%9a%84%e6%97%b6%e5%80%99%e5%81%9a%e4%bb%80%e4%b9%88%e8%80%83%e8%99%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;核心线程数&#xA;&lt;ul&gt;&#xA;&lt;li&gt;任务类型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;CPU密集型: CPU核数 + 1&lt;/li&gt;&#xA;&lt;li&gt;IO密集型: CPU核数 * 2&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;最大线程数&#xA;&lt;ul&gt;&#xA;&lt;li&gt;默认设置为与核心线程数一致，减少创建线程和销毁线程的开销&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;等待队列&#xA;&lt;ul&gt;&#xA;&lt;li&gt;无界队列: 任务量稳定的场景, 但可能导致内存溢出&lt;/li&gt;&#xA;&lt;li&gt;有界队列: 任务量波动的场景&lt;/li&gt;&#xA;&lt;li&gt;同步队列: 适合任务量较少的场景&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;拒绝策略&#xA;&lt;ul&gt;&#xA;&lt;li&gt;任务重要性: 如果任务不能丢弃，使用 CallerRunsPolicy(由提交任务的线程自己执行任务)&lt;/li&gt;&#xA;&lt;li&gt;系统容错性: 如果任务可以丢弃, 使用 DiscardPolicy(抛弃任务但不抛出异常) 和 DiscardOldestPolicy(抛弃优先级最低的任务)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;线程空闲时间&#xA;&lt;ul&gt;&#xA;&lt;li&gt;任务波动性: 如果任务波动较大，可以设置较短的空闲时间，及时回收线程&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果在出现任务峰值的时候，创建线程锁产生的开销要如何处理？&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;线程工厂&#xA;&lt;ul&gt;&#xA;&lt;li&gt;线程命名: 自定义线程名称，便于监控与查询问题&lt;/li&gt;&#xA;&lt;li&gt;线程优先级: 根据任务重要性设置线程优先级&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;线程池拒绝策略有哪些你项目通常选用哪个遇到重要场景触发拒绝策略必须需要处理任务你如何处理&#34;&gt;&#xA;  线程池拒绝策略有哪些，你项目通常选用哪个，遇到重要场景触发拒绝策略必须需要处理任务你如何处理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ba%bf%e7%a8%8b%e6%b1%a0%e6%8b%92%e7%bb%9d%e7%ad%96%e7%95%a5%e6%9c%89%e5%93%aa%e4%ba%9b%e4%bd%a0%e9%a1%b9%e7%9b%ae%e9%80%9a%e5%b8%b8%e9%80%89%e7%94%a8%e5%93%aa%e4%b8%aa%e9%81%87%e5%88%b0%e9%87%8d%e8%a6%81%e5%9c%ba%e6%99%af%e8%a7%a6%e5%8f%91%e6%8b%92%e7%bb%9d%e7%ad%96%e7%95%a5%e5%bf%85%e9%a1%bb%e9%9c%80%e8%a6%81%e5%a4%84%e7%90%86%e4%bb%bb%e5%8a%a1%e4%bd%a0%e5%a6%82%e4%bd%95%e5%a4%84%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;线程池拒绝策略&#xA;&lt;ul&gt;&#xA;&lt;li&gt;AbortPolicy 抛异常&lt;/li&gt;&#xA;&lt;li&gt;CallerRunsPolicy&lt;/li&gt;&#xA;&lt;li&gt;DiscardPolicy 不抛异常&lt;/li&gt;&#xA;&lt;li&gt;DiscardOldestPolicy&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;项目中常用哪个？&#xA;&lt;ul&gt;&#xA;&lt;li&gt;可以容忍丢失的情况 DiscardPolicy DiscardOldestPolicy&lt;/li&gt;&#xA;&lt;li&gt;不允许有丢弃的情况：CallerRunsPolicy&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;重要场景触发拒绝策略的处理方法&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用 CallerRunsPolicy&lt;/li&gt;&#xA;&lt;li&gt;自定义拒绝策略：增加自定义异常处理器，将拒绝的任务添加到外部的消息队列中，后续再进行提交&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;动态调整线程池的参数&#xA;&lt;ul&gt;&#xA;&lt;li&gt;监控线程池的状态，动态调整 corePoolSize, maximumPoolSize, queueCapacity, 以应对突发流量&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;如何实现动态线程池&#34;&gt;&#xA;  如何实现动态线程池？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%a6%82%e4%bd%95%e5%ae%9e%e7%8e%b0%e5%8a%a8%e6%80%81%e7%ba%bf%e7%a8%8b%e6%b1%a0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通过线程池的方法设置&lt;strong&gt;核心线程数&lt;/strong&gt;、&lt;strong&gt;最大线程数&lt;/strong&gt;、&lt;strong&gt;最大空闲时间&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;jdk-创建线程池有哪些方式&#34;&gt;&#xA;  JDK 创建线程池有哪些方式&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#jdk-%e5%88%9b%e5%bb%ba%e7%ba%bf%e7%a8%8b%e6%b1%a0%e6%9c%89%e5%93%aa%e4%ba%9b%e6%96%b9%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通过 &lt;code&gt;Executors&lt;/code&gt; 工厂类创建&#xA;&lt;ul&gt;&#xA;&lt;li&gt;newFixedThreadPool&lt;/li&gt;&#xA;&lt;li&gt;newCachedThreadPool&lt;/li&gt;&#xA;&lt;li&gt;newSingleThreadExecutor&lt;/li&gt;&#xA;&lt;li&gt;newScheduledThreadPool&lt;/li&gt;&#xA;&lt;li&gt;newSingleThreadScheduledExecutor&lt;/li&gt;&#xA;&lt;li&gt;newWorkStealingPool&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;通过 &lt;code&gt;ThreadPoolExecutor&lt;/code&gt; 手动指定参数创建&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;进程间通信&#34;&gt;&#xA;  进程间通信&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%bf%9b%e7%a8%8b%e9%97%b4%e9%80%9a%e4%bf%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;管道 Pipe&lt;/li&gt;&#xA;&lt;li&gt;消息队列 Message Queue&lt;/li&gt;&#xA;&lt;li&gt;共享内存 Shared Memory&lt;/li&gt;&#xA;&lt;li&gt;信号 Signal&#xA;&lt;ul&gt;&#xA;&lt;li&gt;kill&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;信号量 Semaphore&lt;/li&gt;&#xA;&lt;li&gt;套接字 Socket&lt;/li&gt;&#xA;&lt;li&gt;文件 File&lt;/li&gt;&#xA;&lt;li&gt;内存映射文件 Memory-Mapped File&lt;/li&gt;&#xA;&lt;li&gt;远程过程调用 RPC, Remote Procedure Call&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;juc&#34;&gt;&#xA;  JUC&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#juc&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;java.util.concurrent&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;juc-包下的7大类&#34;&gt;&#xA;  JUC 包下的7大类&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#juc-%e5%8c%85%e4%b8%8b%e7%9a%847%e5%a4%a7%e7%b1%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;原子变量类（&lt;code&gt;java.util.concurrent.atomic&lt;/code&gt; 包）&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用于实现无锁的线程安全操作，基于CAS（Compare and Swap）机制：&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;AtomicInteger&lt;/code&gt;：原子操作的整型变量。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;AtomicLong&lt;/code&gt;：原子操作的长整型变量。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;AtomicBoolean&lt;/code&gt;：原子操作的布尔变量。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;AtomicReference&amp;lt;V&amp;gt;&lt;/code&gt;：原子操作的引用类型变量。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;AtomicStampedReference&amp;lt;V&amp;gt;&lt;/code&gt;：带版本戳的原子引用，解决ABA问题。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;锁和同步器类（&lt;code&gt;java.util.concurrent.locks&lt;/code&gt; 包）&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;提供更灵活的锁机制，替代传统的&lt;code&gt;synchronized&lt;/code&gt;关键字：&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;ReentrantLock&lt;/code&gt;：可重入锁，支持公平锁和非公平锁。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;ReentrantReadWriteLock&lt;/code&gt;：读写锁，支持读多写少的场景。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;StampedLock&lt;/code&gt;：基于邮戳的锁，提供乐观读锁。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Condition&lt;/code&gt;：条件变量，用于线程间的等待和唤醒。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;并发集合类（&lt;code&gt;java.util.concurrent&lt;/code&gt; 包）&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;线程安全的集合类，优化了高并发场景下的性能：&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;ConcurrentHashMap&lt;/code&gt;：线程安全的哈希表，采用分段锁或CAS机制。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;CopyOnWriteArrayList&lt;/code&gt;：写时复制的线程安全列表，适合读多写少的场景。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;ConcurrentLinkedQueue&lt;/code&gt;：无界的线程安全队列，基于CAS实现。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;同步工具类&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用于线程间的协作和同步：&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;CountDownLatch&lt;/code&gt;：计数器门闩，等待一组线程完成。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;CyclicBarrier&lt;/code&gt;：循环栅栏，等待一组线程到达同步点。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Semaphore&lt;/code&gt;：信号量，控制同时访问资源的线程数量。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Phaser&lt;/code&gt;：更灵活的同步器，支持动态注册线程和多次同步。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;线程池框架（&lt;code&gt;java.util.concurrent&lt;/code&gt; 包）&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用于管理线程的生命周期和任务调度：&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;ExecutorService&lt;/code&gt;：线程池接口，提供任务提交、关闭等功能。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;ThreadPoolExecutor&lt;/code&gt;：可自定义的线程池实现。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;ScheduledExecutorService&lt;/code&gt;：支持定时任务和周期任务的线程池。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;ForkJoinPool&lt;/code&gt;：用于分治算法和并行流的线程池。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;阻塞队列类（&lt;code&gt;java.util.concurrent&lt;/code&gt; 包）&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;线程安全的阻塞队列，用于生产者-消费者模型：&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;ArrayBlockingQueue&lt;/code&gt;：基于数组的&lt;strong&gt;有界&lt;/strong&gt;阻塞队列。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;LinkedBlockingQueue&lt;/code&gt;：基于链表的&lt;strong&gt;无界&lt;/strong&gt;阻塞队列。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;PriorityBlockingQueue&lt;/code&gt;：支持优先级的无界阻塞队列。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;其他工具类&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;Future&amp;lt;V&amp;gt;&lt;/code&gt;：表示异步计算的结果。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;CompletableFuture&amp;lt;V&amp;gt;&lt;/code&gt;：支持异步编程的增强版&lt;code&gt;Future&lt;/code&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Exchanger&amp;lt;V&amp;gt;&lt;/code&gt;：用于线程间交换数据的工具。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;threadlocal&#34;&gt;&#xA;  ThreadLocal&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#threadlocal&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;threadlocal-原理&#34;&gt;&#xA;  ThreadLocal 原理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#threadlocal-%e5%8e%9f%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;每一个线程都维护一个对象副本，每个线程独立地访问和操作各自的副本&lt;/li&gt;&#xA;&lt;li&gt;数据是保存在 Thread 父类的 ThreadLocalMap 中&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;锁&#34;&gt;&#xA;  锁&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%94%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;java里的锁有哪些&#34;&gt;&#xA;  Java里的锁有哪些&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#java%e9%87%8c%e7%9a%84%e9%94%81%e6%9c%89%e5%93%aa%e4%ba%9b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;锁的类型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;synchronized 内置锁&lt;/li&gt;&#xA;&lt;li&gt;ReentrantLock 可重入锁&lt;/li&gt;&#xA;&lt;li&gt;ReadWriteLock 读写锁&lt;/li&gt;&#xA;&lt;li&gt;StampedLock 邮戳锁&lt;/li&gt;&#xA;&lt;li&gt;Condition 条件锁&#xA;&lt;ul&gt;&#xA;&lt;li&gt;与ReentrantLock 配合使用，实现线程间的等待和唤醒&lt;/li&gt;&#xA;&lt;li&gt;类似于 Object.wait() 和 Object.notify()，但更灵活&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;LockSupport&lt;/li&gt;&#xA;&lt;li&gt;Semaphore 信号量&lt;/li&gt;&#xA;&lt;li&gt;CountDownLatch 倒计时锁&lt;/li&gt;&#xA;&lt;li&gt;CyclicBarrier 循环屏障&lt;/li&gt;&#xA;&lt;li&gt;Phaser 阶段锁&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;不同的锁的使用场景&#xA;&lt;ul&gt;&#xA;&lt;li&gt;简单场景：使用 synchronized&lt;/li&gt;&#xA;&lt;li&gt;复杂场景：使用 ReentrantLock、ReadWriteLock 或 StampedLock&lt;/li&gt;&#xA;&lt;li&gt;线程协作：使用 Condition、CountDownLatch、CyclicBarrier 或 Phaser&lt;/li&gt;&#xA;&lt;li&gt;资源限制：使用 Semaphore&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;锁升级&#34;&gt;&#xA;  锁升级&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%94%81%e5%8d%87%e7%ba%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;锁升级的过程&#34;&gt;&#xA;  锁升级的过程&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%94%81%e5%8d%87%e7%ba%a7%e7%9a%84%e8%bf%87%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;锁机制根据竞争情况自动或手动调整锁的粒度和强度的过程，目的是在保证线程安全的同时优化性能&lt;/li&gt;&#xA;&lt;li&gt;在Java中，锁升级特指synchronized关键字的优化机制。JDK 1.6后，为了减少锁操作的开销，JVM引入了&lt;strong&gt;偏向锁&lt;/strong&gt;、&lt;strong&gt;轻量级锁&lt;/strong&gt;、&lt;strong&gt;重量级锁&lt;/strong&gt;三种状态，锁状态只能从低到高单向升级，不可降级&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;锁升级的4个阶段是什么&#34;&gt;&#xA;  锁升级的4个阶段是什么？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%94%81%e5%8d%87%e7%ba%a7%e7%9a%844%e4%b8%aa%e9%98%b6%e6%ae%b5%e6%98%af%e4%bb%80%e4%b9%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;无锁状态&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;共享对象没有被任何线程锁定&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;偏向锁&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;首次通过 synchronized 获取锁时，JVM讲锁标记为偏向锁&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;轻量级锁&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;当多线程竞争偏向锁时，JVM讲锁由偏向锁转换为轻量级锁&lt;/li&gt;&#xA;&lt;li&gt;通过CAS实现&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;重量级锁&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;轻量级锁自旋失败（如自旋次数超过阈值）或高并发竞争激烈时&lt;/li&gt;&#xA;&lt;li&gt;依赖操作系统的互斥量 Mutex&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;公平非公平&#34;&gt;&#xA;  公平、非公平&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%ac%e5%b9%b3%e9%9d%9e%e5%85%ac%e5%b9%b3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;什么是公平锁非公平锁&#34;&gt;&#xA;  什么是公平锁、非公平锁？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%80%e4%b9%88%e6%98%af%e5%85%ac%e5%b9%b3%e9%94%81%e9%9d%9e%e5%85%ac%e5%b9%b3%e9%94%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;公平锁：线程根据申请锁的顺序获取锁&lt;/li&gt;&#xA;&lt;li&gt;非公平锁：允许线程直接获取锁，而不用考虑申请锁的顺序&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;synchronized-是公平的还是不公平的&#34;&gt;&#xA;  synchronized 是公平的还是不公平的？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#synchronized-%e6%98%af%e5%85%ac%e5%b9%b3%e7%9a%84%e8%bf%98%e6%98%af%e4%b8%8d%e5%85%ac%e5%b9%b3%e7%9a%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;不公平的&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;reentrantlock-公平性&#34;&gt;&#xA;  ReentrantLock 公平性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#reentrantlock-%e5%85%ac%e5%b9%b3%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;可以在构造可重入锁时指定是公平锁还是非公平锁&#xA;&lt;ul&gt;&#xA;&lt;li&gt;AQS AbstractQueuedSynchronizer的队列机制&#xA;&lt;ul&gt;&#xA;&lt;li&gt;FairSync 维护一个 FIFO 的队列&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;cas&#34;&gt;&#xA;  CAS&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#cas&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;什么是cas&#34;&gt;&#xA;  什么是CAS&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%80%e4%b9%88%e6%98%afcas&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一个原子性的硬件指令 compare and swap 比较并交换。多线程的场景下，只有一个线程能比较成功并交换值，其他线程比较失败不执行交换&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;aqs&#34;&gt;&#xA;  AQS&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#aqs&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;什么是aqs&#34;&gt;&#xA;  什么是AQS&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%80%e4%b9%88%e6%98%afaqs&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;AbstractQueuedSynchronizer&lt;/code&gt; 用于构造锁和同步器类的基础类&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;ReentrantLock&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Semaphore&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;CountDownLatch&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;aqs的核心概念是什么&#34;&gt;&#xA;  AQS的核心概念是什么？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#aqs%e7%9a%84%e6%a0%b8%e5%bf%83%e6%a6%82%e5%bf%b5%e6%98%af%e4%bb%80%e4%b9%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;同步状态&lt;/li&gt;&#xA;&lt;li&gt;等待队列&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;aqs的模板方法有哪些&#34;&gt;&#xA;  AQS的模板方法有哪些？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#aqs%e7%9a%84%e6%a8%a1%e6%9d%bf%e6%96%b9%e6%b3%95%e6%9c%89%e5%93%aa%e4%ba%9b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;tryAcquire&lt;/li&gt;&#xA;&lt;li&gt;tryRelease&lt;/li&gt;&#xA;&lt;li&gt;tryAcquireShared&lt;/li&gt;&#xA;&lt;li&gt;tryAcquireReleased&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;aba-问题&#34;&gt;&#xA;  ABA 问题&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#aba-%e9%97%ae%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;aba问题产生的原因是什么&#34;&gt;&#xA;  ABA问题产生的原因是什么？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#aba%e9%97%ae%e9%a2%98%e4%ba%a7%e7%94%9f%e7%9a%84%e5%8e%9f%e5%9b%a0%e6%98%af%e4%bb%80%e4%b9%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用 CAS 实现无锁数据结构，因为CAS只关注数据是否一致，没有关注数据是否更改过&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;如何解决aba问题&#34;&gt;&#xA;  如何解决ABA问题？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%a6%82%e4%bd%95%e8%a7%a3%e5%86%b3aba%e9%97%ae%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用版本号, 比如使用原子变量类&lt;code&gt;AtomicStampedReference&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;jdk提供的原子变量类会存在aba问题吗&#34;&gt;&#xA;  JDK提供的原子变量类会存在ABA问题吗？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#jdk%e6%8f%90%e4%be%9b%e7%9a%84%e5%8e%9f%e5%ad%90%e5%8f%98%e9%87%8f%e7%b1%bb%e4%bc%9a%e5%ad%98%e5%9c%a8aba%e9%97%ae%e9%a2%98%e5%90%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;</description>
    </item>
    <item>
      <title>cycling</title>
      <link>/post/life/cycling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/life/cycling/</guid>
      <description>&lt;h1 id=&#34;cycling&#34;&gt;&#xA;  cycling&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#cycling&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;my-log&#34;&gt;&#xA;  my log&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#my-log&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;环滇池&#34;&gt;&#xA;  环滇池&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%8e%af%e6%bb%87%e6%b1%a0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;9 &lt;a href=&#34;https://www.strava.com/activities/12413018322&#34;&gt;2024-09-15&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;8 &lt;a href=&#34;https://www.strava.com/activities/10198388156&#34;&gt;2023-11-11&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;7 &lt;a href=&#34;https://www.strava.com/activities/10118006987&#34;&gt;2023-10-28&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;6 &lt;a href=&#34;https://www.strava.com/activities/10083784580&#34;&gt;2023-10-22&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;5 &lt;a href=&#34;https://www.strava.com/activities/9111939346&#34;&gt;2023-05-21&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;4 &lt;a href=&#34;https://www.strava.com/activities/8315375770&#34;&gt;2022-12-31&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;3 &lt;a href=&#34;https://www.strava.com/activities/7256929509&#34;&gt;2022-06-05&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;2 &lt;a href=&#34;https://www.strava.com/activities/6852172284&#34;&gt;2022-03-20&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;1 &lt;a href=&#34;https://www.strava.com/activities/6312587059&#34;&gt;2021-11-27&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;昆洛路-彩云中路爬坡-彩云北路&#34;&gt;&#xA;  昆洛路-&amp;gt;彩云中路爬坡-&amp;gt;彩云北路&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%98%86%e6%b4%9b%e8%b7%af-%e5%bd%a9%e4%ba%91%e4%b8%ad%e8%b7%af%e7%88%ac%e5%9d%a1-%e5%bd%a9%e4%ba%91%e5%8c%97%e8%b7%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;8 &lt;a href=&#34;https://www.strava.com/activities/13288594983&#34;&gt;2025-01-07&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;7 &lt;a href=&#34;https://www.strava.com/activities/13147543071&#34;&gt;2024-12-19&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;6 &lt;a href=&#34;https://www.strava.com/activities/13140696424&#34;&gt;2024-12-18&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;5 &lt;a href=&#34;https://www.strava.com/activities/13133130308&#34;&gt;2024-12-17&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;4 &lt;a href=&#34;https://www.strava.com/activities/13105338980&#34;&gt;2024-12-13&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;3 &lt;a href=&#34;https://www.strava.com/activities/13084445625&#34;&gt;2024-12-10&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;2 &lt;a href=&#34;https://www.strava.com/activities/13057445903&#34;&gt;2024-12-06&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;1 &lt;a href=&#34;https://www.strava.com/activities/13007587918&#34;&gt;2024-11-29&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;2024&#34;&gt;&#xA;  2024&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2024&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.strava.com/activities/11306332249&#34;&gt;2024-05-01 149.44km 阳宗海&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.strava.com/activities/10971310394&#34;&gt;2024-03-16 169.81km 环两湖失败 &lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;2023&#34;&gt;&#xA;  2023&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2023&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.strava.com/activities/9454921406&#34;&gt;2023-07-15 136.21km 梁王山&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.strava.com/activities/8983725511&#34;&gt;2023-04-30 150.06km 抚仙湖折返&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;2022&#34;&gt;&#xA;  2022&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2022&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.strava.com/activities/7215994725&#34;&gt;2022-05-28 131.56km 梁王山&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.strava.com/activities/7065665848&#34;&gt;2022-04-30 202.94km 抚仙湖&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;骑行路线&#34;&gt;&#xA;  骑行路线&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%aa%91%e8%a1%8c%e8%b7%af%e7%ba%bf&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;昆明&#34;&gt;&#xA;  昆明&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%98%86%e6%98%8e&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://strava.app.link/N3GJ7UFKzOb&#34;&gt;环滇池&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://strava.app.link/hLnfVrCKzOb&#34;&gt;宝花路 爬至小亭子&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://strava.app.link/NNsDrPHKzOb&#34;&gt;梁王山上坡&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://strava.app.link/UUjQ56MKzOb&#34;&gt;西山后山爬坡&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://strava.app.link/L0k5BVOKzOb&#34;&gt;松花坝水库爬坡&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;昭通&#34;&gt;&#xA;  昭通&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%98%ad%e9%80%9a&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://strava.app.link/tpE4yBKKzOb&#34;&gt;凤凰山&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;athlete&#34;&gt;&#xA;  athlete&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#athlete&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;tadej-pogacar&#34;&gt;&#xA;  Tadej Pogacar&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#tadej-pogacar&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://strava.app.link/Bpj0wpxOzOb&#34;&gt;strava&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://strava.app.link/V6DgzLAOzOb&#34;&gt;2024-09-29 世锦赛冠军&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://strava.app.link/tVWMa7EOzOb&#34;&gt;2024-07-21 环法 stage 21 赛段冠军&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://strava.app.link/JNBEriJOzOb&#34;&gt;2024-07-20 stage 20 赛段冠军&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;reference&#34;&gt;&#xA;  reference&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.procyclingstats.com/index.php&#34;&gt;pro cycling stats&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;自行车职业赛数据及积分排行查询&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.strava.com&#34;&gt;strava&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.strava.com/athletes/24928841&#34;&gt;my_strava&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://veloviewer.com/&#34;&gt;veloviewer&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>cycling</title>
      <link>/post/sports/cycling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/sports/cycling/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.procyclingstats.com/index.php&#34;&gt;pro cycling stats&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;自行车职业赛数据及积分排行查询&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;videos&#34;&gt;&#xA;  videos&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#videos&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://b23.tv/0AeBids&#34;&gt;【2025 Donostia San Sebastian Klasikoa（圣塞巴斯蒂安）&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>database</title>
      <link>/post/computer-science/database/database/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/database/database/</guid>
      <description>&lt;h1 id=&#34;database&#34;&gt;&#xA;  database&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#database&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;索引-index&#34;&gt;&#xA;  索引 index&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%b4%a2%e5%bc%95-index&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;什么是聚集索引非聚集索引&#34;&gt;&#xA;  什么是聚集索引、非聚集索引？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%80%e4%b9%88%e6%98%af%e8%81%9a%e9%9b%86%e7%b4%a2%e5%bc%95%e9%9d%9e%e8%81%9a%e9%9b%86%e7%b4%a2%e5%bc%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;聚集索引：数据行的&lt;strong&gt;物理存储顺序&lt;/strong&gt;与&lt;strong&gt;索引的逻辑顺序&lt;/strong&gt;一致&lt;/li&gt;&#xA;&lt;li&gt;非聚集索引：数据行的&lt;strong&gt;物理存储顺序&lt;/strong&gt;与&lt;strong&gt;索引的逻辑顺序&lt;/strong&gt;不一致&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;为什么只能有一种聚集索引&#34;&gt;&#xA;  为什么只能有一种聚集索引？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%ba%e4%bb%80%e4%b9%88%e5%8f%aa%e8%83%bd%e6%9c%89%e4%b8%80%e7%a7%8d%e8%81%9a%e9%9b%86%e7%b4%a2%e5%bc%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;因为数据物理的存储顺序只能有一种，因此只能有一种聚集索引&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;默认的聚集索引是什么&#34;&gt;&#xA;  默认的聚集索引是什么？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%bb%98%e8%ae%a4%e7%9a%84%e8%81%9a%e9%9b%86%e7%b4%a2%e5%bc%95%e6%98%af%e4%bb%80%e4%b9%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主键&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;什么是回表&#34;&gt;&#xA;  什么是回表？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%80%e4%b9%88%e6%98%af%e5%9b%9e%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;当查询条件使用普通索引并且查询的列不包含在索引中，就需要查询完普通索引后再去查询聚集索引的树拿到完整的行数据&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;当底层建了abc的联合索引底层会建aab-abc这3个索引么&#34;&gt;&#xA;  当底层建了abc的联合索引，底层会建a,ab, abc这3个索引么？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bd%93%e5%ba%95%e5%b1%82%e5%bb%ba%e4%ba%86abc%e7%9a%84%e8%81%94%e5%90%88%e7%b4%a2%e5%bc%95%e5%ba%95%e5%b1%82%e4%bc%9a%e5%bb%baaab-abc%e8%bf%993%e4%b8%aa%e7%b4%a2%e5%bc%95%e4%b9%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;不会，只创建一个联合索引树&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;联合索引abc当查询ab-ac会走索引么&#34;&gt;&#xA;  联合索引（abc)，当查询ab, ac会走索引么？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%81%94%e5%90%88%e7%b4%a2%e5%bc%95abc%e5%bd%93%e6%9f%a5%e8%af%a2ab-ac%e4%bc%9a%e8%b5%b0%e7%b4%a2%e5%bc%95%e4%b9%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ab 走索引&lt;/li&gt;&#xA;&lt;li&gt;ac 只走 a 索引&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;order-by-和-group-by-如何创建索引&#34;&gt;&#xA;  order by 和 group by 如何创建索引？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#order-by-%e5%92%8c-group-by-%e5%a6%82%e4%bd%95%e5%88%9b%e5%bb%ba%e7%b4%a2%e5%bc%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;order by&#xA;&lt;ul&gt;&#xA;&lt;li&gt;单列 直接创建&lt;/li&gt;&#xA;&lt;li&gt;多列 创建联合索引, 索引顺序要和 order by 的顺序一致&#xA;&lt;ul&gt;&#xA;&lt;li&gt;不一致索引会失效&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;group by&#xA;&lt;ul&gt;&#xA;&lt;li&gt;group by 实际上是先进行排序，再进行分组。所以遵循 order by 的索引机制&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;mysql索引失效的20种场景&#34;&gt;&#xA;  MySQL索引失效的20种场景&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mysql%e7%b4%a2%e5%bc%95%e5%a4%b1%e6%95%88%e7%9a%8420%e7%a7%8d%e5%9c%ba%e6%99%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/10448449924&#34;&gt;MySQL索引失效的20种场景&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;1 查询条件未使用索引列&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;SELECT * FROM users WHERE non_indexed_column = &#39;example&#39;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;2 查询条件对索引列使用了函数或表达式&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;SELECT * FROM users WHERE LEFT(name, 3) = &#39;Ali&#39;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;3 数据类型不一致引发隐式类型转换&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;SELECT * FROM users WHERE phone = 1234567890; -- phone 是 VARCHAR&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;4 联合索引使用时的范围查询阻断&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;SELECT * FROM users WHERE name = &#39;Alice&#39; AND age &amp;gt; 30 AND city = &#39;New York&#39;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;5 如果 OR 条件中有字段未使用索引，会导致整体索引失效&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;SELECT * FROM users WHERE name = &#39;Alice&#39; OR age = 30;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;解决方法：拆分查询，用 UNION 替代&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;SELECT * FROM users WHERE name = &#39;Alice&#39; UNION SELECT * FROM users WHERE age = 30;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;6 LIKE 查询中使用前置通配符 &lt;code&gt;%&lt;/code&gt; 时，无法利用索引&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;SELECT * FROM users WHERE name LIKE &#39;%Alice&#39;;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;解决方法&#xA;&lt;ul&gt;&#xA;&lt;li&gt;替换为后置通配符 LIKE &amp;lsquo;Alice%&amp;rsquo;&lt;/li&gt;&#xA;&lt;li&gt;使用全文索引&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;ALTER TABLE users ADD FULLTEXT(name);&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;SELECT * FROM users WHERE MATCH(name) AGAINST(&#39;Alice&#39;);&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;7 不等值操作符 &lt;code&gt;!= &amp;lt;&amp;gt;&lt;/code&gt; 通常会导致索引失效&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;SELECT * FROM users WHERE age != 30;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;解决方法：改写为范围查询&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;SELECT * FROM users WHERE age &amp;lt; 30 OR age &amp;gt; 30;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;8 &lt;code&gt;IN&lt;/code&gt; 子句中参数过多时，索引可能失效&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;SELECT * FROM users WHERE id IN (1, 2, ..., 10000)&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;解决方法：分批查询或控制 IN 参数数量&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;SELECT * FROM users WHERE id BETWEEN 1 AND 5000&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;9 某些情况下对NULL值的查询可能导致索引失效&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;SELECT * FROM users WHERE email IS NULL;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;解决方法：避免使用 NULL，改为特定占位值&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;10 ORDER BY 和 GROUP BY 不符合索引顺序&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;select * from users order by age, name;&lt;/code&gt; 索引顺序为(name,age)&lt;/li&gt;&#xA;&lt;li&gt;解决方法：调整查询或索引顺序一致&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;11 索引列未覆盖查询字段&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;select age from users where name = &#39;Alice&#39;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;解决方法：创建覆盖索引&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;alter table users add index(name, age)&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;12 表统计信息过期&#xA;&lt;ul&gt;&#xA;&lt;li&gt;表的统计信息不准确时，MySQL优化器可能错误选择全表扫描&lt;/li&gt;&#xA;&lt;li&gt;解决方法：定期更新统计信息&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;ANALYZE TABLE users&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;13 数据分布不均&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;select * from users where gender = &#39;M&#39; -- gender 列 90% 的值相同&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;解决方法：优化查询字段或调整数据分布&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;14 子查询未优化&#xA;&lt;ul&gt;&#xA;&lt;li&gt;子查询结果集过大时，索引失效&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;SELECT * FROM users WHERE id IN (SELECT user_id FROM orders WHERE total &amp;gt; 100)&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;解决方法：改为 JOIN 查询&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;SELECT u.* FROM users u JOIN orders o ON u.id = o.user_id WHERE o.total &amp;gt; 100&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;15 锁机制干扰 间隙锁&#xA;&lt;ul&gt;&#xA;&lt;li&gt;描述：间隙锁可能阻止索引的高效使用&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;SELECT * FROM users WHERE id BETWEEN 10 AND 20 FOR UPDATE&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;解决方法：降低事务隔离级别至 Read Committed(读已提交)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;可重复读加上间隙锁防止幻读&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;16 索引被动态调整&#xA;&lt;ul&gt;&#xA;&lt;li&gt;MySQL优化器动态调整索引，可能选择非最佳索引或直接全表扫描&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;SELECT * FROM users FORCE INDEX (idx_name) WHERE name = &#39;Alice&#39;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;17 聚合函数未走索引&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用聚合函数(如 &lt;code&gt;COUNT&lt;/code&gt;, &lt;code&gt;SUM&lt;/code&gt;) 时，索引可能无法被利用&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;SELECT COUNT(*) FROM users WHERE age &amp;gt; 30&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;解决方法：利用覆盖索引&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;ALTER TABLE users ADD INDEX(age)&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;18 使用了非等值JOIN&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;select * from users u join orders o on u.id &amp;gt; o.user_id&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;优化连接条件，尽量使用等值连接&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;19 小表全表扫描替代索引扫描&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对于非常小的表，MySQL优化器可能选择全表扫描而非索引&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;SELECT * FROM small_table WHERE id = 1;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;解决方法：无需优化，小表全表扫描的代价通常可以忽略&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;20 分区表查询不走全局索引&#xA;&lt;ul&gt;&#xA;&lt;li&gt;分区表的查询条件不覆盖分区键时，全局索引可能无法生效&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;SELECT * FROM partitioned_users WHERE city = &#39;New York&#39;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;解决方法：在分区键上创建局部索引&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;分区表的索引如何创建&#34;&gt;&#xA;  分区表的索引如何创建&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e5%8c%ba%e8%a1%a8%e7%9a%84%e7%b4%a2%e5%bc%95%e5%a6%82%e4%bd%95%e5%88%9b%e5%bb%ba&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h2 id=&#34;分区&#34;&gt;&#xA;  分区&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e5%8c%ba&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;分表和分区在物理存储上有什么区别&#34;&gt;&#xA;  分表和分区在物理存储上有什么区别？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e8%a1%a8%e5%92%8c%e5%88%86%e5%8c%ba%e5%9c%a8%e7%89%a9%e7%90%86%e5%ad%98%e5%82%a8%e4%b8%8a%e6%9c%89%e4%bb%80%e4%b9%88%e5%8c%ba%e5%88%ab&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在数据库中一张表对应磁盘中的2个文件，拓展名为&lt;strong&gt;idb&lt;/strong&gt;的文件和拓展名为&lt;strong&gt;frm&lt;/strong&gt;的文件，idb文件存储表中的记录，frm存储表的结构信息&lt;/li&gt;&#xA;&lt;li&gt;进行分表的话有几张表就有几个对应的文件，进行分区就只有一个frm文件和若干个idb文件，一个分区对应一个idb文件&lt;/li&gt;&#xA;&lt;li&gt;分区能提升大表的读写性能就是因为根据分区规则仅仅扫描对应分区的磁盘文件，而不用进行全表扫描&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;一张表最多可以分多少个区&#34;&gt;&#xA;  一张表最多可以分多少个区？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e5%bc%a0%e8%a1%a8%e6%9c%80%e5%a4%9a%e5%8f%af%e4%bb%a5%e5%88%86%e5%a4%9a%e5%b0%91%e4%b8%aa%e5%8c%ba&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;1024&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;事务&#34;&gt;&#xA;  事务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8b%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;数据隔离级别&#34;&gt;&#xA;  数据隔离级别&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e9%9a%94%e7%a6%bb%e7%ba%a7%e5%88%ab&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;读未提交 &lt;strong&gt;Read Uncommitted&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;读已提交 &lt;strong&gt;Read Committed&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;脏读：同一个事务中，多次读取同一数据的结果不同&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;可重复读 &lt;strong&gt;Repeatable Read&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;幻读：同一个事务中，相同的查询条件读取到的数据条数不一样&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;串行化 &lt;strong&gt;Serializable&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;mvcc&#34;&gt;&#xA;  MVCC&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mvcc&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;mvcc-的全称是什么&#34;&gt;&#xA;  MVCC 的全称是什么？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mvcc-%e7%9a%84%e5%85%a8%e7%a7%b0%e6%98%af%e4%bb%80%e4%b9%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Multi-Version Concurrency Control 多版本并发控制&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;mysql的事务引擎仅仅使用行级锁吗&#34;&gt;&#xA;  MySQL的事务引擎仅仅使用行级锁吗？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mysql%e7%9a%84%e4%ba%8b%e5%8a%a1%e5%bc%95%e6%93%8e%e4%bb%85%e4%bb%85%e4%bd%bf%e7%94%a8%e8%a1%8c%e7%ba%a7%e9%94%81%e5%90%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;不是，它结合了行级锁+MVCC(多版本并发控制)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;mvcc适用于哪些隔离级别&#34;&gt;&#xA;  MVCC适用于哪些隔离级别？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mvcc%e9%80%82%e7%94%a8%e4%ba%8e%e5%93%aa%e4%ba%9b%e9%9a%94%e7%a6%bb%e7%ba%a7%e5%88%ab&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;适用于 &lt;code&gt;REPEATED READ&lt;/code&gt; 和 &lt;code&gt;READ COMMITTED&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;不适用于 &lt;code&gt;READ UNCOMMITTED&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>distributed system</title>
      <link>/post/computer-science/distributed-system/distributed-system/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/distributed-system/distributed-system/</guid>
      <description>&lt;h1 id=&#34;distributed-system&#34;&gt;&#xA;  distributed system&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#distributed-system&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;微服务和分布式的比较&#34;&gt;&#xA;  微服务和分布式的比较&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%be%ae%e6%9c%8d%e5%8a%a1%e5%92%8c%e5%88%86%e5%b8%83%e5%bc%8f%e7%9a%84%e6%af%94%e8%be%83&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;微服务架构和分布式架构是现代软件系统中两种重要的设计模式&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;分布式架构&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;分布式架构是指将系统组件部署在不同的物理或虚拟节点上，通过网络协作完成任务。其核心目标是解决性能、可扩展性、容错性等问题，例如通过负载均衡、数据分片等技术提升系统吞吐能力&lt;/li&gt;&#xA;&lt;li&gt;典型场景：分布式数据库（如Cassandra）、分布式计算（如Spark）&lt;/li&gt;&#xA;&lt;li&gt;适合需要高性能、高可用性的场景，如大规模数据处理、高并发请求&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;微服务架构&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;微服务是一种将单体应用拆分为多个小型、独立服务的架构风格，每个服务围绕特定业务功能构建，通过轻量级通信（如HTTP/REST、gRPC）交互。核心目标是提升开发效率、灵活性和可维护性，解决业务复杂度问题&lt;/li&gt;&#xA;&lt;li&gt;典型场景：电商平台（订单、库存等独立服务）。&lt;/li&gt;&#xA;&lt;li&gt;适合业务复杂、需快速迭代的系统，尤其是多团队协作开发时&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;分布式是手段：通过物理分散提升系统能力&lt;/li&gt;&#xA;&lt;li&gt;微服务是策略：通过逻辑拆分优化开发和维护&lt;/li&gt;&#xA;&lt;li&gt;选择依据：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;若需解决性能瓶颈，优先考虑分布式&lt;/li&gt;&#xA;&lt;li&gt;若需应对业务复杂性，选择微服务&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>druid</title>
      <link>/post/computer-science/database/druid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/database/druid/</guid>
      <description>&lt;h1 id=&#34;druid&#34;&gt;&#xA;  druid&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#druid&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://developer.aliyun.com/article/1157595&#34;&gt;Spring Boot 整合 Druid 指南&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/qq_43842093/article/details/131340323&#34;&gt;SpringBoot——开启Druid监控统计功能(SQL监控、慢SQL记录、Spring监控、去广告)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.hangge.com/blog/cache/detail_2876.html&#34;&gt;SpringBoot - 开启Druid监控统计功能教程（SQL监控、慢SQL记录、去广告）&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;这个有用，配置要全部加上，不能漏了&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>echarts</title>
      <link>/post/computer-science/front-end/echarts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/front-end/echarts/</guid>
      <description>&lt;h1 id=&#34;echarts&#34;&gt;&#xA;  echarts&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#echarts&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://ppchart.com/#/&#34;&gt;PPChart&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>elasticsearch</title>
      <link>/post/computer-science/database/elasticsearch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/database/elasticsearch/</guid>
      <description>&lt;h1 id=&#34;elasticsearch&#34;&gt;&#xA;  ElasticSearch&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#elasticsearch&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;使用场景&#34;&gt;&#xA;  使用场景&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bd%bf%e7%94%a8%e5%9c%ba%e6%99%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;场景1&#xA;&lt;ul&gt;&#xA;&lt;li&gt;全文搜索Elasticsearch 凭借其强大、可扩展和快速的搜索功能，在全文搜索场景中表现出色。它允许用户以近乎实时的响应执行复杂的查询&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;场景2&#xA;&lt;ul&gt;&#xA;&lt;li&gt;实时分析Elasticsearch 能够实时执行分析，因此适用于跟踪实时数据（如用户活动、交易或传感器输出）的仪表板&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;场景3&#xA;&lt;ul&gt;&#xA;&lt;li&gt;机器学习通过在 X-Pack 中添加机器学习功能，Elasticsearch 可以自动检测数据中的异常、模式和趋势&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;场景4&#xA;&lt;ul&gt;&#xA;&lt;li&gt;地理数据应用程序Elasticsearch 通过地理空间索引和搜索功能支持地理数据。这对于需要管理和可视化地理信息的应用程序（如地图和基于位置的服务）非常有用&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;场景5&#xA;&lt;ul&gt;&#xA;&lt;li&gt;日志和事件数据分析组织使用 Elasticsearch 来聚合、监控和分析来自各种来源的日志和事件数据。它是 ELK 堆栈（Elasticsearch、Logstash、Kibana）的关键组件，用于管理系统和应用程序日志以识别问题和监控系统运行状况&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;场景6&#xA;&lt;ul&gt;&#xA;&lt;li&gt;安全信息和事件管理 （SIEM）Elasticsearch 可用作 SIEM 工具，帮助组织实时分析安全事件&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>github</title>
      <link>/post/computer-science/github/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/github/</guid>
      <description>&lt;h1 id=&#34;github&#34;&gt;&#xA;  github&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#github&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;profile&#34;&gt;&#xA;  profile&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#profile&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.github.com/en/account-and-profile/concepts/about-your-profile&#34;&gt;官方文档&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果你新建一个和你的用户名一样名字的仓库，这个仓库的 Readme 就会展示在你的个人主页上 ref: &lt;a href=&#34;https://www.kawabangga.com/posts/4117&#34;&gt;玩了一下 Github 个人首页的 Profile （使用 Action 自动更新）&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;github-action&#34;&gt;&#xA;  Github Action&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#github-action&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html&#34;&gt;GitHub Actions 入门教程&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;repository&#34;&gt;&#xA;  repository&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#repository&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux&#34;&gt;torvalds/linux&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/CesiumGS/cesium&#34;&gt;CesiumGS/cesium&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;CesiumJS is a JavaScript library for creating 3D globes and 2D maps in a web browser without a plugin. It uses&#xA;WebGL for hardware-accelerated graphics, and is cross-platform, cross-browser, and tuned for dynamic-data&#xA;visualization.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/ohmyzsh/ohmyzsh&#34;&gt;ohmyzsh/ohmyzsh&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Oh My Zsh is an open source, community-driven framework for managing your zsh configuration.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/duanluan/zutil&#34;&gt;duanluan/zutil&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;追求更快更全的 Java 工具类&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://duanluan.github.io/zutil/&#34;&gt;文档&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/binarywang/Linux-Tutorial&#34;&gt;binarywang/Linux-Tutorial&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Java 程序员眼中的 Linux&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618&#34;&gt;&lt;strong&gt;yihong0618&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;algorithm-practice&#34;&gt;&#xA;  algorithm-practice&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#algorithm-practice&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/penruins/algorithm-practice&#34;&gt;algorithm-practice&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;datastructure&#34;&gt;&#xA;  dataStructure&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#datastructure&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;com.penruins.dataStructure&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;priorityqueuedemo&#34;&gt;&#xA;  PriorityQueueDemo&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#priorityqueuedemo&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;demo1&#xA;&lt;ul&gt;&#xA;&lt;li&gt;PriorityQueue 默认为最小堆&lt;/li&gt;&#xA;&lt;li&gt;如果 PriorityQueue 中没有元素了，则返回 null&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;demo2&#xA;&lt;ul&gt;&#xA;&lt;li&gt;自定义一个比较器实现最大堆&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;follow&#34;&gt;&#xA;  follow&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#follow&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/oldratlee&#34;&gt;oldratlee&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;graphcompenruinsgraph&#34;&gt;&#xA;  graph(com.penruins.graph)&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#graphcompenruinsgraph&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;com.penruins.graph&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;广度优先搜索compenruinsgraphgraphsearchbfs&#34;&gt;&#xA;  广度优先搜索(com.penruins.graph.GraphSearch.bfs)&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b9%bf%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2compenruinsgraphgraphsearchbfs&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;com.penruins.graph.GraphSearch.bfs&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;二维图的广度优先搜索&lt;/li&gt;&#xA;&lt;li&gt;8个方向&lt;/li&gt;&#xA;&lt;li&gt;从标志数组的打印可以看出来是广度优先搜索&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>hadoop</title>
      <link>/post/computer-science/big-data/hadoop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/big-data/hadoop/</guid>
      <description>&lt;h1 id=&#34;hadoop&#34;&gt;&#xA;  hadoop&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#hadoop&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Hadoop生态系统是一个由Apache基金会维护的开源软件集合，用于处理和分析大规模数据集。经过多年发展，Hadoop已从最初的HDFS和MapReduce两个核心组件扩展为一个包含众多工具和框架的完整生态系统&lt;/li&gt;&#xA;&lt;li&gt;核心基础组件&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;HDFS (Hadoop Distributed File System)&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Hadoop的分布式文件系统，用于存储超大规模数据集&lt;/li&gt;&#xA;&lt;li&gt;采用主从架构：NameNode(主节点)管理元数据，DataNode(从节点)存储实际数据块&lt;/li&gt;&#xA;&lt;li&gt;特点：高容错性、高吞吐量、适合部署在廉价硬件上&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;YARN (Yet Another Resource Negotiator)&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Hadoop 2.0引入的资源管理和作业调度框架&lt;/li&gt;&#xA;&lt;li&gt;包含ResourceManager(集群资源管理)和NodeManager(节点资源监控)&lt;/li&gt;&#xA;&lt;li&gt;支持多种计算框架(MapReduce、Spark等)共享集群资源&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;MapReduce&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;分布式计算框架，采用&amp;quot;分而治之&amp;quot;思想&lt;/li&gt;&#xA;&lt;li&gt;包含Map(数据分解)和Reduce(结果汇总)两个阶段&lt;/li&gt;&#xA;&lt;li&gt;适合处理大规模离线批处理任务&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;数据存储组件&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;HBase&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;分布式列式NoSQL数据库，基于Google BigTable设计&lt;/li&gt;&#xA;&lt;li&gt;构建在HDFS之上，提供实时读写能力&lt;/li&gt;&#xA;&lt;li&gt;适合存储海量结构化数据&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Hive&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;数据仓库工具，提供类SQL查询语言(HiveQL)&lt;/li&gt;&#xA;&lt;li&gt;将SQL转换为MapReduce/Tez/Spark作业执行&lt;/li&gt;&#xA;&lt;li&gt;适合数据汇总、即席查询和分析&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Pig&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;高级数据流语言(Pig Latin)和执行框架&lt;/li&gt;&#xA;&lt;li&gt;简化MapReduce编程，适合ETL流程&lt;/li&gt;&#xA;&lt;li&gt;支持结构化/半结构化数据处理&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;数据采集与传输组件&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Sqoop&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;关系型数据库与Hadoop间数据传输工具&lt;/li&gt;&#xA;&lt;li&gt;支持从MySQL、Oracle等导入数据到HDFS/Hive/HBase&lt;/li&gt;&#xA;&lt;li&gt;也支持将Hadoop数据导出到关系数据库&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Flume&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;分布式日志收集系统&lt;/li&gt;&#xA;&lt;li&gt;适合采集、聚合和移动大量日志数据到HDFS&lt;/li&gt;&#xA;&lt;li&gt;包含Source(数据源)、Channel(传输通道)和Sink(目的地)三个组件&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;协调与管理组件&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Zookeeper&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;分布式协调服务&lt;/li&gt;&#xA;&lt;li&gt;提供统一命名服务、配置管理、集群同步等&lt;/li&gt;&#xA;&lt;li&gt;解决分布式环境下的数据一致性问题&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Oozie&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;工作流调度系统&lt;/li&gt;&#xA;&lt;li&gt;用于编排Hadoop作业(MapReduce、Pig、Hive等)&lt;/li&gt;&#xA;&lt;li&gt;支持定时和依赖触发&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Ambari&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Hadoop集群管理工具&lt;/li&gt;&#xA;&lt;li&gt;提供Web界面监控、配置和管理Hadoop集群&lt;/li&gt;&#xA;&lt;li&gt;支持大多数Hadoop组件&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;高级计算框架&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Spark&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;内存计算框架，比MapReduce快10-100倍&lt;/li&gt;&#xA;&lt;li&gt;支持批处理、流处理、机器学习和图计算&lt;/li&gt;&#xA;&lt;li&gt;可与HDFS、HBase等集成&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Flink&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;流处理框架，支持事件时间和精确一次处理&lt;/li&gt;&#xA;&lt;li&gt;适合实时数据分析场景&lt;/li&gt;&#xA;&lt;li&gt;与Hadoop生态系统兼容&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Mahout&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;机器学习算法库&lt;/li&gt;&#xA;&lt;li&gt;提供聚类、分类、推荐等算法实现&lt;/li&gt;&#xA;&lt;li&gt;可扩展至大规模数据集&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;其他重要组件&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Kafka&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;分布式消息队列系统&lt;/li&gt;&#xA;&lt;li&gt;高吞吐量、低延迟&lt;/li&gt;&#xA;&lt;li&gt;常用于实时数据管道&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Tez&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;优化后的MapReduce执行引擎&lt;/li&gt;&#xA;&lt;li&gt;减少中间结果写入磁盘，提高性能&lt;/li&gt;&#xA;&lt;li&gt;被Hive、Pig等采用&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Avro&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;数据序列化系统&lt;/li&gt;&#xA;&lt;li&gt;提供紧凑的二进制数据格式&lt;/li&gt;&#xA;&lt;li&gt;支持RPC通信&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>hbase</title>
      <link>/post/computer-science/big-data/hbase/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/big-data/hbase/</guid>
      <description>&lt;h1 id=&#34;hbase&#34;&gt;&#xA;  hbase&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#hbase&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;HBase 是一个面向列式存储的分布式数据库，其设计思想来源于 Google 的 BigTable 论文&lt;/li&gt;&#xA;&lt;li&gt;HBase 底层存储基于 HDFS 实现，集群的管理基于 ZooKeeper 实现&lt;/li&gt;&#xA;&lt;li&gt;HBase 良好的分布式架构设计为海量数据的快速存储、随机访问提供了可能，基于数据副本机制和分区机制可以轻松实现在线扩容、缩容和数据容灾，是大数据领域中 Key-Value 数据结构存储最常用的数据库方案&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;hbase-vs-elasticsearch&#34;&gt;&#xA;  hbase vs elasticsearch&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#hbase-vs-elasticsearch&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;HBase是基于Hadoop生态的分布式列式数据库，源自Google BigTable设计，擅长海量结构化/半结构化数据的存储和高吞吐写入&lt;/li&gt;&#xA;&lt;li&gt;Elasticsearch是基于Lucene的分布式搜索引擎，专注于全文检索、复杂查询和实时分析，采用文档型数据模型&lt;/li&gt;&#xA;&lt;li&gt;数据模型与灵活性&#xA;&lt;ul&gt;&#xA;&lt;li&gt;HBase采用列式存储模型，数据按&amp;quot;行键(RowKey)+列族(Column Family)+列限定符(Qualifier)&amp;ldquo;组织，适合结构化或半结构化数据。虽然schema-free设计允许灵活添加列，但列族需要预先定义&lt;/li&gt;&#xA;&lt;li&gt;Elasticsearch采用文档型模型，数据以JSON格式存储，天然支持非结构化数据。字段可以动态添加，无需预定义schema，更适合多变的数据结构&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;查询能力对比&#xA;&lt;ul&gt;&#xA;&lt;li&gt;HBase查询能力相对有限&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主要支持基于RowKey的精确查询和范围扫描(Scan)&lt;/li&gt;&#xA;&lt;li&gt;复杂查询需要借助二级索引或Phoenix等SQL层&lt;/li&gt;&#xA;&lt;li&gt;无内置全文检索能力，需结合Solr等搜索引擎&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Elasticsearch提供丰富的查询功能&#xA;&lt;ul&gt;&#xA;&lt;li&gt;支持全文搜索、模糊查询、分词查询、聚合分析等高级特性&lt;/li&gt;&#xA;&lt;li&gt;提供强大的DSL查询语言和SQL接口&lt;/li&gt;&#xA;&lt;li&gt;内置倒排索引，亿级数据下仍能保持秒级响应&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;典型场景：HBase适合&amp;quot;已知RowKey查明细&amp;rdquo;，ES适合&amp;quot;根据内容特征找文档&amp;quot;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;性能与扩展性&#xA;&lt;ul&gt;&#xA;&lt;li&gt;写入性能&#xA;&lt;ul&gt;&#xA;&lt;li&gt;两者都基于LSM树结构，理论写入性能相当&lt;/li&gt;&#xA;&lt;li&gt;实际场景中HBase写入更高效，因为ES需要构建倒排索引等额外开销&lt;/li&gt;&#xA;&lt;li&gt;HBase单集群可支持每天TB级数据写入&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;查询性能&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ES在复杂查询和全文检索方面性能显著优于HBase&lt;/li&gt;&#xA;&lt;li&gt;HBase在简单键值查询和范围扫描上延迟更低&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;扩展能力&#xA;&lt;ul&gt;&#xA;&lt;li&gt;HBase天生为海量数据设计，通过Region分裂实现水平扩展&lt;/li&gt;&#xA;&lt;li&gt;ES通过分片(Shard)机制扩展，但数据量极大时可能需要业务层干预&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;存储成本与资源消耗&#xA;&lt;ul&gt;&#xA;&lt;li&gt;存储效率&#xA;&lt;ul&gt;&#xA;&lt;li&gt;HBase采用列式存储+压缩，存储效率更高，适合长期保存海量数据&lt;/li&gt;&#xA;&lt;li&gt;ES因维护索引和副本，存储开销通常比HBase高30%-50%&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;资源消耗&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ES的CPU和内存消耗更高（分词、索引构建等）&lt;/li&gt;&#xA;&lt;li&gt;HBase更注重I/O优化，适合资源受限环境&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;维护复杂度&#xA;&lt;ul&gt;&#xA;&lt;li&gt;HBase依赖完整的Hadoop生态(HDFS/ZooKeeper等)，组件多，运维复杂度高&lt;/li&gt;&#xA;&lt;li&gt;Elasticsearch自成体系，部署和维护相对简单，但集群调优需要专业知识&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;实时性与一致性&#xA;&lt;ul&gt;&#xA;&lt;li&gt;HBase采用强一致性模型(基于2PC协议)，适合对一致性要求高的场景&lt;/li&gt;&#xA;&lt;li&gt;Elasticsearch采用最终一致性，查询实时性更好但可能短暂不一致&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;典型应用场景推荐&#xA;&lt;ul&gt;&#xA;&lt;li&gt;适合选择HBase的场景&#xA;&lt;ul&gt;&#xA;&lt;li&gt;海量时序数据存储：如设备监控数据、日志流水(每日5G以上)&lt;/li&gt;&#xA;&lt;li&gt;高吞吐写入：需要持续写入TB级结构化数据的场景&lt;/li&gt;&#xA;&lt;li&gt;简单查询为主：已知主键的快速查询或固定模式的范围扫描&lt;/li&gt;&#xA;&lt;li&gt;长期数据归档：需要低成本长期保存的历史数据&lt;/li&gt;&#xA;&lt;li&gt;案例：某埋点系统每天100G数据通过Kafka写入HBase，稳定运行&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;适合选择Elasticsearch的场景&#xA;&lt;ul&gt;&#xA;&lt;li&gt;全文检索需求：如商品搜索、内容检索、日志分析&lt;/li&gt;&#xA;&lt;li&gt;复杂查询分析：需要多条件组合、聚合统计的业务&lt;/li&gt;&#xA;&lt;li&gt;实时数据分析：如应用监控、安全分析等需要秒级响应的场景&lt;/li&gt;&#xA;&lt;li&gt;灵活的数据结构：字段频繁变化或无法预定义schema的情况&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;混合架构方案&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对于同时需要海量存储和复杂查询的场景，可考虑ES+HBase组合架构&#xA;&lt;ul&gt;&#xA;&lt;li&gt;HBase作为主存储，保证数据持久性和高吞吐写入&lt;/li&gt;&#xA;&lt;li&gt;ES作为索引层，提供丰富的查询能力&lt;/li&gt;&#xA;&lt;li&gt;通过数据同步工具保持两者数据一致&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;百亿级数据架构案例：使用ES处理复杂查询，HBase保证可靠存储，两者协同工作&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;选型决策关键因素&#xA;&lt;ul&gt;&#xA;&lt;li&gt;数据规模：日增5GB以下ES更简单，TB级选HBase&lt;/li&gt;&#xA;&lt;li&gt;查询复杂度：简单查询HBase足够，复杂搜索选ES&lt;/li&gt;&#xA;&lt;li&gt;数据结构：固定结构用HBase，多变结构用ES&lt;/li&gt;&#xA;&lt;li&gt;资源预算：资源有限优先HBase，可接受较高成本选ES&lt;/li&gt;&#xA;&lt;li&gt;团队技能：熟悉Hadoop选HBase，无大数据经验ES更易上手&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;总结建议&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Elasticsearch是搜索和复杂查询的首选，特别适合日志分析、内容检索等需要灵活查询的场景&lt;/li&gt;&#xA;&lt;li&gt;HBase是海量数据存储的可靠选择，特别适合时序数据、用户行为记录等高吞吐写入场景&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;hbase与rdbms的区别&#34;&gt;&#xA;  HBase与RDBMS的区别&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#hbase%e4%b8%8erdbms%e7%9a%84%e5%8c%ba%e5%88%ab&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;存储方式：HBase为列式存储，RDBMS为行式存储&lt;/li&gt;&#xA;&lt;li&gt;扩展性：HBase支持水平扩展，RDBMS通常垂直扩展&lt;/li&gt;&#xA;&lt;li&gt;事务：HBase仅支持单行事务，RDBMS支持多行复杂事务&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;hbase与hive的区别&#34;&gt;&#xA;  HBase与Hive的区别&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#hbase%e4%b8%8ehive%e7%9a%84%e5%8c%ba%e5%88%ab&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用途：HBase是实时数据库，Hive是离线数据仓库&lt;/li&gt;&#xA;&lt;li&gt;查询性能：HBase支持毫秒级查询，Hive依赖MapReduce，延迟高&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;数据存储结构&#34;&gt;&#xA;  数据存储结构&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e5%ad%98%e5%82%a8%e7%bb%93%e6%9e%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Region&lt;/strong&gt;：表的水平分区，按RowKey范围划分&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;MemStore&lt;/strong&gt;：写缓存，满时刷盘生成HFile&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;HFile&lt;/strong&gt;：底层存储文件，基于HDFS的列族数据块&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;hbase-的特点&#34;&gt;&#xA;  hbase 的特点&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#hbase-%e7%9a%84%e7%89%b9%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;易扩展&lt;/li&gt;&#xA;&lt;li&gt;海量存储&lt;/li&gt;&#xA;&lt;li&gt;列式存储&lt;/li&gt;&#xA;&lt;li&gt;高可靠性&lt;/li&gt;&#xA;&lt;li&gt;稀疏性&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;模块组成&#34;&gt;&#xA;  模块组成&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a8%a1%e5%9d%97%e7%bb%84%e6%88%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;HBase 可以将数据存储在本地文件系统，也可以存储在 HDFS 文件系统。在生产环境中，HBase 一般运行在 HDFS 上，以 HDFS 作为基础的存储设施。HBase 通过 HBase Client 提供的 Java API 来访问 HBase 数据库，以完成数据的写入和读取。HBase 集群主由HMaster、Region Server 和 ZooKeeper 组成&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;HMaster&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;负责管理 RegionServer，实现其负载均衡&lt;/li&gt;&#xA;&lt;li&gt;管理和分配 Region，比如在 Region split时分配新的 Region，在 RegionServer 退出时迁移其内的 Region 到其他 RegionServer上&lt;/li&gt;&#xA;&lt;li&gt;管理namespace和table的元数据（实际存储在HDFS上）&lt;/li&gt;&#xA;&lt;li&gt;权限控制（ACL）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;RegionServer&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;存放和管理本地 Region&lt;/li&gt;&#xA;&lt;li&gt;读写HDFS，管理Table中的数据&lt;/li&gt;&#xA;&lt;li&gt;Client 从 HMaster 中获取元数据，找到 RowKey 所在的 RegionServer 进行读写数据&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;ZooKeeper&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;存放整个 HBase集群的元数据以及集群的状态信息&lt;/li&gt;&#xA;&lt;li&gt;实现HMaster主从节点的failover&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;rowkey设计原则&#34;&gt;&#xA;  RowKey设计原则&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#rowkey%e8%ae%be%e8%ae%a1%e5%8e%9f%e5%88%99&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;长度：建议≤16字节，避免内存和存储浪费&lt;/li&gt;&#xA;&lt;li&gt;散列性：高位散列（如哈希前缀）防止热点问题&lt;/li&gt;&#xA;&lt;li&gt;唯一性：必须保证RowKey唯一标识数据&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;应用场景&#34;&gt;&#xA;  应用场景&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ba%94%e7%94%a8%e5%9c%ba%e6%99%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;适用场景&#xA;&lt;ul&gt;&#xA;&lt;li&gt;半结构化/非结构化数据（如日志、用户行为）&lt;/li&gt;&#xA;&lt;li&gt;高并发实时读写（如电商订单、社交消息）&lt;/li&gt;&#xA;&lt;li&gt;HBase是根据谷歌的BigTable设计的。典型的应用场景就是不断插入新的信息（谷歌的情况下就是互联网上新生成的网页），而不怎么修改。比如现在Facebook的messenger就是用HBase实现的&lt;/li&gt;&#xA;&lt;li&gt;Facebook&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Facebook用HBase存储在线消息，每天数据量近百亿，每月数据量250 ~ 300T， HBase读写比基本在1:1，吞吐量150w qps&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;小米&#xA;&lt;ul&gt;&#xA;&lt;li&gt;10+在线HBase集群，好几百台服务器，米聊历史数据，消息push系统等多个重要应用系统都建立在HBase基础之上&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;网易&#xA;&lt;ul&gt;&#xA;&lt;li&gt;哨兵监控系统，云信历史数据，日志归档数据等一系列重要应用底层都由HBase提供服务&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;写密集型应用，每天写入量巨大，而相对读数量较小的应用，比如IM的历史消息，游戏的日志等等&lt;/li&gt;&#xA;&lt;li&gt;不需要复杂查询条件来查询数据的应用，HBase只支持基于rowkey的查询，对于HBase来说，单条记录或者小范围的查询是可以接受的，大范围的查询由于分布式的原因，可能在性能上有点影响，而对于像SQL的join等查询，HBase无法支持&lt;/li&gt;&#xA;&lt;li&gt;对性能和可靠性要求非常高的应用，由于HBase本身没有单点故障，可用性非常高&lt;/li&gt;&#xA;&lt;li&gt;数据量较大，而且增长量无法预估的应用，HBase支持在线扩展，即使在一段时间内数据量呈井喷式增长，也可以通过HBase横向扩展来满足功能&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;不适用场景&#xA;&lt;ul&gt;&#xA;&lt;li&gt;需要复杂事务或多表关联查询的业务&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;reference&#34;&gt;&#xA;  Reference&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/datadance/p/16327298.html&#34;&gt;什么是HBase？终于有人讲明白了&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>hiking</title>
      <link>/post/life/hiking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/life/hiking/</guid>
      <description>&lt;h1 id=&#34;hiking&#34;&gt;&#xA;  hiking&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#hiking&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://strava.app.link/FrS4G5cYvOb&#34;&gt;2024-10-13 金铜盆&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>hive</title>
      <link>/post/computer-science/big-data/hive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/big-data/hive/</guid>
      <description>&lt;h1 id=&#34;hive&#34;&gt;&#xA;  hive&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#hive&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Apache Hive是一个基于Hadoop的数据仓库基础设施，主要用于处理和分析存储在Hadoop分布式文件系统(HDFS)中的大规模数据集。它由Facebook开发并开源，旨在为大数据分析提供类SQL的查询能力，使得非程序员也能方便地进行海量数据处理&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>IDEA</title>
      <link>/post/computer-science/tools/idea/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/tools/idea/</guid>
      <description>&lt;h1 id=&#34;idea&#34;&gt;&#xA;  IDEA&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#idea&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;索引&#34;&gt;&#xA;  索引&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%b4%a2%e5%bc%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果IDE一直对构建目录(例如target)进行索引，可以将这个目录设置为 Excluded，这样就不会对这个目录进行索引了&#xA;&lt;ul&gt;&#xA;&lt;li&gt;右键目录 &lt;code&gt;Mark Directory as&lt;/code&gt; -&amp;gt; &lt;code&gt;Excluded&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>ios</title>
      <link>/post/computer-science/operating-system/ios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/operating-system/ios/</guid>
      <description>&lt;h1 id=&#34;ios&#34;&gt;&#xA;  ios&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#ios&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://cloud.tencent.com/developer/article/2314725&#34;&gt;一日一技：iOS抓包最简单方案&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Charles 有 iOS 版本，app store 上就能下载，使用下来还不错&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;轻听英语&#34;&gt;&#xA;  轻听英语&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%bd%bb%e5%90%ac%e8%8b%b1%e8%af%ad&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;kiwix&#34;&gt;&#xA;  Kiwix&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#kiwix&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;众山小笔记&#34;&gt;&#xA;  众山小笔记&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bc%97%e5%b1%b1%e5%b0%8f%e7%ac%94%e8%ae%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;微信输入法&#34;&gt;&#xA;  微信输入法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%be%ae%e4%bf%a1%e8%be%93%e5%85%a5%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;很清爽，但是输入的体验不太好（自动补全不智能，这点还是搜狗输入法好用。。）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;picsew&#34;&gt;&#xA;  Picsew&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#picsew&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;长截图工具&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;net&#34;&gt;&#xA;  Net&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#net&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;shadowrocket&#34;&gt;&#xA;  Shadowrocket&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#shadowrocket&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;strides&#34;&gt;&#xA;  Strides&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#strides&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;charles&#34;&gt;&#xA;  Charles&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#charles&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;caenets---jupyter&#34;&gt;&#xA;  Caenets - Jupyter&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#caenets---jupyter&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;actions&#34;&gt;&#xA;  Actions&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#actions&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;localsend&#34;&gt;&#xA;  LocalSend&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#localsend&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;data-jar&#34;&gt;&#xA;  Data Jar&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#data-jar&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;hashphotos&#34;&gt;&#xA;  HashPhotos&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#hashphotos&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;a-shell&#34;&gt;&#xA;  a-Shell&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#a-shell&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;github&#34;&gt;&#xA;  GitHub&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#github&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;大陆的 App Store 已经下载不到了&lt;/li&gt;&#xA;&lt;li&gt;下载好了之后可以不用 magic 就能使用，比web 的网络稳定性更好&lt;/li&gt;&#xA;&lt;li&gt;可以查看action的执行情况&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;working-copy&#34;&gt;&#xA;  working copy&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#working-copy&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://apps.apple.com/cn/app/working-copy-git-client/id896694807?l=en-GB&#34;&gt;目前用下来最好的 git 客户端&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;现在在中国大陆的 app store 上架的app要备案，因为这个app的开发者是国外大哥，不要因为政策下架呀。。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;freeform&#34;&gt;&#xA;  Freeform&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#freeform&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;苹果原生的白板应用，很流畅，添加很多图片也不会卡顿。现在还没有创建文件夹的功能，希望尽快有这个功能，白板多了不好管理文件。2025-07-30&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;bark&#34;&gt;&#xA;  bark&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#bark&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/Finb/Bark&#34;&gt;Finb/Bark&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Bark is a push notification tool app. It&amp;rsquo;s free, simple, and secure, leveraging APNs without draining device battery.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://bark.day.app/#/?id=bark&#34;&gt;document&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/MoshiCoCo/bark-java-sdk&#34;&gt;Bark-Java-SDK&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;day-one&#34;&gt;&#xA;  Day One&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#day-one&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;obsidian&#34;&gt;&#xA;  Obsidian&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#obsidian&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ios 端最好用的 markdown 编辑器，可以把笔记存到 obsidian 的云服务上，也可以存到 icloud上。我是配合 working copy push到github，然后配合github的action，自动构建更新我的博客（比如这段话我就是在手机上用obsidian编辑的）&lt;/li&gt;&#xA;&lt;li&gt;实在受不了都 ios 18，apple notes还是那么极简，没有目录，不支持markdown，还是坚持不下来使用&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;ifttt&#34;&gt;&#xA;  IFTTT&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#ifttt&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sspai.com/post/81200&#34;&gt;3 个非常规 Day One 使用场景&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sspai.com/post/25270&#34;&gt;触发你的智能生活：IFTTT 入门&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;rss&#34;&gt;&#xA;  RSS&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#rss&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Inoreader&lt;/li&gt;&#xA;&lt;li&gt;Feedly&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>job</title>
      <link>/post/computer-science/job/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/job/</guid>
      <description>&lt;h1 id=&#34;job&#34;&gt;&#xA;  job&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#job&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.0x08.org/posts/resume-for-graduates&#34;&gt;应届生的简历&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>jvm</title>
      <link>/post/computer-science/java/jvm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/java/jvm/</guid>
      <description>&lt;h1 id=&#34;jvm&#34;&gt;&#xA;  jvm&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#jvm&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;jmm&#34;&gt;&#xA;  JMM&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#jmm&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;java的jvm内存模型-java-memory-model&#34;&gt;&#xA;  Java的JVM内存模型 Java Memory Model&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#java%e7%9a%84jvm%e5%86%85%e5%ad%98%e6%a8%a1%e5%9e%8b-java-memory-model&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主内存 Main Memory&lt;/li&gt;&#xA;&lt;li&gt;工作内存 Working Memory&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;jmm-的核心问题&#34;&gt;&#xA;  JMM 的核心问题&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#jmm-%e7%9a%84%e6%a0%b8%e5%bf%83%e9%97%ae%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;可见性&lt;/li&gt;&#xA;&lt;li&gt;原子性&lt;/li&gt;&#xA;&lt;li&gt;有序性&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;内存机制&#34;&gt;&#xA;  内存机制&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%86%85%e5%ad%98%e6%9c%ba%e5%88%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;jvm的内存机制是怎样的&#34;&gt;&#xA;  &lt;code&gt;JVM&lt;/code&gt;的内存机制是怎样的？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#jvm%e7%9a%84%e5%86%85%e5%ad%98%e6%9c%ba%e5%88%b6%e6%98%af%e6%80%8e%e6%a0%b7%e7%9a%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;jvm 的内存区域&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;程序计数器 Program Counter&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;记录当前线程的指令地址，用于记录线程恢复运行状态后执行指令的地址&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;虚拟机栈 Java Virtual Machine Stack&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用于记录方法调用链&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;本地方法栈 Native Method Stack&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;类似于Java虚拟机栈，用于记录本地方法的调用链&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;堆 Heap&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用于保存实例化的对象&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;方法区 Method Area&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;记录加载到内存中的类相关的信息&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;直接内存 Direct Memory&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;非阻塞式的IO操作的内存分配&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;垃圾回收机制&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;标记-清除算法&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;标记存活对象，清除未标记对象，但会产生内存碎片&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;标记-复制算法&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;将存活对象复制到另一个内存区域，适用于新生代，效率高但内存利用率低&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;标记-整理算法&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;标记存活对象后，将对象向一端移动，整理内存空间，适用于老年代&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;分代收集算法&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;根据对象生命周期将堆分为新生代和老年代，分别采用不同的回收算法&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;jvm的内存模型中哪些是线程私有的&#34;&gt;&#xA;  JVM的内存模型中哪些是线程私有的？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#jvm%e7%9a%84%e5%86%85%e5%ad%98%e6%a8%a1%e5%9e%8b%e4%b8%ad%e5%93%aa%e4%ba%9b%e6%98%af%e7%ba%bf%e7%a8%8b%e7%a7%81%e6%9c%89%e7%9a%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;程序计数器 Program Counter&lt;/li&gt;&#xA;&lt;li&gt;Java 虚拟机栈 Java Virtual Stack&lt;/li&gt;&#xA;&lt;li&gt;本地方法栈 Native Method Stack&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;垃圾回收&#34;&gt;&#xA;  垃圾回收&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9e%83%e5%9c%be%e5%9b%9e%e6%94%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;垃圾回收算法有哪些&#34;&gt;&#xA;  垃圾回收算法有哪些&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9e%83%e5%9c%be%e5%9b%9e%e6%94%b6%e7%ae%97%e6%b3%95%e6%9c%89%e5%93%aa%e4%ba%9b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;标记-清除算法&lt;/li&gt;&#xA;&lt;li&gt;标记-复制算法&lt;/li&gt;&#xA;&lt;li&gt;标记-整理算法&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote class=&#34;book-hint info&#34;&gt;&#xA;&lt;p&gt;&lt;strong&gt;Reference&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>kafka</title>
      <link>/post/computer-science/distributed-system/message-queue/kafka/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/distributed-system/message-queue/kafka/</guid>
      <description>&lt;h1 id=&#34;kafka&#34;&gt;&#xA;  kafka&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#kafka&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;kafka-vs-rocketmq&#34;&gt;&#xA;  kafka vs rocketmq&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#kafka-vs-rocketmq&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/341156308&#34;&gt;Kafka 和 RocketMQ 之性能对比&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;kafka如何实现高吞吐量的&#34;&gt;&#xA;  kafka如何实现高吞吐量的？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#kafka%e5%a6%82%e4%bd%95%e5%ae%9e%e7%8e%b0%e9%ab%98%e5%90%9e%e5%90%90%e9%87%8f%e7%9a%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;顺序读写&lt;/li&gt;&#xA;&lt;li&gt;零拷贝&lt;/li&gt;&#xA;&lt;li&gt;分区与并行处理&lt;/li&gt;&#xA;&lt;li&gt;批量发送&lt;/li&gt;&#xA;&lt;li&gt;数据压缩&lt;/li&gt;&#xA;&lt;li&gt;页缓存&lt;/li&gt;&#xA;&lt;li&gt;高效的日志存储(将消息分段、并建立索引文件、支持快速定位与消息读取)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;kafka突然宕机了消息会不会丢失&#34;&gt;&#xA;  Kafka突然宕机了消息会不会丢失&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#kafka%e7%aa%81%e7%84%b6%e5%ae%95%e6%9c%ba%e4%ba%86%e6%b6%88%e6%81%af%e4%bc%9a%e4%b8%8d%e4%bc%9a%e4%b8%a2%e5%a4%b1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;消息的持久化机制&#xA;&lt;ul&gt;&#xA;&lt;li&gt;消息会存储到日志文件中，宕机后不会丢失&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;副本机制&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一个分区可以建立副本，确保数据不丢失&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;生产者确认机制&lt;/li&gt;&#xA;&lt;li&gt;刷盘机制&#xA;&lt;ul&gt;&#xA;&lt;li&gt;同步刷盘, 每次写入消息就将写入到磁盘中, 但损失了效率&lt;/li&gt;&#xA;&lt;li&gt;异步刷盘&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;kafka如何保障顺序消费&#34;&gt;&#xA;  kafka如何保障顺序消费&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#kafka%e5%a6%82%e4%bd%95%e4%bf%9d%e9%9a%9c%e9%a1%ba%e5%ba%8f%e6%b6%88%e8%b4%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;分区内的顺序性&lt;/li&gt;&#xA;&lt;li&gt;将分区键与业务ID进行绑定，保证相同业务的消息都发送到对应分区进行顺序消费&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;kafka重平衡的触发条件是什么&#34;&gt;&#xA;  kafka重平衡的触发条件是什么？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#kafka%e9%87%8d%e5%b9%b3%e8%a1%a1%e7%9a%84%e8%a7%a6%e5%8f%91%e6%9d%a1%e4%bb%b6%e6%98%af%e4%bb%80%e4%b9%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;消费者组成员发生变化&#xA;&lt;ul&gt;&#xA;&lt;li&gt;消费者的加入、退出或崩溃&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;订阅主题分区数发生变化&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主题分区增加或减少&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;订阅主题发生变化&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用正则表达式订阅主题时，新的主题被匹配&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;kafka发送失败如何处理&#34;&gt;&#xA;  kafka发送失败如何处理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#kafka%e5%8f%91%e9%80%81%e5%a4%b1%e8%b4%a5%e5%a6%82%e4%bd%95%e5%a4%84%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;同步发送模式&lt;/strong&gt; 捕获异常&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;异步发送模式&lt;/strong&gt; 在回调方法中捕获异常&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;重试机制&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;设置重试次数&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;错误分类处理&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;可恢复错误&#xA;&lt;ul&gt;&#xA;&lt;li&gt;网络超时&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;不可恢复错误&#xA;&lt;ul&gt;&#xA;&lt;li&gt;无效的主题&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;调整生产者配置&#xA;&lt;ul&gt;&#xA;&lt;li&gt;设置&lt;code&gt;acks&lt;/code&gt;, 可以设置为all，确保所有副本都确认才返回成功&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;使用死信队列&#xA;&lt;ul&gt;&#xA;&lt;li&gt;将发送失败的消息加入到死信队列中，以便后续处理&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;kafka的分区分配策略有哪些&#34;&gt;&#xA;  kafka的分区分配策略有哪些？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#kafka%e7%9a%84%e5%88%86%e5%8c%ba%e5%88%86%e9%85%8d%e7%ad%96%e7%95%a5%e6%9c%89%e5%93%aa%e4%ba%9b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;RangeAssignor&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;RoundRobinAssignor&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;StickerAssignor&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;CooperativeStickerAssignor&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;kafka默认的分区策略是什么&#34;&gt;&#xA;  kafka默认的分区策略是什么？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#kafka%e9%bb%98%e8%ae%a4%e7%9a%84%e5%88%86%e5%8c%ba%e7%ad%96%e7%95%a5%e6%98%af%e4%bb%80%e4%b9%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;DefaultPartitioner&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;指定分区&lt;/li&gt;&#xA;&lt;li&gt;基于key分配&lt;/li&gt;&#xA;&lt;li&gt;轮询分配&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>kafka一个分区有多个消费者消费顺序是怎样的</title>
      <link>/post/computer-science/llm/2025-03-30-7-kafka%E4%B8%80%E4%B8%AA%E5%88%86%E5%8C%BA%E6%9C%89%E5%A4%9A%E4%B8%AA%E6%B6%88%E8%B4%B9%E8%80%85%E6%B6%88%E8%B4%B9%E9%A1%BA%E5%BA%8F%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/llm/2025-03-30-7-kafka%E4%B8%80%E4%B8%AA%E5%88%86%E5%8C%BA%E6%9C%89%E5%A4%9A%E4%B8%AA%E6%B6%88%E8%B4%B9%E8%80%85%E6%B6%88%E8%B4%B9%E9%A1%BA%E5%BA%8F%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84/</guid>
      <description>&lt;h1 id=&#34;kafka一个分区有多个消费者消费顺序是怎样的&#34;&gt;&#xA;  kafka一个分区有多个消费者消费顺序是怎样的&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#kafka%e4%b8%80%e4%b8%aa%e5%88%86%e5%8c%ba%e6%9c%89%e5%a4%9a%e4%b8%aa%e6%b6%88%e8%b4%b9%e8%80%85%e6%b6%88%e8%b4%b9%e9%a1%ba%e5%ba%8f%e6%98%af%e6%80%8e%e6%a0%b7%e7%9a%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;在 Kafka 中，&lt;strong&gt;一个分区（Partition）只能被同一个消费者组（Consumer Group）内的一个消费者（Consumer）消费&lt;/strong&gt;，这是 Kafka 设计的基本原则。以下是详细分析：&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;1-单分区与消费者组的消费规则&#34;&gt;&#xA;  1. &lt;strong&gt;单分区与消费者组的消费规则&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e5%8d%95%e5%88%86%e5%8c%ba%e4%b8%8e%e6%b6%88%e8%b4%b9%e8%80%85%e7%bb%84%e7%9a%84%e6%b6%88%e8%b4%b9%e8%a7%84%e5%88%99&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;一个分区仅由一个消费者消费&lt;/strong&gt;：&lt;br&gt;&#xA;在同一个消费者组内，每个分区会被分配给组内的唯一消费者。例如，如果一个 Topic 有 3 个分区，消费者组有 3 个消费者，则每个消费者负责一个分区，消息按分区顺序消费&lt;a href=&#34;@ref&#34;&gt;29&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;消费者数量 &amp;gt; 分区数&lt;/strong&gt;：多余的消费者会处于空闲状态，无法消费任何分区的消息。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;消费者数量 ≤ 分区数&lt;/strong&gt;：每个消费者可能分配到一个或多个分区，但一个分区始终只对应一个消费者&lt;a href=&#34;@ref&#34;&gt;29&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;分区内消息严格有序&lt;/strong&gt;：&lt;br&gt;&#xA;单个分区内的消息按生产者写入的顺序存储和消费，消费者按偏移量（Offset）递增顺序处理消息&lt;a href=&#34;@ref&#34;&gt;13&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;17&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;2-多消费者消费同一分区的特殊情况&#34;&gt;&#xA;  2. &lt;strong&gt;多消费者消费同一分区的特殊情况&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e5%a4%9a%e6%b6%88%e8%b4%b9%e8%80%85%e6%b6%88%e8%b4%b9%e5%90%8c%e4%b8%80%e5%88%86%e5%8c%ba%e7%9a%84%e7%89%b9%e6%ae%8a%e6%83%85%e5%86%b5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;不同消费者组&lt;/strong&gt;：&lt;br&gt;&#xA;多个消费者组可以独立消费同一个分区的消息（每个组内仍遵循单消费者规则），但不同组之间的消费进度（Offset）互不影响。例如：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;消费者组 A 的 Consumer 1 消费分区 0；&lt;/li&gt;&#xA;&lt;li&gt;消费者组 B 的 Consumer 1 也消费分区 0&lt;a href=&#34;@ref&#34;&gt;29&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;注意&lt;/strong&gt;：这种场景下，消息会被重复消费，且各组消费顺序独立。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;同一消费者组内多线程消费&lt;/strong&gt;：&lt;br&gt;&#xA;若一个消费者启动多线程处理同一分区的消息，需自行保证线程间的顺序性（如单线程消费或业务层排序），否则可能乱序&lt;a href=&#34;@ref&#34;&gt;11&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;3-分区分配策略的影响&#34;&gt;&#xA;  3. &lt;strong&gt;分区分配策略的影响&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-%e5%88%86%e5%8c%ba%e5%88%86%e9%85%8d%e7%ad%96%e7%95%a5%e7%9a%84%e5%bd%b1%e5%93%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Kafka 默认的分区分配策略（如 &lt;code&gt;RangeAssignor&lt;/code&gt; 或 &lt;code&gt;RoundRobinAssignor&lt;/code&gt;）会影响消费者与分区的对应关系，但不会改变单分区单消费者的核心规则&lt;a href=&#34;@ref&#34;&gt;13&lt;/a&gt;。例如：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;RangeAssignor&lt;/strong&gt;：按分区范围顺序分配，可能导致分区分配不均。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;RoundRobinAssignor&lt;/strong&gt;：轮询分配，更均衡但可能打乱业务相关性&lt;a href=&#34;@ref&#34;&gt;13&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;4-总结与建议&#34;&gt;&#xA;  4. &lt;strong&gt;总结与建议&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4-%e6%80%bb%e7%bb%93%e4%b8%8e%e5%bb%ba%e8%ae%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;顺序性保障&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;单分区内消息天然有序，但需确保消费者组内单线程消费&lt;a href=&#34;@ref&#34;&gt;17&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;跨分区顺序需通过相同 Key 路由到同一分区实现局部有序&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;17&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;扩展性权衡&lt;/strong&gt;：&lt;br&gt;&#xA;增加分区数可提升并行度，但需避免消费者数量不足导致负载不均。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;若需多消费者并发处理同一分区的消息且保持顺序，需引入外部排序机制（如优先级队列）或改用单消费者多线程模式&lt;a href=&#34;@ref&#34;&gt;11&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>kafka发送失败如何处理</title>
      <link>/post/computer-science/llm/2025-03-30-8-kafka%E5%8F%91%E9%80%81%E5%A4%B1%E8%B4%A5%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/llm/2025-03-30-8-kafka%E5%8F%91%E9%80%81%E5%A4%B1%E8%B4%A5%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86/</guid>
      <description>&lt;h1 id=&#34;kafka发送失败如何处理&#34;&gt;&#xA;  kafka发送失败如何处理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#kafka%e5%8f%91%e9%80%81%e5%a4%b1%e8%b4%a5%e5%a6%82%e4%bd%95%e5%a4%84%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;当 Kafka 生产者发送消息失败时，可以通过以下方法进行排查和处理，结合错误类型和业务需求选择合适策略：&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;一常见失败原因及解决方案&#34;&gt;&#xA;  一、&lt;strong&gt;常见失败原因及解决方案&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e5%b8%b8%e8%a7%81%e5%a4%b1%e8%b4%a5%e5%8e%9f%e5%9b%a0%e5%8f%8a%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;网络故障&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;现象&lt;/strong&gt;：生产者无法连接 Broker，或发送超时。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;解决&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;检查网络连通性（如防火墙、DNS 解析）。&lt;/li&gt;&#xA;&lt;li&gt;增加生产者参数 &lt;code&gt;retries&lt;/code&gt;（重试次数）和 &lt;code&gt;retry.backoff.ms&lt;/code&gt;（重试间隔）&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;14&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;分区副本不可用&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;现象&lt;/strong&gt;：目标分区 Leader 副本宕机或正在重分配。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;解决&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;检查 Broker 和分区状态（如 &lt;code&gt;kafka-topics.sh --describe&lt;/code&gt;）。&lt;/li&gt;&#xA;&lt;li&gt;配置 &lt;code&gt;acks=all&lt;/code&gt; 确保所有副本确认写入，避免数据丢失&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;14&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;主题不存在&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;现象&lt;/strong&gt;：发送到未创建的主题。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;解决&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;提前创建主题，或启用 &lt;code&gt;auto.create.topics.enable=true&lt;/code&gt;（生产环境慎用）&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;消息大小超限&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;现象&lt;/strong&gt;：消息超过 &lt;code&gt;max.request.size&lt;/code&gt; 或 Broker 限制。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;解决&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;增大 &lt;code&gt;max.request.size&lt;/code&gt; 或拆分大消息&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;14&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;生产者配置错误&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;现象&lt;/strong&gt;：&lt;code&gt;bootstrap.servers&lt;/code&gt; 配置错误或序列化器不匹配。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;解决&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;检查 &lt;code&gt;bootstrap.servers&lt;/code&gt; 地址和序列化配置（如 &lt;code&gt;StringSerializer&lt;/code&gt;）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;二发送失败的处理策略&#34;&gt;&#xA;  二、&lt;strong&gt;发送失败的处理策略&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e5%8f%91%e9%80%81%e5%a4%b1%e8%b4%a5%e7%9a%84%e5%a4%84%e7%90%86%e7%ad%96%e7%95%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;同步发送模式&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;调用 &lt;code&gt;send().get()&lt;/code&gt; 阻塞等待发送结果，捕获异常后重试或记录日志&lt;a href=&#34;@ref&#34;&gt;2&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;22&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    RecordMetadata metadata &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; producer.&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(record).&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (Exception e) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 重试或记录失败&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;异步发送模式&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>kafka如何保障顺序消费</title>
      <link>/post/computer-science/llm/2025-03-30-5-kafka%E5%A6%82%E4%BD%95%E4%BF%9D%E9%9A%9C%E9%A1%BA%E5%BA%8F%E6%B6%88%E8%B4%B9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/llm/2025-03-30-5-kafka%E5%A6%82%E4%BD%95%E4%BF%9D%E9%9A%9C%E9%A1%BA%E5%BA%8F%E6%B6%88%E8%B4%B9/</guid>
      <description>&lt;h1 id=&#34;kafka如何保障顺序消费&#34;&gt;&#xA;  kafka如何保障顺序消费&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#kafka%e5%a6%82%e4%bd%95%e4%bf%9d%e9%9a%9c%e9%a1%ba%e5%ba%8f%e6%b6%88%e8%b4%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Kafka 通过其独特的分区机制和消费者组设计来保障消息的顺序消费，但需注意其仅能保证&lt;strong&gt;单分区内的顺序性&lt;/strong&gt;，跨分区的全局顺序需额外设计。以下是具体实现方法和原理：&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;一单分区顺序性保障&#34;&gt;&#xA;  一、&lt;strong&gt;单分区顺序性保障&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e5%8d%95%e5%88%86%e5%8c%ba%e9%a1%ba%e5%ba%8f%e6%80%a7%e4%bf%9d%e9%9a%9c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;分区内消息严格有序&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Kafka 的每个分区（Partition）是一个有序的、不可变的日志序列，消息按生产者发送的顺序追加到分区末尾，消费者按相同顺序读取&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;18&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;25&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;关键设计&lt;/strong&gt;：分区内的消息通过偏移量（Offset）标识顺序，消费者按 Offset 递增消费&lt;a href=&#34;@ref&#34;&gt;18&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;生产者配置&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;相同 Key 路由到同一分区&lt;/strong&gt;：生产者通过消息 Key 的哈希值确定分区，相同 Key 的消息始终进入同一分区，确保业务相关的消息顺序&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;25&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;39&lt;/a&gt;。&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 示例：发送相同Key的消息到同一分区&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ProducerRecord&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String, String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; record &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ProducerRecord&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;topic&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;order-123&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;producer.&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(record);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;限制并发请求&lt;/strong&gt;：设置 &lt;code&gt;max.in.flight.requests.per.connection=1&lt;/code&gt;，防止生产者因重试导致消息乱序&lt;a href=&#34;@ref&#34;&gt;31&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;25&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;消费者配置&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;单线程消费&lt;/strong&gt;：每个分区仅由一个消费者线程处理，避免并发消费破坏顺序&lt;a href=&#34;@ref&#34;&gt;18&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;手动提交 Offset&lt;/strong&gt;：确保消息处理完成后再提交 Offset，防止重复消费或漏消费。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;二全局顺序性实现跨分区&#34;&gt;&#xA;  二、&lt;strong&gt;全局顺序性实现（跨分区）&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e5%85%a8%e5%b1%80%e9%a1%ba%e5%ba%8f%e6%80%a7%e5%ae%9e%e7%8e%b0%e8%b7%a8%e5%88%86%e5%8c%ba&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;单分区策略&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;将 Topic 设置为单分区，所有消息集中到一个分区，但会牺牲吞吐量和扩展性&lt;a href=&#34;@ref&#34;&gt;24&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;25&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;32&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;适用场景&lt;/strong&gt;：低吞吐但强顺序要求的场景（如金融交易流水）&lt;a href=&#34;@ref&#34;&gt;24&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;基于 Key 的分区路由&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;将需顺序处理的消息（如同一订单 ID）通过相同 Key 路由到固定分区，实现局部顺序&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;39&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;局限性&lt;/strong&gt;：若 Key 分布不均，可能导致分区负载倾斜&lt;a href=&#34;@ref&#34;&gt;24&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;应用层排序&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;消费者拉取多分区消息后，通过优先级队列（如按时间戳或业务ID排序）实现全局顺序。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;示例&lt;/strong&gt;：&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PriorityQueue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ConsumerRecord&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; queue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PriorityQueue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;(Comparator.&lt;span style=&#34;color:#a6e22e&#34;&gt;comparing&lt;/span&gt;(ConsumerRecord::timestamp));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;三高级配置与优化&#34;&gt;&#xA;  三、&lt;strong&gt;高级配置与优化&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%89%e9%ab%98%e7%ba%a7%e9%85%8d%e7%bd%ae%e4%b8%8e%e4%bc%98%e5%8c%96&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;幂等生产者&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;设置 &lt;code&gt;enable.idempotence=true&lt;/code&gt;，避免重试导致消息重复或乱序，同时允许 &lt;code&gt;max.in.flight.requests.per.connection&amp;gt;1&lt;/code&gt; 提升吞吐&lt;a href=&#34;@ref&#34;&gt;31&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;消费者组与分区数平衡&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>kafka如何实现高吞吐量</title>
      <link>/post/computer-science/llm/2025-03-30-3-kafka%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%AB%98%E5%90%9E%E5%90%90%E9%87%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/llm/2025-03-30-3-kafka%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%AB%98%E5%90%9E%E5%90%90%E9%87%8F/</guid>
      <description>&lt;h1 id=&#34;kafka如何实现高吞吐量&#34;&gt;&#xA;  kafka如何实现高吞吐量&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#kafka%e5%a6%82%e4%bd%95%e5%ae%9e%e7%8e%b0%e9%ab%98%e5%90%9e%e5%90%90%e9%87%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Kafka 实现高吞吐量的核心机制基于其多层次的优化设计，包括存储、网络、并行处理和资源利用等方面。以下是关键实现原理及技术细节：&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;1-顺序写入与页缓存技术&#34;&gt;&#xA;  1. &lt;strong&gt;顺序写入与页缓存技术&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e9%a1%ba%e5%ba%8f%e5%86%99%e5%85%a5%e4%b8%8e%e9%a1%b5%e7%bc%93%e5%ad%98%e6%8a%80%e6%9c%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;顺序写入磁盘&lt;/strong&gt;：Kafka 将消息追加到分区日志文件末尾，避免随机磁盘寻址。顺序写入的吞吐量接近内存读写速度（可达数百MB/s），远高于随机写入&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;12&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;22&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;页缓存（Page Cache）&lt;/strong&gt;：消息首先写入操作系统的页缓存（内存），由操作系统异步刷盘。这减少了直接磁盘I/O的开销，同时利用内存加速读写&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;12&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;23&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;2-零拷贝zero-copy技术&#34;&gt;&#xA;  2. &lt;strong&gt;零拷贝（Zero-Copy）技术&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e9%9b%b6%e6%8b%b7%e8%b4%9dzero-copy%e6%8a%80%e6%9c%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;sendfile 系统调用&lt;/strong&gt;：消费者读取数据时，Kafka 通过 &lt;code&gt;sendfile&lt;/code&gt; 直接将页缓存的数据发送到网卡，跳过用户态与内核态之间的数据拷贝，减少CPU消耗和上下文切换&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;51&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;53&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;mmap 内存映射&lt;/strong&gt;：生产者写入时通过内存映射文件（&lt;code&gt;mmap&lt;/code&gt;）将磁盘文件映射到内存，避免数据复制&lt;a href=&#34;@ref&#34;&gt;12&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;51&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;3-分区与并行处理&#34;&gt;&#xA;  3. &lt;strong&gt;分区与并行处理&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-%e5%88%86%e5%8c%ba%e4%b8%8e%e5%b9%b6%e8%a1%8c%e5%a4%84%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;分区机制&lt;/strong&gt;：Topic 分为多个 Partition，每个 Partition 独立处理读写请求，支持水平扩展。分区数越多，并行度越高，吞吐量线性增长&lt;a href=&#34;@ref&#34;&gt;34&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;消费者组&lt;/strong&gt;：多个消费者并行消费不同分区，避免单点瓶颈。例如，6个分区的Topic可由6个消费者同时处理，提升整体消费速率。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;4-批量处理与压缩&#34;&gt;&#xA;  4. &lt;strong&gt;批量处理与压缩&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4-%e6%89%b9%e9%87%8f%e5%a4%84%e7%90%86%e4%b8%8e%e5%8e%8b%e7%bc%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;生产者批量发送&lt;/strong&gt;：Producer 累积消息到批次（如100ms或1MB阈值）后一次性发送，减少网络和磁盘I/O次数&lt;a href=&#34;@ref&#34;&gt;12&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;32&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;消息压缩&lt;/strong&gt;：支持 Snappy、GZIP 等压缩算法，减少网络传输数据量（尤其对文本数据压缩率可达80%）&lt;a href=&#34;@ref&#34;&gt;12&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;22&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;5-高效的存储与索引&#34;&gt;&#xA;  5. &lt;strong&gt;高效的存储与索引&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#5-%e9%ab%98%e6%95%88%e7%9a%84%e5%ad%98%e5%82%a8%e4%b8%8e%e7%b4%a2%e5%bc%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;稀疏索引&lt;/strong&gt;：每个 Partition 的日志分段（Segment）附带索引文件，通过偏移量快速定位消息，避免全量扫描&lt;a href=&#34;@ref&#34;&gt;32&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;23&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;日志分段清理&lt;/strong&gt;：定期删除过期数据或合并小文件，保持存储高效。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;6-网络与协议优化&#34;&gt;&#xA;  6. &lt;strong&gt;网络与协议优化&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#6-%e7%bd%91%e7%bb%9c%e4%b8%8e%e5%8d%8f%e8%ae%ae%e4%bc%98%e5%8c%96&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;二进制协议&lt;/strong&gt;：自定义紧凑的二进制通信协议，减少解析开销&lt;a href=&#34;@ref&#34;&gt;32&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;长轮询与拉取模式&lt;/strong&gt;：消费者主动拉取消息（Pull），根据处理能力控制流量，避免Broker过载。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;总结&#34;&gt;&#xA;  总结&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%80%bb%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Kafka 的高吞吐量是多项技术协同作用的结果：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;存储层&lt;/strong&gt;：顺序写入+页缓存+零拷贝最大化I/O效率；&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;架构层&lt;/strong&gt;：分区+并行处理实现水平扩展；&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;传输层&lt;/strong&gt;：批量+压缩+高效协议降低网络开销。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;实际应用中，需根据业务调整分区数、批次大小和压缩算法等参数以进一步优化性能&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;12&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kafka的顺序消费能力与其他消息队列系统相比有何优势</title>
      <link>/post/computer-science/llm/2025-03-30-6-kafka%E7%9A%84%E9%A1%BA%E5%BA%8F%E6%B6%88%E8%B4%B9%E8%83%BD%E5%8A%9B%E4%B8%8E%E5%85%B6%E4%BB%96%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%B3%BB%E7%BB%9F%E7%9B%B8%E6%AF%94%E6%9C%89%E4%BD%95%E4%BC%98%E5%8A%BF/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/llm/2025-03-30-6-kafka%E7%9A%84%E9%A1%BA%E5%BA%8F%E6%B6%88%E8%B4%B9%E8%83%BD%E5%8A%9B%E4%B8%8E%E5%85%B6%E4%BB%96%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%B3%BB%E7%BB%9F%E7%9B%B8%E6%AF%94%E6%9C%89%E4%BD%95%E4%BC%98%E5%8A%BF/</guid>
      <description>&lt;h1 id=&#34;kafka的顺序消费能力与其他消息队列系统相比有何优势&#34;&gt;&#xA;  Kafka的顺序消费能力与其他消息队列系统相比有何优势&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#kafka%e7%9a%84%e9%a1%ba%e5%ba%8f%e6%b6%88%e8%b4%b9%e8%83%bd%e5%8a%9b%e4%b8%8e%e5%85%b6%e4%bb%96%e6%b6%88%e6%81%af%e9%98%9f%e5%88%97%e7%b3%bb%e7%bb%9f%e7%9b%b8%e6%af%94%e6%9c%89%e4%bd%95%e4%bc%98%e5%8a%bf&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Kafka 在顺序消费能力上与其他主流消息队列系统（如 RabbitMQ、RocketMQ）相比，具有独特的优势和适用场景。以下是详细对比分析：&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;一kafka-顺序消费的核心优势&#34;&gt;&#xA;  一、&lt;strong&gt;Kafka 顺序消费的核心优势&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80kafka-%e9%a1%ba%e5%ba%8f%e6%b6%88%e8%b4%b9%e7%9a%84%e6%a0%b8%e5%bf%83%e4%bc%98%e5%8a%bf&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;分区内严格有序&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Kafka 通过分区（Partition）机制天然保证同一分区内的消息顺序性，消息按写入顺序存储和消费，适用于高吞吐场景下的局部有序需求（如订单流水、日志流）&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;对比&lt;/strong&gt;：RabbitMQ 默认不保证顺序，需通过单队列单消费者或复杂的分组逻辑实现；RocketMQ 虽支持队列内有序，但需依赖队列分配策略。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;高性能与扩展性&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Kafka 的分区设计允许水平扩展，通过增加分区数提升吞吐量，同时保持分区内顺序。例如，10个分区的 Topic 可支持10个消费者并行消费，每个消费者处理一个分区的有序消息&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;28&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;对比&lt;/strong&gt;：RabbitMQ 单队列模式无法扩展，吞吐量受限；RocketMQ 虽支持多队列，但全局有序需牺牲队列数（单队列）&lt;a href=&#34;@ref&#34;&gt;47&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;生产者控制灵活&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通过消息 Key 的哈希路由，Kafka 可将需顺序处理的消息（如相同订单ID）固定到同一分区，兼顾顺序性与并行能力&lt;a href=&#34;@ref&#34;&gt;28&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;对比&lt;/strong&gt;：RabbitMQ 需业务层实现分组逻辑；RocketMQ 类似但需显式配置 &lt;code&gt;MessageQueueSelector&lt;/code&gt;&lt;a href=&#34;@ref&#34;&gt;47&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;零拷贝与批量处理&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Kafka 的零拷贝技术和批量发送机制减少 I/O 开销，在高吞吐场景下仍能保持低延迟的顺序消费&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;29&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;对比&lt;/strong&gt;：RabbitMQ 的推送模型和内存优先策略在吞吐量上逊色&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;二与其他消息队列的对比&#34;&gt;&#xA;  二、&lt;strong&gt;与其他消息队列的对比&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e4%b8%8e%e5%85%b6%e4%bb%96%e6%b6%88%e6%81%af%e9%98%9f%e5%88%97%e7%9a%84%e5%af%b9%e6%af%94&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;strong&gt;特性&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;strong&gt;Kafka&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;strong&gt;RocketMQ&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;strong&gt;RabbitMQ&lt;/strong&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;顺序性保证&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;分区内有序，分区间无序&lt;/td&gt;&#xA;          &lt;td&gt;队列内有序，队列间无序&lt;/td&gt;&#xA;          &lt;td&gt;默认无序，需单队列单消费者&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;全局有序实现&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;单分区主题（牺牲吞吐）或 Key 分区&lt;/td&gt;&#xA;          &lt;td&gt;单队列主题或 Key 选择队列&lt;/td&gt;&#xA;          &lt;td&gt;单队列单消费者或消息分组&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;并行能力&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;高（多分区并行）&lt;/td&gt;&#xA;          &lt;td&gt;高（多队列并行）&lt;/td&gt;&#xA;          &lt;td&gt;低（单队列限制）&lt;a href=&#34;@ref&#34;&gt;40&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;适用场景&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;日志聚合、流处理、高吞吐局部有序&lt;/td&gt;&#xA;          &lt;td&gt;金融交易、分布式事务&lt;/td&gt;&#xA;          &lt;td&gt;低吞吐、简单顺序需求&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;三kafka-的局限性&#34;&gt;&#xA;  三、&lt;strong&gt;Kafka 的局限性&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%89kafka-%e7%9a%84%e5%b1%80%e9%99%90%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;全局有序成本高&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kafka突然宕机了消息会不会丢失</title>
      <link>/post/computer-science/llm/2025-03-30-9-kafka%E7%AA%81%E7%84%B6%E5%AE%95%E6%9C%BA%E4%BA%86%E6%B6%88%E6%81%AF%E4%BC%9A%E4%B8%8D%E4%BC%9A%E4%B8%A2%E5%A4%B1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/llm/2025-03-30-9-kafka%E7%AA%81%E7%84%B6%E5%AE%95%E6%9C%BA%E4%BA%86%E6%B6%88%E6%81%AF%E4%BC%9A%E4%B8%8D%E4%BC%9A%E4%B8%A2%E5%A4%B1/</guid>
      <description>&lt;h1 id=&#34;kafka突然宕机了消息会不会丢失&#34;&gt;&#xA;  Kafka突然宕机了消息会不会丢失&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#kafka%e7%aa%81%e7%84%b6%e5%ae%95%e6%9c%ba%e4%ba%86%e6%b6%88%e6%81%af%e4%bc%9a%e4%b8%8d%e4%bc%9a%e4%b8%a2%e5%a4%b1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Kafka 在突然宕机时是否会导致消息丢失，取决于其&lt;strong&gt;副本机制、生产者配置、刷盘策略&lt;/strong&gt;等多个因素。以下是具体分析：&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;一可能导致消息丢失的场景&#34;&gt;&#xA;  一、&lt;strong&gt;可能导致消息丢失的场景&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e5%8f%af%e8%83%bd%e5%af%bc%e8%87%b4%e6%b6%88%e6%81%af%e4%b8%a2%e5%a4%b1%e7%9a%84%e5%9c%ba%e6%99%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;生产者未启用高可靠性配置&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;若生产者设置 &lt;code&gt;acks=0&lt;/code&gt; 或 &lt;code&gt;acks=1&lt;/code&gt;，且消息未完全同步到副本时 Leader 宕机，消息会丢失：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;acks=0&lt;/code&gt;：生产者不等待 Broker 确认，直接发送下一条消息，宕机时丢失风险最高&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;11&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;acks=1&lt;/code&gt;：仅 Leader 写入本地日志即返回成功，若 Follower 未同步且 Leader 宕机，消息丢失&lt;a href=&#34;@ref&#34;&gt;11&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;18&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Broker 刷盘策略为异步&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Kafka 默认先将消息写入操作系统的 &lt;strong&gt;PageCache&lt;/strong&gt;，异步刷盘。若服务器宕机，PageCache 中未刷盘的消息会丢失&lt;a href=&#34;@ref&#34;&gt;11&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;18&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;副本同步不足&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;若 &lt;code&gt;min.insync.replicas=1&lt;/code&gt;（默认），且仅 Leader 持有消息时宕机，即使设置 &lt;code&gt;acks=all&lt;/code&gt; 也可能丢失消息&lt;a href=&#34;@ref&#34;&gt;18&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;23&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;二避免消息丢失的配置&#34;&gt;&#xA;  二、&lt;strong&gt;避免消息丢失的配置&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e9%81%bf%e5%85%8d%e6%b6%88%e6%81%af%e4%b8%a2%e5%a4%b1%e7%9a%84%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;生产者端&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;设置 &lt;code&gt;acks=all&lt;/code&gt;：确保所有 ISR（同步副本）均写入消息后才返回成功&lt;a href=&#34;@ref&#34;&gt;11&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;18&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;启用幂等性（&lt;code&gt;enable.idempotence=true&lt;/code&gt;）和重试机制（&lt;code&gt;retries&amp;gt;0&lt;/code&gt;），防止重复发送和网络抖动导致丢失&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;43&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Broker 端&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;提高 &lt;code&gt;min.insync.replicas&lt;/code&gt;（如设置为 2），确保至少两个副本同步成功&lt;a href=&#34;@ref&#34;&gt;18&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;23&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;同步刷盘（&lt;code&gt;log.flush.interval.messages=1&lt;/code&gt;），但会显著降低性能，仅适用于金融等高可靠性场景&lt;a href=&#34;@ref&#34;&gt;11&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;18&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Topic 配置&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;设置 &lt;code&gt;replication.factor≥3&lt;/code&gt;，多副本冗余存储，即使一台 Broker 宕机，其他副本仍可提供服务&lt;a href=&#34;@ref&#34;&gt;23&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;三kafka-的可靠性保障机制&#34;&gt;&#xA;  三、&lt;strong&gt;Kafka 的可靠性保障机制&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%89kafka-%e7%9a%84%e5%8f%af%e9%9d%a0%e6%80%a7%e4%bf%9d%e9%9a%9c%e6%9c%ba%e5%88%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;ISR 机制&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;只有与 Leader 同步的副本（ISR）才能参与选举，避免数据不一致&lt;a href=&#34;@ref&#34;&gt;18&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;23&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;自动故障恢复&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Leader 宕机后，Controller 会从 ISR 中选举新 Leader，继续提供服务&lt;a href=&#34;@ref&#34;&gt;23&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;持久化设计&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;消息以追加日志（append-only）形式写入磁盘，即使消费者已消费，数据仍保留（可配置保留时间）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;四总结&#34;&gt;&#xA;  四、&lt;strong&gt;总结&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9b%9b%e6%80%bb%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;可能丢失&lt;/strong&gt;：若配置为 &lt;code&gt;acks=0/1&lt;/code&gt;、异步刷盘或副本不足时，宕机会导致消息丢失。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;不会丢失&lt;/strong&gt;：若配置 &lt;code&gt;acks=all&lt;/code&gt;、同步刷盘且 &lt;code&gt;min.insync.replicas≥2&lt;/code&gt;，即使单台 Broker 宕机，消息仍可从其他副本恢复&lt;a href=&#34;@ref&#34;&gt;11&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;18&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;23&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;建议&lt;/strong&gt;：根据业务重要性权衡性能与可靠性，金融级场景建议同步刷盘 + 多副本 + 事务支持（&lt;code&gt;transactional.id&lt;/code&gt;）&lt;a href=&#34;@ref&#34;&gt;43&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>life recommand</title>
      <link>/post/life/life-recommend/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/life/life-recommend/</guid>
      <description>&lt;h1 id=&#34;life-recommend&#34;&gt;&#xA;  life recommend&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#life-recommend&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sspai.com&#34;&gt;sspai&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;数码相关内容，还有一些偏硬核的科普，技术文章&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;movies&#34;&gt;&#xA;  movies&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#movies&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;绝命毒师 Breaking Bad&lt;/li&gt;&#xA;&lt;li&gt;风骚律师 Better Call Saul&lt;/li&gt;&#xA;&lt;li&gt;权力的游戏&lt;/li&gt;&#xA;&lt;li&gt;灿烂人生&lt;/li&gt;&#xA;&lt;li&gt;无言的山丘&lt;/li&gt;&#xA;&lt;li&gt;人间的条件&lt;/li&gt;&#xA;&lt;li&gt;赤足小子&lt;/li&gt;&#xA;&lt;li&gt;婚姻生活&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;article&#34;&gt;&#xA;  article&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#article&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;互联网是人类历史的一段弯路吗&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/560147506/answer/2720369056?utm_psn=1841271155320811523&#34;&gt;每天通勤骑车60公里身体会不会累垮？&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;books&#34;&gt;&#xA;  books&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#books&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.douban.com/doubanapp/dispatch/book/25982198?dt_dapp=1&#34;&gt;社会心理学 戴维迈尔斯&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.douban.com/doubanapp/dispatch/book/4246032?dt_dapp=1&#34;&gt;西方哲学史讲演录 赵林&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.douban.com/doubanapp/dispatch/book/4864832?dt_dapp=1&#34;&gt;为什么学生不喜欢上学&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;送你一颗子弹 刘瑜&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;resources&#34;&gt;&#xA;  resources&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#resources&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://zlib.by/&#34;&gt;zlibrary&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;bilibili&#34;&gt;&#xA;  bilibili&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#bilibili&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;movies&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://b23.tv/XJ57NWi&#34;&gt;木鱼水心&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;质量很高，第一个关注的电影解说up&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://b23.tv/M4NgoLD&#34;&gt;电影广角镜&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;绝命毒师和风骚律师 解说的很棒&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;digital&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://b23.tv/eoVxkEw&#34;&gt;那岩KJMX&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://b23.tv/HpKb9dR&#34;&gt;科技美学&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;cycling&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://b23.tv/sf9PjEf&#34;&gt;道长说车&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://b23.tv/8htVZ72&#34;&gt;CLUB100&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://b23.tv/K9Mp7UB&#34;&gt;Contayu_Cycling&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;world&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://b23.tv/DvdVmLA&#34;&gt;Yooupi食途&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://b23.tv/luBswEi&#34;&gt;星球研究所&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;economy&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://b23.tv/Dkb1EvU&#34;&gt;小Lin说&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;software&#34;&gt;&#xA;  software&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#software&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;ios&#34;&gt;&#xA;  ios&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#ios&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;a-Shell&lt;/li&gt;&#xA;&lt;li&gt;working copy&lt;/li&gt;&#xA;&lt;li&gt;Documents&lt;/li&gt;&#xA;&lt;li&gt;Shadowrocket&lt;/li&gt;&#xA;&lt;li&gt;Obsidian&lt;/li&gt;&#xA;&lt;li&gt;ServerCat&lt;/li&gt;&#xA;&lt;li&gt;Github&lt;/li&gt;&#xA;&lt;li&gt;搜狗输入法&lt;/li&gt;&#xA;&lt;li&gt;彩云天气&lt;/li&gt;&#xA;&lt;li&gt;Actions&lt;/li&gt;&#xA;&lt;li&gt;DataJar&lt;/li&gt;&#xA;&lt;li&gt;ShellFish&lt;/li&gt;&#xA;&lt;li&gt;nPlayer&lt;/li&gt;&#xA;&lt;li&gt;HashPhotos&lt;/li&gt;&#xA;&lt;li&gt;Soor&lt;/li&gt;&#xA;&lt;li&gt;Shortcuts&lt;/li&gt;&#xA;&lt;li&gt;小宇宙&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sspai.com/post/59722&#34;&gt;让听播客回归简单——即刻团队新作「小宇宙」体验报告&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;mac&#34;&gt;&#xA;  mac&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mac&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;windows&#34;&gt;&#xA;  windows&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#windows&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h2 id=&#34;wallpaper&#34;&gt;&#xA;  wallpaper&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#wallpaper&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://4kwallpapers.com/&#34;&gt;4k wallpapers&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;philosophy&#34;&gt;&#xA;  philosophy&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#philosophy&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Philosophia 哲学社&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/8zBUQ2W6mEF4ocI7RuxCNQ&#34;&gt;2020-03-16 种族歧视错在哪儿&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;f1&#34;&gt;&#xA;  F1&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#f1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sspai.com/post/93483&#34;&gt;指北集EP.01——简明Formula One观赛指北&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;motto&#34;&gt;&#xA;  motto&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#motto&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;you don&amp;rsquo;t give up, then there&amp;rsquo;s no limitation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>linux</title>
      <link>/post/computer-science/operating-system/linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/operating-system/linux/</guid>
      <description>&lt;h1 id=&#34;linux&#34;&gt;&#xA;  linux&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#linux&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;resources&#34;&gt;&#xA;  resources&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#resources&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://wizardforcel.gitbooks.io/vbird-linux-basic-4e/content/index.html&#34;&gt;鸟哥的Linux私房菜：基础学习篇 第四版&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;tail&#34;&gt;&#xA;  tail&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#tail&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;tail -f xxxx&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;sed&#34;&gt;&#xA;  sed&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#sed&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/edwardlost/archive/2010/09/17/1829145.html&#34;&gt;sed命令详解&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;nmon&#34;&gt;&#xA;  nmon&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#nmon&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/binarywang/Linux-Tutorial/blob/master/Nmon.md&#34;&gt;nmon 系统性能监控工具的使用&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://nmon.sourceforge.io/pmwiki.php&#34;&gt;HomePage&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;yazi&#34;&gt;&#xA;  yazi&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#yazi&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/sxyazi/yazi&#34;&gt;sxyazi/yazi&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;官方仓库&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://yazi-rs.github.io/docs/installation/&#34;&gt;docs&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1yRkCYVEUT&#34;&gt;【命令行必备】Yazi：最强文件管理器&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;TheCW&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>mac</title>
      <link>/post/computer-science/operating-system/mac/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/operating-system/mac/</guid>
      <description>&lt;h1 id=&#34;mac&#34;&gt;&#xA;  mac&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mac&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1Yq8tzdEPU&#34;&gt;如何像极客一样使用你的Mac？分享下我的Mac工作流&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;icloud&#34;&gt;&#xA;  icloud&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#icloud&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://discussionschinese.apple.com/docs/DOC-250005778&#34;&gt;文件APP不同步-iCloud云盘延迟同步解决方法&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;killall bird&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;killall cloudd&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;brew&#34;&gt;&#xA;  brew&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#brew&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;查看 brew 服务运行状态 &lt;code&gt;brew services list&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;mysql&#34;&gt;&#xA;  mysql&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mysql&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;启动 &lt;code&gt;brew services start mysql@8.0&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;使用命令行连接 mysql &lt;code&gt;mysql -u root&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;reference&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://cloud.tencent.com/developer/article/2433053&#34;&gt;Macbook通过brew安装mysql8.0&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;mongodb&#34;&gt;&#xA;  mongodb&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mongodb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;mongodb 安装&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;brew tap mongodb/brew&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;brew update&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;brew install mongodb-community@8.0&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;启动 mongodb &lt;code&gt;brew services start mongodb-community@8.0&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;停止 mongodb &lt;code&gt;brew services stop mongodb-community@8.0&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;mongodb 配置文件位置 &lt;code&gt;vim /opt/homebrew/etc/mongod.conf&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;窗口管理&#34;&gt;&#xA;  窗口管理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%aa%97%e5%8f%a3%e7%ae%a1%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;alttab&#34;&gt;&#xA;  AltTab&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#alttab&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://alt-tab-macos.netlify.app/&#34;&gt;官网&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;相比起系统自带的 &lt;code&gt;command + tab&lt;/code&gt; 它提供相同应用的窗口切换（例如浏览器打开了多个窗口，系统自带的是不能指定某一个窗口进行切换的）&lt;/li&gt;&#xA;&lt;li&gt;可以设置UI的样式，用列表的方式来展示窗口，文字设置的小一点&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;yabai&#34;&gt;&#xA;  Yabai&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#yabai&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1sW4y1R7yJ&#34;&gt;用Mac不用它，你的Mac白买了 —— 平铺式窗口管理器yabai&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;ffmpeg&#34;&gt;&#xA;  ffmpeg&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#ffmpeg&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;安装 &lt;code&gt;brew install ffmpeg&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;postgresql&#34;&gt;&#xA;  postgresql&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#postgresql&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://wiki.postgresql.org/wiki/Homebrew&#34;&gt;Homebrew 安装 postgresql&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;yazi&#34;&gt;&#xA;  yazi&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#yazi&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://yazi-rs.github.io/docs/installation/&#34;&gt;docs&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;git&#34;&gt;&#xA;  git&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#git&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;lazygit&#34;&gt;&#xA;  lazygit&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#lazygit&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/jesseduffield/lazygit&#34;&gt;jesseduffield/lazygit&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/586776869&#34;&gt;zen·工作环境搭建之git篇之Lazygit&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://awesometop.cn/posts/2e318106490149a49c02268da48dd370&#34;&gt;LazyGit 使用教程：简化 Git 操作的终端工具&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;yt-dlp&#34;&gt;&#xA;  yt-dlp&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#yt-dlp&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/yt-dlp/yt-dlp&#34;&gt;yt-dlp/yt-dlp&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;安装 &lt;code&gt;brew install yt-dlp&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/yt-dlp/yt-dlp?tab=readme-ov-file#output-template&#34;&gt;output-template&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;yt-dlp -N 20 https://www.youtube.com/@xiaodaodalang --merge-output-format mp4&#xA;# 后台下载&#xA;nohup yt-dlp -N 20 https://www.youtube.com/@xiaodaodalang --merge-output-format mp4 &amp;amp;&#xA;# 加上日期前缀&#xA;yt-dlp -N 20 -o &amp;#34;%(upload_date&amp;gt;%Y-%m-%d)s-%(title)s.%(ext)s&amp;#34; https://www.youtube.com/@xiaodaodalang --merge-output-format mp4&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;player&#34;&gt;&#xA;  player&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#player&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/402743090&#34;&gt;Mac下最好的视频播放器&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://iina.io&#34;&gt;IINA&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;orbstack&#34;&gt;&#xA;  orbstack&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#orbstack&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://orbstack.dev/&#34;&gt;orbstack&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;skechybar&#34;&gt;&#xA;  skechybar&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#skechybar&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/FelixKratz/SketchyBar&#34;&gt;skechybar&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://felixkratz.github.io/SketchyBar/setup&#34;&gt;install&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;homerow&#34;&gt;&#xA;  homerow&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#homerow&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;模拟点击&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;hammerspoon&#34;&gt;&#xA;  Hammerspoon&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#hammerspoon&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;脚本工具&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sspai.com/post/53992&#34;&gt;免费又强大的 macOS 自动化工具，Hammerspoon 可以让你少买很多 App&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.hammerspoon.org/&#34;&gt;HomePage&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;arc&#34;&gt;&#xA;  arc&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#arc&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;dia&#34;&gt;&#xA;  dia&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#dia&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;folo&#34;&gt;&#xA;  folo&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#folo&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1jvNnzmEin&#34;&gt;Folo: 你的一站式信息订阅平台（可同时订阅B站、油管、X等多个平台的博主）&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;reference&#34;&gt;&#xA;  reference&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/589301822&#34;&gt;如何评价Orbstack（在Mac上低开销地运行容器和Linux）？&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;登录虚拟机&#34;&gt;&#xA;  登录虚拟机&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%99%bb%e5%bd%95%e8%99%9a%e6%8b%9f%e6%9c%ba&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;orb -m ubuntu -u xiangliu&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;disk&#34;&gt;&#xA;  disk&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#disk&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.mac618.com/795.html#J_DLIPPCont&#34;&gt;DaisyDisk&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://daisydiskapp.com/manual?source=HiddenSpace&amp;amp;appVersion=4.26.1&amp;amp;lang=en&amp;amp;subtopic=StillHiddenSpace&amp;amp;osVersion=14.6.0&amp;amp;topic=HiddenSpace&amp;amp;appEdition=Standard&#34;&gt;Hidden space 隐藏空间&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;如何用命令弹出硬盘&#xA;&lt;ul&gt;&#xA;&lt;li&gt;查询硬盘挂载路径 &lt;code&gt;df -h&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;取消挂载 &lt;code&gt;diskutil unmount xxxxx&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;transmit 文件传输工具&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;raycast&#34;&gt;&#xA;  Raycast&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#raycast&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1Uo4y137XH&#34;&gt;最强macOS生产力软件：Raycast&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;aerospace&#34;&gt;&#xA;  AeroSpace&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#aerospace&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1kBqFYqEzo&#34;&gt;我用AeroSpace替代了yabai+skhd&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;apple-music&#34;&gt;&#xA;  Apple Music&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#apple-music&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sspai.com/post/101340&#34;&gt;一日一技 | 如何用命令行将音乐转码到 iTunes Plus AAC&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;battery&#34;&gt;&#xA;  battery&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#battery&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.sysgeek.cn/powerflow-for-mac/#google_vignette&#34;&gt;Powerflow：轻巧好用的 macOS 电源与充电状态监控神器&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/vladkens/macmon&#34;&gt;vladkens/macmon&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://apphousekitchen.com/aldente-overview&#34;&gt;altente&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;mac-上抓取应用的https的包&#34;&gt;&#xA;  mac 上抓取应用的https的包&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mac-%e4%b8%8a%e6%8a%93%e5%8f%96%e5%ba%94%e7%94%a8%e7%9a%84https%e7%9a%84%e5%8c%85&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;在Mac上抓取应用的HTTPS流量，你需要使用网络分析工具，如Wireshark、Charles Proxy或MITMproxy。由于HTTPS加密了数据传输，直接抓包无法查看具体内容，因此通常需要设置一个代理服务器来进行中间人攻击（Man-in-the-Middle, MITM）来解密和检查HTTPS流量。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Message Queue</title>
      <link>/post/computer-science/distributed-system/message-queue/message-queue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/distributed-system/message-queue/message-queue/</guid>
      <description>&lt;h1 id=&#34;message-queue&#34;&gt;&#xA;  Message Queue&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#message-queue&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;消息队列如何选型&#34;&gt;&#xA;  消息队列如何选型？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b6%88%e6%81%af%e9%98%9f%e5%88%97%e5%a6%82%e4%bd%95%e9%80%89%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;高吞吐量、大数据场景：&lt;strong&gt;Kafka&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;金融交易、高可靠场景：&lt;strong&gt;RocketMQ&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;支持事务消息和高可用性&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;易于使用、功能丰富：&lt;strong&gt;RabbitMQ&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;云原生、多租户场景：Pulsar 适合需要高扩展性和分层存储的场景&lt;/li&gt;&#xA;&lt;li&gt;简单轻量、定制开发场景：NSQ 适合 Golang技术栈&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Mybatis</title>
      <link>/post/computer-science/java/mybatis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/java/mybatis/</guid>
      <description>&lt;h2 id=&#34;mybatis是怎么进行事务管理的-2025-02-08&#34;&gt;&#xA;  mybatis是怎么进行事务管理的 2025-02-08&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mybatis%e6%98%af%e6%80%8e%e4%b9%88%e8%bf%9b%e8%a1%8c%e4%ba%8b%e5%8a%a1%e7%ae%a1%e7%90%86%e7%9a%84-2025-02-08&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;MyBatis 通过集成外部事务管理器（如 Spring 或 Java EE 容器）或使用内置的 JDBC 事务管理机制来管理事务。以下是 MyBatis 事务管理的主要方式：&lt;/p&gt;&#xA;&lt;h3 id=&#34;1-使用-jdbc-事务管理&#34;&gt;&#xA;  1. 使用 JDBC 事务管理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e4%bd%bf%e7%94%a8-jdbc-%e4%ba%8b%e5%8a%a1%e7%ae%a1%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;MyBatis 默认使用 JDBC 的事务管理，通过 &lt;code&gt;java.sql.Connection&lt;/code&gt; 实现。具体步骤如下：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;开启事务&lt;/strong&gt;：调用 &lt;code&gt;Connection.setAutoCommit(false)&lt;/code&gt; 关闭自动提交。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;提交事务&lt;/strong&gt;：调用 &lt;code&gt;Connection.commit()&lt;/code&gt; 提交事务。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;回滚事务&lt;/strong&gt;：调用 &lt;code&gt;Connection.rollback()&lt;/code&gt; 回滚事务。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;示例代码：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SqlSession sqlSession &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sqlSessionFactory.&lt;span style=&#34;color:#a6e22e&#34;&gt;openSession&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 执行数据库操作&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sqlSession.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;insertUser&amp;#34;&lt;/span&gt;,user);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sqlSession.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;updateUser&amp;#34;&lt;/span&gt;,user);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 提交事务&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sqlSession.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;commit&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt;(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Exception e){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 回滚事务&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sqlSession.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rollback&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;span style=&#34;color:#66d9ef&#34;&gt;finally&lt;/span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 关闭 SqlSession&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sqlSession.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-集成-spring-事务管理&#34;&gt;&#xA;  2. 集成 Spring 事务管理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e9%9b%86%e6%88%90-spring-%e4%ba%8b%e5%8a%a1%e7%ae%a1%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;MyBatis 通常与 Spring 集成，利用 Spring 的事务管理功能。Spring 提供了声明式和编程式事务管理。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mybatis Plus</title>
      <link>/post/computer-science/java/mybatis-plus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/java/mybatis-plus/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;document&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://baomidou.com/guides/wrapper/#nested&#34;&gt;条件构造器&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>mycat</title>
      <link>/post/computer-science/database/mycat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/database/mycat/</guid>
      <description>&lt;h1 id=&#34;mycat&#34;&gt;&#xA;  mycat&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mycat&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000021987297&#34;&gt;那些年非常火的MyCAT是什么？&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/m0_74436895/article/details/142969704&#34;&gt;MyCat(看这一篇就够了）&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;应用场景&#xA;&lt;ul&gt;&#xA;&lt;li&gt;MySQL读写分离&lt;/li&gt;&#xA;&lt;li&gt;分库分表&lt;/li&gt;&#xA;&lt;li&gt;数据库路由器&lt;/li&gt;&#xA;&lt;li&gt;整合数据源&#xA;&lt;ul&gt;&#xA;&lt;li&gt;当一个项目需要用到多种数据源如Oracle, MySQL, SQL Server, &lt;code&gt;PostgreSQL&lt;/code&gt;时，可以利用&lt;code&gt;Mycat&lt;/code&gt;进行整合，只需访问&lt;code&gt;Mycat&lt;/code&gt;这一个数据源就行&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;逻辑库 schema&#xA;&lt;ul&gt;&#xA;&lt;li&gt;业务开发人员通常在实际应用中并不需要知道中间件的存在，只需要关注数据库，所以数据库中间件可以被当做一个或多个数据库集群构成的逻辑库&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;逻辑表 table&#xA;&lt;ul&gt;&#xA;&lt;li&gt;既然有逻辑库，就会有逻辑表。在分布式数据库中，对于应用来说，读写数据的表就是逻辑表。逻辑表可以分布在一个或多个分片库中，也可以不分片&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Mycat的原理最重要的一个动词是拦截，它拦截用户发送过来的SQL语句&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;mycat-如何实现高可用&#34;&gt;&#xA;  &lt;code&gt;Mycat&lt;/code&gt; 如何实现高可用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mycat-%e5%a6%82%e4%bd%95%e5%ae%9e%e7%8e%b0%e9%ab%98%e5%8f%af%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;基于&lt;code&gt;keepalived&lt;/code&gt;的&lt;code&gt;MyCat&lt;/code&gt;高可用技术&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;Keepalived&lt;/code&gt;通过&lt;code&gt;VRRP&lt;/code&gt;协议实现虚拟IP(VIP)的自动漂移，当主节点故障时，VIP会自动切换到备用节点，实现MyCat服务的高可用&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;HAProxy+Keepalived实现高可用与负载均衡&#xA;&lt;ul&gt;&#xA;&lt;li&gt;HAProxy实现MyCat多节点的负载均衡&lt;/li&gt;&#xA;&lt;li&gt;Keepalived实现HAProxy自身的高可用&lt;/li&gt;&#xA;&lt;li&gt;同时解决了MyCat的负载均衡器的高可用问题&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>mysql</title>
      <link>/post/computer-science/database/mysql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/database/mysql/</guid>
      <description>&lt;h1 id=&#34;mysql&#34;&gt;&#xA;  mysql&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mysql&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;binlog&#34;&gt;&#xA;  binlog&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#binlog&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;redo-log-和-binlog日志&#34;&gt;&#xA;  redo log 和 binlog日志&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#redo-log-%e5%92%8c-binlog%e6%97%a5%e5%bf%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;redo log 重做日志&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Redo log是InnoDB存储引擎特有的物理日志，主要保证事务的持久性和崩溃恢复能力(crash-safe)。当MySQL实例意外宕机时，InnoDB可以通过redo log恢复已提交但未写入数据文件的事务，确保数据不会丢失&lt;/li&gt;&#xA;&lt;li&gt;Redo log采用&amp;quot;预写日志(WAL, Write-Ahead Logging)&amp;ldquo;机制：在数据页修改前，先记录日志到redo log buffer，再根据策略刷盘到redo log文件&lt;/li&gt;&#xA;&lt;li&gt;刷盘策略&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通过&lt;code&gt;innodb_flush_log_at_trx_commit&lt;/code&gt; 参数控制&#xA;&lt;ul&gt;&#xA;&lt;li&gt;0：每秒刷盘一次，事务提交时不刷盘(可能丢失1秒数据)&lt;/li&gt;&#xA;&lt;li&gt;1：每次事务提交都刷盘(默认，最安全)&lt;/li&gt;&#xA;&lt;li&gt;2：写入OS缓存，不立即刷盘(仅MySQL崩溃安全，服务器宕机可能丢失数据)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;bin log 二进制日志&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Binlog是MySQL Server层维护的逻辑日志，记录所有引起数据变更的SQL语句或行变更&lt;/li&gt;&#xA;&lt;li&gt;主要用于&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主从复制：从库通过重放主库的binlog实现数据同步&lt;/li&gt;&#xA;&lt;li&gt;时间点恢复：结合全量备份和binlog可实现任意时间点的数据恢复&lt;/li&gt;&#xA;&lt;li&gt;数据归档：记录数据库所有变更历史&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;三种格式&#xA;&lt;ul&gt;&#xA;&lt;li&gt;STATEMENT：记录SQL原文(默认)，可能因函数(如NOW())导致主从不一致&lt;/li&gt;&#xA;&lt;li&gt;ROW：记录行数据变更(最安全)，但日志量大&lt;/li&gt;&#xA;&lt;li&gt;MIXED：混合模式，根据语句自动选择格式&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;刷盘控制&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通过 &lt;code&gt;sync_binlog&lt;/code&gt; 参数控制&#xA;&lt;ul&gt;&#xA;&lt;li&gt;0：由系统决定刷盘时机&lt;/li&gt;&#xA;&lt;li&gt;1：每次事务提交都刷盘(最安全)&lt;/li&gt;&#xA;&lt;li&gt;N：每N个事务刷盘一次(平衡性能与安全性)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;两阶段提交：保证日志一致性&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Prepare阶段：写入redo log并标记为prepare状态&lt;/li&gt;&#xA;&lt;li&gt;写入binlog&lt;/li&gt;&#xA;&lt;li&gt;Commit阶段：将redo log标记为commit状态&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;读写分离&#34;&gt;&#xA;  读写分离&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%af%bb%e5%86%99%e5%88%86%e7%a6%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/AAAAABBBBBYYYYY/article/details/110875245&#34;&gt;SpringBoot+Mybatis-Plus实现mysql读写分离方案&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://springdoc.cn/spring-boot-implement-read-write-separation/&#34;&gt;在 Spring Boot 中优雅地实现读写分离&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/qq_33101675/article/details/114396476&#34;&gt;【读写分离】SpringBoot整合多数据源实现读写分离（一）&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;reference&#34;&gt;&#xA;  Reference&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://geekdaxue.co/books/zhangnio@or5bz8&#34;&gt;MySQL 架构原理&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>other learning</title>
      <link>/post/life/learning-others-log/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/life/learning-others-log/</guid>
      <description>&lt;h1 id=&#34;other-learning&#34;&gt;&#xA;  other learning&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#other-learning&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;经济学原理&#34;&gt;&#xA;  经济学原理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bb%8f%e6%b5%8e%e5%ad%a6%e5%8e%9f%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1am4y1D73g&#34;&gt;经济学原理&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1 微观部分 什么是经济学&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2 什么是经济学&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 3 像经济学家一样思考 1&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 4 像经济学家一样思考 2&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 5 经济相互依存性和贸易的好处 1&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 6 经济相互依存性和贸易的好处 2&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 7 供给与需求 1&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 8 供给与需求 2&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 9 供给与需求 3&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 10 弹性及其应用 1&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 11 弹性及其应用 2&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 12 弹性及其应用 3&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 13&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 14&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 15&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 16&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 17&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 18&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 19&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 20&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 21&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 22&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 23&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 24&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 25&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 26&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 27&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 28&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 29&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 30&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 31&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 32&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 33&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 34&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 35&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 36&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 37&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 38&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 39&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 40&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 41&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 42&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 43&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 44&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 45&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 46&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 47&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 48&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 49&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 50&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 51&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 52&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 53&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 54&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 55&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 56&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 57&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 58&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 59&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 60&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 61&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 62&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 63&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 64&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 65&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 66&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 67&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 68&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 69&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 70&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 71&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 72&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 73&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 74&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 75&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 76&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 77&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2025-01-04&#34;&gt;&#xA;  2025-01-04&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2025-01-04&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;清华韩秀云精品课第一季64集&#34;&gt;&#xA;  清华韩秀云精品课（第一季，64集）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b8%85%e5%8d%8e%e9%9f%a9%e7%a7%80%e4%ba%91%e7%b2%be%e5%93%81%e8%af%be%e7%ac%ac%e4%b8%80%e5%ad%a364%e9%9b%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://appitoitaxh8625.h5.xiaoeknow.com/p/course/column/p_60122dabe4b0d0af0d905913?type=3&#34;&gt;清华韩秀云精品课（第一季，64集）&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;-第一期国外宏观经济形势&#34;&gt;&#xA;  ✅ 第一期：国外宏观经济形势&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e7%ac%ac%e4%b8%80%e6%9c%9f%e5%9b%bd%e5%a4%96%e5%ae%8f%e8%a7%82%e7%bb%8f%e6%b5%8e%e5%bd%a2%e5%8a%bf&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1 美国央行大放水 2025-01-04&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2 负债率的欧洲和日本 2025-01-04&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 3 政府发钱刺激经济 2025-01-04&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;-第二期通胀来了该如何配置资产&#34;&gt;&#xA;  ✅ 第二期：通胀来了，该如何配置资产&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e7%ac%ac%e4%ba%8c%e6%9c%9f%e9%80%9a%e8%83%80%e6%9d%a5%e4%ba%86%e8%af%a5%e5%a6%82%e4%bd%95%e9%85%8d%e7%bd%ae%e8%b5%84%e4%ba%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 4 通胀来了怎么办 2025-01-05&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 5 如何配置你的资产？2025-01-05&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 6 投资房产考虑什么？2025-01-05&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 7 投资黄金有必要吗？2025-01-06&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 8 炒股要注意什么？2025-01-06&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;-第三期我国宏观政策走向&#34;&gt;&#xA;  ✅ 第三期：我国宏观政策走向&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e7%ac%ac%e4%b8%89%e6%9c%9f%e6%88%91%e5%9b%bd%e5%ae%8f%e8%a7%82%e6%94%bf%e7%ad%96%e8%b5%b0%e5%90%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 9 政府救市与共同富裕 2025-01-06&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 10 2022年政策与行业机会 2025-01-07&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;-第四期黄金&#34;&gt;&#xA;  ✅ 第四期：黄金&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e7%ac%ac%e5%9b%9b%e6%9c%9f%e9%bb%84%e9%87%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 11 黄金的前世今生 2025-01-07&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 12 美元和黄金挂钩与脱钩 2025-01-07&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 13 黄金的避险功能 2025-01-08&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 14 全世界的金库在哪里 2025-01-08&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 15 投资黄金该注意什么 2025-01-08&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;-第五期石油&#34;&gt;&#xA;  ✅ 第五期：石油&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e7%ac%ac%e4%ba%94%e6%9c%9f%e7%9f%b3%e6%b2%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 16 石油的前世今生 2025-01-09&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 17 洛克菲勒与标准石油 2025-01-09&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 18 美国石油反垄断 2025-01-09&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 19 油价为何总在波动 2025-01-11&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 20 欧佩克的转变 2025-01-11&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 21 石油的用途 2025-01-11&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 22 油价为何是负的 2025-01-12&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 23 什么是石油期货的 2025-01-12&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;-第六期楼市&#34;&gt;&#xA;  ✅ 第六期：楼市&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e7%ac%ac%e5%85%ad%e6%9c%9f%e6%a5%bc%e5%b8%82&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 24 房价的成长史的 2025-01-12&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 25 楼市中看不见的手的 2025-01-13&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 26 市场决定资源配置的 2025-01-13&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 27 买房要选稀缺的 2025-01-13&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 28 买住宅怎么选 2025-01-15&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 29 买商铺和写字楼 2025-01-15&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 30 买房看机会成本 2025-01-15&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 31 买房要注意几件事 2025-01-16&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 32 买房还是租房好 2025-01-16&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 33 政府何为要调控楼市 2025-01-16&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 34 楼市调控还会继续吗？ 2025-01-17&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 35 房地产税会退出吗？ 2025-01-17&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 36 房地产税推出后，房价会下跌吗？ 2025-01-17&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 37 买房防止变成资产 2025-01-19&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 38 警惕房地产泡沫  2025-01-19&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 39 全球楼市涨跌互见  2025-01-19&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;第七期股市&#34;&gt;&#xA;  第七期：股市&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac%e4%b8%83%e6%9c%9f%e8%82%a1%e5%b8%82&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 40 炒股要懂经济学 2025-01-20&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 41 股票是如何诞生的？ 2025-01-20&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 42 东印度公司的第一张股票 2025-01-20&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 43 英美为什么发股票 2025-01-21&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 44 荷兰证券交易所的诞生 2025-01-21&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 45 纽约证券交易所的由来 2025-01-21&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 46 道琼斯指数的故事 2025-01-21&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 47 股票价格与股价指数 2025-01-21&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 48 股市的投资理念 2025-01-21&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 49 炒股应该注意什么？2025-02-09&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 50 参与股市的几种方式 2025-02-09&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 51 郁金香泡沫 2025-02-09&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 52 密西西比泡沫 2025-02-10&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 53 南海泡沫 2025-02-10&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 54 美国1929年股灾 2025-02-10&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 55 中国2007年股市暴涨 2025-02-11&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 56 中国2015年股灾 2025-02-11&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 57 教你判断股市趋势 2025-02-11&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;第八期汇市&#34;&gt;&#xA;  第八期：汇市&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac%e5%85%ab%e6%9c%9f%e6%b1%87%e5%b8%82&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 58 汇率的基本知识 2025-02-13&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 59 人民币汇率 2025-02-13&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 60 美元的霸权 2025-02-13&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 61 欧元的诞生 2025-02-15&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 62 人民币国际化 2025-02-15&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>podcast</title>
      <link>/post/life/podcast/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/life/podcast/</guid>
      <description>&lt;h1 id=&#34;podcast&#34;&gt;&#xA;  podcast&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#podcast&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;小宇宙&#34;&gt;&#xA;  小宇宙&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b0%8f%e5%ae%87%e5%ae%99&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.xiaoyuzhoufm.com/podcast/65dcb1addaf4f3db3e5378d0&#34;&gt;码农姐妹&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.xiaoyuzhoufm.com/podcast/665f102b63c334a2fb548b92&#34;&gt;经济新闻每日速递&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.xiaoyuzhoufm.com/podcast/65aa24db7a25782e57f796c9&#34;&gt;纵横说&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>politics</title>
      <link>/post/life/politics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/life/politics/</guid>
      <description>&lt;h1 id=&#34;politics&#34;&gt;&#xA;  politics&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#politics&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;茶党&#34;&gt;&#xA;  茶党&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%8c%b6%e5%85%9a&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&amp;ldquo;茶党&amp;rdquo;（Tea Party）通常指的是美国的一个政治运动，这个运动始于2009年，主要由保守派共和党支持者组成，强调减少政府开支、降低税收、限制政府权力以及遵守美国宪法。茶党的名字来源于1773年的波士顿茶叶事件，这是一个反对英国殖民统治和高税收的历史事件，象征着对政府过度干预的抗议。&lt;/p&gt;&#xA;&lt;p&gt;茶党成员经常组织示威活动，尤其是在经济政策和财政责任方面。他们在2010年的中期选举中对美国政治产生了显著影响，支持了多位共和党候选人的当选，这些候选人随后在美国国会中代表了更加保守的立场。&lt;/p&gt;&#xA;&lt;p&gt;随着时间的发展，茶党的影响力有所减弱，但它仍然是美国政治中一个重要的保守力量。如果你有关于茶党的更具体问题，欢迎继续提问。&lt;/p&gt;&#xA;&lt;h2 id=&#34;茶党和共和党建制派的区别是什么&#34;&gt;&#xA;  茶党和共和党建制派的区别是什么&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%8c%b6%e5%85%9a%e5%92%8c%e5%85%b1%e5%92%8c%e5%85%9a%e5%bb%ba%e5%88%b6%e6%b4%be%e7%9a%84%e5%8c%ba%e5%88%ab%e6%98%af%e4%bb%80%e4%b9%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;茶党和共和党建制派是美国共和党内两个不同的政治派别，它们在政治立场、策略和目标上存在一些显著差异：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;政治立场&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;茶党&lt;/strong&gt;：茶党通常被视为共和党内的激进派，强调极端保守的经济政策，比如大幅减税、削减政府开支、反对政府干预市场、减少债务和赤字。此外，茶党成员往往强烈反对奥巴马政府时期的医疗保健改革（即“奥巴马医改”）等政策。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;共和党建制派&lt;/strong&gt;：相比之下，建制派共和党人虽然也支持保守政策，但他们的立场相对温和，愿意与民主党合作以实现政治目标。建制派更倾向于维护共和党的传统利益，包括与大企业和精英阶层的关系。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;策略和方法&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;茶党&lt;/strong&gt;：茶党成员倾向于采取更为激进的策略，包括组织大规模抗议活动、支持极端保守的候选人、反对妥协。他们通常认为现有的政治体系已经腐败，需要彻底改革。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;共和党建制派&lt;/strong&gt;：建制派共和党人更倾向于通过传统政治渠道实现目标，如立法谈判、建立联盟和政治筹款。他们更注重保持共和党的整体稳定和长期利益。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;目标&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;茶党&lt;/strong&gt;：茶党的目标是推动共和党向更加保守的方向发展，减少政府规模和干预，保护个人自由和财产权。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;共和党建制派&lt;/strong&gt;：建制派的目标是保持共和党的主流地位，通过务实的政治策略赢得选举，维护共和党的长期利益和权力。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;支持者基础&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;茶党&lt;/strong&gt;：茶党的支持者通常是中下层中产阶级，他们对经济困境和政府过度干预感到不满，希望通过政治行动表达自己的诉求。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;共和党建制派&lt;/strong&gt;：建制派的支持者更多来自大企业和精英阶层，他们希望通过共和党的政策维护自身的经济利益。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;总结来说，茶党和共和党建制派在政治立场、策略和目标上存在明显的差异，茶党更激进、更强调基层动员，而建制派则更温和、更注重政治稳定和长期利益。&lt;/p&gt;</description>
    </item>
    <item>
      <title>postgresql</title>
      <link>/post/computer-science/database/postgresql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/database/postgresql/</guid>
      <description>&lt;h1 id=&#34;postgresql&#34;&gt;&#xA;  postgresql&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#postgresql&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;</description>
    </item>
    <item>
      <title>postgresql中分区键会自动创建索引吗</title>
      <link>/post/computer-science/llm/2025-03-30-2-postgresql%E4%B8%AD%E5%88%86%E5%8C%BA%E9%94%AE%E4%BC%9A%E8%87%AA%E5%8A%A8%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95%E5%90%97/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/llm/2025-03-30-2-postgresql%E4%B8%AD%E5%88%86%E5%8C%BA%E9%94%AE%E4%BC%9A%E8%87%AA%E5%8A%A8%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95%E5%90%97/</guid>
      <description>&lt;h1 id=&#34;postgresql中分区键会自动创建索引吗&#34;&gt;&#xA;  postgresql中分区键会自动创建索引吗&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#postgresql%e4%b8%ad%e5%88%86%e5%8c%ba%e9%94%ae%e4%bc%9a%e8%87%aa%e5%8a%a8%e5%88%9b%e5%bb%ba%e7%b4%a2%e5%bc%95%e5%90%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;在PostgreSQL中，&lt;strong&gt;分区键不会自动创建索引&lt;/strong&gt;。以下是详细说明和相关建议：&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;1-分区键与索引的关系&#34;&gt;&#xA;  1. &lt;strong&gt;分区键与索引的关系&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e5%88%86%e5%8c%ba%e9%94%ae%e4%b8%8e%e7%b4%a2%e5%bc%95%e7%9a%84%e5%85%b3%e7%b3%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;PostgreSQL的分区表机制本身&lt;strong&gt;不会自动为分区键创建索引&lt;/strong&gt;。分区键仅用于数据路由（决定数据存储在哪个分区），但不会自动优化基于该列的查询性能&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;如果需要对分区键进行高效查询（尤其是范围查询或等值查询），&lt;strong&gt;必须手动创建索引&lt;/strong&gt;。例如：&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- 在分区表上显式创建分区键索引&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INDEX&lt;/span&gt; idx_logdate &lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt; log_history (logdate);  &lt;span style=&#34;color:#75715e&#34;&gt;-- 自动在所有子分区上创建相同索引&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;从PostgreSQL 11开始，在父表上创建的索引会自动传播到所有子分区&lt;a href=&#34;@ref&#34;&gt;16&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;2-为什么需要手动创建索引&#34;&gt;&#xA;  2. &lt;strong&gt;为什么需要手动创建索引？&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e4%b8%ba%e4%bb%80%e4%b9%88%e9%9c%80%e8%a6%81%e6%89%8b%e5%8a%a8%e5%88%9b%e5%bb%ba%e7%b4%a2%e5%bc%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;分区剪枝（Partition Pruning）依赖分区键&lt;/strong&gt;：虽然查询时PostgreSQL会根据分区键过滤不需要的分区，但如果查询条件还包含其他非分区键列，仍需额外索引来加速&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;26&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;唯一约束的限制&lt;/strong&gt;：若要在分区表上创建主键或唯一约束，&lt;strong&gt;必须包含分区键列&lt;/strong&gt;，否则无法保证全局唯一性&lt;a href=&#34;@ref&#34;&gt;16&lt;/a&gt;。例如：&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- 正确做法：包含分区键&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ALTER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; sales &lt;span style=&#34;color:#66d9ef&#34;&gt;ADD&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;PRIMARY&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;KEY&lt;/span&gt; (order_id, sale_date);  &lt;span style=&#34;color:#75715e&#34;&gt;-- sale_date是分区键&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;3-自动索引传播的特性&#34;&gt;&#xA;  3. &lt;strong&gt;自动索引传播的特性&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-%e8%87%aa%e5%8a%a8%e7%b4%a2%e5%bc%95%e4%bc%a0%e6%92%ad%e7%9a%84%e7%89%b9%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;从PostgreSQL 11开始，在父表上创建的索引（包括唯一索引）会自动在所有子分区上创建相同结构的索引&lt;a href=&#34;@ref&#34;&gt;16&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;但需注意：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;并发创建索引（CONCURRENTLY）&lt;/strong&gt;：无法直接在父表上并发创建索引，需逐个分区操作&lt;a href=&#34;@ref&#34;&gt;29&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;索引类型一致性&lt;/strong&gt;：所有分区的索引必须与父表索引类型相同（如B-tree、Hash等）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;4-最佳实践建议&#34;&gt;&#xA;  4. &lt;strong&gt;最佳实践建议&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4-%e6%9c%80%e4%bd%b3%e5%ae%9e%e8%b7%b5%e5%bb%ba%e8%ae%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;显式为高频查询的分区键创建索引&lt;/strong&gt;，即使它已用于分区剪枝&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;26&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;结合查询模式设计索引&lt;/strong&gt;：若查询常使用&lt;code&gt;分区键 + 其他列&lt;/code&gt;，可创建复合索引。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;定期监控索引使用情况&lt;/strong&gt;：删除未使用的索引以减少维护开销。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;总结&#34;&gt;&#xA;  总结&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%80%bb%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;PostgreSQL的分区键本身不会自动创建索引，需手动添加。合理设计分区键和索引（尤其是包含分区键的复合索引）能显著提升查询性能&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;16&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>rabbitmq</title>
      <link>/post/computer-science/distributed-system/message-queue/rabbitmq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/distributed-system/message-queue/rabbitmq/</guid>
      <description>&lt;h1 id=&#34;rabbitmq&#34;&gt;&#xA;  rabbitmq&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#rabbitmq&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h1 id=&#34;main&#34;&gt;&#xA;  main&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#main&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.rabbitmq.com/&#34;&gt;RabbitMQ&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.rabbitmq.com/tutorials&#34;&gt;RabbitMQ Tutorials&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;Hello World&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Work Queues&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Distributing tasks among workers&lt;/li&gt;&#xA;&lt;li&gt;一个生产者，多个消费者&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Publish/Subscribe&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Sending messages to many consumers at once&lt;/li&gt;&#xA;&lt;li&gt;一个消息，每个消费者都能接收到&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Routing&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;多个消费者订阅同一个生产者的消息, 通过路由键，选择性消费&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Topics&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通过匹配的方式来选择性接收&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;RPC&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;rabbitmq有哪几种模式&#34;&gt;&#xA;  rabbitmq有哪几种模式&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#rabbitmq%e6%9c%89%e5%93%aa%e5%87%a0%e7%a7%8d%e6%a8%a1%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;简单模式（Simple Mode）&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;描述&lt;/strong&gt;：一个生产者（Producer）和一个消费者（Consumer），消息直接发送到队列中，不需要交换机（Exchange）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;：消息只能被一个消费者处理，适合简单的点对点通信。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;应用场景&lt;/strong&gt;：简单的任务队列，如日志收集。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;工作队列模式（Work Queue Mode）&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;描述&lt;/strong&gt;：一个生产者和多个消费者，消息分发到多个消费者，但每个消息只能被一个消费者处理。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;：默认采用轮询机制分发消息，支持手动确认（ack）以确保消息处理成功。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;应用场景&lt;/strong&gt;：任务分发，如多个消费者处理不同的任务。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;发布/订阅模式（Publish/Subscribe Mode）&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;描述&lt;/strong&gt;：生产者将消息发送到交换机（Exchange），交换机将消息广播到所有绑定的队列，每个队列可以有多个消费者。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;：使用 &lt;strong&gt;fanout&lt;/strong&gt; 类型的交换机，消息会被所有消费者接收。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;应用场景&lt;/strong&gt;：消息广播，如通知多个系统或用户。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;路由模式（Routing Mode）&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;描述&lt;/strong&gt;：生产者将消息发送到交换机，交换机根据路由键（Routing Key）将消息分发到匹配的队列。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;：使用 &lt;strong&gt;direct&lt;/strong&gt; 类型的交换机，支持精确的路由规则。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;应用场景&lt;/strong&gt;：根据特定规则分发消息，如按日志级别分类。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;主题模式（Topics Mode）&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;描述&lt;/strong&gt;：类似于路由模式，但支持更灵活的路由规则，使用通配符（如 &lt;code&gt;*&lt;/code&gt; 和 &lt;code&gt;#&lt;/code&gt;）匹配路由键。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;：使用 &lt;strong&gt;topic&lt;/strong&gt; 类型的交换机，支持复杂的路由逻辑。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;应用场景&lt;/strong&gt;：需要灵活匹配和过滤消息的场景，如多维度消息分发。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;RPC 模式（Remote Procedure Call Mode）&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;描述&lt;/strong&gt;：生产者发送消息后，等待消费者处理并返回结果，类似于远程过程调用。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;：通过回调队列实现请求和响应的匹配。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;应用场景&lt;/strong&gt;：需要同步返回结果的场景，如远程调用。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;发布确认模式（Publisher Confirms Mode）&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;描述&lt;/strong&gt;：生产者在发送消息后，等待 RabbitMQ 的确认，确保消息被成功接收。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;：提高消息的可靠性，避免消息丢失。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;应用场景&lt;/strong&gt;：需要高可靠性的消息传递，如金融交易。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Header 模式（Headers Mode）&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;描述&lt;/strong&gt;：根据消息的头部信息（Headers）进行路由，而不是依赖路由键。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;：使用 &lt;strong&gt;headers&lt;/strong&gt; 类型的交换机，支持复杂的匹配规则。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;应用场景&lt;/strong&gt;：需要根据消息属性进行路由的场景。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;rabbitmq有哪些类型的路由键&#34;&gt;&#xA;  rabbitmq有哪些类型的路由键&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#rabbitmq%e6%9c%89%e5%93%aa%e4%ba%9b%e7%b1%bb%e5%9e%8b%e7%9a%84%e8%b7%af%e7%94%b1%e9%94%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;在 RabbitMQ 中，&lt;strong&gt;路由键（Routing Key）&lt;/strong&gt; 是用于决定消息如何被路由到队列的关键字。路由键的具体使用方式取决于 &lt;strong&gt;交换机类型&lt;/strong&gt;，不同类型的交换机对路由键的处理方式不同。以下是 RabbitMQ 中常见的交换机类型及其对应的路由键使用方式：&lt;/p&gt;</description>
    </item>
    <item>
      <title>raspberry pi</title>
      <link>/post/computer-science/operating-system/raspberrypi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/operating-system/raspberrypi/</guid>
      <description>&lt;h1 id=&#34;raspberry-pi&#34;&gt;&#xA;  raspberry pi&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#raspberry-pi&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;reference&#34;&gt;&#xA;  reference&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://pidoc.cn&#34;&gt;树莓派文档&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;clash&#34;&gt;&#xA;  clash&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#clash&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;reference&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.v2ex.com/t/877527&#34;&gt;为什么全局代理后， CMD 依然 Ping 不通 Google？&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://mritd.com/2022/02/06/clash-tproxy/&#34;&gt;树莓派 Clash 透明代理(TProxy)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://cherysunzhang.com/2020/05/deploy-clash-as-transparent-proxy-on-raspberry-pi/&#34;&gt;在 Raspberry Pi 上运行 Clash 作为透明代理&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://atlassc.net/2023/07/01/fixing-tun-mode-in-clash-the-essential-dns-configuration-guide&#34;&gt;解决 Clash Meta 中TUN模式无法上网的问题：正确配置DNS设置&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/frdevolcqzyxynjds/article/details/120123906&#34;&gt;解决 树莓派ping: baidu.com: 域名解析暂时失败&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.panda74.fun/blog/practice/raspi/clash&#34;&gt;树莓派安装clash，实现科学上网&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://cherysunzhang.com/2020/05/deploy-clash-as-transparent-proxy-on-raspberry-pi/&#34;&gt;在 Raspberry Pi 上运行 Clash 作为透明代理&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://yacd.haishan.me&#34;&gt;http://yacd.haishan.me&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;yt-dlp&#34;&gt;&#xA;  yt-dlp&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#yt-dlp&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;使用这个工具，可以下载 youtube 视频&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;后台下载命令&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;nohup yt-dlp -N 20 {{video_url}} --merge-output-format mp4 &amp;amp;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;实时查看后台下载进度 &lt;code&gt;tail -f nohup.out&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;停止下载&#xA;&lt;ul&gt;&#xA;&lt;li&gt;查询后台进程号 &lt;code&gt;ps -aux | grep yt-dlp&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;杀死进程 &lt;code&gt;kill -9 {{进程号}}&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;tomcat&#34;&gt;&#xA;  tomcat&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#tomcat&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/aeolian/p/15306739.html&#34;&gt;树莓派安装Tomcat&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;wget https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.36/bin/apache-tomcat-9.0.36.tar.gz&#xA;tar zxvf apache-tomcat-9.0.36.tar.gz&#xA;&#xA;cd ~/apache-tomcat-9.0.36/bin&#xA;sudo ./startup.sh&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;dd&#34;&gt;&#xA;  dd&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#dd&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;dd&lt;/code&gt; 命令是一个非常强大的工具，可以用来复制和转换文件。通过创建一个临时文件并测量其读写速度，可以测试存储介质的性能。&lt;/p&gt;</description>
    </item>
    <item>
      <title>redis</title>
      <link>/post/computer-science/redis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/redis/</guid>
      <description>&lt;h1 id=&#34;redis&#34;&gt;&#xA;  redis&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#redis&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;redis基本数据类型-使用场景&#34;&gt;&#xA;  redis基本数据类型, 使用场景&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#redis%e5%9f%ba%e6%9c%ac%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b-%e4%bd%bf%e7%94%a8%e5%9c%ba%e6%99%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;5大基本类型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;String 字符串&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;常用场景：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;缓存：存储用户信息、配置信息等。&lt;/li&gt;&#xA;&lt;li&gt;计数器：如文章阅读量、点赞数等。&lt;/li&gt;&#xA;&lt;li&gt;分布式锁：通过 SETNX 命令实现。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Hash 哈希&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;常用场景：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;存储用户信息：如用户 ID 作为 key，用户属性（姓名、年龄等）作为 field-value 对。&lt;/li&gt;&#xA;&lt;li&gt;存储商品信息：如商品 ID 作为 key，商品详情（价格、库存等）作为 field-value 对。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;List 列表&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;常用场景：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;消息队列：通过 LPUSH 和 RPOP 实现简单的消息队列。&lt;/li&gt;&#xA;&lt;li&gt;最新消息列表：如微博的时间线、朋友圈动态等。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Set 集合&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;常用场景：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;标签系统：如文章标签、用户兴趣标签等。&lt;/li&gt;&#xA;&lt;li&gt;去重：如统计独立 IP 访问量。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Sorted Set 有序集合&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;常用场景：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;排行榜：如游戏积分排行榜、热搜榜等。&lt;/li&gt;&#xA;&lt;li&gt;延迟队列：通过分数存储时间戳，按时间顺序处理任务。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;什么是缓存击穿-缓存穿透-缓存雪崩&#34;&gt;&#xA;  什么是缓存击穿 缓存穿透 缓存雪崩&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%80%e4%b9%88%e6%98%af%e7%bc%93%e5%ad%98%e5%87%bb%e7%a9%bf-%e7%bc%93%e5%ad%98%e7%a9%bf%e9%80%8f-%e7%bc%93%e5%ad%98%e9%9b%aa%e5%b4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;缓存击穿 Cache Breakdown&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;热点数据过期的同时有大量的请求访问该热点数据，导致数据库负载突然增加&lt;/li&gt;&#xA;&lt;li&gt;解决办法&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用互斥锁，同时只能一个线程读取数据库中的数据后保存到缓存中，其他线程等待读取缓存中的值&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;缓存穿透 Cache Penetration&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;查询的数据在缓存和数据库中都不存在&lt;/li&gt;&#xA;&lt;li&gt;解决办法&#xA;&lt;ul&gt;&#xA;&lt;li&gt;缓存空值&lt;/li&gt;&#xA;&lt;li&gt;布隆过滤器&lt;/li&gt;&#xA;&lt;li&gt;参数校验&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;简单动态字符串&#34;&gt;&#xA;  简单动态字符串&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ae%80%e5%8d%95%e5%8a%a8%e6%80%81%e5%ad%97%e7%ac%a6%e4%b8%b2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;链表&#34;&gt;&#xA;  链表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;字典&#34;&gt;&#xA;  字典&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ad%97%e5%85%b8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;跳跃表&#34;&gt;&#xA;  跳跃表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%b7%b3%e8%b7%83%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;整数集合&#34;&gt;&#xA;  整数集合&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b4%e6%95%b0%e9%9b%86%e5%90%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;压缩列表&#34;&gt;&#xA;  压缩列表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8e%8b%e7%bc%a9%e5%88%97%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;对象&#34;&gt;&#xA;  对象&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%af%b9%e8%b1%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;数据库&#34;&gt;&#xA;  数据库&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e5%ba%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;redis-集群&#34;&gt;&#xA;  redis 集群&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#redis-%e9%9b%86%e7%be%a4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;redis-的集群模式有哪些&#34;&gt;&#xA;  redis 的集群模式有哪些？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#redis-%e7%9a%84%e9%9b%86%e7%be%a4%e6%a8%a1%e5%bc%8f%e6%9c%89%e5%93%aa%e4%ba%9b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;主从模式&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主节点负责写操作，从节点负责读操作，实现读写分离&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;哨兵模式&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在主从复制的基础上，增加了自动故障转移功能。哨兵节点监控主从节点的状态，当主节点故障时，自动选举从节点为主节点&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;cluster模式&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通过数据分片（Sharding）实现分布式存储，支持自动故障转移和负载均衡&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;redis-数据如何进行分片&#34;&gt;&#xA;  redis 数据如何进行分片？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#redis-%e6%95%b0%e6%8d%ae%e5%a6%82%e4%bd%95%e8%bf%9b%e8%a1%8c%e5%88%86%e7%89%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;槽位计算：通过 CRC16(key) % 16384 计算键（key）所属的槽位&lt;/li&gt;&#xA;&lt;li&gt;槽位分配：每个节点负责维护一部分槽位，槽位分布均匀，支持动态扩容和缩容&lt;/li&gt;&#xA;&lt;li&gt;数据路由：客户端请求时，先计算 key 的槽位，然后根据槽位找到对应的节点&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;分片的实现方案有哪些&#34;&gt;&#xA;  分片的实现方案有哪些？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e7%89%87%e7%9a%84%e5%ae%9e%e7%8e%b0%e6%96%b9%e6%a1%88%e6%9c%89%e5%93%aa%e4%ba%9b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;客户端分片 Redis-rb Predis&lt;/li&gt;&#xA;&lt;li&gt;代理分片（客户端与Redis节点之间增加代理层 Twemproxy）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;增加了系统的复杂性和延迟&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;主从&#34;&gt;&#xA;  主从&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%bb%e4%bb%8e&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Reference&#xA;&lt;ul&gt;&#xA;&lt;li&gt;《Redis设计与实现》 第15章 复制&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;在Redis中，用户可以通过执行SLAVEOF命令或者设置slaveof选项，让一个服务器去复制（replicate）另一个服务器，我们称呼被复制的服务器为主服务器（master），而对主服务器进行复制的服务器则被称为从服务器（slave）&lt;/li&gt;&#xA;&lt;li&gt;进行复制中的主从服务器双方的数据库将保存相同的数据，概念上将这种现象称作“数据库状态一致”，或者简称“一致”。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;旧版复制功能的实现&#34;&gt;&#xA;  旧版复制功能的实现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%97%a7%e7%89%88%e5%a4%8d%e5%88%b6%e5%8a%9f%e8%83%bd%e7%9a%84%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;同步 sync&#xA;&lt;ul&gt;&#xA;&lt;li&gt;同步操作用于将从服务器的数据库状态更新至主服务器当前所处的数据库状态&lt;/li&gt;&#xA;&lt;li&gt;步骤&#xA;&lt;ul&gt;&#xA;&lt;li&gt;1）从服务器向主服务器发送SYNC命令。&lt;/li&gt;&#xA;&lt;li&gt;2）收到SYNC命令的主服务器执行BGSAVE命令，在后台生成一个RDB文件，并使用一个缓冲区记录从现在开始执行的所有写命令。&lt;/li&gt;&#xA;&lt;li&gt;3）当主服务器的BGSAVE命令执行完毕时，主服务器会将BGSAVE命令生成的RDB文件发送给从服务器，从服务器接收并载入这个RDB文件，将自己的数据库状态更新至主服务器执行BGSAVE命令时的数据库状态。&lt;/li&gt;&#xA;&lt;li&gt;4）主服务器将记录在缓冲区里面的所有写命令发送给从服务器，从服务器执行这些写命令，将自己的数据库状态更新至主服务器数据库当前所处的状态。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;命令传播 command propagate&#xA;&lt;ul&gt;&#xA;&lt;li&gt;命令传播操作则用于在主服务器的数据库状态被修改，导致主从服务器的数据库状态出现不一致时，让主从服务器的数据库重新回到一致状态&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;旧版复制功能的缺陷&#34;&gt;&#xA;  旧版复制功能的缺陷&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%97%a7%e7%89%88%e5%a4%8d%e5%88%b6%e5%8a%9f%e8%83%bd%e7%9a%84%e7%bc%ba%e9%99%b7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在Redis中，从服务器对主服务器的复制可以分为以下两种情况&#xA;&lt;ul&gt;&#xA;&lt;li&gt;初次复制：从服务器以前没有复制过任何主服务器，或者从服务器当前要复制的主服务器和上一次复制的主服务器不同&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对于初次复制来说，旧版复制功能能够很好地完成任务&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;断线后重复制：处于命令传播阶段的主从服务器因为网络原因而中断了复制，但从服务器通过自动重连接重新连上了主服务器，并继续复制主服务器&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对于断线后重复制来说，旧版复制功能虽然也能让主从服务器重新回到一致状态，但效率却非常低&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;SYNC命令是一个非常耗费资源的操作&#xA;&lt;ul&gt;&#xA;&lt;li&gt;1）主服务器需要执行BGSAVE命令来生成RDB文件，这个生成操作会耗费主服务器大量的CPU、内存和磁盘I/O资源。&lt;/li&gt;&#xA;&lt;li&gt;2）主服务器需要将自己生成的RDB文件发送给从服务器，这个发送操作会耗费主从服务器大量的网络资源（带宽和流量），并对主服务器响应命令请求的时间产生影响。&lt;/li&gt;&#xA;&lt;li&gt;3）接收到RDB文件的从服务器需要载入主服务器发来的RDB文件，并且在载入期间，从服务器会因为阻塞而没办法处理命令请求。&lt;/li&gt;&#xA;&lt;li&gt;因为SYNC命令是一个如此耗费资源的操作，所以Redis有必要保证在真正有需要时才执行SYNC命令。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;新版复制功能的实现&#34;&gt;&#xA;  新版复制功能的实现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%96%b0%e7%89%88%e5%a4%8d%e5%88%b6%e5%8a%9f%e8%83%bd%e7%9a%84%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;为了解决旧版复制功能在处理断线重复制情况时的低效问题，Redis从2.8版本开始，使用&lt;strong&gt;PSYNC&lt;/strong&gt;命令代替SYNC命令来执行复制时的同步操作&lt;/li&gt;&#xA;&lt;li&gt;PSYNC命令具有完整重同步（full resynchronization）和部分重同步（partial resynchronization）两种模式&#xA;&lt;ul&gt;&#xA;&lt;li&gt;其中完整重同步用于处理初次复制情况：完整重同步的执行步骤和SYNC命令的执行步骤基本一样，它们都是通过让主服务器创建并发送RDB文件，以及向从服务器发送保存在缓冲区里面的写命令来进行同步&lt;/li&gt;&#xA;&lt;li&gt;而部分重同步则用于处理断线后重复制情况：当从服务器在断线后重新连接主服务器时，如果条件允许，主服务器可以将主从服务器连接断开期间执行的写命令发送给从服务器，从服务器只要接收并执行这些写命令，就可以将数据库更新至主服务器当前所处的状态&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;部分重同步的实现&#34;&gt;&#xA;  部分重同步的实现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%83%a8%e5%88%86%e9%87%8d%e5%90%8c%e6%ad%a5%e7%9a%84%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;部分重同步功能由以下三个部分构成：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主服务器的复制偏移量（replication offset）和从服务器的复制偏移量&#xA;&lt;ul&gt;&#xA;&lt;li&gt;执行复制的双方——主服务器和从服务器会分别维护一个复制偏移量&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主服务器每次向从服务器传播N个字节的数据时，就将自己的复制偏移量的值加上N&lt;/li&gt;&#xA;&lt;li&gt;从服务器每次收到主服务器传播来的N个字节的数据时，就将自己的复制偏移量的值加上N&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;通过对比主从服务器的复制偏移量，程序可以很容易地知道主从服务器是否处于一致状态&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果主从服务器处于一致状态，那么主从服务器两者的偏移量总是相同的&lt;/li&gt;&#xA;&lt;li&gt;相反，如果主从服务器两者的偏移量并不相同，那么说明主从服务器并未处于一致状态&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;主服务器的复制积压缓冲区（replication backlog）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;复制积压缓冲区是由主服务器维护的一个固定长度（fixed-size）先进先出（FIFO）队列，默认大小为1MB&#xA;&lt;ul&gt;&#xA;&lt;li&gt;和普通先进先出队列随着元素的增加和减少而动态调整长度不同，固定长度先进先出队列的长度是固定的，当入队元素的数量大于队列长度时，最先入队的元素会被弹出，而新元素会被放入队列&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;当主服务器进行命令传播时，它不仅会将写命令发送给所有从服务器，还会将写命令入队到复制积压缓冲区里面&lt;/li&gt;&#xA;&lt;li&gt;主服务器的复制积压缓冲区里面会保存着一部分最近传播的写命令，并且复制积压缓冲区会为队列中的每个字节记录相应的复制偏移量&lt;/li&gt;&#xA;&lt;li&gt;当从服务器重新连上主服务器时，从服务器会通过PSYNC命令将自己的复制偏移量offset发送给主服务器，主服务器会根据这个复制偏移量来决定对从服务器执行何种同步操作&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果offset偏移量之后的数据（也即是偏移量offset+1开始的数据）仍然存在于复制积压缓冲区里面，那么主服务器将对从服务器执行部分重同步操作&lt;/li&gt;&#xA;&lt;li&gt;相反，如果offset偏移量之后的数据已经不存在于复制积压缓冲区，那么主服务器将对从服务器执行完整重同步操作&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;根据需要调整复制积压缓冲区的大小&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Redis为复制积压缓冲区设置的默认大小为1MB，如果主服务器需要执行大量写命令，又或者主从服务器断线后重连接所需的时间比较长，那么这个大小也许并不合适&lt;/li&gt;&#xA;&lt;li&gt;如果复制积压缓冲区的大小设置得不恰当，那么PSYNC命令的复制重同步模式就不能正常发挥作用，因此，正确估算和设置复制积压缓冲区的大小非常重要&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果复制积压缓冲区的大小设置得不恰当，那么PSYNC命令的复制重同步模式就不能正常发挥作用，因此，正确估算和设置复制积压缓冲区的大小非常重要&#xA;&lt;ul&gt;&#xA;&lt;li&gt;其中second为从服务器断线后重新连接上主服务器所需的平均时间（以秒计算）&lt;/li&gt;&#xA;&lt;li&gt;而write_size_per_second则是主服务器平均每秒产生的写命令数据量（协议格式的写命令的长度总和）&lt;/li&gt;&#xA;&lt;li&gt;例如，如果主服务器平均每秒产生1 MB的写数据，而从服务器断线之后平均要5秒才能重新连接上主服务器，那么复制积压缓冲区的大小就不能低于5MB。&lt;/li&gt;&#xA;&lt;li&gt;为了安全起见，可以将复制积压缓冲区的大小设为2&lt;em&gt;second&lt;/em&gt;write_size_per_second，这样可以保证绝大部分断线情况都能用部分重同步来处理&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;服务器的运行ID（run ID）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;每个Redis服务器，不论主服务器还是从服务，都会有自己的运行ID&lt;/li&gt;&#xA;&lt;li&gt;运行ID在服务器启动时自动生成，由40个随机的十六进制字符组成&lt;/li&gt;&#xA;&lt;li&gt;当从服务器对主服务器进行初次复制时，主服务器会将自己的运行ID传送给从服务器，而从服务器则会将这个运行ID保存起来&lt;/li&gt;&#xA;&lt;li&gt;当从服务器断线并重新连上一个主服务器时，从服务器将向当前连接的主服务器发送之前保存的运行ID&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果从服务器保存的运行ID和当前连接的主服务器的运行ID相同，那么说明从服务器断线之前复制的就是当前连接的这个主服务器，主服务器可以继续尝试执行部分重同步操作&lt;/li&gt;&#xA;&lt;li&gt;相反地，如果从服务器保存的运行ID和当前连接的主服务器的运行ID并不相同，那么说明从服务器断线之前复制的主服务器并不是当前连接的这个主服务器，主服务器将对从服务器执行完整重同步操作&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;psync-命令的实现&#34;&gt;&#xA;  PSYNC 命令的实现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#psync-%e5%91%bd%e4%bb%a4%e7%9a%84%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;复制的实现&#34;&gt;&#xA;  复制的实现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%a4%8d%e5%88%b6%e7%9a%84%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;心跳检测&#34;&gt;&#xA;  心跳检测&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bf%83%e8%b7%b3%e6%a3%80%e6%b5%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;sentinel&#34;&gt;&#xA;  Sentinel&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#sentinel&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Sentinel（哨岗、哨兵）是Redis的高可用性（high availability）解决方案：由一个或多个Sentinel实例（instance）组成的Sentinel系统（system）可以监视任意多个主服务器，以及这些主服务器属下的所有从服务器，并在被监视的主服务器进入下线状态时，自动将下线主服务器属下的某个从服务器升级为新的主服务器，然后由新的主服务器代替已下线的主服务器继续处理命令请求&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;集群&#34;&gt;&#xA;  集群&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9b%86%e7%be%a4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Redis集群是Redis提供的分布式数据库方案，集群通过分片（sharding）来进行数据共享，并提供复制和故障转移功能&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;节点&#34;&gt;&#xA;  节点&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%8a%82%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一个Redis集群通常由多个节点（node）组成，在刚开始的时候，每个节点都是相互独立的，它们都处于一个只包含自己的集群当中，要组建一个真正可工作的集群，我们必须将各个独立的节点连接起来，构成一个包含多个节点的集群&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;槽指派&#34;&gt;&#xA;  槽指派&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a7%bd%e6%8c%87%e6%b4%be&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Redis集群通过分片的方式来保存数据库中的键值对：集群的整个数据库被分为16384个槽（slot），数据库中的每个键都属于这16384个槽的其中一个，集群中的每个节点可以处理0个或最多16384个槽&lt;/li&gt;&#xA;&lt;li&gt;当数据库中的16384个槽都有节点在处理时，集群处于上线状态（ok）；相反地，如果数据库中有任何一个槽没有得到处理，那么集群处于下线状态（fail）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;在集群中执行命令&#34;&gt;&#xA;  在集群中执行命令&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9c%a8%e9%9b%86%e7%be%a4%e4%b8%ad%e6%89%a7%e8%a1%8c%e5%91%bd%e4%bb%a4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;当客户端向节点发送与数据库键有关的命令时，接收命令的节点会计算出命令要处理的数据库键属于哪个槽，并检查这个槽是否指派给了自己&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果键所在的槽正好就指派给了当前节点，那么节点直接执行这个命令&lt;/li&gt;&#xA;&lt;li&gt;如果键所在的槽并没有指派给当前节点，那么节点会向客户端返回一个MOVED错误，指引客户端转向（redirect）至正确的节点，并再次发送之前想要执行的命令&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;重新分片&#34;&gt;&#xA;  重新分片&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%87%8d%e6%96%b0%e5%88%86%e7%89%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Redis集群的重新分片操作可以将任意数量已经指派给某个节点（源节点）的槽改为指派给另一个节点（目标节点），并且相关槽所属的键值对也会从源节点被移动到目标节点。&lt;/li&gt;&#xA;&lt;li&gt;重新分片操作可以在线（online）进行，在重新分片的过程中，集群不需要下线，并且源节点和目标节点都可以继续处理命令请求&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;ask错误&#34;&gt;&#xA;  ASK错误&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#ask%e9%94%99%e8%af%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;复制与故障转移&#34;&gt;&#xA;  复制与故障转移&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%a4%8d%e5%88%b6%e4%b8%8e%e6%95%85%e9%9a%9c%e8%bd%ac%e7%a7%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Redis集群中的节点分为主节点（master）和从节点（slave），其中主节点用于处理槽，而从节点则用于复制某个主节点，并在被复制的主节点下线时，代替下线主节点继续处理命令请求&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;消息&#34;&gt;&#xA;  消息&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b6%88%e6%81%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;集群中的各个节点通过发送和接收消息（message）来进行通信，我们称发送消息的节点为发送者（sender），接收消息的节点为接收者（receiver）&lt;/li&gt;&#xA;&lt;li&gt;节点发送的消息主要有以下五种&#xA;&lt;ul&gt;&#xA;&lt;li&gt;MEET&lt;/li&gt;&#xA;&lt;li&gt;PING&lt;/li&gt;&#xA;&lt;li&gt;PONG&lt;/li&gt;&#xA;&lt;li&gt;FAIL&lt;/li&gt;&#xA;&lt;li&gt;PUBLISH&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>security</title>
      <link>/post/computer-science/security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/security/</guid>
      <description>&lt;h1 id=&#34;security&#34;&gt;&#xA;  security&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#security&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;man-in-the-middle-attack-中间人攻击&#34;&gt;&#xA;  man-in-the-middle attack 中间人攻击&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#man-in-the-middle-attack-%e4%b8%ad%e9%97%b4%e4%ba%ba%e6%94%bb%e5%87%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;SSL Pinning is a technique we use on the client side to avoid a man-in-the-middle attack by validating the server certificates. The developers embed (or pin) a list of trustful certificates in the client application during development and use them to compare against the server certificates during runtime.&lt;/p&gt;&#xA;&lt;p&gt;If there is a mismatch between the server and the local copy of certificates, the connection will be disrupted, and no further user data will be sent to that server. This enforcement ensures that user devices communicate only with dedicated, trustful servers.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Sentinel</title>
      <link>/post/computer-science/distributed-system/sentinel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/distributed-system/sentinel/</guid>
      <description>&lt;h1 id=&#34;sentinel&#34;&gt;&#xA;  Sentinel&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#sentinel&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;性能压测&#34;&gt;&#xA;  性能压测&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%80%a7%e8%83%bd%e5%8e%8b%e6%b5%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;“引入Sentinel带来的性能损耗非常小，只有在业务单机量级超过25万QPS的时候才会有一些显著的影响（5%～10%左右），单机QPS不太大的时候损耗几乎可以忽略不计。”这是Sentinel官方文档中的一句话，本节将通过基准测试验证这句话。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;spi在sentinel中的应用&#34;&gt;&#xA;  SPI在Sentinel中的应用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spi%e5%9c%a8sentinel%e4%b8%ad%e7%9a%84%e5%ba%94%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;SPI机制在阿里巴巴集团开源的项目中被广泛使用，如Dubbo，RocketMQ与Sentinel都使用了SPI机制&lt;/li&gt;&#xA;&lt;li&gt;除了Dubbo外，RocketMQ与Sentinel使用的都是Java提供的SPI机制&lt;/li&gt;&#xA;&lt;li&gt;Dubbo使用的是自实现的一套SPI——Dubbo SPI，与Java SPI的配置方式不同，Dubbo SPI使用Key-Value方式配置，目的是实现自适应扩展机制&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Java SPI实现原理与适用场景&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;SPI（Service Provider Interface，服务提供者接口）是一种服务发现机制，是Java的一个内置标准，可以保障不同的开发者实现某个特定的服务&lt;/li&gt;&#xA;&lt;li&gt;SPI的本质是将接口实现类的全限定名配置在文件中，由服务加载器读取配置文件、加载实现类并创建实例。使用SPI机制能够实现运行时从配置文件中读取接口的实现类并创建实例&lt;/li&gt;&#xA;&lt;li&gt;ServiceLoader.load()&lt;/li&gt;&#xA;&lt;li&gt;SPI机制的适用场景&#xA;&lt;ul&gt;&#xA;&lt;li&gt;适合适用&lt;strong&gt;策略模式&lt;/strong&gt;、&lt;strong&gt;责任链模式&lt;/strong&gt;的场景都可以使用SPI机制&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Java SPI在Sentinel中的应用&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;我们可以直接替换Sentinel提供的默认SlotChainBuilder，使用自定义的SlotChainBuilder为资源构造自己的ProcessorSlotChain，以实现修改ProcessorSlot排列顺序、增加或移除ProcessorSlot的功能&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;责任链模式在sentinel中的应用&#34;&gt;&#xA;  责任链模式在Sentinel中的应用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%b4%a3%e4%bb%bb%e9%93%be%e6%a8%a1%e5%bc%8f%e5%9c%a8sentinel%e4%b8%ad%e7%9a%84%e5%ba%94%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;我们将Sentinel提供的所有ProcessorSlot分为两类&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一类是负责完成资源指标数据统计的ProcessorSlot&lt;/li&gt;&#xA;&lt;li&gt;一类是实现限流、熔断等流量控制功能的ProcessorSlot&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Sentinel使用责任链模式将注册的所有ProcessorSlot按照一定的顺序串成一个单向链表&lt;/li&gt;&#xA;&lt;li&gt;实现资源指标数据统计的ProcessorSlot必须在实现流量控制功能的ProcessorSlot的前面，原因很简单，限流、熔断降级等都需要依赖资源的实时指标数据做判断&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;reference&#34;&gt;&#xA;  Reference&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/35777055/&#34;&gt;实战Alibaba Sentinel：深度解析微服务高并发流量治理&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>shardingsphere</title>
      <link>/post/computer-science/database/shardingsphere/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/database/shardingsphere/</guid>
      <description>&lt;h1 id=&#34;shardingsphere&#34;&gt;&#xA;  shardingsphere&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#shardingsphere&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://shardingsphere.apache.org/index_zh.html&#34;&gt;官网&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;概览&#34;&gt;&#xA;  概览&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a6%82%e8%a7%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;什么是-shardingsphere&#34;&gt;&#xA;  什么是 shardingsphere&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%80%e4%b9%88%e6%98%af-shardingsphere&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Apache ShardingSphere 是一款分布式的数据库生态系统， 可以将任意数据库转换为分布式数据库，并通过数据分片、弹性伸缩、加密等能力对原有数据库进行增强&lt;/li&gt;&#xA;&lt;li&gt;Apache ShardingSphere 设计哲学为 Database Plus，旨在构建异构数据库上层的标准和生态。 它关注如何充分合理地利用数据库的计算和存储能力，而并非实现一个全新的数据库。 它站在数据库的上层视角，关注它们之间的协作多于数据库自身&lt;/li&gt;&#xA;&lt;li&gt;ShardingSphere-JDBC&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ShardingSphere-JDBC 定位为轻量级 Java 框架，在 Java 的 JDBC 层提供的额外服务&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;ShardingSphere-Proxy&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ShardingSphere-Proxy 定位为透明化的数据库代理端，通过实现数据库二进制协议，对异构语言提供支持&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;shardingsphere-jdbc&#34;&gt;&#xA;  ShardingSphere-JDBC&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#shardingsphere-jdbc&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;shardingsphere-proxy&#34;&gt;&#xA;  ShardingSphere-Proxy&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#shardingsphere-proxy&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;启动手册&#xA;&lt;ul&gt;&#xA;&lt;li&gt;二进制发布包&lt;/li&gt;&#xA;&lt;li&gt;使用 docker&lt;/li&gt;&#xA;&lt;li&gt;构建 GraalVM Native Image(Alpha)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;高性能数据库集群&#34;&gt;&#xA;  高性能数据库集群&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%ab%98%e6%80%a7%e8%83%bd%e6%95%b0%e6%8d%ae%e5%ba%93%e9%9b%86%e7%be%a4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;第一种读写分离&#34;&gt;&#xA;  第一种：读写分离&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac%e4%b8%80%e7%a7%8d%e8%af%bb%e5%86%99%e5%88%86%e7%a6%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主库负责处理事务性的增删改操作，从库负责处理查询操作&lt;/li&gt;&#xA;&lt;li&gt;能够有效的避免由数据更新导致的行锁，使得整个系统的查询性能得到极大的改善&lt;/li&gt;&#xA;&lt;li&gt;读写分离是根据SQL语义的分析，将读操作和写操作分别路由至主库与从库&lt;/li&gt;&#xA;&lt;li&gt;两种方式&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一主多从&lt;/li&gt;&#xA;&lt;li&gt;多主多从&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;第二种数据库分片&#34;&gt;&#xA;  第二种：数据库分片&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac%e4%ba%8c%e7%a7%8d%e6%95%b0%e6%8d%ae%e5%ba%93%e5%88%86%e7%89%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;传统的将数据集中存储至单一节点的解决方案，在性能、可用性和运维成本这三方面已经难于满足海量数据的场景&#xA;&lt;ul&gt;&#xA;&lt;li&gt;性能&#xA;&lt;ul&gt;&#xA;&lt;li&gt;由于关系型数据库大多采用 B+ 树类型的索引，在数据量超过阈值的情况下，索引深度的增加也将使得磁盘访问的 IO 次数增加，进而导致查询性能的下降； 同时，高并发访问请求也使得集中式数据库成为系统的最大瓶颈&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;可用性&#xA;&lt;ul&gt;&#xA;&lt;li&gt;从可用性的方面来讲，服务化的无状态性，能够达到较小成本的随意扩容，这必然导致系统的最终压力都落在数据库之上。 而单一的数据节点，或者简单的主从架构，已经越来越难以承担。数据库的可用性，已成为整个系统的关键。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;运维成本&#xA;&lt;ul&gt;&#xA;&lt;li&gt;从运维成本方面考虑，当一个数据库实例中的数据达到阈值以上，对于 DBA 的运维压力就会增大。 数据备份和恢复的时间成本都将随着数据量的大小而愈发不可控。一般来讲，单一数据库实例的数据的阈值在 1TB 之内，是比较合理的范围&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;在传统的关系型数据库无法满足互联网场景需要的情况下，将数据存储至原生支持分布式的 NoSQL 的尝试越来越多。 但 NoSQL 对 SQL 的不兼容性以及生态圈的不完善，使得它们在与关系型数据库的博弈中始终无法完成致命一击，而关系型数据库的地位却依然不可撼动&lt;/li&gt;&#xA;&lt;li&gt;什么是数据分片？&#xA;&lt;ul&gt;&#xA;&lt;li&gt;按照某个维度将存放在单一数据库中的数据分散地存放至多个数据库或表中以达到提升性能瓶颈以及可用性的效果。 数据分片的有效手段是对关系型数据库进行分库和分表。&lt;/li&gt;&#xA;&lt;li&gt;分库和分表均可以有效的避免由数据量超过可承受阈值而产生的查询瓶颈。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;除此之外，分库还能够用于有效的分散对数据库单点的访问量；&lt;/li&gt;&#xA;&lt;li&gt;分表虽然无法缓解数据库压力，但却能够提供尽量将分布式事务转化为本地事务的可能，一旦涉及到跨库的更新操作，分布式事务往往会使问题变得复杂。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;使用多主多从的分片方式，可以有效的避免数据单点，从而提升数据架构的可用性。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;读写分离分散了数据库读写操作的压力，但是没有分散存储的压力，为了满足业务数据存储的需求，就需要将存储分散到多台数据库服务器上&lt;/li&gt;&#xA;&lt;li&gt;数据分片的有效手段是对关系型数据库进行分库和分表&lt;/li&gt;&#xA;&lt;li&gt;数据分片的拆分方式&#xA;&lt;ul&gt;&#xA;&lt;li&gt;垂直分片&lt;/li&gt;&#xA;&lt;li&gt;水平分片&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;垂直分片&#34;&gt;&#xA;  垂直分片&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9e%82%e7%9b%b4%e5%88%86%e7%89%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;什么是垂直分片？&#xA;&lt;ul&gt;&#xA;&lt;li&gt;按照业务拆分的方式称为垂直分片，又称为纵向拆分，它的核心理念是专库专用&lt;/li&gt;&#xA;&lt;li&gt;在拆分之前，一个数据库由多个数据表构成，每个表对应着不同的业务&lt;/li&gt;&#xA;&lt;li&gt;而拆分之后，则是按照业务将表进行归类，分布到不同的数据库中，从而将压力分散至不同的数据库&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;垂直分片的问题&#xA;&lt;ul&gt;&#xA;&lt;li&gt;垂直分片往往需要对架构和设计进行调整。通常来讲，是来不及应对互联网业务需求快速变化的；而且，它也并无法真正的解决单点瓶颈。 垂直拆分可以缓解数据量和访问量带来的问题，但无法根治。如果垂直拆分之后，表中的数据量依然超过单节点所能承载的阈值，则需要水平分片来进一步处理。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;专库专用&#xA;&lt;ul&gt;&#xA;&lt;li&gt;例如将商城库拆分为订单库、用户库、库存库&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;垂直拆分可以缓解数据量和访问量带来的问题，但无法根治。如果垂直拆分之后，表中的数据量依然超过单节点所能承载的阈值，则需要水平分片来进一步处理&lt;/li&gt;&#xA;&lt;li&gt;垂直分表适合将表中某些不常用的列，或者是占了大量空间的列拆分出去&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;水平分片&#34;&gt;&#xA;  水平分片&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b0%b4%e5%b9%b3%e5%88%86%e7%89%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;什么是水平分片&#xA;&lt;ul&gt;&#xA;&lt;li&gt;水平分片又称为横向拆分。 相对于垂直分片，它不再将数据根据业务逻辑分类，而是通过某个字段（或某几个字段），根据某种规则将数据分散至多个库或表中，每个分片仅包含数据的一部分&#xA;&lt;ul&gt;&#xA;&lt;li&gt;例如：根据主键分片，偶数主键的记录放入 0 库（或表），奇数主键的记录放入 1 库（或表）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;水平分片从理论上突破了单机数据量处理的瓶颈，并且扩展相对自由，是数据分片的标准解决方案&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;水平分表&#xA;&lt;ul&gt;&#xA;&lt;li&gt;单表切分为多表之后，新的表即使在同一个数据库服务器中，也可能带来可观的性能提升，如果性能能够满足业务要求，可以不拆分到多台数据库服务器，毕竟业务分库也会引入很多复杂性&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;水平分库&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果单表拆分为多表后，单台服务器依然无法满足性能要求，那就需要将多个表分散在不同的数据库服务器中&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;数据分片的挑战&#34;&gt;&#xA;  数据分片的挑战&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e5%88%86%e7%89%87%e7%9a%84%e6%8c%91%e6%88%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;面对如此散乱的分片之后的数据，应用开发工程师和数据库管理员对数据库的操作变得异常繁重就是其中的重要挑战之一。 他们需要知道数据需要从哪个具体的数据库的子表中获取&lt;/li&gt;&#xA;&lt;li&gt;另一个挑战则是，能够正确的运行在单节点数据库中的 SQL，在分片之后的数据库中并不一定能够正确运行。 例如，分表导致表名称的修改，或者分页、排序、聚合分组等操作的不正确处理。&lt;/li&gt;&#xA;&lt;li&gt;跨库事务也是分布式的数据库集群要面对的棘手事情&#xA;&lt;ul&gt;&#xA;&lt;li&gt;合理采用分表，可以在降低单表数据量的情况下，尽量使用本地事务，善于使用同库不同表可有效避免分布式事务带来的麻烦。 在不能避免跨库事务的场景，有些业务仍然需要保持事务的一致性。 而基于 XA 的分布式事务由于在并发度高的场景中性能无法满足需要，并未被互联网巨头大规模使用，他们大多采用最终一致性的柔性事务代替强一致事务。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;目标&#34;&gt;&#xA;  目标&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%9b%ae%e6%a0%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;尽量透明化分库分表所带来的影响，让使用方尽量像使用一个数据库一样使用水平分片之后的数据库集群，是 Apache ShardingSphere 数据分片模块的主要设计目标&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;CAP理论中的C在实践中是不可能完美实现的，在数据复制的过程中，节点N1和节点N2的数据并不一致（强一致性）。即使无法做到强一致性，但应用可以采用合适的方式达到最终一致性&#xA;&lt;ul&gt;&#xA;&lt;li&gt;基本可用&lt;/li&gt;&#xA;&lt;li&gt;软引用&lt;/li&gt;&#xA;&lt;li&gt;最终一致性&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;阿里巴巴Java开发手册&#xA;&lt;ul&gt;&#xA;&lt;li&gt;单表行数超过500万行或者单表容量超过2GB，才推荐进行分库分表&lt;/li&gt;&#xA;&lt;li&gt;如果预计3年后的数据量根本达不到这个级别，请不要在创建表时就分库分表&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;读写分离和数据分片具体的视线方式有两种&#xA;&lt;ul&gt;&#xA;&lt;li&gt;程序代码封装&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在代码中抽象一个数据访问层（中间层封装），实现读写操作分离和数据库服务器连接的管理&lt;/li&gt;&#xA;&lt;li&gt;Apache ShardingSphere&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ShardingSphere-JDBC 程序代码封装&lt;/li&gt;&#xA;&lt;li&gt;ShardingSphere-Proxy 中间件封装&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;中间件封装&#xA;&lt;ul&gt;&#xA;&lt;li&gt;独立一套系统处理，实现读写操作分离和数据库服务器连接的管理。对于业务服务器来说，访问中间件和访问数据库没有区别，在业务服务器看来，中间件就是一个数据库服务器&lt;/li&gt;&#xA;&lt;li&gt;MyCat&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;主从同步原理&#34;&gt;&#xA;  主从同步原理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%bb%e4%bb%8e%e5%90%8c%e6%ad%a5%e5%8e%9f%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;slave会从master读取binlog来进行数据同步&lt;/li&gt;&#xA;&lt;li&gt;1 master将数据改变记录到bin log中&lt;/li&gt;&#xA;&lt;li&gt;2 当 slave 上执行 start slave 命令之后，slave会创建一个IO连接用来连接master，请求master中的binlog&lt;/li&gt;&#xA;&lt;li&gt;3 当 slave 连接 master 时，master 会创建一个 log dump 线程，用于发送 bin log 的内容。在读取 binlog 的内容的操作中，会对主节点中的binlog加锁，当读取完成并发送给从服务器后解锁&lt;/li&gt;&#xA;&lt;li&gt;4 IO 线程接收主节点 binlog dump 进程发来的更新之后，保存到中继日志 relay log 中&lt;/li&gt;&#xA;&lt;li&gt;5 slave 的 SQL 线程，读取 relay log 日志，并解析成具体操作，从而实现主从操作一直，最终数据一致&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;mycat与shardingsphere深度对比&#34;&gt;&#xA;  MyCat与ShardingSphere深度对比&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mycat%e4%b8%8eshardingsphere%e6%b7%b1%e5%ba%a6%e5%af%b9%e6%af%94&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果是从传统单体结构迁移，且只需要基本的分库分表功能，MyCat可能更合适&lt;/li&gt;&#xA;&lt;li&gt;如果是新建的云原生系统或微服务架构，ShardingSphere是更好的选择&lt;/li&gt;&#xA;&lt;li&gt;考虑到技术演进和社区支持，新项目建议优先考虑ShardingSphere&lt;/li&gt;&#xA;&lt;li&gt;某些场景可以组合使用-用ShardingSphere-JDBC处理应用内分片，用MyCat/ShardingShpere-Proxy处理遗留系统访问&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;分布式事务&#34;&gt;&#xA;  分布式事务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e5%b8%83%e5%bc%8f%e4%ba%8b%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在单一数据节点中，事务仅限于对单一数据库资源的访问控制，称之为本地事务。 几乎所有的成熟的关系型数据库都提供了对本地事务的原生支持。 但是在基于微服务的分布式应用环境下，越来越多的应用场景要求对多个服务的访问及其相对应的多个数据库资源能纳入到同一个事务当中，分布式事务应运而生&lt;/li&gt;&#xA;&lt;li&gt;关系型数据库虽然对本地事务提供了完美的 ACID 原生支持。 但在分布式的场景下，它却成为系统性能的桎梏。 如何让数据库在分布式场景下满足 ACID 的特性或找寻相应的替代方案，是分布式事务的重点工作&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;挑战&#34;&gt;&#xA;  挑战&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8c%91%e6%88%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;强一致的事务与柔性事务的 API 和功能并不完全相同，在它们之间并不能做到自由的透明切换。 在开发决策阶段，就不得不在强一致的事务和柔性事务之间抉择，使得设计和开发成本被大幅增加&lt;/li&gt;&#xA;&lt;li&gt;基于 XA 的强一致事务使用相对简单，但是无法很好的应对互联网的高并发或复杂系统的长事务场景； 柔性事务则需要开发者对应用进行改造，接入成本非常高，并且需要开发者自行实现资源锁定和反向补偿&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;原理介绍&#34;&gt;&#xA;  原理介绍&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8e%9f%e7%90%86%e4%bb%8b%e7%bb%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ShardingSphere 对外提供 begin/commit/rollback 传统事务接口，通过 LOCAL，XA，BASE 三种模式提供了分布式事务的能力&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;local事务&#34;&gt;&#xA;  LOCAL事务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#local%e4%ba%8b%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;LOCAL 模式基于 ShardingSphere 代理的数据库 &lt;code&gt;begin/commit/rolllback&lt;/code&gt; 的接口实现， 对于一条逻辑 SQL，ShardingSphere 通过 &lt;code&gt;begin&lt;/code&gt; 指令在每个被代理的数据库开启事务，并执行实际 SQL，并执行 &lt;code&gt;commit/rollback&lt;/code&gt;。 由于每个数据节点各自管理自己的事务，它们之间没有协调以及通信的能力，也并不互相知晓其他数据节点事务的成功与否。 在性能方面无任何损耗，但在强一致性以及最终一致性方面不能够保证。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;xa事务&#34;&gt;&#xA;  XA事务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#xa%e4%ba%8b%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;XA 事务采用的是 X/OPEN 组织所定义的 &lt;a href=&#34;http://pubs.opengroup.org/onlinepubs/009680699/toc.pdf&#34;&gt;DTP 模型&lt;/a&gt; 所抽象的 AP（应用程序）, TM（事务管理器）和 RM（资源管理器） 概念来保证分布式事务的强一致性。 其中 TM 与 RM 间采用 XA 的协议进行双向通信，通过两阶段提交实现。 与传统的本地事务相比，XA 事务增加了准备阶段，数据库除了被动接受提交指令外，还可以反向通知调用方事务是否可以被提交。 &lt;code&gt;TM&lt;/code&gt; 可以收集所有分支事务的准备结果，并于最后进行原子提交，以保证事务的强一致性&lt;/li&gt;&#xA;&lt;li&gt;XA 事务建立在 ShardingSphere 代理的数据库 xa start/end/prepare/commit/rollback/recover 的接口上&lt;/li&gt;&#xA;&lt;li&gt;对于一条逻辑 SQL，ShardingSphere 通过 &lt;code&gt;xa begin&lt;/code&gt; 指令在每个被代理的数据库开启事务，内部集成 TM，用于协调各分支事务，并执行 &lt;code&gt;xa commit/rollback&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;基于 XA 协议实现的分布式事务，由于在执行的过程中需要对所需资源进行锁定，它更加适用于执行时间确定的短事务。 对于长事务来说，整个事务进行期间对数据的独占，将会对并发场景下的性能产生一定的影响&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;base事务&#34;&gt;&#xA;  BASE事务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#base%e4%ba%8b%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果将实现了 ACID 的事务要素的事务称为刚性事务的话，那么基于 BASE 事务要素的事务则称为柔性事务&lt;/li&gt;&#xA;&lt;li&gt;BASE 是基本可用、柔性状态和最终一致性这三个要素的缩写&#xA;&lt;ul&gt;&#xA;&lt;li&gt;基本可用（Basically Available）保证分布式事务参与方不一定同时在线&lt;/li&gt;&#xA;&lt;li&gt;柔性状态（Soft state）则允许系统状态更新有一定的延时，这个延时对客户来说不一定能够察觉&lt;/li&gt;&#xA;&lt;li&gt;最终一致性（Eventually consistent）通常是通过消息传递的方式保证系统的最终一致性&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;在 ACID 事务中对隔离性的要求很高，在事务执行过程中，必须将所有的资源锁定。 柔性事务的理念则是通过业务逻辑将互斥锁操作从资源层面上移至业务层面。 通过放宽对强一致性要求，来换取系统吞吐量的提升&lt;/li&gt;&#xA;&lt;li&gt;基于 ACID 的强一致性事务和基于 BASE 的最终一致性事务都不是银弹，只有在最适合的场景中才能发挥它们的最大长处。 Apache ShardingSphere 集成了 SEATA 作为柔性事务的使用方案&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;应用场景&#34;&gt;&#xA;  应用场景&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ba%94%e7%94%a8%e5%9c%ba%e6%99%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在单机应用场景中，依赖数据库提供的事务即可满足业务上对事务 ACID 的需求。但是在分布式场景下，传统数据库解决方案缺乏对全局事务的管控能力，用户在使用过程中可能遇到多个数据库节点上出现数据不一致的问题&lt;/li&gt;&#xA;&lt;li&gt;ShardingSphere 分布式事务，为用户屏蔽了分布式事务处理的复杂性，提供了灵活多样的分布式事务解决方案，用户可以根据自己的业务场景在 LOCAL，XA，BASE 三种模式中，选择适合自己的分布式事务解决方案&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;ShardingSphere LOCAL 事务使用场景&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对于 LOCAL 事务，在分布式环境下，不保证各个数据库节点之间数据的一致性和隔离性，需要业务方自行处理可能出现的不一致问题。适用于用户希望自行处理分布式环境下数据一致性问题的业务场景&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;ShardingSphere XA 事务使用场景&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对于 XA 事务，提供了分布式环境下，对数据强一致性的保证。但是由于存在同步阻塞问题，对性能会有一定影响。适用于对数据一致性要求非常高且对并发性能要求不是很高的业务场景&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;ShardingSphere BASE 事务使用场景&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对于 BASE 事务，提供了分布式环境下，对数据最终一致性的保证。由于在整个事务过程中，不会像 XA 事务那样全程锁定资源，所以性能较好。适用于对并发性能要求很高并且允许出现短暂数据不一致的业务场景&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;ymal配置&#34;&gt;&#xA;  YMAL配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#ymal%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/transaction/&#34;&gt;YMAL配置&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;读写分离&#34;&gt;&#xA;  读写分离&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%af%bb%e5%86%99%e5%88%86%e7%a6%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;核心概念&#34;&gt;&#xA;  核心概念&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%b8%e5%bf%83%e6%a6%82%e5%bf%b5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://shardingsphere.apache.org/document/current/cn/features/readwrite-splitting/concept/&#34;&gt;核心概念&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;主库&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;添加、更新以及删除数据操作所使用的数据库，目前仅支持单主库&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;从库&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;查询数据操作所使用的数据库，可支持多从库&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;主从同步&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;将主库的数据异步的同步到从库的操作。 由于主从同步的异步性，从库与主库的数据会短时间内不一致&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;负载均衡策略&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通过负载均衡策略将查询请求疏导至不同从库&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;使用限制&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;不处理主库和从库的数据同步&lt;/li&gt;&#xA;&lt;li&gt;不处理主库和从库的数据同步延迟导致的数据不一致&lt;/li&gt;&#xA;&lt;li&gt;不支持主库多写&lt;/li&gt;&#xA;&lt;li&gt;不处理主从库间的事务一致性。主从模型中，事务中的数据读写均用主库。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;数据库网关&#34;&gt;&#xA;  数据库网关&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e5%ba%93%e7%bd%91%e5%85%b3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;背景&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;随着数据库碎片化趋势的不可逆转，多种类型数据库的共存已渐成常态。使用一种 SQL 方言访问异构数据库的场景在不断增加&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;挑战&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;多样化的数据库的存在，使访问数据库的 SQL 方言难于标准化，工程师需要针对不同种类的数据库使用不同的方言，缺乏统一化的查询平台&lt;/li&gt;&#xA;&lt;li&gt;将不同类型的数据库方言自动翻译为后端数据库所使用的方言，让工程师可以使用任意一种数据库方言访问所有的后端异构数据库，可以极大的降低开发和维护成本&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;目标&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;SQL 方言的自动翻译，是 Apache ShardingSphere 数据库网关希望达成的主要目标&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;应用场景&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;随着业务场景的多元化，企业内部的数据库产品也呈现多元化的趋势，业务应用与不同数据库产品的对接也变得异常复杂，ShardingSphere 数据库网关可以屏蔽业务应用与底层多元化数据库之间连接，同时为不同的业务场景提供统一的访问协议和语法体系，能够帮助企业快速打造统一的数据访问平台。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;使用限制&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Apache ShardingSphere 的 SQL 方言翻译处于实验阶段&lt;/li&gt;&#xA;&lt;li&gt;目前仅支持 MySQL/PostgreSQL 的方言自动翻译，工程师可以使用 MySQL 的方言和协议，访问 PostgreSQL 数据库，反之亦然&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;流量治理&#34;&gt;&#xA;  流量治理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b5%81%e9%87%8f%e6%b2%bb%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;数据迁移&#34;&gt;&#xA;  数据迁移&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e8%bf%81%e7%a7%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;挑战&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在迁移过程中，不应该对正在运行的业务造成影响。尽可能减少迁移时数据不可用的时间窗口，是数据迁移的第一个挑战&lt;/li&gt;&#xA;&lt;li&gt;其次，数据迁移不应该对现有的数据造成影响，如何保证数据的正确性，是数据迁移的第二个挑战&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;应用场景&#xA;&lt;ul&gt;&#xA;&lt;li&gt;假如一个应用系统在使用传统单体数据库，单表数据量达到了1亿并且还在快速增长，单体数据库负载持续在高位，成为系统瓶颈。一旦数据库成为瓶颈，对应用服务器扩容是无效的，需要对数据库进行扩容&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;数据加密&#34;&gt;&#xA;  数据加密&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e5%8a%a0%e5%af%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;数据脱敏&#34;&gt;&#xA;  数据脱敏&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e8%84%b1%e6%95%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;影子库&#34;&gt;&#xA;  影子库&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bd%b1%e5%ad%90%e5%ba%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;背景&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在基于微服务的分布式应用架构下，业务需要多个服务是通过一系列的服务、中间件的调用来完成，所以单个服务的压力测试已无法代表真实场景。 在测试环境中，如果重新搭建一整套与生产环境类似的压测环境，成本过高，并且往往无法模拟线上环境的复杂度以及流量。 因此，业内通常选择全链路压测的方式，即在生产环境进行压测，这样所获得的测试结果能够准确地反应系统真实容量和性能水平&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;可观察性&#34;&gt;&#xA;  可观察性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%af%e8%a7%82%e5%af%9f%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如何观测集群的运行状态，使运维人员可以快速掌握当前系统现状，并进行进一步的维护工作，是分布式系统的全新挑战&lt;/li&gt;&#xA;&lt;li&gt;登录到具体服务器的点对点运维方式，无法适用于面向大量分布式服务器的场景&lt;/li&gt;&#xA;&lt;li&gt;通过对系统可观察性数据的遥测是分布式系统推荐的运维方式。 Tracing（链路跟踪）、 Metrics（指标监控）和 Logging （日志）是系统运行状况的可观察性数据重要的获取手段&lt;/li&gt;&#xA;&lt;li&gt;APM（应用性能监控） 是通过对系统可观察性数据进行采集、存储和分析，进行系统的性能监控与诊断，主要功能包括性能指标监控、调用链分析，应用拓扑图等&lt;/li&gt;&#xA;&lt;li&gt;Apache ShardingSphere 并不负责如何采集、存储以及展示应用性能监控的相关数据，而是为应用监控系统提供必要的指标数据&lt;/li&gt;&#xA;&lt;li&gt;换句话说，Apache ShardingSphere 仅负责产生具有价值的数据，并通过标准协议或插件化的方式递交给相关系统&lt;/li&gt;&#xA;&lt;li&gt;Tracing 用于获取 SQL 解析与 SQL 执行的链路跟踪信息。Apache ShardingSphere 默认提供了对 OpenTelemetry，SkyWalking 的支持，也支持用户通过插件化的方式开发自定义的 Tracing 组件&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用 OpenTelemetry OpenTelemetry 在 2019 年由 OpenTracing 和 OpenCencus 合并而来。 使用这种方式，只需要在 agent 配置文件中，根据 &lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk-extensions/autoconfigure&#34;&gt;OpenTelemetry SDK 自动配置说明&lt;/a&gt; ，填写合适的配置即可。可以导出数据到 Jaeger，Zipkin&lt;/li&gt;&#xA;&lt;li&gt;使用 SkyWalking 需要在 agent 配置中配置启用对应插件，并且需要同时配置使用 SkyWalking 的 apm-toolkit 工具&lt;/li&gt;&#xA;&lt;li&gt;使用 SkyWalking 的内置自动探针 Apache ShardingSphere 团队与 Apache SkyWalking 团队共同合作，在 SkyWalking 中实现了 Apache ShardingSphere 自动探针，可以将相关的应用性能数据自动发送到 SkyWalking 中。注意这种方式的自动探针不能与 Apache ShardingSphere 插件探针同时使用&lt;/li&gt;&#xA;&lt;li&gt;Metrics 则用于收集和展示整个集群的统计指标。Apache ShardingSphere 默认提供了对 Prometheus 的支持&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;联邦查询&#34;&gt;&#xA;  联邦查询&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%81%94%e9%82%a6%e6%9f%a5%e8%af%a2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;背景&#xA;&lt;ul&gt;&#xA;&lt;li&gt;当用户使用数据分片对海量数据进行水平拆分时，虽然能够有效解决数据库性能瓶颈，但业务上也因此带来了一些新的问题。 例如以下场景：跨节点关联查询、子查询、分页、排序、聚合查询。在进行业务实现时需要注意查询 SQL 的使用范围，尽量避免跨数据库实例查询，这使得业务层面的功能受到了数据库的限制&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;shardingsphere的分布式事务功能具体是如何实现的&#34;&gt;&#xA;  ShardingSphere的分布式事务功能具体是如何实现的？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#shardingsphere%e7%9a%84%e5%88%86%e5%b8%83%e5%bc%8f%e4%ba%8b%e5%8a%a1%e5%8a%9f%e8%83%bd%e5%85%b7%e4%bd%93%e6%98%af%e5%a6%82%e4%bd%95%e5%ae%9e%e7%8e%b0%e7%9a%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;xa事务强一致性&#34;&gt;&#xA;  XA事务（强一致性）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#xa%e4%ba%8b%e5%8a%a1%e5%bc%ba%e4%b8%80%e8%87%b4%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;实现原理&#xA;&lt;ul&gt;&#xA;&lt;li&gt;基于XA协议的两阶段提交(2PC)&lt;/li&gt;&#xA;&lt;li&gt;使用ShardingSphere的XATransactionManager作为事务管理器&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;工作流程&#xA;&lt;ul&gt;&#xA;&lt;li&gt;准备阶段&#xA;&lt;ul&gt;&#xA;&lt;li&gt;事务协调器向所有参与者发送prepare请求&lt;/li&gt;&#xA;&lt;li&gt;各参与者执行事务但不提交，记录undo/redo日志&lt;/li&gt;&#xA;&lt;li&gt;参与者返回准备就绪或失败响应&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;提交/回滚阶段&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果所有参与者都准备就绪，发送&lt;code&gt;commit&lt;/code&gt;请求&lt;/li&gt;&#xA;&lt;li&gt;如果任一参与者准备失败，发送&lt;code&gt;rollback&lt;/code&gt;请求&lt;/li&gt;&#xA;&lt;li&gt;参与者根据指令完成最终操作&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;seata事务柔性事务at模式&#34;&gt;&#xA;  &lt;code&gt;Seata&lt;/code&gt;事务（柔性事务/AT模式）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#seata%e4%ba%8b%e5%8a%a1%e6%9f%94%e6%80%a7%e4%ba%8b%e5%8a%a1at%e6%a8%a1%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;整合&lt;code&gt;Seata&lt;/code&gt;的AT(Automatic Transaction)模式&lt;/li&gt;&#xA;&lt;li&gt;基于全局锁+分支事务的补偿机制&lt;/li&gt;&#xA;&lt;li&gt;工作流程&#xA;&lt;ul&gt;&#xA;&lt;li&gt;第一阶段&#xA;&lt;ul&gt;&#xA;&lt;li&gt;业务SQL被Seata拦截解析&lt;/li&gt;&#xA;&lt;li&gt;RM生成undo log记录修改前数据&lt;/li&gt;&#xA;&lt;li&gt;执行业务SQL并提交本地事务&lt;/li&gt;&#xA;&lt;li&gt;向TC注册分支事务并报告状态&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;第二阶段&#xA;&lt;ul&gt;&#xA;&lt;li&gt;成功时：异步删除undo log&lt;/li&gt;&#xA;&lt;li&gt;失败时：基于 undo log 进行补偿回滚&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;base事务saga模式&#34;&gt;&#xA;  BASE事务（Saga模式）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#base%e4%ba%8b%e5%8a%a1saga%e6%a8%a1%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;基于Saga模式的长事务解决方案&lt;/li&gt;&#xA;&lt;li&gt;每个子事务都有对应的补偿操作&lt;/li&gt;&#xA;&lt;li&gt;最终一致性模型&lt;/li&gt;&#xA;&lt;li&gt;执行模式&#xA;&lt;ul&gt;&#xA;&lt;li&gt;正向流程：按顺序执行所有子事务&lt;/li&gt;&#xA;&lt;li&gt;补偿流程：出现失败时，逆序执行补偿操作&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;生产实践建议&#34;&gt;&#xA;  生产实践建议&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%94%9f%e4%ba%a7%e5%ae%9e%e8%b7%b5%e5%bb%ba%e8%ae%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;金融核心系统：优先考虑XA事务&lt;/li&gt;&#xA;&lt;li&gt;普通交易系统：推荐&lt;code&gt;Seata AT&lt;/code&gt;模式&lt;/li&gt;&#xA;&lt;li&gt;跨系统长流程：考虑&lt;code&gt;Saga&lt;/code&gt;模式&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;reference&#34;&gt;&#xA;  Reference&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://shardingsphere.apache.org/document/current/cn/overview/&#34;&gt;官方文档&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;这个很好，优先看这个&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/qq_38263083/article/details/125439693&#34;&gt;shardingsphere分库分表示例（逻辑表，真实表，绑定表，广播表，单表），分页性能测试&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/hyzsuccess/article/details/127644291&#34;&gt;ShardingSphere学习（超详细）&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/352256403/answer/878733845&#34;&gt;为什么几乎所有的开源数据库中间件都是国内公司开源的？并且几乎都停止了更新？ - 张亮的回答 - 知乎&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>spring</title>
      <link>/post/computer-science/java/spring/spring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/java/spring/spring/</guid>
      <description>&lt;h1 id=&#34;spring&#34;&gt;&#xA;  Spring&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/huanzi-qch/springBoot&#34;&gt;huanzi-qch/springBoot&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;SpringBoot系列Demo代码&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;什么是spring&#34;&gt;&#xA;  什么是Spring&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%80%e4%b9%88%e6%98%afspring&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Spring是一个java开发框架&lt;/li&gt;&#xA;&lt;li&gt;它的核心特性是&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;控制反转&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;依赖注入&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;面向切面编程&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;声明式事务管理&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;模块化设计&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;spring-mvc&#34;&gt;&#xA;  Spring MVC&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring-mvc&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;spring-mvc-流程&#34;&gt;&#xA;  Spring MVC 流程&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring-mvc-%e6%b5%81%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;流程&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用户发送请求&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;DispatcherServlet&lt;/code&gt; 调用 &lt;code&gt;HandlerMapping&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;DispatcherServlet&lt;/code&gt; 调用 &lt;code&gt;HandlerAdapter&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Controller 处理请求&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;DispatcherServlet&lt;/code&gt; 调用 &lt;code&gt;ViewResolver&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;视图渲染 ModelAndView -&amp;gt; ViewResolver -&amp;gt; View&lt;/li&gt;&#xA;&lt;li&gt;返回响应&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;核心组件&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;DispatcherServlet&lt;/strong&gt;：前端控制器，负责请求的分发和协调&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;HandlerMapping&lt;/strong&gt;：根据请求 URL 查找对应的 Handler&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;HandlerAdapter&lt;/strong&gt;：适配并执行 Handler&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Controller&lt;/strong&gt;：处理具体的业务逻辑&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;ViewResolver&lt;/strong&gt;：解析视图名称，生成具体的 View 对象&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;View&lt;/strong&gt;：负责视图的渲染&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;bean&#34;&gt;&#xA;  Bean&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#bean&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;bean的生命周期&#34;&gt;&#xA;  Bean的生命周期&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#bean%e7%9a%84%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Bean的实例化&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通过反射调用 Bean 的构造函数，创建Bean的实例&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;填充属性（依赖注入）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Spring根据配置文件或注解，将依赖的Bean注入到当前Bean中&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;调用Aware接口&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果Bean实现了Spring的&lt;code&gt;Aware&lt;/code&gt;接口，Spring会调用对应的回调方法&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;BeanPostProcessor&lt;/code&gt; 的前置处理&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Spring调用所有&lt;code&gt;BeanPostProcessor&lt;/code&gt;的&lt;code&gt;postProcessBeforeInitialization()&lt;/code&gt;方法&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;执行初始化方法&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Spring会调用Bean的初始化方法。&lt;/li&gt;&#xA;&lt;li&gt;@PostConstruct&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;BeanPostProcessor的后置处理&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Spring调用所有&lt;code&gt;BeanPostProcessor&lt;/code&gt;的&lt;code&gt;postProcessAfterInitialization()&lt;/code&gt;方法。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Bean初始化完成&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Bean已经完全初始化，可以被其他Bean使用。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Bean的使用&lt;/li&gt;&#xA;&lt;li&gt;Bean的销毁&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;bean的作用域&#34;&gt;&#xA;  Bean的作用域&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#bean%e7%9a%84%e4%bd%9c%e7%94%a8%e5%9f%9f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Singleton（单例）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;默认作用域，单例模式&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Prototype（原型）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;每次请求创建新实例&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Request（请求）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;每个 HTTP 请求创建一个实例&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Session（会话）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;每个 HTTP Session 创建一个实例&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Application（应用）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;整个 ServletContext 生命周期内有效&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;WebSocket&#xA;&lt;ul&gt;&#xA;&lt;li&gt;WebSocket 会话生命周期内有效&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;spring-循环依赖如何解决&#34;&gt;&#xA;  spring 循环依赖如何解决？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring-%e5%be%aa%e7%8e%af%e4%be%9d%e8%b5%96%e5%a6%82%e4%bd%95%e8%a7%a3%e5%86%b3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;三级缓存&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;singletonObjects&lt;/code&gt;：一级缓存，存储经历了完整生命周期的Bean对象&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;earlySingletonObjects&lt;/code&gt;：二级缓存，存储提前暴露出来的Bean对象，其生命周期未结束，属性未完全填充&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;singletonFactories&lt;/code&gt;：三级缓存，存储生成Bean的工厂&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;ioc&#34;&gt;&#xA;  IOC&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#ioc&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;什么是ioc&#34;&gt;&#xA;  什么是IOC&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%80%e4%b9%88%e6%98%afioc&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;IOC是控制反转的意思，在一个程序中对象的创建与管理由一个容器负责，对象之间的引用通过注入(属性填充)的方式从容器中获取，降低了代码之间的耦合度&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;ioc-的核心概念是什么&#34;&gt;&#xA;  IOC 的核心概念是什么？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#ioc-%e7%9a%84%e6%a0%b8%e5%bf%83%e6%a6%82%e5%bf%b5%e6%98%af%e4%bb%80%e4%b9%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;依赖注入&lt;/li&gt;&#xA;&lt;li&gt;控制反转&lt;/li&gt;&#xA;&lt;li&gt;IOC容器&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;举一个-spring-的容器&#34;&gt;&#xA;  举一个 Spring 的容器？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%be%e4%b8%80%e4%b8%aa-spring-%e7%9a%84%e5%ae%b9%e5%99%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;BeanFactory&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;ApplicationContext&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;WebApplicationContext&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;ioc-的优势是什么&#34;&gt;&#xA;  IOC 的优势是什么？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#ioc-%e7%9a%84%e4%bc%98%e5%8a%bf%e6%98%af%e4%bb%80%e4%b9%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;降低耦合度&lt;/li&gt;&#xA;&lt;li&gt;提高可测试性&#xA;&lt;ul&gt;&#xA;&lt;li&gt;注入模拟对象进行测试&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;增强可扩展性&lt;/li&gt;&#xA;&lt;li&gt;优化资源管理&#xA;&lt;ul&gt;&#xA;&lt;li&gt;容器管理对象的创建和销毁，避免资源浪费&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;aop&#34;&gt;&#xA;  AOP&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#aop&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;什么是aop&#34;&gt;&#xA;  什么是AOP？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%80%e4%b9%88%e6%98%afaop&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;AOP 是一种&lt;strong&gt;编程范式&lt;/strong&gt;, 通过将横切关注点与业务代码分离，提高代码的可维护性与可重用性&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;aop的核心概念是什么&#34;&gt;&#xA;  AOP的核心概念是什么？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#aop%e7%9a%84%e6%a0%b8%e5%bf%83%e6%a6%82%e5%bf%b5%e6%98%af%e4%bb%80%e4%b9%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;切面 &lt;strong&gt;Aspect&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;连接点 &lt;strong&gt;Join Point&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;程序执行过程中可以插入切面的点（方法的调用或异常的处理）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;通知 &lt;strong&gt;Advice&lt;/strong&gt; 切面在连接点执行的操作&#xA;&lt;ul&gt;&#xA;&lt;li&gt;@Before&lt;/li&gt;&#xA;&lt;li&gt;@After&lt;/li&gt;&#xA;&lt;li&gt;@Around&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;切入点 &lt;strong&gt;Pointcut&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;定义在哪些连接点上应用通知，通常通过表达式来匹配&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;织入 &lt;strong&gt;Weaving&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;将切面应用到目标对象并创建代理对象的过程，可以在编译期、类加载期或运行期进行&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;aop的应用场景&#34;&gt;&#xA;  AOP的应用场景&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#aop%e7%9a%84%e5%ba%94%e7%94%a8%e5%9c%ba%e6%99%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;日志记录&lt;/li&gt;&#xA;&lt;li&gt;事务管理&lt;/li&gt;&#xA;&lt;li&gt;权限控制&lt;/li&gt;&#xA;&lt;li&gt;性能监控&#xA;&lt;ul&gt;&#xA;&lt;li&gt;记录方法执行时间&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;aop的实现方式&#34;&gt;&#xA;  AOP的实现方式&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#aop%e7%9a%84%e5%ae%9e%e7%8e%b0%e6%96%b9%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;JDK动态代理&#xA;&lt;ul&gt;&#xA;&lt;li&gt;实现了接口的类&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;CGLIB代理&#xA;&lt;ul&gt;&#xA;&lt;li&gt;未实现接口的类&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;事务&#34;&gt;&#xA;  事务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8b%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;</description>
    </item>
    <item>
      <title>spring boot</title>
      <link>/post/computer-science/java/springboot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/java/springboot/</guid>
      <description>&lt;h1 id=&#34;spring-boot&#34;&gt;&#xA;  spring boot&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring-boot&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;aop&#34;&gt;&#xA;  AOP&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#aop&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;为什么要使用aop&#34;&gt;&#xA;  为什么要使用AOP？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%ba%e4%bb%80%e4%b9%88%e8%a6%81%e4%bd%bf%e7%94%a8aop&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;aop的术语和流程&#34;&gt;&#xA;  AOP的术语和流程&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#aop%e7%9a%84%e6%9c%af%e8%af%ad%e5%92%8c%e6%b5%81%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;aop开发详解&#34;&gt;&#xA;  AOP开发详解&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#aop%e5%bc%80%e5%8f%91%e8%af%a6%e8%a7%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;确定拦截目标&#xA;&lt;ul&gt;&#xA;&lt;li&gt;需要拦截什么类的什么方法&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;开发切面&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;@Aspect&lt;/code&gt; 注解的一个类&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;@Before&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;@After&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;@AfterReturning&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;@AfterThrowing&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;定义切点&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;环绕通知&#34;&gt;&#xA;  环绕通知&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%8e%af%e7%bb%95%e9%80%9a%e7%9f%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一般而言，只有在需要大幅度修改原有目标对象的服务逻辑时才使用它，一般情况下尽量不要使用它。环绕通知是一个取代整个流程的通知，当然它也提供了回调原有流程的能力&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;引入&#34;&gt;&#xA;  引入&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bc%95%e5%85%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;通知获取参数&#34;&gt;&#xA;  通知获取参数&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%80%9a%e7%9f%a5%e8%8e%b7%e5%8f%96%e5%8f%82%e6%95%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;织入&#34;&gt;&#xA;  织入&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bb%87%e5%85%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;织入是一个生成动态代理对象并且将切面和目标对象方法编入约定流程的过程&lt;/li&gt;&#xA;&lt;li&gt;本书中采用先声明接口再提供一个实现类的形式来提供服务类，这也是Spring推荐的方式，但是是否拥有接口并不是AOP的强制要求&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在Java中，当前有多种方式实现动态代理，我们之前谈到的CGLIB只是其中的一种，业界比较流行的还有JDK和Javassist等。Spring采用了JDK和CGLIB，对于JDK动态代理的要求是被代理的目标对象必须拥有接口，而对于CGLIB动态代理则不做要求。因此，在默认的情况下，Spring会按照这样的一条规则处理：当需要使用AOP的类拥有接口时，它会以JDK动态代理的方式运行，否则以CGLIB动态代理的方式运行&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;多个切面&#34;&gt;&#xA;  多个切面&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%a4%9a%e4%b8%aa%e5%88%87%e9%9d%a2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h2 id=&#34;数据库事务&#34;&gt;&#xA;  数据库事务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e5%ba%93%e4%ba%8b%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;jdbc的数据库事务&#34;&gt;&#xA;  JDBC的数据库事务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#jdbc%e7%9a%84%e6%95%b0%e6%8d%ae%e5%ba%93%e4%ba%8b%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;spring声明式事务的使用&#34;&gt;&#xA;  Spring声明式事务的使用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring%e5%a3%b0%e6%98%8e%e5%bc%8f%e4%ba%8b%e5%8a%a1%e7%9a%84%e4%bd%bf%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;声明式事务是使用注解@Transactional进行标注的，这个注解可以标注在类或者方法上，当它标注在类上时，表示这个类所有公共的(public)非静态的方法都将启用事务功能&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;spring事务管理器&#34;&gt;&#xA;  Spring事务管理器&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring%e4%ba%8b%e5%8a%a1%e7%ae%a1%e7%90%86%e5%99%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在Spring中，事务管理器的顶层接口为 &lt;code&gt;TransactionManager&lt;/code&gt;，这个接口没有任何方法定义，这是因为这个接口下又可以划分两大类事务管理器&#xA;&lt;ul&gt;&#xA;&lt;li&gt;响应式编程的事务管理器&lt;/li&gt;&#xA;&lt;li&gt;非响应式编程的事务管理器&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;PlatformTransactionManager&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;getTransaction 获取事务，返回事务状态&lt;/li&gt;&#xA;&lt;li&gt;commit 提交事务&lt;/li&gt;&#xA;&lt;li&gt;rollback 回滚事务&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;在Spring Boot中，添加Maven依赖&lt;code&gt;mybatis-spring-boot-starter&lt;/code&gt;之后，会自动创建&lt;code&gt;JdbcTransactionManager&lt;/code&gt;对象作为事务管理器&lt;/li&gt;&#xA;&lt;li&gt;如果依赖&lt;code&gt;spring-boot-starter-data-jpa&lt;/code&gt;，则会自动创建&lt;code&gt;JpaTransactionManager&lt;/code&gt;对象作为事务管理器&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;隔离级别&#34;&gt;&#xA;  隔离级别&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9a%94%e7%a6%bb%e7%ba%a7%e5%88%ab&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在企业的生产实践中，选择隔离级别一般会以读写提交为主，它能够防止脏读，但不能避免不可重复读和幻读&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;传播行为&#34;&gt;&#xA;  传播行为&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bc%a0%e6%92%ad%e8%a1%8c%e4%b8%ba&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;执行一个批量任务，它会处理很多的交易，绝大部分交易可以顺利完成，但是也有极少数的交易因为特殊原因不能完成而发生异常，这时我们不应该因为极少数的交易不能完成而回滚批量任务调用的其他交易，使得那些本能完成的交易也不能完成了&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在执行一个批量任务的过程中，调用多个交易时，如果有一些交易发生异常，只回滚那些出现异常的交易，而不回滚整个批量任务，这样就能够使得那些没有问题的交易顺利完成，而有问题的交易则不做任何事情&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;在Spring中，当一个方法调用另一个方法时，可以让事务采取不同的策略工作，如新建事务或者挂起当前事务等，这便是事务的传播行为&lt;/li&gt;&#xA;&lt;li&gt;7种传播行为&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;需要事务，它是默认传播行为。如果当前存在事务，就沿用当前事务；否则新建一个事务运行该方法&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;SUPPORTS&#xA;&lt;ul&gt;&#xA;&lt;li&gt;支持事务。如果当前存在事务，就沿用当前事务；否则继续采用无事务的方式运行该方法&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;MANDATORY&#xA;&lt;ul&gt;&#xA;&lt;li&gt;必须使用事务。如果当前没有事务，则会抛出异常；如果存在当前事务，则沿用当前事务运行该方法￼&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;REQUIRES_NEW&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;无论当前事务是否存在，都会创建新事务运行该方法，这样新事务就可以拥有新的锁和隔离级别等特性，与当前事务相互独立￼&lt;/li&gt;&#xA;&lt;li&gt;e.g.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在进行数据同步的时候，不用将整个同步过程都设置为一个事务&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;NOT_SUPPORTED&#xA;&lt;ul&gt;&#xA;&lt;li&gt;不支持事务，当前存在事务时，将挂起事务，运行方法&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;NEVER&#xA;&lt;ul&gt;&#xA;&lt;li&gt;不支持事务，如果当前存在事务，则抛出异常，否则继续采用无事务的方式运行该方法￼&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;NESTED&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在当前方法调用方法时，如果被调用的方法发生异常，只回滚被调用的方法运行过的SQL语句，而不回滚当前方法的事务&lt;/li&gt;&#xA;&lt;li&gt;原理&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在大部分的数据库中，一段SQL语句中可以设置一个标志位，运行后面的SQL语句时如果有问题，只回滚到这个标志位的数据状态，而不会让这个标志位之前的SQL语句也回滚。这个标志位在数据库概念中被称为保存点(save point)。从加粗日志部分可以看到，Spring生成了nested事务，也可以看到保存点的释放，可见Spring也是使用保存点技术来完成让子事务回滚而不致使当前事务回滚的工作。&lt;/li&gt;&#xA;&lt;li&gt;注意，并不是所有数据库都支持保存点技术，因此Spring内部有这样的规则：当数据库支持保存点技术时，就启用保存点技术；如果不能支持，就新建一个事务来运行代码，即等价于REQUIRES_NEW传播行为&lt;/li&gt;&#xA;&lt;li&gt;NESTED 和 REQUIRES_NEW 的区别&#xA;&lt;ul&gt;&#xA;&lt;li&gt;NESTED传播行为和REQUIRES_NEW传播行为是有区别的：NESTED传播行为会沿用当前事务，以保存点技术为主；REQUIRES_NEW传播行为则创建新的事务，事务的提交和回滚也是独立的，它拥有独立上下文（例如隔离级别和超时时间等），这是在应用中需要注意的地方。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;占用事务时间过长&#34;&gt;&#xA;  占用事务时间过长&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8d%a0%e7%94%a8%e4%ba%8b%e5%8a%a1%e6%97%b6%e9%97%b4%e8%bf%87%e9%95%bf&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;transactional自调用失效问题&#34;&gt;&#xA;  @Transactional自调用失效问题&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#transactional%e8%87%aa%e8%b0%83%e7%94%a8%e5%a4%b1%e6%95%88%e9%97%ae%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h2 id=&#34;spring-data-redis&#34;&gt;&#xA;  spring-data-redis&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring-data-redis&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Reference&#xA;&lt;ul&gt;&#xA;&lt;li&gt;《深入迁出 Spring Boot 3.x》7.1 spring-data-redis项目简介&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;lettuce-vs-jedis&#34;&gt;&#xA;  Lettuce vs Jedis&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#lettuce-vs-jedis&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在Java中有很多种与Redis连接的驱动，目前使用比较广泛的是Lettuce和Jedis，它们是类似的，不过自Spring Boot 2.0发布以来，默认使用的是Lettuce&lt;/li&gt;&#xA;&lt;li&gt;Lettuce是基于Netty框架的事件驱动的Redis客户端，其方法调用是异步的，其API也是线程安全的，因此多个线程可以操作单个Lettuce连接来完成各种操作，并且Lettuce支持连接池。Lettuce线程可以被多个请求公用，且不会产生频繁创建和关闭Lettuce连接的开销，因此比较适合应用于高并发网站。&lt;/li&gt;&#xA;&lt;li&gt;Jedis是同步的，不支持异步，Jedis客户端连接不是线程安全的，需要为每个请求创建和关闭一个Jedis连接，所以一般通过连接池来使用Jedis客户端连接。Jedis不太适合在高并发网站使用，当遇到高并发场景时，Jedis连接池无法避免频繁创建和关闭Jedis连接，因为这会造成十分大的系统开销&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;redistemplate和-stringredistemplate&#34;&gt;&#xA;  RedisTemplate和 StringRedisTemplate&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#redistemplate%e5%92%8c-stringredistemplate&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;StringRedisTemplate是RedisTemplate的子类，从名称就可以看出，StringRedisTemplate专门用于操作字符串&lt;/li&gt;&#xA;&lt;li&gt;RedisTemplate，它是一个强大的类，会自动从RedisConnectionFactory工厂中获取连接，然后执行对应的Redis命令，最后还会关闭Redis的连接。这些操作都被封装在RedisTemplate中，所以开发者并不需要关注Redis连接的闭合问题&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;spring对redis数据类型操作的封装&#34;&gt;&#xA;  Spring对Redis数据类型操作的封装&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring%e5%af%b9redis%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b%e6%93%8d%e4%bd%9c%e7%9a%84%e5%b0%81%e8%a3%85&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ValueOperations 字符串操作接口&lt;/li&gt;&#xA;&lt;li&gt;HashOperations 哈希操作接口&lt;/li&gt;&#xA;&lt;li&gt;ListOperations 列表（链表）操作接口&lt;/li&gt;&#xA;&lt;li&gt;SetOperations 集合操作接口&lt;/li&gt;&#xA;&lt;li&gt;ZSetOperations 有序集合操作接口&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 获取字符串操作接口&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;redisTemplate.&lt;span style=&#34;color:#a6e22e&#34;&gt;opsForValue&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 获取哈希操作接口&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;redisTemplate.&lt;span style=&#34;color:#a6e22e&#34;&gt;opsForHash&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 获取列表（链表）操作接口&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;redisTemplate.&lt;span style=&#34;color:#a6e22e&#34;&gt;opsForList&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 获取集合操作接口&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;redisTemplate.&lt;span style=&#34;color:#a6e22e&#34;&gt;opsForSet&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 获取有序集合操作接口&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;redisTemplate.&lt;span style=&#34;color:#a6e22e&#34;&gt;opsForZSet&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;sessioncallback-和-rediscallback-接口&#34;&gt;&#xA;  SessionCallback 和 RedisCallback 接口&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#sessioncallback-%e5%92%8c-rediscallback-%e6%8e%a5%e5%8f%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;redis事务&#34;&gt;&#xA;  Redis事务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#redis%e4%ba%8b%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;使用-redis-流水线&#34;&gt;&#xA;  使用 Redis 流水线&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bd%bf%e7%94%a8-redis-%e6%b5%81%e6%b0%b4%e7%ba%bf&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在默认的情况下，Redis客户端把命令逐条发送到Redis服务器，这样做显然性能不高。在关系数据库中我们可以批量运行语句，也就是只有需要运行SQL语句时，才一次性地发送所有SQL语句去运行，这样性能就提高了许多。类似地，Redis也可以批量执行命令，这便是流水线(pipeline)技术，在很多情况下并不是Redis性能不佳，而是网络传输的速度慢造成瓶颈，使用流水线技术可以在需要执行很多命令时大幅度地提升Redis的性能&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;使用-redis发布--订阅&#34;&gt;&#xA;  使用 Redis发布 / 订阅&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bd%bf%e7%94%a8-redis%e5%8f%91%e5%b8%83--%e8%ae%a2%e9%98%85&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;使用-lua-脚本&#34;&gt;&#xA;  使用 Lua 脚本&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bd%bf%e7%94%a8-lua-%e8%84%9a%e6%9c%ac&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在Redis中运行Lua脚本具备原子性，且Lua脚本具备更加强大的计算能力，在高并发环境中需要保证数据一致性时，使用Lua脚本方案比使用Redis自身提供的事务更好&lt;/li&gt;&#xA;&lt;li&gt;Redis提供了两种运行Lua的方法&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一种是直接发送Lua脚本到Redis服务器运行&lt;/li&gt;&#xA;&lt;li&gt;另一种是先把Lua脚本发送给Redis服务器，Redis服务器对Lua脚本进行缓存，然后返回一个32位的SHA1编码，之后只需要发送SHA1和相关参数给Redis服务器便可以运行了。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;这里需要解释为什么会存在通过32位编码运行Lua脚本的方法。如果Lua脚本很长，那么就需要通过网络传递脚本给Redis服务器运行，而现实的情况是网络的传递速度往往跟不上Redis的运行速度，因此网络速度就会成为Redis运行的瓶颈。如果只传递32位编码和参数，那么需要通过网络传输的消息就少了许多，这样就可以提高系统的性能&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;使用-spring-缓存注解操作-redis&#34;&gt;&#xA;  使用 Spring 缓存注解操作 Redis&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bd%bf%e7%94%a8-spring-%e7%bc%93%e5%ad%98%e6%b3%a8%e8%a7%a3%e6%93%8d%e4%bd%9c-redis&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;@CachePut&lt;/code&gt; 将方法返回的结果存储到缓存中&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;@Cacheable&lt;/code&gt; 先通过定义的键从缓存中查询，如果可以查询到数据则返回，否则运行该方法，返回数据，并且将返回的结果存储到缓存中&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;@CacheEvict&lt;/code&gt; 通过定义的键移除缓存&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;缓存注解自调用失效问题&#34;&gt;&#xA;  缓存注解自调用失效问题&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bc%93%e5%ad%98%e6%b3%a8%e8%a7%a3%e8%87%aa%e8%b0%83%e7%94%a8%e5%a4%b1%e6%95%88%e9%97%ae%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;自定义缓存管理器&#34;&gt;&#xA;  自定义缓存管理器&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%ae%9a%e4%b9%89%e7%bc%93%e5%ad%98%e7%ae%a1%e7%90%86%e5%99%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h2 id=&#34;异步线程池&#34;&gt;&#xA;  异步线程池&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bc%82%e6%ad%a5%e7%ba%bf%e7%a8%8b%e6%b1%a0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;异步消息-rabbitmq&#34;&gt;&#xA;  异步消息 RabbitMQ&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bc%82%e6%ad%a5%e6%b6%88%e6%81%af-rabbitmq&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;定时任务&#34;&gt;&#xA;  定时任务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%9a%e6%97%b6%e4%bb%bb%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;spring-boot-monitor&#34;&gt;&#xA;  Spring-boot-monitor&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring-boot-monitor&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;好久没维护了，服务有上下文资源会请求不到，这。。。。。。。&lt;/li&gt;&#xA;&lt;li&gt;单机监控SpringBoot应用指标&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.pomit.cn/SpringBootMonitor/#/&#34;&gt;官网&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Spring Cloud</title>
      <link>/post/computer-science/distributed-system/spring-cloud/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/distributed-system/spring-cloud/</guid>
      <description>&lt;h1 id=&#34;spring-cloud&#34;&gt;&#xA;  Spring Cloud&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring-cloud&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;服务注册与发现&#34;&gt;&#xA;  服务注册与发现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9c%8d%e5%8a%a1%e6%b3%a8%e5%86%8c%e4%b8%8e%e5%8f%91%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;eureka&#34;&gt;&#xA;  Eureka&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#eureka&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Netflix 开源的服务注册中心，采用 AP 架构（高可用性），通过心跳机制检测服务状态&lt;/li&gt;&#xA;&lt;li&gt;包含 Eureka Server（注册中心）和 Eureka Client（服务提供者/消费者）&lt;/li&gt;&#xA;&lt;li&gt;注：Eureka 2.x 已停止维护，建议新项目使用 Nacos&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;nacos&#34;&gt;&#xA;  Nacos&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#nacos&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Spring Cloud Alibaba 的核心组件，兼具服务注册中心和配置中心功能，支持 CP/AP 模式切换&lt;/li&gt;&#xA;&lt;li&gt;提供动态服务发现、健康检查、配置管理等功能，适用于云原生场景&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;服务调用与负载均衡&#34;&gt;&#xA;  服务调用与负载均衡&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9c%8d%e5%8a%a1%e8%b0%83%e7%94%a8%e4%b8%8e%e8%b4%9f%e8%bd%bd%e5%9d%87%e8%a1%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;feign&#34;&gt;&#xA;  Feign&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#feign&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;声明式的 REST 客户端，通过动态代理简化服务间 HTTP 调用，整合了 Ribbon 实现负载均衡&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;ribbon&#34;&gt;&#xA;  Ribbon&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#ribbon&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;客户端负载均衡组件，支持轮询、随机、权重等算法，需配合 Eureka/Nacos 使用&lt;/li&gt;&#xA;&lt;li&gt;注：Ribbon 已进入维护阶段，Spring Cloud LoadBalancer 是新一代替代方案&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;dubbo&#34;&gt;&#xA;  Dubbo&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#dubbo&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Spring Cloud Alibaba 支持的 RPC 框架，适用于高性能服务调用，替代 Feign+Ribbon 的组合&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;服务容错与熔断&#34;&gt;&#xA;  服务容错与熔断&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9c%8d%e5%8a%a1%e5%ae%b9%e9%94%99%e4%b8%8e%e7%86%94%e6%96%ad&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;hystrix&#34;&gt;&#xA;  Hystrix&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#hystrix&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Netflix 开源的熔断器，通过熔断、降级、隔离机制防止服务雪崩&lt;/li&gt;&#xA;&lt;li&gt;注：Hystrix 已停止维护，推荐使用 Sentinel&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;sentinel&#34;&gt;&#xA;  Sentinel&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#sentinel&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Alibaba 开源的流量控制组件，支持熔断、限流、系统自适应保护，提供实时监控&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;服务网关&#34;&gt;&#xA;  服务网关&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9c%8d%e5%8a%a1%e7%bd%91%e5%85%b3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;zuul&#34;&gt;&#xA;  Zuul&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#zuul&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Netflix 的 API 网关，负责路由、过滤、负载均衡，但性能较低&lt;/li&gt;&#xA;&lt;li&gt;注：Zuul 1.x 已停止维护，Zuul 2.x 未集成到 Spring Cloud&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;spring-cloud-gateway&#34;&gt;&#xA;  Spring Cloud Gateway&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring-cloud-gateway&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;基于 Reactor 的高性能网关，支持动态路由、限流、集成 Sentinel&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;配置中心&#34;&gt;&#xA;  配置中心&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%85%8d%e7%bd%ae%e4%b8%ad%e5%bf%83&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;spring-cloud-config&#34;&gt;&#xA;  Spring Cloud Config&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring-cloud-config&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;集中化管理配置，支持 Git、本地存储等，但需配合 Bus 实现动态刷新&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;nacos-config&#34;&gt;&#xA;  Nacos Config&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#nacos-config&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;与 &lt;code&gt;Nacos&lt;/code&gt; 注册中心无缝集成，支持配置动态更新和版本管理&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;消息总线与事件驱动&#34;&gt;&#xA;  消息总线与事件驱动&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b6%88%e6%81%af%e6%80%bb%e7%ba%bf%e4%b8%8e%e4%ba%8b%e4%bb%b6%e9%a9%b1%e5%8a%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;spring-cloud-bus&#34;&gt;&#xA;  Spring Cloud Bus&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring-cloud-bus&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通过消息队列（如 RabbitMQ、Kafka）广播配置变更，实现配置热更新&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;spring-cloud-stream&#34;&gt;&#xA;  Spring Cloud Stream&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring-cloud-stream&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;统一消息中间件抽象层，支持 Kafka、RocketMQ 等&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;分布式链路追踪&#34;&gt;&#xA;  分布式链路追踪&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e5%b8%83%e5%bc%8f%e9%93%be%e8%b7%af%e8%bf%bd%e8%b8%aa&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;sleuth--zipkin&#34;&gt;&#xA;  Sleuth + Zipkin&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#sleuth--zipkin&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;追踪微服务调用链路，生成请求依赖图，便于故障排查&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;skywalking&#34;&gt;&#xA;  SkyWalking&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#skywalking&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;更强大的 APM 工具，支持分布式追踪、性能监控&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;分布式事务&#34;&gt;&#xA;  分布式事务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e5%b8%83%e5%bc%8f%e4%ba%8b%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;seata&#34;&gt;&#xA;  &lt;code&gt;Seata&lt;/code&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#seata&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Alibaba 开源的分布式事务解决方案，支持 AT、TCC、SAGA 模式&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;其他组件&#34;&gt;&#xA;  其他组件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%b6%e4%bb%96%e7%bb%84%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;spring-cloud-security&#34;&gt;&#xA;  Spring Cloud Security&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring-cloud-security&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;OAuth2、JWT 等安全认证&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;spring-cloud-openfeign&#34;&gt;&#xA;  Spring Cloud OpenFeign&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring-cloud-openfeign&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Feign 的增强版，支持 Spring MVC 注解&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;reference&#34;&gt;&#xA;  Reference&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Spring Cloud Alibaba</title>
      <link>/post/computer-science/distributed-system/spring-cloud-alibaba/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/distributed-system/spring-cloud-alibaba/</guid>
      <description>&lt;h1 id=&#34;spring-cloud-alibaba&#34;&gt;&#xA;  Spring Cloud Alibaba&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring-cloud-alibaba&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sca.aliyun.com/?spm=5176.29160081.0.0.74805c72yMce7l&#34;&gt;Spring Cloud Alibaba&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;spring-cloud-vs-spring-cloud-alibaba&#34;&gt;&#xA;  Spring Cloud VS Spring Cloud Alibaba&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring-cloud-vs-spring-cloud-alibaba&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/619919250/answer/49672760478&#34;&gt;现在学spring cloud alibaba 还是spring cloud?&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;以下是 &lt;strong&gt;Spring Cloud&lt;/strong&gt; 和 &lt;strong&gt;Spring Cloud Alibaba&lt;/strong&gt; 的详细对比，从技术定位、核心组件、适用场景等维度综合分析，并结合实际应用场景提供选型建议：&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;strong&gt;功能&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;strong&gt;Spring Cloud&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;strong&gt;Spring Cloud Alibaba&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;strong&gt;优势对比&lt;/strong&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;服务注册与发现&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Eureka（AP，已停更）&lt;/td&gt;&#xA;          &lt;td&gt;Nacos（AP/CP 双模，高性能）&lt;/td&gt;&#xA;          &lt;td&gt;Nacos 支持动态配置管理，性能提升 50%+&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;配置中心&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Config Server（基于 Git）&lt;/td&gt;&#xA;          &lt;td&gt;Nacos Config（可视化界面）&lt;/td&gt;&#xA;          &lt;td&gt;Nacos 支持实时推送和多环境配置&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;流量控制与熔断&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Hystrix（维护模式）&lt;/td&gt;&#xA;          &lt;td&gt;Sentinel（动态规则、实时监控）&lt;/td&gt;&#xA;          &lt;td&gt;Sentinel 支持精细化流量控制和系统保护&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;分布式事务&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;无官方方案（依赖第三方）&lt;/td&gt;&#xA;          &lt;td&gt;Seata（原生集成 AT/TCC 模式）&lt;/td&gt;&#xA;          &lt;td&gt;Seata 简化分布式事务开发&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;消息队列&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;无（依赖 RabbitMQ）&lt;/td&gt;&#xA;          &lt;td&gt;RocketMQ（高吞吐、事务消息）&lt;/td&gt;&#xA;          &lt;td&gt;RocketMQ 适合高并发和削峰填谷场景&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;</description>
    </item>
    <item>
      <title>SQL</title>
      <link>/post/computer-science/database/sql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/database/sql/</guid>
      <description>&lt;h1 id=&#34;sql&#34;&gt;&#xA;  sql&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#sql&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;2502-设计内存分配器&#34;&gt;&#xA;  2502 设计内存分配器&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2502-%e8%ae%be%e8%ae%a1%e5%86%85%e5%ad%98%e5%88%86%e9%85%8d%e5%99%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;-175-组合两个表&#34;&gt;&#xA;  ✅ 175 组合两个表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-175-%e7%bb%84%e5%90%88%e4%b8%a4%e4%b8%aa%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.cn/problems/combine-two-tables/&#34;&gt;175. 组合两个表&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;需要展示的字段&#xA;&lt;ul&gt;&#xA;&lt;li&gt;姓 LastName&lt;/li&gt;&#xA;&lt;li&gt;名 FirstName&lt;/li&gt;&#xA;&lt;li&gt;城市 City&lt;/li&gt;&#xA;&lt;li&gt;州 State&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;如果 &lt;code&gt;personId&lt;/code&gt; 的地址不再 &lt;code&gt;Address&lt;/code&gt; 表中，则报告为 &lt;code&gt;null&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用左连接&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; FirstName, LastName, City, &lt;span style=&#34;color:#66d9ef&#34;&gt;State&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; Person&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;join&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;on&lt;/span&gt; Person.PersonId &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Address.PersonId;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;176-第二高的薪水&#34;&gt;&#xA;  176 第二高的薪水&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#176-%e7%ac%ac%e4%ba%8c%e9%ab%98%e7%9a%84%e8%96%aa%e6%b0%b4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.cn/problems/second-highest-salary/description/&#34;&gt;176. 第二高的薪水&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-mysql&#34; data-lang=&#34;mysql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Create&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;table&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;If&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Not&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Exists&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Employee&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    id     &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    salary &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Truncate &lt;span style=&#34;color:#66d9ef&#34;&gt;table&lt;/span&gt; Employee;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;insert&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;into&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Employee&lt;/span&gt; (id, salary)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;values&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;100&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;insert&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;into&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Employee&lt;/span&gt; (id, salary)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;values&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;200&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;insert&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;into&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Employee&lt;/span&gt; (id, salary)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;values&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;3&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;300&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;insert&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;into&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Employee&lt;/span&gt; (id, salary)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;values&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;4&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;400&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;insert&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;into&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Employee&lt;/span&gt; (id, salary)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;values&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;5&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;500&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;insert&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;into&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Employee&lt;/span&gt; (id, salary)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;values&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;6&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;600&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;insert&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;into&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Employee&lt;/span&gt; (id, salary)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;values&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;7&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;700&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Employee 表：&#xA;+-------------+------+&#xA;| Column Name | Type |&#xA;+-------------+------+&#xA;| id          | int  |&#xA;| salary      | int  |&#xA;+-------------+------+&#xA;id 是这个表的主键。&#xA;表的每一行包含员工的工资信息。&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-mysql&#34; data-lang=&#34;mysql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;distinct&lt;/span&gt; Salary &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; SecondHighestSalary&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; Employee&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;order&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;by&lt;/span&gt; Salary &lt;span style=&#34;color:#66d9ef&#34;&gt;desc&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;limit&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; offset &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然而，如果没有第 2 高的薪资，即表里可能只有一条记录，这个解答会被评测为 &amp;lsquo;Wrong Answer&amp;rsquo; 。为了克服这个问题，我们可以将其作为临时表。&lt;/p&gt;</description>
    </item>
    <item>
      <title>table tennis</title>
      <link>/post/sports/table-tennis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/sports/table-tennis/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1EcgqzCEmu&#34;&gt;张继科（日）原片&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>vue</title>
      <link>/post/computer-science/front-end/vue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/front-end/vue/</guid>
      <description>&lt;h1 id=&#34;vue&#34;&gt;&#xA;  vue&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#vue&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://vuejs.org/&#34;&gt;vuejs.org&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://cn.vuejs.org/guide/quick-start&#34;&gt;文档&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.runoob.com/vue2/vue-tutorial.html&#34;&gt;vue2 教程&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Vue 2.0 在 2023 年 12 月 31 日停止更新&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.runoob.com/vue3/vue3-tutorial.html&#34;&gt;vue3 教程&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;快速上手&#34;&gt;&#xA;  快速上手&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bf%ab%e9%80%9f%e4%b8%8a%e6%89%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;安装 &lt;code&gt;node.js&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用 brew 安装 &lt;code&gt;brew install node&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;检查 node 是否安装成功&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;node -v&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;npm -v&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;创建 vue 项目 &lt;code&gt;npm create vue@latest&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;cd my-vue-project&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;修改镜像源&#xA;&lt;ul&gt;&#xA;&lt;li&gt;reference&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/shenhuanjie/p/18428209/npm-yarn-pnpm-latest-domestic-mirror-portion-source-setting-and-common-problems-solve-zyb4mp&#34;&gt;npm、yarn、pnpm 最新国内镜像源设置和常见问题解决&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;npm install&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;npm run dev&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Local &lt;code&gt;http://localhost:5173&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Vue DevTools &lt;code&gt;http://localhost:5173/__devtools__/&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;reference&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://tutorials.tinkink.net/zh-hans/mac/install-nodejs.html&#34;&gt;如何在 macOS 上安装 Node.js&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>xxl job</title>
      <link>/post/computer-science/java/xxl-job/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/java/xxl-job/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/xuxueli/xxl-job?tab=readme-ov-file&#34;&gt;xuxueli/xxl-job&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.xuxueli.com/xxl-job/&#34;&gt;文档&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;什么情况下使用-springboot自带的schedule什么时候应该使用-xxl-job&#34;&gt;&#xA;  什么情况下使用 springboot自带的schedule，什么时候应该使用 xxl job&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%80%e4%b9%88%e6%83%85%e5%86%b5%e4%b8%8b%e4%bd%bf%e7%94%a8-springboot%e8%87%aa%e5%b8%a6%e7%9a%84schedule%e4%bb%80%e4%b9%88%e6%97%b6%e5%80%99%e5%ba%94%e8%af%a5%e4%bd%bf%e7%94%a8-xxl-job&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;在分布式系统和定时任务调度场景中，选择 Spring Boot 自带的 &lt;code&gt;@Scheduled&lt;/code&gt; 还是分布式任务调度框架（如 XXL-JOB）取决于业务需求和技术架构。以下是详细的对比和决策建议：&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;1-spring-boot-自带的&#34;&gt;&#xA;  &lt;strong&gt;1. Spring Boot 自带的 &lt;code&gt;@Scheduled&lt;/code&gt;&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-spring-boot-%e8%87%aa%e5%b8%a6%e7%9a%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;适用场景&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;单机环境&lt;/strong&gt;：任务只需在单个节点运行，无需分布式协调。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;简单任务&lt;/strong&gt;：轻量级、短时间执行的定时任务（如本地缓存刷新、日志清理）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;开发效率&lt;/strong&gt;：快速集成，无需额外部署中间件。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;强一致性要求低&lt;/strong&gt;：任务重复执行或偶尔遗漏对业务影响较小（如非关键统计报表）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;优势&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;零依赖，与 Spring 生态无缝集成。&lt;/li&gt;&#xA;&lt;li&gt;注解驱动（&lt;code&gt;@Scheduled&lt;/code&gt;），配置简单（支持 cron 表达式、固定速率/延迟）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;局限性&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;无分布式协调&lt;/strong&gt;：多实例部署时任务会重复执行（需自行加锁，如 &lt;code&gt;@SchedulerLock&lt;/code&gt;）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;无可视化管控&lt;/strong&gt;：任务状态、日志需自行实现。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;缺乏弹性调度&lt;/strong&gt;：不支持动态调整、故障转移、分片等高级特性。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Scheduled&lt;/span&gt;(cron &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0 0/5 * * * ?&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;refreshCache&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 单机任务逻辑&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;h3 id=&#34;2-xxl-job&#34;&gt;&#xA;  &lt;strong&gt;2. XXL-JOB&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-xxl-job&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;适用场景&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;分布式环境&lt;/strong&gt;：需要任务在多个节点间协调（如唯一执行、分片处理）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;复杂任务&lt;/strong&gt;：长耗时任务（需超时控制）、需动态启停或修改调度策略。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;高可靠性&lt;/strong&gt;：要求任务失败重试、故障自动转移、报警通知。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;运维需求&lt;/strong&gt;：需要可视化任务管理、执行日志追踪、用户权限控制。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;优势&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;分布式调度&lt;/strong&gt;：通过中心化调度器（如数据库、Redis）避免任务重复执行。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;任务分片&lt;/strong&gt;：将大数据任务拆分到多个节点并行处理（如批量处理百万条数据）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;运维友好&lt;/strong&gt;：提供管理界面，支持动态配置、日志查看、报警推送。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;扩展性&lt;/strong&gt;：支持 GLUE 脚本（动态修改代码）、跨语言任务（通过 HTTP 调用）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;局限性&lt;/strong&gt;：&lt;/p&gt;</description>
    </item>
    <item>
      <title>不同消息队列消息写入方式对比</title>
      <link>/post/computer-science/llm/2025-03-30-4-%E4%B8%8D%E5%90%8C%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E6%B6%88%E6%81%AF%E5%86%99%E5%85%A5%E6%96%B9%E5%BC%8F%E5%AF%B9%E6%AF%94/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/llm/2025-03-30-4-%E4%B8%8D%E5%90%8C%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E6%B6%88%E6%81%AF%E5%86%99%E5%85%A5%E6%96%B9%E5%BC%8F%E5%AF%B9%E6%AF%94/</guid>
      <description>&lt;h1 id=&#34;不同消息队列消息写入方式对比&#34;&gt;&#xA;  不同消息队列消息写入方式对比&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%8d%e5%90%8c%e6%b6%88%e6%81%af%e9%98%9f%e5%88%97%e6%b6%88%e6%81%af%e5%86%99%e5%85%a5%e6%96%b9%e5%bc%8f%e5%af%b9%e6%af%94&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;以下是主流消息队列（Kafka、RocketMQ、RabbitMQ、Pulsar、ActiveMQ）在消息写入方式上的对比，结合性能、可靠性和适用场景进行综合分析：&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;1-kafka&#34;&gt;&#xA;  1. &lt;strong&gt;Kafka&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-kafka&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;写入方式&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;顺序追加写入&lt;/strong&gt;：消息以追加（Append-only）方式写入分区日志文件，利用磁盘顺序I/O的高性能特性&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;15&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;28&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;批量发送&lt;/strong&gt;：生产者（Producer）将消息累积到批次（如1MB或100ms阈值）后批量发送，减少网络和磁盘I/O次数&lt;a href=&#34;@ref&#34;&gt;28&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;异步刷盘&lt;/strong&gt;：默认异步刷盘（依赖页缓存），通过参数可配置同步刷盘（牺牲性能换可靠性）&lt;a href=&#34;@ref&#34;&gt;28&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;高吞吐（10万级/秒），适合日志、大数据场景&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;15&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;不支持延迟消息，仅保证分区内有序&lt;a href=&#34;@ref&#34;&gt;16&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;28&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;2-rocketmq&#34;&gt;&#xA;  2. &lt;strong&gt;RocketMQ&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-rocketmq&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;写入方式&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;顺序写+索引&lt;/strong&gt;：消息追加到CommitLog文件（顺序写），同时构建索引文件（ConsumeQueue）加速查询&lt;a href=&#34;@ref&#34;&gt;42&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;同步/异步刷盘&lt;/strong&gt;：支持同步刷盘（强一致性）和异步刷盘（高性能）&lt;a href=&#34;@ref&#34;&gt;42&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;43&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;事务消息&lt;/strong&gt;：通过“半消息”机制实现分布式事务，先暂存消息，本地事务提交后再确认写入&lt;a href=&#34;@ref&#34;&gt;42&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;兼顾高吞吐（10万级/秒）和功能完备性（延迟消息、事务支持）&lt;a href=&#34;@ref&#34;&gt;16&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;28&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;适合电商、金融等业务场景&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;42&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;3-rabbitmq&#34;&gt;&#xA;  3. &lt;strong&gt;RabbitMQ&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-rabbitmq&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;写入方式&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;内存+磁盘混合&lt;/strong&gt;：默认优先写入内存，通过持久化队列（Durable Queue）将消息同步到磁盘&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;28&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Exchange路由&lt;/strong&gt;：消息通过Exchange根据路由规则（Direct/Topic/Fanout）分发到队列&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;16&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;实时性高（微秒级延迟），但吞吐量较低（万级/秒）&lt;a href=&#34;@ref&#34;&gt;28&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;支持复杂路由和消息确认机制，适合中小规模业务&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;16&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;4-pulsar&#34;&gt;&#xA;  4. &lt;strong&gt;Pulsar&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4-pulsar&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;写入方式&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;分层存储&lt;/strong&gt;：消息先写入Broker的内存层，再异步持久化到BookKeeper集群（计算与存储分离）&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;16&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;分片（Segment）存储&lt;/strong&gt;：Topic分区划分为Segment，分散存储提高扩展性&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;支持秒级延迟消息和多租户，适合云原生和异地容灾场景&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;16&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;吞吐量接近Kafka，但架构更复杂&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;5-activemq&#34;&gt;&#xA;  5. &lt;strong&gt;ActiveMQ&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#5-activemq&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;写入方式&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;内存/KahaDB/JDBC&lt;/strong&gt;：默认KahaDB（基于日志的存储），支持JDBC持久化到数据库。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;同步刷盘可选&lt;/strong&gt;：通过配置选择是否同步刷盘。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;功能全面但吞吐量最低（万级/秒），适合传统企业应用&lt;a href=&#34;@ref&#34;&gt;28&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;社区活跃度低，逐渐被替代&lt;a href=&#34;@ref&#34;&gt;28&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;对比总结&#34;&gt;&#xA;  &lt;strong&gt;对比总结&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%af%b9%e6%af%94%e6%80%bb%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;特性&lt;/th&gt;&#xA;          &lt;th&gt;Kafka&lt;/th&gt;&#xA;          &lt;th&gt;RocketMQ&lt;/th&gt;&#xA;          &lt;th&gt;RabbitMQ&lt;/th&gt;&#xA;          &lt;th&gt;Pulsar&lt;/th&gt;&#xA;          &lt;th&gt;ActiveMQ&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;写入性能&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;最高（顺序I/O+批量）&lt;/td&gt;&#xA;          &lt;td&gt;高（顺序写+索引）&lt;/td&gt;&#xA;          &lt;td&gt;低（内存优先）&lt;/td&gt;&#xA;          &lt;td&gt;高（分层存储）&lt;/td&gt;&#xA;          &lt;td&gt;最低&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;可靠性&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;异步刷盘可能丢数据&lt;/td&gt;&#xA;          &lt;td&gt;支持同步刷盘&lt;/td&gt;&#xA;          &lt;td&gt;依赖持久化配置&lt;/td&gt;&#xA;          &lt;td&gt;高（BookKeeper）&lt;/td&gt;&#xA;          &lt;td&gt;依赖配置&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;延迟消息&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;不支持&lt;/td&gt;&#xA;          &lt;td&gt;支持&lt;/td&gt;&#xA;          &lt;td&gt;支持（插件）&lt;/td&gt;&#xA;          &lt;td&gt;支持秒级&lt;/td&gt;&#xA;          &lt;td&gt;支持&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;适用场景&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;日志/大数据&lt;/td&gt;&#xA;          &lt;td&gt;电商/金融&lt;/td&gt;&#xA;          &lt;td&gt;中小规模业务&lt;/td&gt;&#xA;          &lt;td&gt;云原生/异地容灾&lt;/td&gt;&#xA;          &lt;td&gt;传统企业应用&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;&lt;strong&gt;参考资料&lt;/strong&gt;：&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;15&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;16&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;28&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;42&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>分区表的索引如何创建，请以postgresql举例</title>
      <link>/post/computer-science/llm/2025-03-30-1-%E5%88%86%E5%8C%BA%E8%A1%A8%E7%9A%84%E7%B4%A2%E5%BC%95%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA-%E8%AF%B7%E4%BB%A5postgresql%E4%B8%BE%E4%BE%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/llm/2025-03-30-1-%E5%88%86%E5%8C%BA%E8%A1%A8%E7%9A%84%E7%B4%A2%E5%BC%95%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA-%E8%AF%B7%E4%BB%A5postgresql%E4%B8%BE%E4%BE%8B/</guid>
      <description>&lt;h1 id=&#34;分区表的索引如何创建请以postgresql举例&#34;&gt;&#xA;  分区表的索引如何创建，请以postgresql举例&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e5%8c%ba%e8%a1%a8%e7%9a%84%e7%b4%a2%e5%bc%95%e5%a6%82%e4%bd%95%e5%88%9b%e5%bb%ba%e8%af%b7%e4%bb%a5postgresql%e4%b8%be%e4%be%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h1 id=&#34;postgresql分区表索引创建指南&#34;&gt;&#xA;  PostgreSQL分区表索引创建指南&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#postgresql%e5%88%86%e5%8c%ba%e8%a1%a8%e7%b4%a2%e5%bc%95%e5%88%9b%e5%bb%ba%e6%8c%87%e5%8d%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;PostgreSQL中分区表索引的创建方法与普通表有所不同，需要特别注意分区表的特性。以下是详细的创建方法和示例：&lt;/p&gt;&#xA;&lt;h2 id=&#34;一基本索引创建方法&#34;&gt;&#xA;  一、基本索引创建方法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e5%9f%ba%e6%9c%ac%e7%b4%a2%e5%bc%95%e5%88%9b%e5%bb%ba%e6%96%b9%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1-自动分区索引postgresql-11&#34;&gt;&#xA;  1. 自动分区索引（PostgreSQL 11+）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e8%87%aa%e5%8a%a8%e5%88%86%e5%8c%ba%e7%b4%a2%e5%bc%95postgresql-11&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;从PostgreSQL 11开始，可以直接在父表上创建索引，系统会自动为所有子分区创建对应的索引&lt;a href=&#34;@ref&#34;&gt;1&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;2&lt;/a&gt;&lt;a href=&#34;@ref&#34;&gt;47&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- 创建分区表&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; sales (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    id SERIAL &lt;span style=&#34;color:#66d9ef&#34;&gt;PRIMARY&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;KEY&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    product VARCHAR,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sale_date DATE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;) PARTITION &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; RANGE (sale_date);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- 创建子分区&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; sales_2021_01_01 PARTITION &lt;span style=&#34;color:#66d9ef&#34;&gt;OF&lt;/span&gt; sales &lt;span style=&#34;color:#66d9ef&#34;&gt;FOR&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;VALUES&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2021-01-01&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;TO&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2021-01-02&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; sales_2021_01_02 PARTITION &lt;span style=&#34;color:#66d9ef&#34;&gt;OF&lt;/span&gt; sales &lt;span style=&#34;color:#66d9ef&#34;&gt;FOR&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;VALUES&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2021-01-02&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;TO&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2021-01-03&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- 在父表上创建索引，会自动应用到所有分区&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INDEX&lt;/span&gt; idx_product &lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt; sales (product);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-手动创建分区索引postgresql-10及以下&#34;&gt;&#xA;  2. 手动创建分区索引（PostgreSQL 10及以下）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e6%89%8b%e5%8a%a8%e5%88%9b%e5%bb%ba%e5%88%86%e5%8c%ba%e7%b4%a2%e5%bc%95postgresql-10%e5%8f%8a%e4%bb%a5%e4%b8%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;在PostgreSQL 10及以下版本，需要为每个分区单独创建索引：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- 为每个分区单独创建索引&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INDEX&lt;/span&gt; sales_2021_01_01_product_idx &lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt; sales_2021_01_01 (product);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INDEX&lt;/span&gt; sales_2021_01_02_product_idx &lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt; sales_2021_01_02 (product);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;二特殊索引类型&#34;&gt;&#xA;  二、特殊索引类型&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e7%89%b9%e6%ae%8a%e7%b4%a2%e5%bc%95%e7%b1%bb%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1-唯一索引和主键&#34;&gt;&#xA;  1. 唯一索引和主键&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e5%94%af%e4%b8%80%e7%b4%a2%e5%bc%95%e5%92%8c%e4%b8%bb%e9%94%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;PostgreSQL 11+支持在分区表上创建唯一约束和主键，但必须包含分区键&lt;a href=&#34;@ref&#34;&gt;47&lt;/a&gt;：&lt;/p&gt;</description>
    </item>
    <item>
      <title>剑指offer题目对应</title>
      <link>/post/computer-science/algorithm/%E5%89%91%E6%8C%87offer%E8%BF%99%E6%9C%AC%E4%B9%A6%E4%B8%AD%E6%AF%8F%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98%E5%AF%B9%E5%BA%94leetcode%E7%9A%84%E9%A2%98%E7%9B%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/algorithm/%E5%89%91%E6%8C%87offer%E8%BF%99%E6%9C%AC%E4%B9%A6%E4%B8%AD%E6%AF%8F%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98%E5%AF%B9%E5%BA%94leetcode%E7%9A%84%E9%A2%98%E7%9B%AE/</guid>
      <description>&lt;h2 id=&#34;剑指offer这本书中每一道面试题对应leetcode的题目&#34;&gt;&#xA;  剑指offer这本书中每一道面试题对应leetcode的题目&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%89%91%e6%8c%87offer%e8%bf%99%e6%9c%ac%e4%b9%a6%e4%b8%ad%e6%af%8f%e4%b8%80%e9%81%93%e9%9d%a2%e8%af%95%e9%a2%98%e5%af%b9%e5%ba%94leetcode%e7%9a%84%e9%a2%98%e7%9b%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;《剑指Offer》是一本经典的编程面试书籍，其中包含了许多高质量的编程题目。很多题目与LeetCode上的题目有对应关系。以下是一些《剑指Offer》中的题目及其在LeetCode上的对应题目：&lt;/p&gt;&#xA;&lt;h3 id=&#34;1-数组中重复的数字&#34;&gt;&#xA;  1. &lt;strong&gt;数组中重复的数字&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e6%95%b0%e7%bb%84%e4%b8%ad%e9%87%8d%e5%a4%8d%e7%9a%84%e6%95%b0%e5%ad%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：找出数组中重复的数字。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/find-the-duplicate-number/&#34;&gt;287. 寻找重复数&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;2-二维数组中的查找&#34;&gt;&#xA;  2. &lt;strong&gt;二维数组中的查找&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e4%ba%8c%e7%bb%b4%e6%95%b0%e7%bb%84%e4%b8%ad%e7%9a%84%e6%9f%a5%e6%89%be&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：在一个二维数组中查找某个数是否存在。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/search-a-2d-matrix-ii/&#34;&gt;240. 搜索二维矩阵 II&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;3-替换空格&#34;&gt;&#xA;  3. &lt;strong&gt;替换空格&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-%e6%9b%bf%e6%8d%a2%e7%a9%ba%e6%a0%bc&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：将字符串中的空格替换为&amp;quot;%20&amp;quot;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/ti-huan-kong-ge-lcof/&#34;&gt;剑指 Offer 05. 替换空格&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;4-从尾到头打印链表&#34;&gt;&#xA;  4. &lt;strong&gt;从尾到头打印链表&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4-%e4%bb%8e%e5%b0%be%e5%88%b0%e5%a4%b4%e6%89%93%e5%8d%b0%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：从尾到头打印链表。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/&#34;&gt;剑指 Offer 06. 从尾到头打印链表&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;5-重建二叉树&#34;&gt;&#xA;  5. &lt;strong&gt;重建二叉树&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#5-%e9%87%8d%e5%bb%ba%e4%ba%8c%e5%8f%89%e6%a0%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：根据前序遍历和中序遍历的结果重建二叉树。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;&#xA;：&lt;a href=&#34;https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/&#34;&gt;105. 从前序与中序遍历序列构造二叉树&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;6-二叉树的下一个节点&#34;&gt;&#xA;  6. &lt;strong&gt;二叉树的下一个节点&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#6-%e4%ba%8c%e5%8f%89%e6%a0%91%e7%9a%84%e4%b8%8b%e4%b8%80%e4%b8%aa%e8%8a%82%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：给定二叉树中的一个节点，找到中序遍历的下一个节点。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/er-cha-shu-zhong-de-hou-xu-xu-lie-lcof/&#34;&gt;剑指 Offer 08. 二叉树的下一个节点&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;7-用两个栈实现队列&#34;&gt;&#xA;  7. &lt;strong&gt;用两个栈实现队列&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#7-%e7%94%a8%e4%b8%a4%e4%b8%aa%e6%a0%88%e5%ae%9e%e7%8e%b0%e9%98%9f%e5%88%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：用两个栈实现队列。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/implement-queue-using-stacks/&#34;&gt;232. 用栈实现队列&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;8-斐波那契数列&#34;&gt;&#xA;  8. &lt;strong&gt;斐波那契数列&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#8-%e6%96%90%e6%b3%a2%e9%82%a3%e5%a5%91%e6%95%b0%e5%88%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：求斐波那契数列的第n项。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/fibonacci-number/&#34;&gt;509. 斐波那契数&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;9-旋转数组的最小数字&#34;&gt;&#xA;  9. &lt;strong&gt;旋转数组的最小数字&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#9-%e6%97%8b%e8%bd%ac%e6%95%b0%e7%bb%84%e7%9a%84%e6%9c%80%e5%b0%8f%e6%95%b0%e5%ad%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：在一个旋转数组中查找最小的数字。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/find-minimum-in-rotated-sorted-array/&#34;&gt;153. 寻找旋转排序数组中的最小值&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;10-矩阵中的路径&#34;&gt;&#xA;  10. &lt;strong&gt;矩阵中的路径&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#10-%e7%9f%a9%e9%98%b5%e4%b8%ad%e7%9a%84%e8%b7%af%e5%be%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：在矩阵中查找是否存在某条路径。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/word-search/&#34;&gt;79. 单词搜索&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;11-机器人的运动范围&#34;&gt;&#xA;  11. &lt;strong&gt;机器人的运动范围&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#11-%e6%9c%ba%e5%99%a8%e4%ba%ba%e7%9a%84%e8%bf%90%e5%8a%a8%e8%8c%83%e5%9b%b4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：计算机器人能够到达的格子数。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/&#34;&gt;剑指 Offer 13. 机器人的运动范围&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;12-剪绳子&#34;&gt;&#xA;  12. &lt;strong&gt;剪绳子&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#12-%e5%89%aa%e7%bb%b3%e5%ad%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：将绳子剪成若干段，使得乘积最大。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/integer-break/&#34;&gt;343. 整数拆分&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;13-二进制中1的个数&#34;&gt;&#xA;  13. &lt;strong&gt;二进制中1的个数&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#13-%e4%ba%8c%e8%bf%9b%e5%88%b6%e4%b8%ad1%e7%9a%84%e4%b8%aa%e6%95%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：统计一个整数的二进制表示中1的个数。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/number-of-1-bits/&#34;&gt;191. 位1的个数&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;14-数值的整数次方&#34;&gt;&#xA;  14. &lt;strong&gt;数值的整数次方&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#14-%e6%95%b0%e5%80%bc%e7%9a%84%e6%95%b4%e6%95%b0%e6%ac%a1%e6%96%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：实现函数计算数值的整数次方。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/powx-n/&#34;&gt;50. Pow(x, n)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;15-打印从1到最大的n位数&#34;&gt;&#xA;  15. &lt;strong&gt;打印从1到最大的n位数&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#15-%e6%89%93%e5%8d%b0%e4%bb%8e1%e5%88%b0%e6%9c%80%e5%a4%a7%e7%9a%84n%e4%bd%8d%e6%95%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：打印从1到最大的n位数。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/da-yin-cong-1dao-zui-da-de-nwei-shu-lcof/&#34;&gt;剑指 Offer 17. 打印从1到最大的n位数&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;16-删除链表的节点&#34;&gt;&#xA;  16. &lt;strong&gt;删除链表的节点&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#16-%e5%88%a0%e9%99%a4%e9%93%be%e8%a1%a8%e7%9a%84%e8%8a%82%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：在O(1)时间内删除链表节点。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/delete-node-in-a-linked-list/&#34;&gt;237. 删除链表中的节点&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;17-正则表达式匹配&#34;&gt;&#xA;  17. &lt;strong&gt;正则表达式匹配&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#17-%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f%e5%8c%b9%e9%85%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：实现正则表达式匹配。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/regular-expression-matching/&#34;&gt;10. 正则表达式匹配&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;18-表示数值的字符串&#34;&gt;&#xA;  18. &lt;strong&gt;表示数值的字符串&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#18-%e8%a1%a8%e7%a4%ba%e6%95%b0%e5%80%bc%e7%9a%84%e5%ad%97%e7%ac%a6%e4%b8%b2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：判断字符串是否表示数值。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/biao-shi-shu-zhi-de-zi-fu-chuan-lcof/&#34;&gt;剑指 Offer 20. 表示数值的字符串&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;19-调整数组顺序使奇数位于偶数前面&#34;&gt;&#xA;  19. &lt;strong&gt;调整数组顺序使奇数位于偶数前面&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#19-%e8%b0%83%e6%95%b4%e6%95%b0%e7%bb%84%e9%a1%ba%e5%ba%8f%e4%bd%bf%e5%a5%87%e6%95%b0%e4%bd%8d%e4%ba%8e%e5%81%b6%e6%95%b0%e5%89%8d%e9%9d%a2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：调整数组顺序，使奇数位于偶数前面。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/sort-array-by-parity/&#34;&gt;905. 按奇偶排序数组&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;20-链表中倒数第k个节点&#34;&gt;&#xA;  20. &lt;strong&gt;链表中倒数第k个节点&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#20-%e9%93%be%e8%a1%a8%e4%b8%ad%e5%80%92%e6%95%b0%e7%ac%ack%e4%b8%aa%e8%8a%82%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：找到链表中倒数第k个节点。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/&#34;&gt;剑指 Offer 22. 链表中倒数第k个节点&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;21-反转链表&#34;&gt;&#xA;  21. &lt;strong&gt;反转链表&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#21-%e5%8f%8d%e8%bd%ac%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：反转链表。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/reverse-linked-list/&#34;&gt;206. 反转链表&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;22-合并两个排序的链表&#34;&gt;&#xA;  22. &lt;strong&gt;合并两个排序的链表&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#22-%e5%90%88%e5%b9%b6%e4%b8%a4%e4%b8%aa%e6%8e%92%e5%ba%8f%e7%9a%84%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：合并两个排序的链表。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/merge-two-sorted-lists/&#34;&gt;21. 合并两个有序链表&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;23-树的子结构&#34;&gt;&#xA;  23. &lt;strong&gt;树的子结构&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#23-%e6%a0%91%e7%9a%84%e5%ad%90%e7%bb%93%e6%9e%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：判断一棵树是否是另一棵树的子结构。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/shu-de-zi-jie-gou-lcof/&#34;&gt;剑指 Offer 26. 树的子结构&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;24-二叉树的镜像&#34;&gt;&#xA;  24. &lt;strong&gt;二叉树的镜像&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#24-%e4%ba%8c%e5%8f%89%e6%a0%91%e7%9a%84%e9%95%9c%e5%83%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：求二叉树的镜像。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/invert-binary-tree/&#34;&gt;226. 翻转二叉树&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;25-对称的二叉树&#34;&gt;&#xA;  25. &lt;strong&gt;对称的二叉树&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#25-%e5%af%b9%e7%a7%b0%e7%9a%84%e4%ba%8c%e5%8f%89%e6%a0%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：判断一棵二叉树是否是对称的。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/symmetric-tree/&#34;&gt;101. 对称二叉树&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;26-顺时针打印矩阵&#34;&gt;&#xA;  26. &lt;strong&gt;顺时针打印矩阵&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#26-%e9%a1%ba%e6%97%b6%e9%92%88%e6%89%93%e5%8d%b0%e7%9f%a9%e9%98%b5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：顺时针打印矩阵。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/spiral-matrix/&#34;&gt;54. 螺旋矩阵&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;27-包含min函数的栈&#34;&gt;&#xA;  27. &lt;strong&gt;包含min函数的栈&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#27-%e5%8c%85%e5%90%abmin%e5%87%bd%e6%95%b0%e7%9a%84%e6%a0%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：实现一个包含min函数的栈。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/min-stack/&#34;&gt;155. 最小栈&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;28-栈的压入弹出序列&#34;&gt;&#xA;  28. &lt;strong&gt;栈的压入、弹出序列&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#28-%e6%a0%88%e7%9a%84%e5%8e%8b%e5%85%a5%e5%bc%b9%e5%87%ba%e5%ba%8f%e5%88%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：判断一个序列是否是栈的弹出序列。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/validate-stack-sequences/&#34;&gt;946. 验证栈序列&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;29-从上到下打印二叉树&#34;&gt;&#xA;  29. &lt;strong&gt;从上到下打印二叉树&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#29-%e4%bb%8e%e4%b8%8a%e5%88%b0%e4%b8%8b%e6%89%93%e5%8d%b0%e4%ba%8c%e5%8f%89%e6%a0%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：从上到下打印二叉树。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/binary-tree-level-order-traversal/&#34;&gt;102. 二叉树的层序遍历&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;30-二叉搜索树的后序遍历序列&#34;&gt;&#xA;  30. &lt;strong&gt;二叉搜索树的后序遍历序列&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#30-%e4%ba%8c%e5%8f%89%e6%90%9c%e7%b4%a2%e6%a0%91%e7%9a%84%e5%90%8e%e5%ba%8f%e9%81%8d%e5%8e%86%e5%ba%8f%e5%88%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：判断一个序列是否是二叉搜索树的后序遍历序列。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;&#xA;：&lt;a href=&#34;https://leetcode.cn/problems/er-cha-sou-suo-shu-de-hou-xu-bian-li-xu-lie-lcof/&#34;&gt;剑指 Offer 33. 二叉搜索树的后序遍历序列&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;31-二叉树中和为某一值的路径&#34;&gt;&#xA;  31. &lt;strong&gt;二叉树中和为某一值的路径&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#31-%e4%ba%8c%e5%8f%89%e6%a0%91%e4%b8%ad%e5%92%8c%e4%b8%ba%e6%9f%90%e4%b8%80%e5%80%bc%e7%9a%84%e8%b7%af%e5%be%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：找到二叉树中路径和等于某个值的路径。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/path-sum-ii/&#34;&gt;113. 路径总和 II&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;32-复杂链表的复制&#34;&gt;&#xA;  32. &lt;strong&gt;复杂链表的复制&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#32-%e5%a4%8d%e6%9d%82%e9%93%be%e8%a1%a8%e7%9a%84%e5%a4%8d%e5%88%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：复制复杂链表。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/copy-list-with-random-pointer/&#34;&gt;138. 复制带随机指针的链表&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;33-二叉搜索树与双向链表&#34;&gt;&#xA;  33. &lt;strong&gt;二叉搜索树与双向链表&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#33-%e4%ba%8c%e5%8f%89%e6%90%9c%e7%b4%a2%e6%a0%91%e4%b8%8e%e5%8f%8c%e5%90%91%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：将二叉搜索树转换为双向链表。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;&#xA;：&lt;a href=&#34;https://leetcode.cn/problems/convert-binary-search-tree-to-sorted-doubly-linked-list/&#34;&gt;426. 将二叉搜索树转化为排序的双向链表&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;34-序列化二叉树&#34;&gt;&#xA;  34. &lt;strong&gt;序列化二叉树&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#34-%e5%ba%8f%e5%88%97%e5%8c%96%e4%ba%8c%e5%8f%89%e6%a0%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：实现二叉树的序列化和反序列化。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/serialize-and-deserialize-binary-tree/&#34;&gt;297. 二叉树的序列化与反序列化&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;35-字符串的排列&#34;&gt;&#xA;  35. &lt;strong&gt;字符串的排列&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#35-%e5%ad%97%e7%ac%a6%e4%b8%b2%e7%9a%84%e6%8e%92%e5%88%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：输出字符串的所有排列。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/zi-fu-chuan-de-pai-lie-lcof/&#34;&gt;剑指 Offer 38. 字符串的排列&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;36-数组中出现次数超过一半的数字&#34;&gt;&#xA;  36. &lt;strong&gt;数组中出现次数超过一半的数字&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#36-%e6%95%b0%e7%bb%84%e4%b8%ad%e5%87%ba%e7%8e%b0%e6%ac%a1%e6%95%b0%e8%b6%85%e8%bf%87%e4%b8%80%e5%8d%8a%e7%9a%84%e6%95%b0%e5%ad%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：找到数组中出现次数超过一半的数字。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/majority-element/&#34;&gt;169. 多数元素&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;37-最小的k个数&#34;&gt;&#xA;  37. &lt;strong&gt;最小的k个数&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#37-%e6%9c%80%e5%b0%8f%e7%9a%84k%e4%b8%aa%e6%95%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：找到数组中最小的k个数。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/zui-xiao-de-kge-shu-lcof/&#34;&gt;剑指 Offer 40. 最小的k个数&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;38-连续子数组的最大和&#34;&gt;&#xA;  38. &lt;strong&gt;连续子数组的最大和&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#38-%e8%bf%9e%e7%bb%ad%e5%ad%90%e6%95%b0%e7%bb%84%e7%9a%84%e6%9c%80%e5%a4%a7%e5%92%8c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：找到连续子数组的最大和。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/maximum-subarray/&#34;&gt;53. 最大子数组和&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;39-1n整数中1出现的次数&#34;&gt;&#xA;  39. &lt;strong&gt;1～n整数中1出现的次数&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#39-1n%e6%95%b4%e6%95%b0%e4%b8%ad1%e5%87%ba%e7%8e%b0%e7%9a%84%e6%ac%a1%e6%95%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：统计1～n整数中1出现的次数。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/number-of-digit-one/&#34;&gt;233. 数字 1 的个数&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;40-数字序列中某一位的数字&#34;&gt;&#xA;  40. &lt;strong&gt;数字序列中某一位的数字&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#40-%e6%95%b0%e5%ad%97%e5%ba%8f%e5%88%97%e4%b8%ad%e6%9f%90%e4%b8%80%e4%bd%8d%e7%9a%84%e6%95%b0%e5%ad%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：找到数字序列中某一位的数字。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/nth-digit/&#34;&gt;400. 第 N 位数字&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;41-把数组排成最小的数&#34;&gt;&#xA;  41. &lt;strong&gt;把数组排成最小的数&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#41-%e6%8a%8a%e6%95%b0%e7%bb%84%e6%8e%92%e6%88%90%e6%9c%80%e5%b0%8f%e7%9a%84%e6%95%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：把数组排成最小的数。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/ba-shu-zu-pai-cheng-zui-xiao-de-shu-lcof/&#34;&gt;剑指 Offer 45. 把数组排成最小的数&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;42-把数字翻译成字符串&#34;&gt;&#xA;  42. &lt;strong&gt;把数字翻译成字符串&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#42-%e6%8a%8a%e6%95%b0%e5%ad%97%e7%bf%bb%e8%af%91%e6%88%90%e5%ad%97%e7%ac%a6%e4%b8%b2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：把数字翻译成字符串。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/decode-ways/&#34;&gt;91. 解码方法&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;43-礼物的最大价值&#34;&gt;&#xA;  43. &lt;strong&gt;礼物的最大价值&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#43-%e7%a4%bc%e7%89%a9%e7%9a%84%e6%9c%80%e5%a4%a7%e4%bb%b7%e5%80%bc&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：在矩阵中寻找礼物的最大价值。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/li-wu-de-zui-da-jie-zhi-lcof/&#34;&gt;剑指 Offer 47. 礼物的最大价值&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;44-最长不含重复字符的子字符串&#34;&gt;&#xA;  44. &lt;strong&gt;最长不含重复字符的子字符串&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#44-%e6%9c%80%e9%95%bf%e4%b8%8d%e5%90%ab%e9%87%8d%e5%a4%8d%e5%ad%97%e7%ac%a6%e7%9a%84%e5%ad%90%e5%ad%97%e7%ac%a6%e4%b8%b2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：找到最长不含重复字符的子字符串。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/longest-substring-without-repeating-characters/&#34;&gt;3. 无重复字符的最长子串&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;45-丑数&#34;&gt;&#xA;  45. &lt;strong&gt;丑数&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#45-%e4%b8%91%e6%95%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：找到第n个丑数。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/ugly-number-ii/&#34;&gt;264. 丑数 II&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;46-第一个只出现一次的字符&#34;&gt;&#xA;  46. &lt;strong&gt;第一个只出现一次的字符&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#46-%e7%ac%ac%e4%b8%80%e4%b8%aa%e5%8f%aa%e5%87%ba%e7%8e%b0%e4%b8%80%e6%ac%a1%e7%9a%84%e5%ad%97%e7%ac%a6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：找到第一个只出现一次的字符。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/first-unique-character-in-a-string/&#34;&gt;387. 字符串中的第一个唯一字符&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;47-数组中的逆序对&#34;&gt;&#xA;  47. &lt;strong&gt;数组中的逆序对&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#47-%e6%95%b0%e7%bb%84%e4%b8%ad%e7%9a%84%e9%80%86%e5%ba%8f%e5%af%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：统计数组中的逆序对。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/shu-zu-zhong-de-ni-xu-dui-lcof/&#34;&gt;剑指 Offer 51. 数组中的逆序对&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;48-两个链表的第一个公共节点&#34;&gt;&#xA;  48. &lt;strong&gt;两个链表的第一个公共节点&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#48-%e4%b8%a4%e4%b8%aa%e9%93%be%e8%a1%a8%e7%9a%84%e7%ac%ac%e4%b8%80%e4%b8%aa%e5%85%ac%e5%85%b1%e8%8a%82%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：找到两个链表的第一个公共节点。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/intersection-of-two-linked-lists/&#34;&gt;160. 相交链表&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;49-在排序数组中查找数字&#34;&gt;&#xA;  49. &lt;strong&gt;在排序数组中查找数字&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#49-%e5%9c%a8%e6%8e%92%e5%ba%8f%e6%95%b0%e7%bb%84%e4%b8%ad%e6%9f%a5%e6%89%be%e6%95%b0%e5%ad%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：在排序数组中查找某个数字出现的次数。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;&#xA;：&lt;a href=&#34;https://leetcode.cn/problems/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof/&#34;&gt;剑指 Offer 53 - I. 在排序数组中查找数字 I&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;50-0n-1中缺失的数字&#34;&gt;&#xA;  50. &lt;strong&gt;0～n-1中缺失的数字&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#50-0n-1%e4%b8%ad%e7%bc%ba%e5%a4%b1%e7%9a%84%e6%95%b0%e5%ad%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：找到0～n-1中缺失的数字。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/missing-number/&#34;&gt;268. 丢失的数字&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;51-二叉搜索树的第k大节点&#34;&gt;&#xA;  51. &lt;strong&gt;二叉搜索树的第k大节点&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#51-%e4%ba%8c%e5%8f%89%e6%90%9c%e7%b4%a2%e6%a0%91%e7%9a%84%e7%ac%ack%e5%a4%a7%e8%8a%82%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：找到二叉搜索树的第k大节点。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof/&#34;&gt;剑指 Offer 54. 二叉搜索树的第k大节点&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;52-二叉树的深度&#34;&gt;&#xA;  52. &lt;strong&gt;二叉树的深度&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#52-%e4%ba%8c%e5%8f%89%e6%a0%91%e7%9a%84%e6%b7%b1%e5%ba%a6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：求二叉树的深度。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/maximum-depth-of-binary-tree/&#34;&gt;104. 二叉树的最大深度&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;53-平衡二叉树&#34;&gt;&#xA;  53. &lt;strong&gt;平衡二叉树&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#53-%e5%b9%b3%e8%a1%a1%e4%ba%8c%e5%8f%89%e6%a0%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：判断一棵二叉树是否是平衡二叉树。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/balanced-binary-tree/&#34;&gt;110. 平衡二叉树&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;54-数组中数字出现的次数&#34;&gt;&#xA;  54. &lt;strong&gt;数组中数字出现的次数&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#54-%e6%95%b0%e7%bb%84%e4%b8%ad%e6%95%b0%e5%ad%97%e5%87%ba%e7%8e%b0%e7%9a%84%e6%ac%a1%e6%95%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：找到数组中只出现一次的两个数字。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/single-number-iii/&#34;&gt;260. 只出现一次的数字 III&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;55-数组中唯一只出现一次的数字&#34;&gt;&#xA;  55. &lt;strong&gt;数组中唯一只出现一次的数字&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#55-%e6%95%b0%e7%bb%84%e4%b8%ad%e5%94%af%e4%b8%80%e5%8f%aa%e5%87%ba%e7%8e%b0%e4%b8%80%e6%ac%a1%e7%9a%84%e6%95%b0%e5%ad%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：找到数组中唯一只出现一次的数字。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/single-number-ii/&#34;&gt;137. 只出现一次的数字 II&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;56-和为s的两个数字&#34;&gt;&#xA;  56. &lt;strong&gt;和为s的两个数字&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#56-%e5%92%8c%e4%b8%bas%e7%9a%84%e4%b8%a4%e4%b8%aa%e6%95%b0%e5%ad%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：找到数组中两个数字，使得它们的和等于s。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/he-wei-sde-liang-ge-shu-zi-lcof/&#34;&gt;剑指 Offer 57. 和为s的两个数字&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;57-和为s的连续正数序列&#34;&gt;&#xA;  57. &lt;strong&gt;和为s的连续正数序列&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#57-%e5%92%8c%e4%b8%bas%e7%9a%84%e8%bf%9e%e7%bb%ad%e6%ad%a3%e6%95%b0%e5%ba%8f%e5%88%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：找到所有和为s的连续正数序列。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;&#xA;：&lt;a href=&#34;https://leetcode.cn/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof/&#34;&gt;剑指 Offer 57 - II. 和为s的连续正数序列&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;58-翻转单词顺序&#34;&gt;&#xA;  58. &lt;strong&gt;翻转单词顺序&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#58-%e7%bf%bb%e8%bd%ac%e5%8d%95%e8%af%8d%e9%a1%ba%e5%ba%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：翻转句子中单词的顺序。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/reverse-words-in-a-string/&#34;&gt;151. 反转字符串中的单词&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;59-左旋转字符串&#34;&gt;&#xA;  59. &lt;strong&gt;左旋转字符串&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#59-%e5%b7%a6%e6%97%8b%e8%bd%ac%e5%ad%97%e7%ac%a6%e4%b8%b2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：左旋转字符串。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/&#34;&gt;剑指 Offer 58 - II. 左旋转字符串&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;60-滑动窗口的最大值&#34;&gt;&#xA;  60. &lt;strong&gt;滑动窗口的最大值&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#60-%e6%bb%91%e5%8a%a8%e7%aa%97%e5%8f%a3%e7%9a%84%e6%9c%80%e5%a4%a7%e5%80%bc&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：找到滑动窗口中的最大值。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/sliding-window-maximum/&#34;&gt;239. 滑动窗口最大值&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;61-扑克牌中的顺子&#34;&gt;&#xA;  61. &lt;strong&gt;扑克牌中的顺子&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#61-%e6%89%91%e5%85%8b%e7%89%8c%e4%b8%ad%e7%9a%84%e9%a1%ba%e5%ad%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：判断扑克牌是否是顺子。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/bu-ke-pai-zhong-de-shun-zi-lcof/&#34;&gt;剑指 Offer 61. 扑克牌中的顺子&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;62-圆圈中最后剩下的数字&#34;&gt;&#xA;  62. &lt;strong&gt;圆圈中最后剩下的数字&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#62-%e5%9c%86%e5%9c%88%e4%b8%ad%e6%9c%80%e5%90%8e%e5%89%a9%e4%b8%8b%e7%9a%84%e6%95%b0%e5%ad%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：圆圈中最后剩下的数字（约瑟夫环问题）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;&#xA;：&lt;a href=&#34;https://leetcode.cn/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/&#34;&gt;剑指 Offer 62. 圆圈中最后剩下的数字&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;63-股票的最大利润&#34;&gt;&#xA;  63. &lt;strong&gt;股票的最大利润&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#63-%e8%82%a1%e7%a5%a8%e7%9a%84%e6%9c%80%e5%a4%a7%e5%88%a9%e6%b6%a6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：计算股票的最大利润。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/&#34;&gt;121. 买卖股票的最佳时机&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;64-求12n&#34;&gt;&#xA;  64. &lt;strong&gt;求1+2+…+n&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#64-%e6%b1%8212n&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：求1+2+…+n，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/qiu-12n-lcof/&#34;&gt;剑指 Offer 64. 求1+2+…+n&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;65-不用加减乘除做加法&#34;&gt;&#xA;  65. &lt;strong&gt;不用加减乘除做加法&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#65-%e4%b8%8d%e7%94%a8%e5%8a%a0%e5%87%8f%e4%b9%98%e9%99%a4%e5%81%9a%e5%8a%a0%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：不用加减乘除做加法。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/sum-of-two-integers/&#34;&gt;371. 两整数之和&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;66-构建乘积数组&#34;&gt;&#xA;  66. &lt;strong&gt;构建乘积数组&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#66-%e6%9e%84%e5%bb%ba%e4%b9%98%e7%a7%af%e6%95%b0%e7%bb%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：构建乘积数组。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/product-of-array-except-self/&#34;&gt;238. 除自身以外数组的乘积&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;67-把字符串转换成整数&#34;&gt;&#xA;  67. &lt;strong&gt;把字符串转换成整数&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#67-%e6%8a%8a%e5%ad%97%e7%ac%a6%e4%b8%b2%e8%bd%ac%e6%8d%a2%e6%88%90%e6%95%b4%e6%95%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：把字符串转换成整数。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/string-to-integer-atoi/&#34;&gt;8. 字符串转换整数 (atoi)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;68-树中两个节点的最低公共祖先&#34;&gt;&#xA;  68. &lt;strong&gt;树中两个节点的最低公共祖先&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#68-%e6%a0%91%e4%b8%ad%e4%b8%a4%e4%b8%aa%e8%8a%82%e7%82%b9%e7%9a%84%e6%9c%80%e4%bd%8e%e5%85%ac%e5%85%b1%e7%a5%96%e5%85%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：找到树中两个节点的最低公共祖先。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/&#34;&gt;236. 二叉树的最近公共祖先&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;以上是《剑指Offer》中部分题目与LeetCode上对应题目的对照表。由于LeetCode的题目库不断更新，可能会有新的题目与《剑指Offer》中的题目对应。建议在准备面试时，结合两本书的题目进行练习。&lt;/p&gt;</description>
    </item>
    <item>
      <title>面试经典 150 题</title>
      <link>/post/computer-science/algorithm/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B8150%E9%A2%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/algorithm/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B8150%E9%A2%98/</guid>
      <description>&lt;h2 id=&#34;面试经典-150-题&#34;&gt;&#xA;  面试经典 150 题&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e7%bb%8f%e5%85%b8-150-%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h4 id=&#34;数组--字符串&#34;&gt;&#xA;  数组 / 字符串&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e7%bb%84--%e5%ad%97%e7%ac%a6%e4%b8%b2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;-88-合并两个有序数组&#34;&gt;&#xA;  ✅ 88 合并两个有序数组&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-88-%e5%90%88%e5%b9%b6%e4%b8%a4%e4%b8%aa%e6%9c%89%e5%ba%8f%e6%95%b0%e7%bb%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-27-移除元素&#34;&gt;&#xA;  ✅ 27 移除元素&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-27-%e7%a7%bb%e9%99%a4%e5%85%83%e7%b4%a0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-26-删除有序数组中的重复项&#34;&gt;&#xA;  ✅ 26 删除有序数组中的重复项&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-26-%e5%88%a0%e9%99%a4%e6%9c%89%e5%ba%8f%e6%95%b0%e7%bb%84%e4%b8%ad%e7%9a%84%e9%87%8d%e5%a4%8d%e9%a1%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-80-删除有序数组中的重复项-ii&#34;&gt;&#xA;  ✅ 80 删除有序数组中的重复项 II&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-80-%e5%88%a0%e9%99%a4%e6%9c%89%e5%ba%8f%e6%95%b0%e7%bb%84%e4%b8%ad%e7%9a%84%e9%87%8d%e5%a4%8d%e9%a1%b9-ii&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-169-多数元素&#34;&gt;&#xA;  ✅ 169 多数元素&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-169-%e5%a4%9a%e6%95%b0%e5%85%83%e7%b4%a0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-189-轮转数组&#34;&gt;&#xA;  ✅ 189 轮转数组&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-189-%e8%bd%ae%e8%bd%ac%e6%95%b0%e7%bb%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-121-买卖股票的最佳时机&#34;&gt;&#xA;  ✅ 121 买卖股票的最佳时机&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-121-%e4%b9%b0%e5%8d%96%e8%82%a1%e7%a5%a8%e7%9a%84%e6%9c%80%e4%bd%b3%e6%97%b6%e6%9c%ba&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;122-买卖股票的最佳时机-ii&#34;&gt;&#xA;  122 买卖股票的最佳时机 II&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#122-%e4%b9%b0%e5%8d%96%e8%82%a1%e7%a5%a8%e7%9a%84%e6%9c%80%e4%bd%b3%e6%97%b6%e6%9c%ba-ii&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-55-跳跃游戏&#34;&gt;&#xA;  ✅ 55 跳跃游戏&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-55-%e8%b7%b3%e8%b7%83%e6%b8%b8%e6%88%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-45-跳跃游戏-ii&#34;&gt;&#xA;  ✅ 45 跳跃游戏 II&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-45-%e8%b7%b3%e8%b7%83%e6%b8%b8%e6%88%8f-ii&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-274-h-指数&#34;&gt;&#xA;  ✅ 274 H 指数&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-274-h-%e6%8c%87%e6%95%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;o1-时间插入删除和获取随机元素&#34;&gt;&#xA;  O(1) 时间插入、删除和获取随机元素&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#o1-%e6%97%b6%e9%97%b4%e6%8f%92%e5%85%a5%e5%88%a0%e9%99%a4%e5%92%8c%e8%8e%b7%e5%8f%96%e9%9a%8f%e6%9c%ba%e5%85%83%e7%b4%a0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;除自身以外数组的乘积&#34;&gt;&#xA;  除自身以外数组的乘积&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%99%a4%e8%87%aa%e8%ba%ab%e4%bb%a5%e5%a4%96%e6%95%b0%e7%bb%84%e7%9a%84%e4%b9%98%e7%a7%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;加油站&#34;&gt;&#xA;  加油站&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8a%a0%e6%b2%b9%e7%ab%99&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;分发糖果&#34;&gt;&#xA;  分发糖果&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e5%8f%91%e7%b3%96%e6%9e%9c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;接雨水&#34;&gt;&#xA;  接雨水&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8e%a5%e9%9b%a8%e6%b0%b4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-13-罗马数字转整数&#34;&gt;&#xA;  ✅ 13 罗马数字转整数&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-13-%e7%bd%97%e9%a9%ac%e6%95%b0%e5%ad%97%e8%bd%ac%e6%95%b4%e6%95%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;整数转罗马数字&#34;&gt;&#xA;  整数转罗马数字&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b4%e6%95%b0%e8%bd%ac%e7%bd%97%e9%a9%ac%e6%95%b0%e5%ad%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-58-最后一个单词的长度&#34;&gt;&#xA;  ✅ 58 最后一个单词的长度&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-58-%e6%9c%80%e5%90%8e%e4%b8%80%e4%b8%aa%e5%8d%95%e8%af%8d%e7%9a%84%e9%95%bf%e5%ba%a6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-14-最长公共前缀&#34;&gt;&#xA;  ✅ 14 最长公共前缀&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-14-%e6%9c%80%e9%95%bf%e5%85%ac%e5%85%b1%e5%89%8d%e7%bc%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-151-反转字符串中的单词&#34;&gt;&#xA;  ✅ 151 反转字符串中的单词&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-151-%e5%8f%8d%e8%bd%ac%e5%ad%97%e7%ac%a6%e4%b8%b2%e4%b8%ad%e7%9a%84%e5%8d%95%e8%af%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;z-字形变换&#34;&gt;&#xA;  Z 字形变换&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#z-%e5%ad%97%e5%bd%a2%e5%8f%98%e6%8d%a2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-28-找出字符串中第一个匹配项的下标&#34;&gt;&#xA;  ✅ 28 找出字符串中第一个匹配项的下标&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-28-%e6%89%be%e5%87%ba%e5%ad%97%e7%ac%a6%e4%b8%b2%e4%b8%ad%e7%ac%ac%e4%b8%80%e4%b8%aa%e5%8c%b9%e9%85%8d%e9%a1%b9%e7%9a%84%e4%b8%8b%e6%a0%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;文本左右对齐&#34;&gt;&#xA;  文本左右对齐&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%96%87%e6%9c%ac%e5%b7%a6%e5%8f%b3%e5%af%b9%e9%bd%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;双指针&#34;&gt;&#xA;  双指针&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%8c%e6%8c%87%e9%92%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;-125-验证回文串&#34;&gt;&#xA;  ✅ 125 验证回文串&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-125-%e9%aa%8c%e8%af%81%e5%9b%9e%e6%96%87%e4%b8%b2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-392-判断子序列&#34;&gt;&#xA;  ✅ 392 判断子序列&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-392-%e5%88%a4%e6%96%ad%e5%ad%90%e5%ba%8f%e5%88%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-167-两数之和-ii---输入有序数组&#34;&gt;&#xA;  ✅ 167 两数之和 II - 输入有序数组&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-167-%e4%b8%a4%e6%95%b0%e4%b9%8b%e5%92%8c-ii---%e8%be%93%e5%85%a5%e6%9c%89%e5%ba%8f%e6%95%b0%e7%bb%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;盛最多水的容器&#34;&gt;&#xA;  盛最多水的容器&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%9b%9b%e6%9c%80%e5%a4%9a%e6%b0%b4%e7%9a%84%e5%ae%b9%e5%99%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;三数之和&#34;&gt;&#xA;  三数之和&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%89%e6%95%b0%e4%b9%8b%e5%92%8c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;滑动窗口&#34;&gt;&#xA;  滑动窗口&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%bb%91%e5%8a%a8%e7%aa%97%e5%8f%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;-长度最小的子数组&#34;&gt;&#xA;  ✅ 长度最小的子数组&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e9%95%bf%e5%ba%a6%e6%9c%80%e5%b0%8f%e7%9a%84%e5%ad%90%e6%95%b0%e7%bb%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-无重复字符的最长子串&#34;&gt;&#xA;  ✅ 无重复字符的最长子串&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e6%97%a0%e9%87%8d%e5%a4%8d%e5%ad%97%e7%ac%a6%e7%9a%84%e6%9c%80%e9%95%bf%e5%ad%90%e4%b8%b2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-串联所有单词的子串&#34;&gt;&#xA;  ✅ 串联所有单词的子串&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e4%b8%b2%e8%81%94%e6%89%80%e6%9c%89%e5%8d%95%e8%af%8d%e7%9a%84%e5%ad%90%e4%b8%b2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;最小覆盖子串&#34;&gt;&#xA;  最小覆盖子串&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9c%80%e5%b0%8f%e8%a6%86%e7%9b%96%e5%ad%90%e4%b8%b2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;矩阵&#34;&gt;&#xA;  矩阵&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%9f%a9%e9%98%b5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;-有效的数独&#34;&gt;&#xA;  ✅ 有效的数独&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e6%9c%89%e6%95%88%e7%9a%84%e6%95%b0%e7%8b%ac&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-螺旋矩阵&#34;&gt;&#xA;  ✅ 螺旋矩阵&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e8%9e%ba%e6%97%8b%e7%9f%a9%e9%98%b5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;旋转图像&#34;&gt;&#xA;  旋转图像&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%97%8b%e8%bd%ac%e5%9b%be%e5%83%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-矩阵置零&#34;&gt;&#xA;  ✅ 矩阵置零&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e7%9f%a9%e9%98%b5%e7%bd%ae%e9%9b%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-生命游戏&#34;&gt;&#xA;  ✅ 生命游戏&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e7%94%9f%e5%91%bd%e6%b8%b8%e6%88%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;哈希表&#34;&gt;&#xA;  哈希表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%93%88%e5%b8%8c%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;-383-赎金信&#34;&gt;&#xA;  ✅ 383 赎金信&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-383-%e8%b5%8e%e9%87%91%e4%bf%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-205-同构字符串&#34;&gt;&#xA;  ✅ 205 同构字符串&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-205-%e5%90%8c%e6%9e%84%e5%ad%97%e7%ac%a6%e4%b8%b2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-290-单词规律&#34;&gt;&#xA;  ✅ 290 单词规律&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-290-%e5%8d%95%e8%af%8d%e8%a7%84%e5%be%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-242-有效的字母异位词&#34;&gt;&#xA;  ✅ 242 有效的字母异位词&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-242-%e6%9c%89%e6%95%88%e7%9a%84%e5%ad%97%e6%af%8d%e5%bc%82%e4%bd%8d%e8%af%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-49-字母异位词分组&#34;&gt;&#xA;  ✅ 49 字母异位词分组&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-49-%e5%ad%97%e6%af%8d%e5%bc%82%e4%bd%8d%e8%af%8d%e5%88%86%e7%bb%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-1-两数之和&#34;&gt;&#xA;  ✅ 1 两数之和&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-1-%e4%b8%a4%e6%95%b0%e4%b9%8b%e5%92%8c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-202-快乐数&#34;&gt;&#xA;  ✅ 202 快乐数&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-202-%e5%bf%ab%e4%b9%90%e6%95%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-219-存在重复元素-ii&#34;&gt;&#xA;  ✅ 219 存在重复元素 II&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-219-%e5%ad%98%e5%9c%a8%e9%87%8d%e5%a4%8d%e5%85%83%e7%b4%a0-ii&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-128-最长连续序列&#34;&gt;&#xA;  ✅ 128 最长连续序列&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-128-%e6%9c%80%e9%95%bf%e8%bf%9e%e7%bb%ad%e5%ba%8f%e5%88%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;区间&#34;&gt;&#xA;  区间&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8c%ba%e9%97%b4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;汇总区间&#34;&gt;&#xA;  汇总区间&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b1%87%e6%80%bb%e5%8c%ba%e9%97%b4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;合并区间&#34;&gt;&#xA;  合并区间&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%90%88%e5%b9%b6%e5%8c%ba%e9%97%b4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;插入区间&#34;&gt;&#xA;  插入区间&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8f%92%e5%85%a5%e5%8c%ba%e9%97%b4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;用最少数量的箭引爆气球&#34;&gt;&#xA;  用最少数量的箭引爆气球&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%94%a8%e6%9c%80%e5%b0%91%e6%95%b0%e9%87%8f%e7%9a%84%e7%ae%ad%e5%bc%95%e7%88%86%e6%b0%94%e7%90%83&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;&#34;&gt;&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;栈&#34;&gt;&#xA;  栈&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;-20-有效的括号&#34;&gt;&#xA;  ✅ 20 有效的括号&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-20-%e6%9c%89%e6%95%88%e7%9a%84%e6%8b%ac%e5%8f%b7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-71-简化路径&#34;&gt;&#xA;  ✅ 71 简化路径&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-71-%e7%ae%80%e5%8c%96%e8%b7%af%e5%be%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-155-最小栈&#34;&gt;&#xA;  ✅ 155 最小栈&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-155-%e6%9c%80%e5%b0%8f%e6%a0%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-150-逆波兰表达式求值&#34;&gt;&#xA;  ✅ 150 逆波兰表达式求值&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-150-%e9%80%86%e6%b3%a2%e5%85%b0%e8%a1%a8%e8%be%be%e5%bc%8f%e6%b1%82%e5%80%bc&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;基本计算器&#34;&gt;&#xA;  基本计算器&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9f%ba%e6%9c%ac%e8%ae%a1%e7%ae%97%e5%99%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;链表&#34;&gt;&#xA;  链表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;-141-环形链表&#34;&gt;&#xA;  ✅ 141 环形链表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-141-%e7%8e%af%e5%bd%a2%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-2-两数相加&#34;&gt;&#xA;  ✅ 2 两数相加&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-2-%e4%b8%a4%e6%95%b0%e7%9b%b8%e5%8a%a0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-21-合并两个有序链表&#34;&gt;&#xA;  ✅ 21 合并两个有序链表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-21-%e5%90%88%e5%b9%b6%e4%b8%a4%e4%b8%aa%e6%9c%89%e5%ba%8f%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-138-随机链表的复制&#34;&gt;&#xA;  ✅ 138 随机链表的复制&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-138-%e9%9a%8f%e6%9c%ba%e9%93%be%e8%a1%a8%e7%9a%84%e5%a4%8d%e5%88%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-92-反转链表-ii&#34;&gt;&#xA;  ✅ 92 反转链表 II&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-92-%e5%8f%8d%e8%bd%ac%e9%93%be%e8%a1%a8-ii&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;k-个一组翻转链表&#34;&gt;&#xA;  K 个一组翻转链表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#k-%e4%b8%aa%e4%b8%80%e7%bb%84%e7%bf%bb%e8%bd%ac%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-19-删除链表的倒数第-n-个结点&#34;&gt;&#xA;  ✅ 19 删除链表的倒数第 N 个结点&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-19-%e5%88%a0%e9%99%a4%e9%93%be%e8%a1%a8%e7%9a%84%e5%80%92%e6%95%b0%e7%ac%ac-n-%e4%b8%aa%e7%bb%93%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-82-删除排序链表中的重复元素-ii&#34;&gt;&#xA;  ✅ 82 删除排序链表中的重复元素 II&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-82-%e5%88%a0%e9%99%a4%e6%8e%92%e5%ba%8f%e9%93%be%e8%a1%a8%e4%b8%ad%e7%9a%84%e9%87%8d%e5%a4%8d%e5%85%83%e7%b4%a0-ii&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-61-旋转链表&#34;&gt;&#xA;  ✅ 61 旋转链表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-61-%e6%97%8b%e8%bd%ac%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-86-分隔链表&#34;&gt;&#xA;  ✅ 86 分隔链表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-86-%e5%88%86%e9%9a%94%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-146-lru-缓存&#34;&gt;&#xA;  ✅ 146 LRU 缓存&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-146-lru-%e7%bc%93%e5%ad%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;二叉树&#34;&gt;&#xA;  二叉树&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e5%8f%89%e6%a0%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;-104-二叉树的最大深度&#34;&gt;&#xA;  ✅ 104 二叉树的最大深度&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-104-%e4%ba%8c%e5%8f%89%e6%a0%91%e7%9a%84%e6%9c%80%e5%a4%a7%e6%b7%b1%e5%ba%a6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.cn/problems/maximum-depth-of-binary-tree/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;104. 二叉树的最大深度&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;-100-相同的树&#34;&gt;&#xA;  ✅ 100 相同的树&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-100-%e7%9b%b8%e5%90%8c%e7%9a%84%e6%a0%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.cn/problems/same-tree/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;100. 相同的树&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;-226-翻转二叉树&#34;&gt;&#xA;  ✅ 226 翻转二叉树&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-226-%e7%bf%bb%e8%bd%ac%e4%ba%8c%e5%8f%89%e6%a0%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.cn/problems/invert-binary-tree/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;226. 翻转二叉树&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;-101-对称二叉树&#34;&gt;&#xA;  ✅ 101 对称二叉树&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-101-%e5%af%b9%e7%a7%b0%e4%ba%8c%e5%8f%89%e6%a0%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.cn/problems/symmetric-tree/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;101. 对称二叉树&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;-105-从前序与中序遍历序列构造二叉树&#34;&gt;&#xA;  ✅ 105 从前序与中序遍历序列构造二叉树&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-105-%e4%bb%8e%e5%89%8d%e5%ba%8f%e4%b8%8e%e4%b8%ad%e5%ba%8f%e9%81%8d%e5%8e%86%e5%ba%8f%e5%88%97%e6%9e%84%e9%80%a0%e4%ba%8c%e5%8f%89%e6%a0%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;105. 从前序与中序遍历序列构造二叉树&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;-106-从中序与后序遍历序列构造二叉树&#34;&gt;&#xA;  ✅ 106 从中序与后序遍历序列构造二叉树&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-106-%e4%bb%8e%e4%b8%ad%e5%ba%8f%e4%b8%8e%e5%90%8e%e5%ba%8f%e9%81%8d%e5%8e%86%e5%ba%8f%e5%88%97%e6%9e%84%e9%80%a0%e4%ba%8c%e5%8f%89%e6%a0%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;106. 从中序与后序遍历序列构造二叉树&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;-117-填充每个节点的下一个右侧节点指针-ii&#34;&gt;&#xA;  ✅ 117 填充每个节点的下一个右侧节点指针 II&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-117-%e5%a1%ab%e5%85%85%e6%af%8f%e4%b8%aa%e8%8a%82%e7%82%b9%e7%9a%84%e4%b8%8b%e4%b8%80%e4%b8%aa%e5%8f%b3%e4%be%a7%e8%8a%82%e7%82%b9%e6%8c%87%e9%92%88-ii&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.cn/problems/populating-next-right-pointers-in-each-node-ii/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;117. 填充每个节点的下一个右侧节点指针 II&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;二叉树展开为链表&#34;&gt;&#xA;  二叉树展开为链表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e5%8f%89%e6%a0%91%e5%b1%95%e5%bc%80%e4%b8%ba%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-路径总和&#34;&gt;&#xA;  ✅ 路径总和&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e8%b7%af%e5%be%84%e6%80%bb%e5%92%8c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;求根节点到叶节点数字之和&#34;&gt;&#xA;  求根节点到叶节点数字之和&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b1%82%e6%a0%b9%e8%8a%82%e7%82%b9%e5%88%b0%e5%8f%b6%e8%8a%82%e7%82%b9%e6%95%b0%e5%ad%97%e4%b9%8b%e5%92%8c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;二叉树中的最大路径和&#34;&gt;&#xA;  二叉树中的最大路径和&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e5%8f%89%e6%a0%91%e4%b8%ad%e7%9a%84%e6%9c%80%e5%a4%a7%e8%b7%af%e5%be%84%e5%92%8c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;二叉搜索树迭代器&#34;&gt;&#xA;  二叉搜索树迭代器&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e5%8f%89%e6%90%9c%e7%b4%a2%e6%a0%91%e8%bf%ad%e4%bb%a3%e5%99%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;完全二叉树的节点个数&#34;&gt;&#xA;  完全二叉树的节点个数&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%8c%e5%85%a8%e4%ba%8c%e5%8f%89%e6%a0%91%e7%9a%84%e8%8a%82%e7%82%b9%e4%b8%aa%e6%95%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;二叉树的最近公共祖先&#34;&gt;&#xA;  二叉树的最近公共祖先&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e5%8f%89%e6%a0%91%e7%9a%84%e6%9c%80%e8%bf%91%e5%85%ac%e5%85%b1%e7%a5%96%e5%85%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;二叉树层次遍历&#34;&gt;&#xA;  二叉树层次遍历&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e5%8f%89%e6%a0%91%e5%b1%82%e6%ac%a1%e9%81%8d%e5%8e%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;-199-二叉树的右视图&#34;&gt;&#xA;  ✅ 199 二叉树的右视图&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-199-%e4%ba%8c%e5%8f%89%e6%a0%91%e7%9a%84%e5%8f%b3%e8%a7%86%e5%9b%be&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.cn/problems/binary-tree-right-side-view/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;199.二叉树的右视图&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;-637-二叉树的层平均值&#34;&gt;&#xA;  ✅ 637 二叉树的层平均值&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-637-%e4%ba%8c%e5%8f%89%e6%a0%91%e7%9a%84%e5%b1%82%e5%b9%b3%e5%9d%87%e5%80%bc&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.cn/problems/average-of-levels-in-binary-tree/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;637. 二叉树的层平均值&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;-二叉树的层序遍历&#34;&gt;&#xA;  ✅ 二叉树的层序遍历&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e4%ba%8c%e5%8f%89%e6%a0%91%e7%9a%84%e5%b1%82%e5%ba%8f%e9%81%8d%e5%8e%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-二叉树的锯齿形层序遍历&#34;&gt;&#xA;  ✅ 二叉树的锯齿形层序遍历&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e4%ba%8c%e5%8f%89%e6%a0%91%e7%9a%84%e9%94%af%e9%bd%bf%e5%bd%a2%e5%b1%82%e5%ba%8f%e9%81%8d%e5%8e%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.cn/problems/binary-tree-zigzag-level-order-traversal/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;103.二叉树的锯齿形层序遍历&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;-二叉搜索树&#34;&gt;&#xA;  ✅ 二叉搜索树&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e4%ba%8c%e5%8f%89%e6%90%9c%e7%b4%a2%e6%a0%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;-二叉搜索树的最小绝对差&#34;&gt;&#xA;  ✅ 二叉搜索树的最小绝对差&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e4%ba%8c%e5%8f%89%e6%90%9c%e7%b4%a2%e6%a0%91%e7%9a%84%e6%9c%80%e5%b0%8f%e7%bb%9d%e5%af%b9%e5%b7%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-二叉搜索树中第-k-小的元素&#34;&gt;&#xA;  ✅ 二叉搜索树中第 K 小的元素&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e4%ba%8c%e5%8f%89%e6%90%9c%e7%b4%a2%e6%a0%91%e4%b8%ad%e7%ac%ac-k-%e5%b0%8f%e7%9a%84%e5%85%83%e7%b4%a0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;验证二叉搜索树&#34;&gt;&#xA;  验证二叉搜索树&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%aa%8c%e8%af%81%e4%ba%8c%e5%8f%89%e6%90%9c%e7%b4%a2%e6%a0%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;图&#34;&gt;&#xA;  图&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9b%be&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;-200-岛屿数量&#34;&gt;&#xA;  ✅ 200 岛屿数量&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-200-%e5%b2%9b%e5%b1%bf%e6%95%b0%e9%87%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.cn/problems/number-of-islands/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;200.岛屿数量&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;被围绕的区域&#34;&gt;&#xA;  被围绕的区域&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%a2%ab%e5%9b%b4%e7%bb%95%e7%9a%84%e5%8c%ba%e5%9f%9f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;克隆图&#34;&gt;&#xA;  克隆图&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%8b%e9%9a%86%e5%9b%be&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;除法求值&#34;&gt;&#xA;  除法求值&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%99%a4%e6%b3%95%e6%b1%82%e5%80%bc&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;课程表&#34;&gt;&#xA;  课程表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%af%be%e7%a8%8b%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;课程表-ii&#34;&gt;&#xA;  课程表 II&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%af%be%e7%a8%8b%e8%a1%a8-ii&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;图的广度优先搜索&#34;&gt;&#xA;  图的广度优先搜索&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9b%be%e7%9a%84%e5%b9%bf%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;909-蛇梯棋&#34;&gt;&#xA;  909 蛇梯棋&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#909-%e8%9b%87%e6%a2%af%e6%a3%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.cn/problems/snakes-and-ladders/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;909 蛇梯棋&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;官方题解&lt;/p&gt;</description>
    </item>
    <item>
      <title>goal</title>
      <link>/post/life/goal/</link>
      <pubDate>Thu, 14 Nov 2024 08:59:49 +0800</pubDate>
      <guid>/post/life/goal/</guid>
      <description>&lt;h1 id=&#34;goal&#34;&gt;&#xA;  goal&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#goal&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;2025-01-12&#34;&gt;&#xA;  2025-01-12&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2025-01-12&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 过年前完成(1月24日内)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 面试经典150题(一天完成5道题, 应该完成70道题左右)&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Spring实战 第6版 Book (读完这本书)&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 清华韩秀云精品课（第一季，64集）(大概应该看到56集)&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 美国困局：“新右翼” 的兴起与挑战 (读完这本书)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; OAuth 2 in Action&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Microservices Security in Action&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; API Security in Action&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; ActiveMQ in Action&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; RabbitMQ in Depth（Manning，2017年）&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Alvaro Videla和Jason J.W. Williams合著的RabbitMQ in Action（Manning，2012年）&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Kafka in Action （Manning，2017年）&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Enterprise Integration Patterns（Addison-Wesley，2003年）&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Functional Programming in Java（Manning，2017年）&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Grokking Functional Programming（Manning，2021年）&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>coffee</title>
      <link>/post/life/coffee/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/life/coffee/</guid>
      <description>&lt;h1 id=&#34;coffee&#34;&gt;&#xA;  coffee&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#coffee&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.bilibili.com/video/BV1j3411V7Fy&#34;&gt;咖啡碎碎念#1&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.bilibili.com/video/BV1Ao4y1u79x&#34;&gt;一次探店2家上海“天花板”咖啡馆？！喝到一半老板直接开始上课？#上海VLOG（上）&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.bilibili.com/video/BV1hU4y1K7uA/&#34;&gt;科普丨意式咖啡傻傻分不清？10分钟带你全部看懂&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;马克西姆咖啡机&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.bilibili.com/video/BV1W54y1H7qY/&#34;&gt;马克西姆使用评测（上）3000+价位段最值得入手半自动意式咖啡机一体机&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.bilibili.com/video/BV1ST4y1o7WJ&#34;&gt;马克西姆咖啡机评测（下）使用成本低是最好的入手理由&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.bilibili.com/video/BV1NY4y1c7cE&#34;&gt;马克西姆咖啡机用了一年，总结出5个使用技巧&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.bilibili.com/video/BV17L411W7gS&#34;&gt;马克西姆半自动家用咖啡机，如何调试和定量出品，掌握核心2点，控制好粉重和粉液比&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;&#34;&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;&#34;&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;&#34;&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;&#34;&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Penruins</title>
      <link>/post/computer-science/database/mongodb/</link>
      <pubDate>Thu, 14 Nov 2024 08:59:49 +0800</pubDate>
      <guid>/post/computer-science/database/mongodb/</guid>
      <description>&lt;h1 id=&#34;mongodb&#34;&gt;&#xA;  mongodb&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mongodb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;</description>
    </item>
    <item>
      <title></title>
      <link>/post/blog/2025/2025-03-31-shardingsphere-prometheus-%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/blog/2025/2025-03-31-shardingsphere-prometheus-%E9%85%8D%E7%BD%AE/</guid>
      <description>&lt;h1 id=&#34;2025-03-31-shardingsphere-prometheus-配置&#34;&gt;&#xA;  2025-03-31-Shardingsphere-prometheus-配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2025-03-31-shardingsphere-prometheus-%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;把 shardingsphere proxy 搭建好之后，想要把监测数据放到 grafana里面进行监测，但是按照找到的资料来配置好像都不太行，自己研究了一下启动脚本，现在可以正常获取到指标数据了，所以花点时间把这个问题记录一下&lt;/p&gt;&#xA;&lt;p&gt;下载了官网提供的 shardingsphere-proxy 的包之后，里面其实已经包含了 agent 相关的 jar 包以及插件相关的 jar 包，其实不需要再下载一个 shardingsphere-agent&lt;/p&gt;&#xA;&lt;p&gt;我们需要配置一下&lt;code&gt;agent.yaml&lt;/code&gt;里面的内容，文件的位置在 &lt;code&gt;apache-shardingsphere-5.5.2-shardingsphere-proxy-bin/agent/conf/agent.yaml&lt;/code&gt;，现在只需要配置 prometheus，所以如下所示&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;plugins:&#xA;  metrics:&#xA;    Prometheus:&#xA;      host: &amp;#34;localhost&amp;#34;&#xA;      port: 9000&#xA;      props:&#xA;        jvm-information-collector-enabled: &amp;#34;true&amp;#34;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在 prometheus 的配置文件中需要加上 9000 的指标接口（如果是使用 brew 安装的话，配置文件在这个位置 &lt;code&gt;/opt/homebrew/etc/prometheus.yml&lt;/code&gt;）&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;scrape_configs:&#xA;  - job_name: &amp;#39;shardingsphere&amp;#39;&#xA;    static_configs:&#xA;      - targets: [&amp;#39;localhost:9000&amp;#39;]&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;网上查到的这篇文章 &lt;a href=&#34;https://xie.infoq.cn/article/37c5c2380ce7f3c495b6841c7&#34;&gt;Apache ShardingSphere Agent 可观察性实用指南&lt;/a&gt; 提到需要修改脚本文件，其实是不用修改的，只需要夹一个参数 &lt;code&gt;--agent&lt;/code&gt; 就可以&lt;/p&gt;&#xA;&lt;p&gt;需要注意的是运行的目录需要在 shardingsphere-proxy 的根目录下，因此命令如下所示&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sh bin/start.sh 5555 --agent&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看日志 &lt;code&gt;vim logs/stdout.log&lt;/code&gt; 打印的应该如下所示&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Mar 31, 2025 6:07:37 PM org.apache.shardingsphere.agent.core.plugin.jar.PluginJarLoader load&#xA;INFO: Loaded jar: shardingsphere-agent-metrics-prometheus-5.5.2.jar&#xA;Mar 31, 2025 6:07:37 PM org.apache.shardingsphere.agent.core.plugin.jar.PluginJarLoader load&#xA;INFO: Loaded jar: shardingsphere-agent-tracing-opentelemetry-5.5.2.jar&#xA;Mar 31, 2025 6:07:37 PM org.apache.shardingsphere.agent.core.plugin.jar.PluginJarLoader load&#xA;INFO: Loaded jar: shardingsphere-agent-metrics-core-5.5.2.jar&#xA;Mar 31, 2025 6:07:37 PM org.apache.shardingsphere.agent.core.plugin.jar.PluginJarLoader load&#xA;INFO: Loaded jar: shardingsphere-agent-plugin-core-5.5.2.jar&#xA;Mar 31, 2025 6:07:37 PM org.apache.shardingsphere.agent.core.plugin.jar.PluginJarLoader load&#xA;INFO: Loaded jar: shardingsphere-agent-logging-file-5.5.2.jar&#xA;[INFO ] 2025-03-31 18:07:38.772 [main] o.a.s.d.p.c.l.PipelineContextManagerLifecycleListener - mode type is not Cluster, mode type=&amp;#39;Standalone&amp;#39;, ignore&#xA;[INFO ] 2025-03-31 18:07:38.786 [main] o.a.s.p.v.ShardingSphereProxyVersion - Database type is `MySQL`, version is `8.0.41`, database name is `sharding_db`&#xA;[INFO ] 2025-03-31 18:07:38.786 [main] o.a.s.p.frontend.ssl.ProxySSLContext - Proxy frontend SSL/TLS is not enabled.&#xA;[INFO ] 2025-03-31 18:07:38.836 [main] o.a.s.p.frontend.ShardingSphereProxy - ShardingSphere-Proxy Standalone mode started successfully&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个时候需要查询一下数据库，agent才会把服务启起来&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>/post/computer-science/cloud/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/cloud/</guid>
      <description>&lt;p&gt;cloud&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>/post/computer-science/hugo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/hugo/</guid>
      <description>&lt;h1 id=&#34;在-hugo-中配置-toc-从一级标题开始显示&#34;&gt;&#xA;  在 Hugo 中配置 TOC 从一级标题开始显示&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9c%a8-hugo-%e4%b8%ad%e9%85%8d%e7%bd%ae-toc-%e4%bb%8e%e4%b8%80%e7%ba%a7%e6%a0%87%e9%a2%98%e5%bc%80%e5%a7%8b%e6%98%be%e7%a4%ba&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;要在 Hugo 中让侧边栏的目录(TOC)从一级标题(&lt;code&gt;h1&lt;/code&gt;)开始显示，你可以通过以下几种方法实现：&lt;/p&gt;&#xA;&lt;h2 id=&#34;方法一修改-configtoml&#34;&gt;&#xA;  方法一：修改 config.toml&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%96%b9%e6%b3%95%e4%b8%80%e4%bf%ae%e6%94%b9-configtoml&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;在你的 Hugo 配置文件(通常是 &lt;code&gt;config.toml&lt;/code&gt; 或 &lt;code&gt;config.yaml&lt;/code&gt;)中添加或修改以下设置：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;markup&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  [&lt;span style=&#34;color:#a6e22e&#34;&gt;markup&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;tableOfContents&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;startLevel&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;endLevel&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者对于 YAML 格式：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;markup&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;tableOfContents&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;startLevel&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;endLevel&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;方法二模板中指定&#34;&gt;&#xA;  方法二：模板中指定&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%96%b9%e6%b3%95%e4%ba%8c%e6%a8%a1%e6%9d%bf%e4%b8%ad%e6%8c%87%e5%ae%9a&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;如果你在模板中调用 TOC，可以这样指定：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{{ .TableOfContents }}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;默认情况下，Hugo 会从二级标题(h2)开始显示 TOC。要修改这个行为，你需要使用方法一中的配置。&lt;/p&gt;&#xA;&lt;h2 id=&#34;方法三使用自定义-css&#34;&gt;&#xA;  方法三：使用自定义 CSS&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%96%b9%e6%b3%95%e4%b8%89%e4%bd%bf%e7%94%a8%e8%87%aa%e5%ae%9a%e4%b9%89-css&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;如果配置修改后仍然不符合预期，你可以添加自定义 CSS 来隐藏不需要的层级：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* 隐藏除一级标题外的其他层级 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#TableOfContents &lt;span style=&#34;color:#f92672&#34;&gt;ul&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;ul&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;display&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;none&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;方法四使用-goldmark-配置&#34;&gt;&#xA;  方法四：使用 Goldmark 配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%96%b9%e6%b3%95%e5%9b%9b%e4%bd%bf%e7%94%a8-goldmark-%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;如果你使用的是 Goldmark 渲染器(默认)，确保配置正确：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;markup&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;goldmark&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  [&lt;span style=&#34;color:#a6e22e&#34;&gt;markup&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;goldmark&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;parser&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    [&lt;span style=&#34;color:#a6e22e&#34;&gt;markup&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;goldmark&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;parser&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;attribute&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;注意事项&#34;&gt;&#xA;  注意事项&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b3%a8%e6%84%8f%e4%ba%8b%e9%a1%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;确保你的内容中确实有一级标题(&lt;code&gt;#&lt;/code&gt; 或 &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;)&lt;/li&gt;&#xA;&lt;li&gt;某些主题可能会覆盖默认的 TOC 行为，你可能需要检查主题文档&lt;/li&gt;&#xA;&lt;li&gt;清除缓存(&lt;code&gt;hugo --gc&lt;/code&gt;)有时能解决显示问题&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;如果你使用的是特定主题，可能需要查看该主题的文档，因为有些主题会提供自己的 TOC 配置选项。&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>/post/computer-science/micro-service/nacos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/micro-service/nacos/</guid>
      <description>&lt;h1 id=&#34;关于-nacos-配置更新后避免-hikaricp-连接断开的问题&#34;&gt;&#xA;  关于 Nacos 配置更新后避免 HikariCP 连接断开的问题&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%b3%e4%ba%8e-nacos-%e9%85%8d%e7%bd%ae%e6%9b%b4%e6%96%b0%e5%90%8e%e9%81%bf%e5%85%8d-hikaricp-%e8%bf%9e%e6%8e%a5%e6%96%ad%e5%bc%80%e7%9a%84%e9%97%ae%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;解决方案&#34;&gt;&#xA;  解决方案&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;使用-refreshscopeproxymode--scopedproxymodeno-排除数据源&#34;&gt;&#xA;  使用 &lt;code&gt;@RefreshScope(proxyMode = ScopedProxyMode.NO)&lt;/code&gt; 排除数据源&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bd%bf%e7%94%a8-refreshscopeproxymode--scopedproxymodeno-%e6%8e%92%e9%99%a4%e6%95%b0%e6%8d%ae%e6%ba%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Configuration&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@RefreshScope&lt;/span&gt;(proxyMode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ScopedProxyMode.&lt;span style=&#34;color:#a6e22e&#34;&gt;NO&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DataSourceConfig&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 数据源配置&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;自定义-refreshscope-排除数据源相关配置&#34;&gt;&#xA;  自定义 RefreshScope 排除数据源相关配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%ae%9a%e4%b9%89-refreshscope-%e6%8e%92%e9%99%a4%e6%95%b0%e6%8d%ae%e6%ba%90%e7%9b%b8%e5%85%b3%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; RefreshScope &lt;span style=&#34;color:#a6e22e&#34;&gt;refreshScope&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    RefreshScope scope &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; RefreshScope();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    scope.&lt;span style=&#34;color:#a6e22e&#34;&gt;setExcludeNames&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dataSource&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hikariDataSource&amp;#34;&lt;/span&gt;});&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; scope;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;在-bootstrapyml-中排除特定配置的刷新&#34;&gt;&#xA;  在 bootstrap.yml 中排除特定配置的刷新&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9c%a8-bootstrapyml-%e4%b8%ad%e6%8e%92%e9%99%a4%e7%89%b9%e5%ae%9a%e9%85%8d%e7%bd%ae%e7%9a%84%e5%88%b7%e6%96%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;cloud&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;nacos&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;config&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;refresh-enabled&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;refreshable-data-sources&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;none&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 不刷新数据源配置&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;使用-refreshscope-但不刷新数据源&#34;&gt;&#xA;  使用 &lt;code&gt;@RefreshScope&lt;/code&gt; 但不刷新数据源&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bd%bf%e7%94%a8-refreshscope-%e4%bd%86%e4%b8%8d%e5%88%b7%e6%96%b0%e6%95%b0%e6%8d%ae%e6%ba%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@ConfigurationProperties&lt;/span&gt;(prefix &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spring.datasource.hikari&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@RefreshScope&lt;/span&gt;(proxyMode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ScopedProxyMode.&lt;span style=&#34;color:#a6e22e&#34;&gt;NO&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; HikariDataSource &lt;span style=&#34;color:#a6e22e&#34;&gt;dataSource&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; DataSourceBuilder.&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;(HikariDataSource.&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;最佳实践&#34;&gt;&#xA;  最佳实践&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9c%80%e4%bd%b3%e5%ae%9e%e8%b7%b5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;分离配置&lt;/strong&gt;：将数据库配置和其他频繁变动的配置分开，放在不同的配置文件中&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;版本控制&lt;/strong&gt;：对数据库配置的修改应该通过版本控制和应用重启来完成，而不是热更新&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;监控&lt;/strong&gt;：即使解决了这个问题，也应该监控数据库连接池状态&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;注意事项&#34;&gt;&#xA;  注意事项&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b3%a8%e6%84%8f%e4%ba%8b%e9%a1%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;这些解决方案可能会因 Spring Boot/Cloud 版本不同而有所差异&lt;/li&gt;&#xA;&lt;li&gt;在生产环境实施前应在测试环境充分验证&lt;/li&gt;&#xA;&lt;li&gt;如果确实需要动态修改数据库配置，建议使用更优雅的方式如多数据源切换&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title></title>
      <link>/post/others/economy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/others/economy/</guid>
      <description>&lt;h1 id=&#34;2025-反内卷&#34;&gt;&#xA;  2025 反内卷&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2025-%e5%8f%8d%e5%86%85%e5%8d%b7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;本轮反内卷法治化与市场化结合，上一轮去产能主要以行政主导模式 #财经-2025-16&#xA;&lt;ul&gt;&#xA;&lt;li&gt;上一轮去产能，中央设定产能淘汰硬指标（如钢铁去产能1.5亿吨），纳入地方政府考核体系，通过“一刀切”关停、限产实现快速出清。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;本轮“反内卷”政策，具有一系列明确的法律约束，即新修订的《反不正当竞争法》明确禁止“低于成本价倾销”，建立公平竞争审查制度。&lt;/li&gt;&#xA;&lt;li&gt;同时，更为注重市场引导：通过产能置换指标交易（如水泥行业每新增1吨产能需退出1.5吨旧产能）、行业协会自律倡议（如光伏企业集体减产30%）实现渐进式出清。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;同时，上一轮去产能主要为国企主导实施。国有企业承担80%钢铁去产能任务，政策执行刚性强。本轮行业“反内卷”，新兴行业（如光伏、汽车等）民企占比超70%，政策更依赖行业自发协调（如中汽协倡议统一供应商账期）而非行政命令。&lt;/li&gt;&#xA;&lt;li&gt;同时，面对的行业也不一样。本轮“反内卷”所对应的是部分先进制造业。由于部分先进制造业出海，前期按照全球需求进行产能布局，外需回落或暂时的贸易壁垒才加剧了供需错配压力。&lt;/li&gt;&#xA;&lt;li&gt;本轮行业“反内卷”面临总需求疲软，通货紧缩的宏观背景；上一轮去产能时，需求端支撑，价格传导顺畅。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;对一些工业和制造业行业而言，“反内卷”也势必将导致一定程度的“去产能”。但不意味着以“去产能”为核心目的来推动“反内卷”，更不适合刚性的以产量和投资下降等产能去化指标来衡量“反内卷”效果。由于本轮调整的行业范围与性质较上一轮更为复杂，“反内卷”必须坚持以纠正市场失灵，建立公平竞争的市场秩序为最终目标的改革思路，而不能变成新一轮的行政性“去产能”。本轮行业反内卷的核心是提质，走高质量发展道路，而非简单的“去产能”。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;什么是适度宽松的货币政策&#34;&gt;&#xA;  什么是适度宽松的货币政策？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%80%e4%b9%88%e6%98%af%e9%80%82%e5%ba%a6%e5%ae%bd%e6%9d%be%e7%9a%84%e8%b4%a7%e5%b8%81%e6%94%bf%e7%ad%96&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h1 id=&#34;通货膨胀为什么有利于企业提高利润&#34;&gt;&#xA;  通货膨胀为什么有利于企业提高利润？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%80%9a%e8%b4%a7%e8%86%a8%e8%83%80%e4%b8%ba%e4%bb%80%e4%b9%88%e6%9c%89%e5%88%a9%e4%ba%8e%e4%bc%81%e4%b8%9a%e6%8f%90%e9%ab%98%e5%88%a9%e6%b6%a6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;通货膨胀在一定条件下可能对企业利润产生积极影响，主要原因如下：&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;1-价格上涨带动收入增长&#34;&gt;&#xA;  1. &lt;strong&gt;价格上涨带动收入增长&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e4%bb%b7%e6%a0%bc%e4%b8%8a%e6%b6%a8%e5%b8%a6%e5%8a%a8%e6%94%b6%e5%85%a5%e5%a2%9e%e9%95%bf&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;产品提价能力&lt;/strong&gt;：通货膨胀推高整体价格水平时，企业可能将成本上涨（如原材料、人工）转嫁给消费者，提高产品售价。若需求弹性较小（消费者对价格不敏感），销售收入增长会快于成本增长，从而扩大利润空间。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;名义收入增加&lt;/strong&gt;：即使实际销量不变，价格上涨会直接推高企业的名义收入，在财务报表上体现为利润上升。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;2-债务实际价值下降&#34;&gt;&#xA;  2. &lt;strong&gt;债务实际价值下降&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e5%80%ba%e5%8a%a1%e5%ae%9e%e9%99%85%e4%bb%b7%e5%80%bc%e4%b8%8b%e9%99%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;减轻债务负担&lt;/strong&gt;：企业若持有固定利率债务，通货膨胀会降低债务的实际价值（未来偿还的货币购买力下降）。例如，企业借入100万元，通胀率为10%时，第二年这笔债务的实际价值相当于约90万元，变相减少企业负担。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;杠杆效应&lt;/strong&gt;：资产价值随通胀上升，而负债名义值不变，可能改善企业资产负债表，增强融资能力。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;3-库存收益存货利润&#34;&gt;&#xA;  3. &lt;strong&gt;库存收益（存货利润）&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-%e5%ba%93%e5%ad%98%e6%94%b6%e7%9b%8a%e5%ad%98%e8%b4%a7%e5%88%a9%e6%b6%a6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;前期低成本库存增值&lt;/strong&gt;：持有大量原材料或成品库存的企业，在通胀期间可按更高价格出售库存，形成“存货利润”。例如，以低价购入的原材料在生产后以高价卖出，利润被放大。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;会计利润提升&lt;/strong&gt;：在先进先出（FIFO）会计方法下，早期低成本库存被先计入成本，当期收入按高价匹配，利润虚增（但需注意税务影响）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;4-刺激消费与投资需求&#34;&gt;&#xA;  4. &lt;strong&gt;刺激消费与投资需求&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4-%e5%88%ba%e6%bf%80%e6%b6%88%e8%b4%b9%e4%b8%8e%e6%8a%95%e8%b5%84%e9%9c%80%e6%b1%82&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;提前消费&lt;/strong&gt;：若消费者预期未来价格继续上涨，可能提前购买商品，短期提振企业销量。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;资产升值预期&lt;/strong&gt;：通胀环境下，企业持有的不动产、设备等资产名义价值上升，可能通过资产重估或抵押贷款获得额外收益。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;5-工资调整滞后&#34;&gt;&#xA;  5. &lt;strong&gt;工资调整滞后&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#5-%e5%b7%a5%e8%b5%84%e8%b0%83%e6%95%b4%e6%bb%9e%e5%90%8e&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;人工成本暂时偏低&lt;/strong&gt;：工资调整通常滞后于物价上涨，短期内企业用工成本实际下降，利润率扩大（但长期可能引发员工不满或劳动力流失）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;需注意的风险与限制&#34;&gt;&#xA;  需注意的&lt;strong&gt;风险与限制&lt;/strong&gt;：&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9c%80%e6%b3%a8%e6%84%8f%e7%9a%84%e9%a3%8e%e9%99%a9%e4%b8%8e%e9%99%90%e5%88%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;成本传导不畅&lt;/strong&gt;：若市场竞争激烈或需求疲软，企业无法完全转嫁成本，利润反而受压。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;恶性通胀破坏经济&lt;/strong&gt;：持续高通胀会导致消费者购买力锐减、供应链混乱，最终损害企业长期经营。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;利率上升压力&lt;/strong&gt;：央行可能加息抑制通胀，增加企业融资成本。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;总结&#34;&gt;&#xA;  总结：&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%80%bb%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;通货膨胀对企业利润的促进作用主要体现在&lt;strong&gt;价格传导能力&lt;/strong&gt;、&lt;strong&gt;债务稀释&lt;/strong&gt;和&lt;strong&gt;库存收益&lt;/strong&gt;等方面，但高度依赖行业特性、市场结构和通胀程度。合理利用通胀环境可提升短期利润，但企业需警惕长期经济失衡风险。&lt;/p&gt;&#xA;&lt;h1 id=&#34;mess&#34;&gt;&#xA;  mess&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mess&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;沿海地区高歌猛进的人工智能、大模型、具身智能、物联网、工业互联网等等，必将给内地相对传统的产业进一步赋能，带来进一步的效率提升&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>2025 广州 找工作</title>
      <link>/post/blog/2025/2025-%E5%B9%BF%E5%B7%9E-%E6%89%BE%E5%B7%A5%E4%BD%9C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/blog/2025/2025-%E5%B9%BF%E5%B7%9E-%E6%89%BE%E5%B7%A5%E4%BD%9C/</guid>
      <description>&lt;h1 id=&#34;2025-广州-找工作&#34;&gt;&#xA;  2025 广州 找工作&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2025-%e5%b9%bf%e5%b7%9e-%e6%89%be%e5%b7%a5%e4%bd%9c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;面试记录&#34;&gt;&#xA;  面试记录&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e8%ae%b0%e5%bd%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;2025-03-21-网易游戏商城-充值-第一面-未通过&#34;&gt;&#xA;  2025-03-21 网易游戏商城-充值 第一面 未通过&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2025-03-21-%e7%bd%91%e6%98%93%e6%b8%b8%e6%88%8f%e5%95%86%e5%9f%8e-%e5%85%85%e5%80%bc-%e7%ac%ac%e4%b8%80%e9%9d%a2-%e6%9c%aa%e9%80%9a%e8%bf%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在生产环境下如何给一张表添加索引？&lt;/li&gt;&#xA;&lt;li&gt;数据库的ACID有了解吗？&lt;/li&gt;&#xA;&lt;li&gt;kafka如何保证消息的有序性？&lt;/li&gt;&#xA;&lt;li&gt;redis的集群模式有哪些？&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;2025-03-19-探迹科技-后台开发python-技术复试-通过&#34;&gt;&#xA;  2025-03-19 探迹科技-后台开发python 技术复试 通过&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2025-03-19-%e6%8e%a2%e8%bf%b9%e7%a7%91%e6%8a%80-%e5%90%8e%e5%8f%b0%e5%bc%80%e5%8f%91python-%e6%8a%80%e6%9c%af%e5%a4%8d%e8%af%95-%e9%80%9a%e8%bf%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;开发的模块的QPS是多少？&lt;/li&gt;&#xA;&lt;li&gt;Netty的线程模式是怎样的？(简历中提到了使用了Netty作为tcp连接的框架)&lt;/li&gt;&#xA;&lt;li&gt;如果商城中有10亿个商品，每天的活跃用户平均有1000w，每个用户平均每天会浏览10个商品，如何在数据库中保存浏览记录？&lt;/li&gt;&#xA;&lt;li&gt;你的职业规划是怎样的？&lt;/li&gt;&#xA;&lt;li&gt;反问&#xA;&lt;ul&gt;&#xA;&lt;li&gt;为什么要是属于python作为后台开发的语言？&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;2025-03-12-探迹科技-后台开发python-技术初面-通过&#34;&gt;&#xA;  2025-03-12 探迹科技-后台开发python 技术初面 通过&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2025-03-12-%e6%8e%a2%e8%bf%b9%e7%a7%91%e6%8a%80-%e5%90%8e%e5%8f%b0%e5%bc%80%e5%8f%91python-%e6%8a%80%e6%9c%af%e5%88%9d%e9%9d%a2-%e9%80%9a%e8%bf%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;开发的模块的QPS是多少？&lt;/li&gt;&#xA;&lt;li&gt;有一个很长的整数数组，给定一个整数total，返回2个下标，使得下标对应的两个元素相加等于total，要怎么实现？&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;HashMap&lt;/code&gt; 底层的数据结构是怎样的？&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;HashMap&lt;/code&gt; 是线程安全的吗？如何保证它线程安全？&lt;/li&gt;&#xA;&lt;li&gt;主从数据库是如何进行数据同步的？&lt;/li&gt;&#xA;&lt;li&gt;有没有关注什么新技术？&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>article</title>
      <link>/post/life/article/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/life/article/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;./post/blog/2025/2025-03-31-Shardingsphere-prometheus-%e9%85%8d%e7%bd%ae&#34;&gt;2025-03-31-Shardingsphere-prometheus-配置&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;./post/blog/2025/2025-%e5%b9%bf%e5%b7%9e-%e6%89%be%e5%b7%a5%e4%bd%9c&#34;&gt;2025-广州-找工作&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;./post/blog/2025/2025-03-29-%e6%95%99%e8%82%b2%e5%88%b0%e5%ba%95%e6%80%8e%e4%b9%88%e4%ba%86&#34;&gt;2025-03-29 教育到底怎么了？&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;./post/blog/2025/2025-03-16-%e8%83%bd%e6%89%be%e5%88%b0%e5%b7%a5%e4%bd%9c%e5%90%97&#34;&gt;2025-03-16 能找到工作吗？&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Artificial Intelligence</title>
      <link>/post/computer-science/artificial-intelligence/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/artificial-intelligence/</guid>
      <description>&lt;h1 id=&#34;artificial-intelligence&#34;&gt;&#xA;  Artificial Intelligence&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#artificial-intelligence&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;cherry-studio&#34;&gt;&#xA;  Cherry Studio&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#cherry-studio&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://linux.do/t/topic/503051&#34;&gt;面向新手的MCP使用教程：在Cherry Studio中配置和使用模型上下文协议&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>crawler</title>
      <link>/post/computer-science/crawler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/crawler/</guid>
      <description>&lt;h1 id=&#34;crawler&#34;&gt;&#xA;  crawler&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#crawler&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/570489043&#34;&gt;针对豆瓣反爬问题的讨论&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/54742748&#34;&gt;从豆瓣的反爬说说自建代理池&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>F1</title>
      <link>/post/others/f1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/others/f1/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://b23.tv/FUBz7SC&#34;&gt;Chester117&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://b23.tv/NkScKgZ&#34;&gt;合集·F1分钟小知识&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://b23.tv/efVORFJ&#34;&gt;我亲手搓了一条F1轮胎&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>git</title>
      <link>/post/computer-science/git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/git/</guid>
      <description>&lt;h1 id=&#34;branches&#34;&gt;&#xA;  branches&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#branches&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;git checkout main #切换到 main 分支&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;git branch #查看本地分支&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;git branch -a #查看所有分支（包括远程）&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;git branch -r #仅查看远程分支&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Gitlab</title>
      <link>/post/computer-science/ci-cd/gitlab/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/ci-cd/gitlab/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/binarywang/Linux-Tutorial/blob/master/Gitlab-Install-And-Settings.md&#34;&gt;Gitlab 安装和配置&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Java并发编程实战</title>
      <link>/post/books/computer-science/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/books/computer-science/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/10484692/&#34;&gt;Java并发编程实战&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;第1章-简介&#34;&gt;&#xA;  第1章 简介&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac1%e7%ab%a0-%e7%ae%80%e4%bb%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;11-并发简史&#34;&gt;&#xA;  1.1 并发简史&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#11-%e5%b9%b6%e5%8f%91%e7%ae%80%e5%8f%b2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;12-线程的优势&#34;&gt;&#xA;  1.2 线程的优势&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#12-%e7%ba%bf%e7%a8%8b%e7%9a%84%e4%bc%98%e5%8a%bf&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;13-线程带来的风险&#34;&gt;&#xA;  1.3 线程带来的风险&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#13-%e7%ba%bf%e7%a8%8b%e5%b8%a6%e6%9d%a5%e7%9a%84%e9%a3%8e%e9%99%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;14-线程无处不在&#34;&gt;&#xA;  1.4 线程无处不在&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#14-%e7%ba%bf%e7%a8%8b%e6%97%a0%e5%a4%84%e4%b8%8d%e5%9c%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;开发线程安全的类比开发非线程安全的类要更加谨慎和细致&lt;/li&gt;&#xA;&lt;li&gt;每个Java应用程序都会使用线程&#xA;&lt;ul&gt;&#xA;&lt;li&gt;当JVM启动时，它将为JVM的内部任务（例如，&lt;strong&gt;垃圾收集&lt;/strong&gt;、&lt;strong&gt;终结操作&lt;/strong&gt;等）创建后台线程，并创建一个&lt;strong&gt;主线程&lt;/strong&gt;来运行main方法。&lt;/li&gt;&#xA;&lt;li&gt;AWT（Abstract Window Toolkit，抽象窗口工具库）和Swing的用户界面框架将创建线程来管理&lt;strong&gt;用户界面事件&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;li&gt;Timer将创建线程来&lt;strong&gt;执行延迟任务&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;li&gt;一些组件框架，例如Servlet和RMI，都会创建线程池并调用这些线程中的方法。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;当某个框架在应用程序中引入并发性时，&lt;strong&gt;通常不可能将并发性仅局限于框架代码&lt;/strong&gt;，因为框架本身会回调（Callback）应用程序的代码，而这些代码将访问应用程序的状态。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;对线程安全性的需求也不能局限于被调用的代码，而是要延伸到需要访问这些代码所访问的程序状态的所有代码路径&lt;/strong&gt;。因此，对线程安全性的需求将在程序中蔓延开来。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;第2章-线程安全性&#34;&gt;&#xA;  第2章 线程安全性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac2%e7%ab%a0-%e7%ba%bf%e7%a8%8b%e5%ae%89%e5%85%a8%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;要编写线程安全的代码，其核心在于要&lt;strong&gt;对状态访问操作进行管理&lt;/strong&gt;，特别是对&lt;strong&gt;共享的（Shared）和可变的（Mutable）状态&lt;/strong&gt;的访问。&lt;/li&gt;&#xA;&lt;li&gt;“共享”意味着变量可以由多个线程同时访问，而“可变”则意味着变量的值在其生命周期内可以发生变化。&lt;/li&gt;&#xA;&lt;li&gt;一个对象是否需要是线程安全的，取决于它是否被多个线程访问&lt;/li&gt;&#xA;&lt;li&gt;当多个线程访问某个状态变量并且其中有一个线程执行写入操作时，必须采用同步机制来协同这些线程对变量的访问。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Java中的主要同步机制是关键字&lt;strong&gt;synchronized&lt;/strong&gt;，它提供了一种独占的加锁方式，但“同步”这个术语还包括&lt;strong&gt;volatile类型的变量&lt;/strong&gt;，&lt;strong&gt;显式锁（Explicit Lock）&lt;strong&gt;以及&lt;/strong&gt;原子变量&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;21-什么是线程安全性&#34;&gt;&#xA;  2.1 什么是线程安全性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#21-%e4%bb%80%e4%b9%88%e6%98%af%e7%ba%bf%e7%a8%8b%e5%ae%89%e5%85%a8%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在线程安全性的定义中，最核心的概念就是&lt;strong&gt;正确性&lt;/strong&gt;。如果对线程安全性的定义是模糊的，那么就是因为缺乏对正确性的清晰定义。&lt;/li&gt;&#xA;&lt;li&gt;正确性的含义是，&lt;strong&gt;某个类的行为与其规范完全一致&lt;/strong&gt;。在良好的规范中通常会定义各种不变性条件（Invariant）来约束对象的状态，以及定义各种后验条件（Postcondition）来描述对象操作的结果。&lt;/li&gt;&#xA;&lt;li&gt;线程安全性：&lt;strong&gt;当多个线程访问某个类时，这个类始终都能表现出正确的行为，那么就称这个类是线程安全的&lt;/strong&gt;。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;当多个线程访问某个类时，不管运行时环境&lt;strong&gt;采用何种调度方式&lt;/strong&gt;或者这些&lt;strong&gt;线程将如何交替执行&lt;/strong&gt;，并且&lt;strong&gt;在主调代码中不需要任何额外的同步或协同&lt;/strong&gt;，这个类都能表现出正确的行为，那么就称这个类是线程安全的。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;在线程安全类中封装了必要的同步机制，因此客户端无须进一步采取同步措施。&lt;/li&gt;&#xA;&lt;li&gt;无状态对象一定是线程安全的&#xA;&lt;ul&gt;&#xA;&lt;li&gt;大多数Servlet都是无状态的，从而极大地降低了在实现Servlet线程安全性时的复杂性。只有当Servlet在处理请求时需要保存一些信息，线程安全性才会成为一个问题。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;22-原子性&#34;&gt;&#xA;  2.2 原子性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#22-%e5%8e%9f%e5%ad%90%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在并发编程中，这种由于不恰当的执行时序而出现不正确的结果是一种非常重要的情况，它有一个正式的名字：&lt;strong&gt;竞态条件（Race Condition）&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;221-竞态条件&#34;&gt;&#xA;  2.2.1 竞态条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#221-%e7%ab%9e%e6%80%81%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;当某个计算的正确性取决于多个线程的交替执行时序时，那么就会发生竞态条件&lt;/strong&gt;。换句话说，就是正确的结果要取决于运气&lt;/li&gt;&#xA;&lt;li&gt;“先检查后执行”：首先观察到某个条件为真（例如文件X不存在），然后根据这个观察结果采用相应的动作（创建文件X），但事实上，&lt;strong&gt;在你观察到这个结果以及开始创建文件之间，观察结果可能变得无效&lt;/strong&gt;（另一个线程在这期间创建了文件X），从而导致各种问题（未预期的异常、数据被覆盖、文件被破坏等）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;222-示例延迟初始化中的竞态条件&#34;&gt;&#xA;  2.2.2 示例：延迟初始化中的竞态条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#222-%e7%a4%ba%e4%be%8b%e5%bb%b6%e8%bf%9f%e5%88%9d%e5%a7%8b%e5%8c%96%e4%b8%ad%e7%9a%84%e7%ab%9e%e6%80%81%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;延迟初始化的目的是将对象的初始化操作推迟到实际被使用时才进行，同时要确保只被初始化一次。&lt;/li&gt;&#xA;&lt;li&gt;假定线程A和线程B同时执行getInstance。A看到instance为空，因而创建一个新的ExpensiveObject实例。B同样需要判断instance是否为空。此时的instance是否为空，要取决于不可预测的时序，包括线程的调度方式，以及A需要花多长时间来初始化ExpensiveObject并设置instance。如果当B检查时，instance为空，那么在两次调用getInstance时可能会得到不同的结果，即使getInstance通常被认为是返回相同的实例。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;223-复合操作&#34;&gt;&#xA;  2.2.3 复合操作&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#223-%e5%a4%8d%e5%90%88%e6%93%8d%e4%bd%9c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;要避免竞态条件问题，就必须在某个线程修改该变量时，通过某种方式防止其他线程使用这个变量，从而确保其他线程只能在修改操作完成之前或之后读取和修改状态，而不是在修改状态的过程中。&lt;/li&gt;&#xA;&lt;li&gt;假定有两个操作A和B，如果从执行A的线程来看，当另一个线程执行B时，要么将B全部执行完，要么完全不执行B，那么A和B对彼此来说是&lt;strong&gt;原子的&lt;/strong&gt;。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;原子操作是指，对于访问同一个状态的所有操作（包括该操作本身）来说，这个操作是一个以原子方式执行的操作。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;在&lt;strong&gt;java.util.concurrent.atomic&lt;/strong&gt;包中包含了一些原子变量类，用于实现在数值和对象引用上的原子状态转换。通过用AtomicLong来代替long类型的计数器，能够确保所有对计数器状态的访问操作都是原子的。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;当在无状态的类中添加一个状态时，如果该状态完全由线程安全的对象来管理，那么这个类仍然是线程安全的&lt;/li&gt;&#xA;&lt;li&gt;当状态变量的数量由一个变为多个时，并不会像状态变量数量由零个变为一个那样简单&lt;/li&gt;&#xA;&lt;li&gt;在实际情况中，应尽可能地使用现有的线程安全对象（例如AtomicLong）来管理类的状态。与非线程安全的对象相比，判断线程安全对象的可能状态及其状态转换情况要更为容易，从而也更容易维护和验证线程安全性。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;23-加锁机制&#34;&gt;&#xA;  2.3 加锁机制&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#23-%e5%8a%a0%e9%94%81%e6%9c%ba%e5%88%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;要保持状态的一致性，就需要在单个原子操作中更新所有相关的状态变量。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;231-内置锁&#34;&gt;&#xA;  2.3.1 内置锁&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#231-%e5%86%85%e7%bd%ae%e9%94%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Java提供了一种内置的锁机制来支持原子性：同步代码块（Synchronized Block）。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;以关键字synchronized来修饰的方法就是一种横跨整个方法体的同步代码块，其中该同步代码块的锁就是方法调用所在的对象。静态的synchronized方法以Class对象作为锁。&lt;/li&gt;&#xA;&lt;li&gt;每个Java对象都可以用做一个实现同步的锁，这些锁被称为内置锁（Intrinsic Lock）或监视器锁（Monitor Lock）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;232-重入&#34;&gt;&#xA;  2.3.2 重入&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#232-%e9%87%8d%e5%85%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;当某个线程请求一个由其他线程持有的锁时，发出请求的线程就会阻塞&#xA;&lt;ul&gt;&#xA;&lt;li&gt;由于内置锁是可重入的，因此如果某个线程试图获得一个已经由它自己持有的锁，那么这个请求就会成功。“重入”意味着获取锁的操作的粒度是“线程”，而不是“调用”&lt;/li&gt;&#xA;&lt;li&gt;重入的一种实现方法是，为每个锁关联一个获取计数值和一个所有者线程。&lt;/li&gt;&#xA;&lt;li&gt;当计数值为0时，这个锁就被认为是没有被任何线程持有。当线程请求一个未被持有的锁时，JVM将记下锁的持有者，并且将获取计数值置为1。如果同一个线程再次获取这个锁，计数值将递增，而当线程退出同步代码块时，计数器会相应地递减。当计数值为0时，这个锁将被释放。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;24-用锁来保护状态&#34;&gt;&#xA;  2.4 用锁来保护状态&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#24-%e7%94%a8%e9%94%81%e6%9d%a5%e4%bf%9d%e6%8a%a4%e7%8a%b6%e6%80%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对于可能被多个线程同时访问的可变状态变量，在访问它时都需要持有同一个锁，在这种情况下，我们称状态变量是由这个锁保护的。&lt;/li&gt;&#xA;&lt;li&gt;之所以每个对象都有一个内置锁，只是为了免去显式地创建锁对象。&lt;/li&gt;&#xA;&lt;li&gt;每个共享的和可变的变量都应该只由一个锁来保护，从而使维护人员知道是哪一个锁。&lt;/li&gt;&#xA;&lt;li&gt;一种常见的加锁约定是，将所有的可变状态都封装在对象内部，并通过对象的内置锁对所有访问可变状态的代码路径进行同步，使得在该对象上不会发生并发访问。&lt;/li&gt;&#xA;&lt;li&gt;并非所有数据都需要锁的保护，只有被多个线程同时访问的可变数据才需要通过锁来保护。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;25-活跃性与性能&#34;&gt;&#xA;  2.5 活跃性与性能&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#25-%e6%b4%bb%e8%b7%83%e6%80%a7%e4%b8%8e%e6%80%a7%e8%83%bd&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;不良并发（Poor Concurrency）应用程序：可同时调用的数量，不仅受到可用处理资源的限制，还受到应用程序本身结构的限制。&lt;/li&gt;&#xA;&lt;li&gt;当实现某个同步策略时，一定不要盲目地为了性能而牺牲简单性（这可能会破坏安全性）。&lt;/li&gt;&#xA;&lt;li&gt;无论是执行计算密集的操作，还是在执行某个可能阻塞的操作，如果持有锁的时间过长，那么都会带来活跃性或性能问题。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;当执行时间较长的计算或者可能无法快速完成的操作时（例如，网络I/O或控制台I/O），一定不要持有锁。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;第3章-对象的共享&#34;&gt;&#xA;  第3章 对象的共享&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac3%e7%ab%a0-%e5%af%b9%e8%b1%a1%e7%9a%84%e5%85%b1%e4%ba%ab&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;同步还有另一个重要的方面：内存可见性（Memory Visibility）。我们不仅希望防止某个线程正在使用对象状态而另一个线程在同时修改该状态，而且希望确保当一个线程修改了对象状态后，其他线程能够看到发生的状态变化。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;31-可见性&#34;&gt;&#xA;  3.1 可见性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#31-%e5%8f%af%e8%a7%81%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在没有同步的情况下，编译器、处理器以及运行时等都可能对操作的执行顺序进行一些意想不到的调整。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;311-失效数据&#34;&gt;&#xA;  3.1.1 失效数据&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#311-%e5%a4%b1%e6%95%88%e6%95%b0%e6%8d%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;312非原子的64位操作&#34;&gt;&#xA;  3.1.2　非原子的64位操作&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#312%e9%9d%9e%e5%8e%9f%e5%ad%90%e7%9a%8464%e4%bd%8d%e6%93%8d%e4%bd%9c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;当线程在没有同步的情况下读取变量时，可能会得到一个失效值，但至少这个值是由之前某个线程设置的值，而不是一个随机值。这种安全性保证也被称为最低安全性（out-of-thin-air safety）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;最低安全性适用于绝大多数变量，但是存在一个例外：非volatile类型的64位数值变量（double和long，请参见3.1.4节）。Java内存模型要求，变量的读取操作和写入操作都必须是原子操作，但对于非volatile类型的long和double变量，JVM允许将64位的读操作或写操作分解为两个32位的操作。当读取一个非volatile类型的long变量时，如果对该变量的读操作和写操作在不同的线程中执行，那么很可能会读取到某个值的高32位和另一个值的低32位￼。因此，即使不考虑失效数据问题，在多线程程序中使用共享且可变的long和double等类型的变量也是不安全的，除非用关键字volatile来声明它们，或者用锁保护起来。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;313加锁与可见性&#34;&gt;&#xA;  3.1.3　加锁与可见性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#313%e5%8a%a0%e9%94%81%e4%b8%8e%e5%8f%af%e8%a7%81%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;加锁的含义不仅仅局限于互斥行为，还包括内存可见性。为了确保所有线程都能看到共享变量的最新值，所有执行读操作或者写操作的线程都必须在同一个锁上同步。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;314volatile变量&#34;&gt;&#xA;  3.1.4　Volatile变量&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#314volatile%e5%8f%98%e9%87%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Java语言提供了一种稍弱的同步机制，即volatile变量，用来确保将变量的更新操作通知到其他线程。当把变量声明为volatile类型后，编译器与运行时都会注意到这个变量是共享的，因此不会将该变量上的操作与其他内存操作一起重排序。volatile变量不会被缓存在寄存器或者对其他处理器不可见的地方，因此在读取volatile类型的变量时总会返回最新写入的值。&lt;/li&gt;&#xA;&lt;li&gt;在访问volatile变量时不会执行加锁操作，因此也就不会使执行线程阻塞，因此volatile变量是一种比sychronized关键字更轻量级的同步机制。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在当前大多数处理器架构上，读取volatile变量的开销只比读取非volatile变量的开销略高一些。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;我们并不建议过度依赖volatile变量提供的可见性。如果在代码中依赖volatile变量来控制状态的可见性，通常比使用锁的代码更脆弱，也更难以理解。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;仅当volatile变量能简化代码的实现以及对同步策略的验证时，才应该使用它们。&lt;/li&gt;&#xA;&lt;li&gt;如果在验证正确性时需要对可见性进行复杂的判断，那么就不要使用volatile变量。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;volatile的语义不足以确保递增操作（count++）的原子性，除非你能确保只有一个线程对变量执行写操作。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;加锁机制既可以确保可见性又可以确保原子性，而volatile变量只能确保可见性。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;当且仅当满足以下所有条件时，才应该使用volatile变量&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对变量的写入操作不依赖变量的当前值，或者你能确保只有单个线程更新变量的值。&lt;/li&gt;&#xA;&lt;li&gt;该变量不会与其他状态变量一起纳入不变性条件中。&lt;/li&gt;&#xA;&lt;li&gt;在访问变量时不需要加锁。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;调试小提示：对于服务器应用程序，无论在开发阶段还是在测试阶段，当启动JVM时一定都要指定-server命令行选项。server模式的JVM将比client模式的JVM进行更多的优化，例如将循环中未被修改的变量提升到循环外部，因此在开发环境（client模式的JVM）中能正确运行的代码，可能会在部署环境（server模式的JVM）中运行失败。例如，如果在程序清单3-4中“忘记”把asleep变量声明为volatile类型，那么server模式的JVM会将asleep的判断条件提升到循环体外部（这将导致一个无限循环），但client模式的JVM不会这么做。在解决开发环境中出现无限循环问题时，解决这个问题的开销远小于解决在应用环境出现无限循环的开销。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;32-发布与逸出&#34;&gt;&#xA;  3.2 发布与逸出&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#32-%e5%8f%91%e5%b8%83%e4%b8%8e%e9%80%b8%e5%87%ba&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;“发布（Publish）”一个对象的意思是指，使对象能够在当前作用域之外的代码中使用。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;将一个指向该对象的引用保存到其他代码可以访问的地方，或者在某一个非私有的方法中返回该引用，或者将引用传递到其他类的方法中。在许多情况中，我们要确保对象及其内部状态不被发布。而在某些情况下，我们又需要发布某个对象，但如果在发布时要确保线程安全性，则可能需要同步。发布内部状态可能会破坏封装性，并使得程序难以维持不变性条件。例如，如果在对象构造完成之前就发布该对象，就会破坏线程安全性。当某个不应该发布的对象被发布时，这种情况就被称为逸出（Escape）。&lt;/li&gt;&#xA;&lt;li&gt;发布对象的最简单方法是将对象的引用保存到一个公有的静态变量中，以便任何类和线程都能看见该对象&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;一般来说，如果一个已经发布的对象能够通过非私有的变量引用和方法调用到达其他的对象，那么这些对象也都会被发布。&lt;/li&gt;&#xA;&lt;li&gt;当某个对象逸出后，你必须假设有某个类或线程可能会误用该对象。这正是需要使用封装的最主要原因：封装能够使得对程序的正确性进行分析变得可能，并使得无意中破坏设计约束条件变得更难。&lt;/li&gt;&#xA;&lt;li&gt;安全的对象构造过程&#xA;&lt;ul&gt;&#xA;&lt;li&gt;不要在构造过程中使this引用逸出&lt;/li&gt;&#xA;&lt;li&gt;在构造过程中使this引用逸出的一个常见错误是，在构造函数中启动一个线程。当对象在其构造函数中创建一个线程时，无论是显式创建（通过将它传给构造函数）还是隐式创建（由于Thread或Runnable是该对象的一个内部类），this引用都会被新创建的线程共享。在对象尚未完全构造之前，新的线程就可以看见它。&lt;/li&gt;&#xA;&lt;li&gt;在构造函数中创建线程并没有错误，但最好不要立即启动它，而是通过一个start或initialize方法来启动&lt;/li&gt;&#xA;&lt;li&gt;在构造函数中调用一个可改写的实例方法时（既不是私有方法，也不是终结方法），同样会导致this引用在构造过程中逸出。&lt;/li&gt;&#xA;&lt;li&gt;如果想在构造函数中注册一个事件监听器或启动线程，那么可以使用一个私有的构造函数和一个公共的工厂方法（Factory Method），从而避免不正确的构造过程&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;33-线程封闭&#34;&gt;&#xA;  3.3 线程封闭&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#33-%e7%ba%bf%e7%a8%8b%e5%b0%81%e9%97%ad&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Swing应用程序的许多并发错误都是由于错误地在另一个线程中使用了这些被封闭的对象。&lt;/li&gt;&#xA;&lt;li&gt;线程封闭是在程序设计中的一个考虑因素，必须在程序中实现。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;331-ad-hoc线程封闭&#34;&gt;&#xA;  3.3.1 Ad-hoc线程封闭&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#331-ad-hoc%e7%ba%bf%e7%a8%8b%e5%b0%81%e9%97%ad&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在volatile变量上存在一种特殊的线程封闭。只要你能确保只有单个线程对共享的volatile变量执行写入操作，那么就可以安全地在这些共享的volatile变量上执行“读取-修改-写入”的操作。在这种情况下，相当于将修改操作封闭在单个线程中以防止发生竞态条件，并且volatile变量的可见性保证还确保了其他线程能看到最新的值。&lt;/li&gt;&#xA;&lt;li&gt;由于Ad-hoc线程封闭技术的脆弱性，因此在程序中尽量少用它，在可能的情况下，应该使用更强的线程封闭技术（例如，栈封闭或ThreadLocal类）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;332-栈封闭&#34;&gt;&#xA;  3.3.2 栈封闭&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#332-%e6%a0%88%e5%b0%81%e9%97%ad&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;栈封闭是线程封闭的一种特例，在栈封闭中，只能通过局部变量才能访问对象。&lt;/li&gt;&#xA;&lt;li&gt;由于任何方法都无法获得对基本类型的引用，因此Java语言的这种语义就确保了基本类型的局部变量始终封闭在线程内。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;333-threadlocal-类&#34;&gt;&#xA;  3.3.3 ThreadLocal 类&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#333-threadlocal-%e7%b1%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ThreadLocal对象通常用于防止对可变的单实例变量（Singleton）或全局变量进行共享。&lt;/li&gt;&#xA;&lt;li&gt;假设你需要将一个单线程应用程序移植到多线程环境中，通过将共享的全局变量转换为ThreadLocal对象（如果全局变量的语义允许），可以维持线程安全性。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;34-不变性&#34;&gt;&#xA;  3.4 不变性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#34-%e4%b8%8d%e5%8f%98%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果某个对象在被创建后其状态就不能被修改，那么这个对象就称为不可变对象。&lt;/li&gt;&#xA;&lt;li&gt;不可变对象一定是线程安全的&lt;/li&gt;&#xA;&lt;li&gt;虽然在Java语言规范和Java内存模型中都没有给出不可变性的正式定义，但不可变性并不等于将对象中所有的域都声明为final类型，即使对象中所有的域都是final类型的，这个对象也仍然是可变的，因为在final类型的域中可以保存对可变对象的引用。&lt;/li&gt;&#xA;&lt;li&gt;当满足以下条件时，对象才是不可变的：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对象创建以后其状态就不能修改。&lt;/li&gt;&#xA;&lt;li&gt;对象的所有域都是final类型。&lt;/li&gt;&#xA;&lt;li&gt;对象是正确创建的（在对象的创建期间，this引用没有逸出）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;341-final域&#34;&gt;&#xA;  3.4.1 Final域&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#341-final%e5%9f%9f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;关键字final可以视为C++中const机制的一种受限版本，用于构造不可变性对象。final类型的域是不能修改的（但如果final域所引用的对象是可变的，那么这些被引用的对象是可以修改的）。&lt;/li&gt;&#xA;&lt;li&gt;即使对象是可变的，通过将对象的某些域声明为final类型，仍然可以简化对状态的判断，因此限制对象的可变性也就相当于限制了该对象可能的状态集合。&lt;/li&gt;&#xA;&lt;li&gt;正如“除非需要更高的可见性，否则应将所有的域都声明为私有域”[EJ Item 12]是一个良好的编程习惯，“除非需要某个域是可变的，否则应将其声明为final域”也是一个良好的编程习惯。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;342-示例使用volatile类型来发布不可变对象&#34;&gt;&#xA;  3.4.2 示例：使用volatile类型来发布不可变对象&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#342-%e7%a4%ba%e4%be%8b%e4%bd%bf%e7%94%a8volatile%e7%b1%bb%e5%9e%8b%e6%9d%a5%e5%8f%91%e5%b8%83%e4%b8%8d%e5%8f%af%e5%8f%98%e5%af%b9%e8%b1%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通过使用包含多个状态变量的容器对象来维持不变性条件，并使用一个volatile类型的引用来确保可见性，使得Volatile Cached Factorizer在没有显式地使用锁的情况下仍然是线程安全的&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;35-安全发布&#34;&gt;&#xA;  3.5 安全发布&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#35-%e5%ae%89%e5%85%a8%e5%8f%91%e5%b8%83&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;351-不正确的发布正确的对象被破坏&#34;&gt;&#xA;  3.5.1 不正确的发布：正确的对象被破坏&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#351-%e4%b8%8d%e6%ad%a3%e7%a1%ae%e7%9a%84%e5%8f%91%e5%b8%83%e6%ad%a3%e7%a1%ae%e7%9a%84%e5%af%b9%e8%b1%a1%e8%a2%ab%e7%a0%b4%e5%9d%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;你不能指望一个尚未被完全创建的对象拥有完整性。某个观察该对象的线程将看到对象处于不一致的状态，然后看到对象的状态突然发生变化，即使线程在对象发布后还没有修改过它。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;352-不可变对象与初始化安全性&#34;&gt;&#xA;  3.5.2 不可变对象与初始化安全性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#352-%e4%b8%8d%e5%8f%af%e5%8f%98%e5%af%b9%e8%b1%a1%e4%b8%8e%e5%88%9d%e5%a7%8b%e5%8c%96%e5%ae%89%e5%85%a8%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;我们已经知道，即使某个对象的引用对其他线程是可见的，也并不意味着对象状态对于使用该对象的线程来说一定是可见的。为了确保对象状态能呈现出一致的视图，就必须使用同步。&lt;/li&gt;&#xA;&lt;li&gt;任何线程都可以在不需要额外同步的情况下安全地访问不可变对象，即使在发布这些对象时没有使用同步。&lt;/li&gt;&#xA;&lt;li&gt;在没有额外同步的情况下，也可以安全地访问final类型的域。然而，如果final类型的域所指向的是可变对象，那么在访问这些域所指向的对象的状态时仍然需要同步。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;353-安全发布的常用模式&#34;&gt;&#xA;  3.5.3 安全发布的常用模式&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#353-%e5%ae%89%e5%85%a8%e5%8f%91%e5%b8%83%e7%9a%84%e5%b8%b8%e7%94%a8%e6%a8%a1%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;可变对象必须通过安全的方式来发布，这通常意味着在发布和使用该对象的线程时都必须使用同步。&lt;/li&gt;&#xA;&lt;li&gt;要安全地发布一个对象，对象的引用以及对象的状态必须同时对其他线程可见&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在静态初始化函数中初始化一个对象引用。&lt;/li&gt;&#xA;&lt;li&gt;将对象的引用保存到volatile类型的域或者AtomicReferance对象中。&lt;/li&gt;&#xA;&lt;li&gt;将对象的引用保存到某个正确构造对象的final类型域中。&lt;/li&gt;&#xA;&lt;li&gt;将对象的引用保存到一个由锁保护的域中。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;在线程安全容器内部的同步意味着，在将对象放入到某个容器，例如Vector或synchronizedList时，将满足上述最后一条需求。如果线程A将对象X放入一个线程安全的容器，随后线程B读取这个对象，那么可以确保B看到A设置的X状态，即便在这段读/写X的应用程序代码中没有包含显式的同步。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;线程安全库中的容器类提供了以下的安全发布保证&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通过将一个键或者值放入Hashtable、synchronizedMap或者ConcurrentMap中，可以安全地将它发布给任何从这些容器中访问它的线程（无论是直接访问还是通过迭代器访问）。&lt;/li&gt;&#xA;&lt;li&gt;通过将某个元素放入Vector、CopyOnWriteArrayList、CopyOnWriteArraySet、synchronizedList或synchronizedSet中，可以将该元素安全地发布到任何从这些容器中访问该元素的线程。&lt;/li&gt;&#xA;&lt;li&gt;通过将某个元素放入BlockingQueue或者ConcurrentLinkedQueue中，可以将该元素安全地发布到任何从这些队列中访问该元素的线程。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;要发布一个静态构造的对象，最简单和最安全的方式是使用静态的初始化器 &lt;code&gt;public static Holder holder=new Holder（42）&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;静态初始化器由JVM在类的初始化阶段执行。由于在JVM内部存在着同步机制，因此通过这种方式初始化的任何对象都可以被安全地发布&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;354-事实不可变对象&#34;&gt;&#xA;  3.5.4 事实不可变对象&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#354-%e4%ba%8b%e5%ae%9e%e4%b8%8d%e5%8f%af%e5%8f%98%e5%af%b9%e8%b1%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果对象在发布后不会被修改，那么对于其他在没有额外同步的情况下安全地访问这些对象的线程来说，安全发布是足够的。&lt;/li&gt;&#xA;&lt;li&gt;如果对象从技术上来看是可变的，但其状态在发布后不会再改变，那么把这种对象称为“事实不可变对象（Effectively Immutable Object）”&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通过使用事实不可变对象，不仅可以简化开发过程，而且还能由于减少了同步而提高性能。&lt;/li&gt;&#xA;&lt;li&gt;例如，Date本身是可变的￼，但如果将它作为不可变对象来使用，那么在多个线程之间共享Date对象时，就可以省去对锁的使用&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;355-可变对象&#34;&gt;&#xA;  3.5.5 可变对象&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#355-%e5%8f%af%e5%8f%98%e5%af%b9%e8%b1%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果对象在构造后可以修改，那么安全发布只能确保“发布当时”状态的可见性。对于可变对象，不仅在发布对象时需要使用同步，而且在每次对象访问时同样需要使用同步来确保后续修改操作的可见性。&lt;/li&gt;&#xA;&lt;li&gt;在并发程序中使用和共享对象时，可以使用一些实用的策略，包括：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;线程封闭。线程封闭的对象只能由一个线程拥有，对象被封闭在该线程中，并且只能由这个线程修改。&lt;/li&gt;&#xA;&lt;li&gt;只读共享。在没有额外同步的情况下，共享的只读对象可以由多个线程并发访问，但任何线程都不能修改它。共享的只读对象包括不可变对象和事实不可变对象。&lt;/li&gt;&#xA;&lt;li&gt;线程安全共享。线程安全的对象在其内部实现同步，因此多个线程可以通过对象的公有接口来进行访问而不需要进一步的同步。&lt;/li&gt;&#xA;&lt;li&gt;保护对象。被保护的对象只能通过持有特定的锁来访问。保护对象包括封装在其他线程安全对象中的对象，以及已发布的并且由某个特定锁保护的对象。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;356-安全地共享对象&#34;&gt;&#xA;  3.5.6 安全地共享对象&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#356-%e5%ae%89%e5%85%a8%e5%9c%b0%e5%85%b1%e4%ba%ab%e5%af%b9%e8%b1%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h2 id=&#34;第4章-对象的组合&#34;&gt;&#xA;  第4章 对象的组合&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac4%e7%ab%a0-%e5%af%b9%e8%b1%a1%e7%9a%84%e7%bb%84%e5%90%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;41-设计线程安全的类&#34;&gt;&#xA;  4.1 设计线程安全的类&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#41-%e8%ae%be%e8%ae%a1%e7%ba%bf%e7%a8%8b%e5%ae%89%e5%85%a8%e7%9a%84%e7%b1%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;42-实例封闭&#34;&gt;&#xA;  4.2 实例封闭&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#42-%e5%ae%9e%e4%be%8b%e5%b0%81%e9%97%ad&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;43-线程安全性的委托&#34;&gt;&#xA;  4.3 线程安全性的委托&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#43-%e7%ba%bf%e7%a8%8b%e5%ae%89%e5%85%a8%e6%80%a7%e7%9a%84%e5%a7%94%e6%89%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;44-在现有的线程安全类中添加功能&#34;&gt;&#xA;  4.4 在现有的线程安全类中添加功能&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#44-%e5%9c%a8%e7%8e%b0%e6%9c%89%e7%9a%84%e7%ba%bf%e7%a8%8b%e5%ae%89%e5%85%a8%e7%b1%bb%e4%b8%ad%e6%b7%bb%e5%8a%a0%e5%8a%9f%e8%83%bd&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;45-将同步策略文档化&#34;&gt;&#xA;  4.5 将同步策略文档化&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#45-%e5%b0%86%e5%90%8c%e6%ad%a5%e7%ad%96%e7%95%a5%e6%96%87%e6%a1%a3%e5%8c%96&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h2 id=&#34;第5章-基础构建模块&#34;&gt;&#xA;  第5章 基础构建模块&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac5%e7%ab%a0-%e5%9f%ba%e7%a1%80%e6%9e%84%e5%bb%ba%e6%a8%a1%e5%9d%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;51-同步容器类&#34;&gt;&#xA;  5.1 同步容器类&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#51-%e5%90%8c%e6%ad%a5%e5%ae%b9%e5%99%a8%e7%b1%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;52-并发容器&#34;&gt;&#xA;  5.2 并发容器&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#52-%e5%b9%b6%e5%8f%91%e5%ae%b9%e5%99%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;53-阻塞队列和生产者-消费者模式&#34;&gt;&#xA;  5.3 阻塞队列和生产者-消费者模式&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#53-%e9%98%bb%e5%a1%9e%e9%98%9f%e5%88%97%e5%92%8c%e7%94%9f%e4%ba%a7%e8%80%85-%e6%b6%88%e8%b4%b9%e8%80%85%e6%a8%a1%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;54-阻塞方法与中断方法&#34;&gt;&#xA;  5.4 阻塞方法与中断方法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#54-%e9%98%bb%e5%a1%9e%e6%96%b9%e6%b3%95%e4%b8%8e%e4%b8%ad%e6%96%ad%e6%96%b9%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;55-同步工具类&#34;&gt;&#xA;  5.5 同步工具类&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#55-%e5%90%8c%e6%ad%a5%e5%b7%a5%e5%85%b7%e7%b1%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;56-构建高效且可伸缩的结果缓存&#34;&gt;&#xA;  5.6 构建高效且可伸缩的结果缓存&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#56-%e6%9e%84%e5%bb%ba%e9%ab%98%e6%95%88%e4%b8%94%e5%8f%af%e4%bc%b8%e7%bc%a9%e7%9a%84%e7%bb%93%e6%9e%9c%e7%bc%93%e5%ad%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h2 id=&#34;第6章-任务执行&#34;&gt;&#xA;  第6章 任务执行&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac6%e7%ab%a0-%e4%bb%bb%e5%8a%a1%e6%89%a7%e8%a1%8c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;61-在线程中执行任务&#34;&gt;&#xA;  6.1 在线程中执行任务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#61-%e5%9c%a8%e7%ba%bf%e7%a8%8b%e4%b8%ad%e6%89%a7%e8%a1%8c%e4%bb%bb%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;62-executor框架&#34;&gt;&#xA;  6.2 Executor框架&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#62-executor%e6%a1%86%e6%9e%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;63-找出可利用的并行性&#34;&gt;&#xA;  6.3 找出可利用的并行性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#63-%e6%89%be%e5%87%ba%e5%8f%af%e5%88%a9%e7%94%a8%e7%9a%84%e5%b9%b6%e8%a1%8c%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h2 id=&#34;第7章-取消与关闭&#34;&gt;&#xA;  第7章 取消与关闭&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac7%e7%ab%a0-%e5%8f%96%e6%b6%88%e4%b8%8e%e5%85%b3%e9%97%ad&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;71-任务取消&#34;&gt;&#xA;  7.1 任务取消&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#71-%e4%bb%bb%e5%8a%a1%e5%8f%96%e6%b6%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;72-停止基于线程的服务&#34;&gt;&#xA;  7.2 停止基于线程的服务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#72-%e5%81%9c%e6%ad%a2%e5%9f%ba%e4%ba%8e%e7%ba%bf%e7%a8%8b%e7%9a%84%e6%9c%8d%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;73-处理非正常的线程终止&#34;&gt;&#xA;  7.3 处理非正常的线程终止&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#73-%e5%a4%84%e7%90%86%e9%9d%9e%e6%ad%a3%e5%b8%b8%e7%9a%84%e7%ba%bf%e7%a8%8b%e7%bb%88%e6%ad%a2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;74-jvm关闭&#34;&gt;&#xA;  7.4 JVM关闭&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#74-jvm%e5%85%b3%e9%97%ad&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h2 id=&#34;第8章-线程池的使用&#34;&gt;&#xA;  第8章 线程池的使用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac8%e7%ab%a0-%e7%ba%bf%e7%a8%8b%e6%b1%a0%e7%9a%84%e4%bd%bf%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;81-在任务与执行策略之间的隐性耦合&#34;&gt;&#xA;  8.1 在任务与执行策略之间的隐性耦合&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#81-%e5%9c%a8%e4%bb%bb%e5%8a%a1%e4%b8%8e%e6%89%a7%e8%a1%8c%e7%ad%96%e7%95%a5%e4%b9%8b%e9%97%b4%e7%9a%84%e9%9a%90%e6%80%a7%e8%80%a6%e5%90%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;82-设置线程池的大小&#34;&gt;&#xA;  8.2 设置线程池的大小&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#82-%e8%ae%be%e7%bd%ae%e7%ba%bf%e7%a8%8b%e6%b1%a0%e7%9a%84%e5%a4%a7%e5%b0%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;83-配置threadpoolexecutor&#34;&gt;&#xA;  8.3 配置ThreadPoolExecutor&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#83-%e9%85%8d%e7%bd%aethreadpoolexecutor&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;84-扩展threadpoolexecutor&#34;&gt;&#xA;  8.4 扩展ThreadPoolExecutor&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#84-%e6%89%a9%e5%b1%95threadpoolexecutor&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;85-递归算法的并行化&#34;&gt;&#xA;  8.5 递归算法的并行化&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#85-%e9%80%92%e5%bd%92%e7%ae%97%e6%b3%95%e7%9a%84%e5%b9%b6%e8%a1%8c%e5%8c%96&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h2 id=&#34;第9章-图形用户界面应用程序&#34;&gt;&#xA;  第9章 图形用户界面应用程序&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac9%e7%ab%a0-%e5%9b%be%e5%bd%a2%e7%94%a8%e6%88%b7%e7%95%8c%e9%9d%a2%e5%ba%94%e7%94%a8%e7%a8%8b%e5%ba%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;91-为什么gui是单线程的&#34;&gt;&#xA;  9.1 为什么GUI是单线程的&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#91-%e4%b8%ba%e4%bb%80%e4%b9%88gui%e6%98%af%e5%8d%95%e7%ba%bf%e7%a8%8b%e7%9a%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;92-短时间的gui任务&#34;&gt;&#xA;  9.2 短时间的GUI任务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#92-%e7%9f%ad%e6%97%b6%e9%97%b4%e7%9a%84gui%e4%bb%bb%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;93-长时间的gui任务&#34;&gt;&#xA;  9.3 长时间的GUI任务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#93-%e9%95%bf%e6%97%b6%e9%97%b4%e7%9a%84gui%e4%bb%bb%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;94-共享数据模型&#34;&gt;&#xA;  9.4 共享数据模型&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#94-%e5%85%b1%e4%ba%ab%e6%95%b0%e6%8d%ae%e6%a8%a1%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;95-其他形式的单线程子系统&#34;&gt;&#xA;  9.5 其他形式的单线程子系统&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#95-%e5%85%b6%e4%bb%96%e5%bd%a2%e5%bc%8f%e7%9a%84%e5%8d%95%e7%ba%bf%e7%a8%8b%e5%ad%90%e7%b3%bb%e7%bb%9f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h2 id=&#34;第10章-避免活跃性危险&#34;&gt;&#xA;  第10章 避免活跃性危险&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac10%e7%ab%a0-%e9%81%bf%e5%85%8d%e6%b4%bb%e8%b7%83%e6%80%a7%e5%8d%b1%e9%99%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;101-死锁&#34;&gt;&#xA;  10.1 死锁&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#101-%e6%ad%bb%e9%94%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;102-死锁的避免与诊断&#34;&gt;&#xA;  10.2 死锁的避免与诊断&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#102-%e6%ad%bb%e9%94%81%e7%9a%84%e9%81%bf%e5%85%8d%e4%b8%8e%e8%af%8a%e6%96%ad&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;103-其他活跃性危险&#34;&gt;&#xA;  10.3 其他活跃性危险&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#103-%e5%85%b6%e4%bb%96%e6%b4%bb%e8%b7%83%e6%80%a7%e5%8d%b1%e9%99%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h2 id=&#34;第11章-性能与可伸缩性&#34;&gt;&#xA;  第11章 性能与可伸缩性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac11%e7%ab%a0-%e6%80%a7%e8%83%bd%e4%b8%8e%e5%8f%af%e4%bc%b8%e7%bc%a9%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;111-对性能的思考&#34;&gt;&#xA;  11.1 对性能的思考&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#111-%e5%af%b9%e6%80%a7%e8%83%bd%e7%9a%84%e6%80%9d%e8%80%83&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;112-amdahl定律&#34;&gt;&#xA;  11.2 Amdahl定律&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#112-amdahl%e5%ae%9a%e5%be%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;113-线程引入的开销&#34;&gt;&#xA;  11.3 线程引入的开销&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#113-%e7%ba%bf%e7%a8%8b%e5%bc%95%e5%85%a5%e7%9a%84%e5%bc%80%e9%94%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;114-减少锁的竞争&#34;&gt;&#xA;  11.4 减少锁的竞争&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#114-%e5%87%8f%e5%b0%91%e9%94%81%e7%9a%84%e7%ab%9e%e4%ba%89&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;115-示例比较map的性能&#34;&gt;&#xA;  11.5 示例：比较Map的性能&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#115-%e7%a4%ba%e4%be%8b%e6%af%94%e8%be%83map%e7%9a%84%e6%80%a7%e8%83%bd&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;116-减少上下文切换的开销&#34;&gt;&#xA;  11.6 减少上下文切换的开销&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#116-%e5%87%8f%e5%b0%91%e4%b8%8a%e4%b8%8b%e6%96%87%e5%88%87%e6%8d%a2%e7%9a%84%e5%bc%80%e9%94%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h2 id=&#34;第12章-并发程序的测试&#34;&gt;&#xA;  第12章 并发程序的测试&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac12%e7%ab%a0-%e5%b9%b6%e5%8f%91%e7%a8%8b%e5%ba%8f%e7%9a%84%e6%b5%8b%e8%af%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;121-正确性测试&#34;&gt;&#xA;  12.1 正确性测试&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#121-%e6%ad%a3%e7%a1%ae%e6%80%a7%e6%b5%8b%e8%af%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;122-性能测试&#34;&gt;&#xA;  12.2 性能测试&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#122-%e6%80%a7%e8%83%bd%e6%b5%8b%e8%af%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;123-避免性能测试的陷阱&#34;&gt;&#xA;  12.3 避免性能测试的陷阱&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#123-%e9%81%bf%e5%85%8d%e6%80%a7%e8%83%bd%e6%b5%8b%e8%af%95%e7%9a%84%e9%99%b7%e9%98%b1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;124-其他的测试方法&#34;&gt;&#xA;  12.4 其他的测试方法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#124-%e5%85%b6%e4%bb%96%e7%9a%84%e6%b5%8b%e8%af%95%e6%96%b9%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h2 id=&#34;第13章-显式锁&#34;&gt;&#xA;  第13章 显式锁&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac13%e7%ab%a0-%e6%98%be%e5%bc%8f%e9%94%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;131-lock与reentrantlock&#34;&gt;&#xA;  13.1 Lock与ReentrantLock&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#131-lock%e4%b8%8ereentrantlock&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;132-性能考虑因素&#34;&gt;&#xA;  13.2 性能考虑因素&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#132-%e6%80%a7%e8%83%bd%e8%80%83%e8%99%91%e5%9b%a0%e7%b4%a0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;133-公平性&#34;&gt;&#xA;  13.3 公平性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#133-%e5%85%ac%e5%b9%b3%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;134-在synchronized和reentrantlock之间进行选择&#34;&gt;&#xA;  13.4 在synchronized和ReentrantLock之间进行选择&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#134-%e5%9c%a8synchronized%e5%92%8creentrantlock%e4%b9%8b%e9%97%b4%e8%bf%9b%e8%a1%8c%e9%80%89%e6%8b%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;135-读-写锁&#34;&gt;&#xA;  13.5 读-写锁&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#135-%e8%af%bb-%e5%86%99%e9%94%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h2 id=&#34;第14章-构建自定义的同步工具&#34;&gt;&#xA;  第14章 构建自定义的同步工具&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac14%e7%ab%a0-%e6%9e%84%e5%bb%ba%e8%87%aa%e5%ae%9a%e4%b9%89%e7%9a%84%e5%90%8c%e6%ad%a5%e5%b7%a5%e5%85%b7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;141-状态依赖性的管理&#34;&gt;&#xA;  14.1 状态依赖性的管理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#141-%e7%8a%b6%e6%80%81%e4%be%9d%e8%b5%96%e6%80%a7%e7%9a%84%e7%ae%a1%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;142-使用条件队列&#34;&gt;&#xA;  14.2 使用条件队列&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#142-%e4%bd%bf%e7%94%a8%e6%9d%a1%e4%bb%b6%e9%98%9f%e5%88%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;143-显式的condition对象&#34;&gt;&#xA;  14.3 显式的Condition对象&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#143-%e6%98%be%e5%bc%8f%e7%9a%84condition%e5%af%b9%e8%b1%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;144-synchronizer剖析&#34;&gt;&#xA;  14.4 Synchronizer剖析&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#144-synchronizer%e5%89%96%e6%9e%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;145-abstractqueuedsynchronizer&#34;&gt;&#xA;  14.5 AbstractQueuedSynchronizer&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#145-abstractqueuedsynchronizer&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;146-javautilconcurrent同步器类中的aqs&#34;&gt;&#xA;  14.6 java.util.concurrent同步器类中的AQS&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#146-javautilconcurrent%e5%90%8c%e6%ad%a5%e5%99%a8%e7%b1%bb%e4%b8%ad%e7%9a%84aqs&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h2 id=&#34;第15章-原子变量与非阻塞同步机制&#34;&gt;&#xA;  第15章 原子变量与非阻塞同步机制&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac15%e7%ab%a0-%e5%8e%9f%e5%ad%90%e5%8f%98%e9%87%8f%e4%b8%8e%e9%9d%9e%e9%98%bb%e5%a1%9e%e5%90%8c%e6%ad%a5%e6%9c%ba%e5%88%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;151-锁的劣势&#34;&gt;&#xA;  15.1 锁的劣势&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#151-%e9%94%81%e7%9a%84%e5%8a%a3%e5%8a%bf&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;152-硬件对并发的支持&#34;&gt;&#xA;  15.2 硬件对并发的支持&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#152-%e7%a1%ac%e4%bb%b6%e5%af%b9%e5%b9%b6%e5%8f%91%e7%9a%84%e6%94%af%e6%8c%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;153-原子变量类&#34;&gt;&#xA;  15.3 原子变量类&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#153-%e5%8e%9f%e5%ad%90%e5%8f%98%e9%87%8f%e7%b1%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;154-非阻塞算法&#34;&gt;&#xA;  15.4 非阻塞算法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#154-%e9%9d%9e%e9%98%bb%e5%a1%9e%e7%ae%97%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h2 id=&#34;第16章-java内存模型&#34;&gt;&#xA;  第16章 Java内存模型&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac16%e7%ab%a0-java%e5%86%85%e5%ad%98%e6%a8%a1%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;161-什么是内存模型为什么需要它&#34;&gt;&#xA;  16.1 什么是内存模型，为什么需要它&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#161-%e4%bb%80%e4%b9%88%e6%98%af%e5%86%85%e5%ad%98%e6%a8%a1%e5%9e%8b%e4%b8%ba%e4%bb%80%e4%b9%88%e9%9c%80%e8%a6%81%e5%ae%83&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;162-发布&#34;&gt;&#xA;  16.2 发布&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#162-%e5%8f%91%e5%b8%83&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;163-初始化过程中的安全性&#34;&gt;&#xA;  16.3 初始化过程中的安全性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#163-%e5%88%9d%e5%a7%8b%e5%8c%96%e8%bf%87%e7%a8%8b%e4%b8%ad%e7%9a%84%e5%ae%89%e5%85%a8%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;</description>
    </item>
    <item>
      <title>Jenkins</title>
      <link>/post/computer-science/ci-cd/jenkins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/ci-cd/jenkins/</guid>
      <description>&lt;h1 id=&#34;jenkins&#34;&gt;&#xA;  Jenkins&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#jenkins&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.jenkins.io/doc/book/installing/&#34;&gt;docs&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.jenkins.io/doc/book/installing/docker/&#34;&gt;docker&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.jenkins.io/doc/book/installing/macos/&#34;&gt;macOS&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.jenkins.io/download/lts/macos/&#34;&gt;macOS Installer for Jenkins LTS&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Install the latest LTS version: &lt;code&gt;brew install jenkins-lts&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Start the Jenkins service: &lt;code&gt;brew services start jenkins-lts&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Restart the Jenkins service: &lt;code&gt;brew services restart jenkins-lts&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Update the Jenkins version: &lt;code&gt;brew upgrade jenkins-lts&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.jenkins.io/doc/book/using/&#34;&gt;Using Jenkins&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;password&#34;&gt;&#xA;  password&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#password&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://ask.csdn.net/questions/4645065&#34;&gt;jenkins publish over SSH中SSH sever密码存放位置&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/qq_27156945/article/details/108083342&#34;&gt;记录 从jenkins配置文件中解密密码&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;reference&#34;&gt;&#xA;  reference&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/shuang_waiwai/article/details/121124203&#34;&gt;在Jenkins中拉取GitHub上的代码包（超详细)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/u012045045/article/details/107126372&#34;&gt;jenkins配置全局凭据 结合gitlab&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/dingshaohua/p/16458325.html&#34;&gt;jenkins部署github项目&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>law</title>
      <link>/post/life/law/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/life/law/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/O3jdmtRKJZGhZfPp72G-Jw&#34;&gt;最高法举行《最高人民法院关于审理劳动争议案件适用法律问题的解释（二）》新闻发布会&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sspai.com/post/101564&#34;&gt;01新劳动争议司法解释回应竞业等热点问题&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>maven</title>
      <link>/post/computer-science/ci-cd/maven/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/ci-cd/maven/</guid>
      <description>&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 加上多线程的参数 -T 可以加快构建速度 数量就设置为CPU的核心数就行了&#xA;# 这个参数要和实际并行构建的任务综合考虑，如果同时构建的任务太多，那么这个参数不宜设置为CPU的核心数&#xA;# 如果经常是单个任务进行构建，那么可以直接配置为CPU的核心数&#xA;mvn clean package -T {CPU.CORE_NUMS} -Dmaven.test.skip=true -P prod&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;plugin&#34;&gt;&#xA;  plugin&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#plugin&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://cloud.tencent.com/developer/ask/sof/111436212&#34;&gt;从Maven中的命令行参数跳过exec-Maven插件&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;reference&#34;&gt;&#xA;  reference&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/u011747754/article/details/78574026&#34;&gt;利用码云gitee搭建个人maven仓库&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Nexus</title>
      <link>/post/computer-science/ci-cd/nexus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/ci-cd/nexus/</guid>
      <description>&lt;h1 id=&#34;nexus&#34;&gt;&#xA;  Nexus&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#nexus&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://hub.docker.com/r/sonatype/nexus3/tags&#34;&gt;docker sonatype/nexus3&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;install &lt;code&gt;docker run -d -p 8081:8081 --name nexus sonatype/nexus3&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Python</title>
      <link>/post/computer-science/python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/python/</guid>
      <description>&lt;h1 id=&#34;python&#34;&gt;&#xA;  Python&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#python&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;yutto&#34;&gt;&#xA;  yutto&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#yutto&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Python神经网络编程</title>
      <link>/post/books/computer-science/python%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/books/computer-science/python%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</guid>
      <description>&lt;h2 id=&#34;第1章-神经网络如何工作&#34;&gt;&#xA;  第1章 神经网络如何工作&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac1%e7%ab%a0-%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c%e5%a6%82%e4%bd%95%e5%b7%a5%e4%bd%9c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;</description>
    </item>
    <item>
      <title>reddison</title>
      <link>/post/computer-science/reddison/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/reddison/</guid>
      <description>&lt;h1 id=&#34;什么情况下使用-redistemplate-什么时候使用-reddison&#34;&gt;&#xA;  什么情况下使用 redistemplate 什么时候使用 reddison&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%80%e4%b9%88%e6%83%85%e5%86%b5%e4%b8%8b%e4%bd%bf%e7%94%a8-redistemplate-%e4%bb%80%e4%b9%88%e6%97%b6%e5%80%99%e4%bd%bf%e7%94%a8-reddison&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;在 Java 项目中，选择 &lt;code&gt;RedisTemplate&lt;/code&gt;（Spring Data Redis）还是 &lt;code&gt;Redisson&lt;/code&gt; 取决于具体需求场景。以下是两者的对比和适用场景分析：&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;1-redistemplatespring-data-redis&#34;&gt;&#xA;  &lt;strong&gt;1. RedisTemplate（Spring Data Redis）&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-redistemplatespring-data-redis&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;定位&lt;/strong&gt;：Spring 生态提供的轻量级 Redis 操作工具，封装了 Jedis/Lettuce。&#xA;&lt;strong&gt;适用场景&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;简单的 CRUD 操作&lt;/strong&gt;：读写字符串、Hash、List 等基础数据结构。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;与 Spring 生态深度集成&lt;/strong&gt;：需要无缝配合 &lt;code&gt;@Cacheable&lt;/code&gt;、Spring Session 等功能。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;无需复杂分布式特性&lt;/strong&gt;：例如仅需缓存数据、计数器等基础功能。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;特点&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;支持 JSON、JDK 序列化等多种序列化方式。&lt;/li&gt;&#xA;&lt;li&gt;提供简单的发布/订阅、事务支持。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;不支持分布式锁、信号量等高级功能&lt;/strong&gt;（需自行基于 &lt;code&gt;SETNX&lt;/code&gt; 实现）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;示例场景&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 存储字符串&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;redisTemplate.&lt;span style=&#34;color:#a6e22e&#34;&gt;opsForValue&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 存储Hash&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;redisTemplate.&lt;span style=&#34;color:#a6e22e&#34;&gt;opsForHash&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;put&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user:1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Alice&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;h3 id=&#34;2-redisson&#34;&gt;&#xA;  &lt;strong&gt;2. Redisson&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-redisson&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;定位&lt;/strong&gt;：分布式服务框架，提供丰富的分布式数据结构和高阶功能。&#xA;&lt;strong&gt;适用场景&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;需要分布式协调&lt;/strong&gt;：如分布式锁（&lt;code&gt;RLock&lt;/code&gt;）、信号量（&lt;code&gt;RSemaphore&lt;/code&gt;）、延迟队列（&lt;code&gt;RDelayedQueue&lt;/code&gt;）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;复杂分布式业务&lt;/strong&gt;：跨 JVM 共享对象、分布式任务调度（如 &lt;code&gt;RExecutorService&lt;/code&gt;）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;高性能分布式缓存&lt;/strong&gt;：支持本地缓存联动（&lt;code&gt;RLocalCachedMap&lt;/code&gt;）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;特点&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;提供 &lt;code&gt;java.util.concurrent&lt;/code&gt; 风格的 API（如 &lt;code&gt;RMap&lt;/code&gt;、&lt;code&gt;RList&lt;/code&gt;）。&lt;/li&gt;&#xA;&lt;li&gt;内置看门狗机制避免锁死，支持锁自动续期。&lt;/li&gt;&#xA;&lt;li&gt;支持 Redis 集群、哨兵、云托管等多种部署模式。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;示例场景&lt;/strong&gt;：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Redis设计与实现</title>
      <link>/post/books/computer-science/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/books/computer-science/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;h2 id=&#34;第2章-简单动态字符串&#34;&gt;&#xA;  第2章 简单动态字符串&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac2%e7%ab%a0-%e7%ae%80%e5%8d%95%e5%8a%a8%e6%80%81%e5%ad%97%e7%ac%a6%e4%b8%b2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;第3章-链表&#34;&gt;&#xA;  第3章 链表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac3%e7%ab%a0-%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;第4章-字典&#34;&gt;&#xA;  第4章 字典&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac4%e7%ab%a0-%e5%ad%97%e5%85%b8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;第5章-跳跃表&#34;&gt;&#xA;  第5章 跳跃表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac5%e7%ab%a0-%e8%b7%b3%e8%b7%83%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;第6章-整数集合&#34;&gt;&#xA;  第6章 整数集合&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac6%e7%ab%a0-%e6%95%b4%e6%95%b0%e9%9b%86%e5%90%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;第7章-压缩列表&#34;&gt;&#xA;  第7章 压缩列表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac7%e7%ab%a0-%e5%8e%8b%e7%bc%a9%e5%88%97%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;第8章-对象&#34;&gt;&#xA;  第8章 对象&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac8%e7%ab%a0-%e5%af%b9%e8%b1%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Redis使用对象来表示数据库中的键和值，每次当我们在Redis的数据库中新创建一个键值对时，我们至少会创建两个对象，一个对象用作键值对的键（键对象），另一个对象用作键值对的值（值对象）&lt;/li&gt;&#xA;&lt;li&gt;对象的类型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;字符串对象 &lt;code&gt;REDIS_STRING&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;列表对象 &lt;code&gt;REDIS_LIST&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;哈希对象 &lt;code&gt;REDIS_HASH&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;集合对象 &lt;code&gt;REDIS_SET&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;有序集合对象 &lt;code&gt;REDIS_ZSET&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;对于Redis数据库保存的键值对来说，键总是一个字符串对象，而值则可以是字符串对象、列表对象、哈希对象、集合对象或者有序集合对象的其中一种&#xA;&lt;ul&gt;&#xA;&lt;li&gt;当我们称呼一个数据库键为“字符串键”时，我们指的是“这个数据库键所对应的值为字符串对象”&lt;/li&gt;&#xA;&lt;li&gt;当我们称呼一个键为“列表键”时，我们指的是“这个数据库键所对应的值为列表对象”&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;TYPE命令的实现方式也与此类似，当我们对一个数据库键执行TYPE命令时，命令返回的结果为数据库键对应的值对象的类型，而不是键对象的类型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;因为键的类型始终为字符串&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Spring Cloud微服务：入门、实战与进阶</title>
      <link>/post/books/computer-science/spring-cloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E4%B8%8E%E8%BF%9B%E9%98%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/books/computer-science/spring-cloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E4%B8%8E%E8%BF%9B%E9%98%B6/</guid>
      <description>&lt;h3 id=&#34;13-什么是spring-cloud&#34;&gt;&#xA;  1.3 什么是Spring Cloud&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#13-%e4%bb%80%e4%b9%88%e6%98%afspring-cloud&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Eureka&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;服务注册中心，用于服务管理&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Ribbon&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;基于客户端的负载均衡组件&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Hystrix&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;容错框架，能够防止服务的雪崩效应&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Feign&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Web服务客户端，能够简化HTTP接口的调用&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Zuul&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;API网关，提供路由转发、请求过滤等功能&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Config&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;分布式配置管理&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Sleuth&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;服务跟踪&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Stream&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;构建消息驱动的微服务应用程序的框架&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Bus&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;消息代理的集群消息总线。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;第3章eureka注册中心&#34;&gt;&#xA;  第3章　Eureka注册中心&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac3%e7%ab%a0eureka%e6%b3%a8%e5%86%8c%e4%b8%ad%e5%bf%83&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Spring Cloud Eureka是一个基于REST的服务，并且提供了基于Java的客户端组件，能够非常方便地&lt;strong&gt;将服务注册到Spring Cloud Eureka中进行统一管理&lt;/strong&gt;。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;服务治理&lt;/strong&gt;是微服务架构中必不可少的一部分，阿里开源的Dubbo框架就是针对服务治理的。服务治理必须要有一个注册中心，除了用Eureka作为注册中心外，我们还可以使用Consul、Etcd、Zookeeper等来作为服务的注册中心。&lt;/li&gt;&#xA;&lt;li&gt;用过Dubbo的读者应该清楚，Dubbo中也有几种注册中心，比如基于Zookeeper、基于Redis等，不过用得最多的还是Zookeeper方式。至于使用哪种方式都是可以的，&lt;strong&gt;注册中心无非就是管理所有服务的信息和状态&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;li&gt;程序也是一样，&lt;strong&gt;当你需要调用某一个服务的时候，你会先去Eureka中去拉取服务列表，查看你调用的服务在不在其中，在的话就拿到服务地址、端口等信息，然后调用&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;li&gt;为什么Eureka比Zookeeper更适合作为注册中心呢？&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主要是因为&lt;strong&gt;Eureka是基于AP原则构建的，而ZooKeeper是基于CP原则构建的&lt;/strong&gt;。在分布式系统领域有个著名的CAP定理，即&lt;strong&gt;C为数据一致性；A为服务可用性；P为服务对网络分区故障的容错性&lt;/strong&gt;。这三个特性在任何分布式系统中都不能同时满足，最多同时满足两个。&lt;/li&gt;&#xA;&lt;li&gt;Zookeeper有一个Leader，而且在这个Leader无法使用的时候通过Paxos(ZAB)算法选举出一个新的Leader。这个Leader的任务就是保证写数据的时候只向这个Leader写入，Leader会同步信息到其他节点。通过这个操作就可以保证数据的一致性。&lt;/li&gt;&#xA;&lt;li&gt;总而言之，想要保证AP就要用Eureka，想要保证CP就要用Zookeeper。Dubbo中大部分都是基于Zookeeper作为注册中心的。Spring Cloud中当然首选Eureka。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;第4章客户端负载均衡ribbon&#34;&gt;&#xA;  第4章　客户端负载均衡Ribbon&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac4%e7%ab%a0%e5%ae%a2%e6%88%b7%e7%ab%af%e8%b4%9f%e8%bd%bd%e5%9d%87%e8%a1%a1ribbon&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;目前主流的负载方案分为两种：一种是&lt;strong&gt;集中式负载均衡&lt;/strong&gt;，在消费者和服务提供方中间使用独立的代理方式进行负载，有硬件的（比如F5），也有软件的（比如Nginx）。另一种则是客户端自己做负载均衡，根据自己的请求情况做负载，&lt;strong&gt;Ribbon就属于客户端自己做负载&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;li&gt;Ribbon作为一款客户端负载均衡框架，&lt;strong&gt;默认的负载策略是轮询&lt;/strong&gt;，同时也提供了很多其他的策略，能够让用户根据自身的业务需求进行选择。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;第6章hystrix服务容错处理&#34;&gt;&#xA;  第6章　Hystrix服务容错处理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac6%e7%ab%a0hystrix%e6%9c%8d%e5%8a%a1%e5%ae%b9%e9%94%99%e5%a4%84%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在微服务架构中存在多个可直接调用的服务，这些服务若在调用时出现故障会导致连锁效应，也就是可能会让整个系统变得不可用，这种情况我们称之为&lt;strong&gt;服务雪崩效应&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;li&gt;Hystrix是Netflix针对微服务分布式系统采用的&lt;strong&gt;熔断保护中间件&lt;/strong&gt;，相当于电路中的保险丝。&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>spring transaction</title>
      <link>/post/computer-science/java/spring/spring-transaction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/java/spring/spring-transaction/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/isme-zjh/p/18106598&#34;&gt;@Transactional详解（作用、失效场景与解决方法）| 事务注解实际原理（AOP）解析&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;spring-boot--mybatis-plus-使用事务&#34;&gt;&#xA;  Spring Boot + MyBatis-Plus 使用事务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring-boot--mybatis-plus-%e4%bd%bf%e7%94%a8%e4%ba%8b%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;MyBatis-Plus 是基于 MyBatis 的增强工具，在 Spring Boot 中使用事务的方式与原生 MyBatis 类似。以下是详细的使用方法：&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-添加必要依赖&#34;&gt;&#xA;  1. 添加必要依赖&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e6%b7%bb%e5%8a%a0%e5%bf%85%e8%a6%81%e4%be%9d%e8%b5%96&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;首先确保你的项目中包含以下依赖：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.baomidou&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;mybatis-plus-boot-starter&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;最新版本&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2-配置事务管理器&#34;&gt;&#xA;  2. 配置事务管理器&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e9%85%8d%e7%bd%ae%e4%ba%8b%e5%8a%a1%e7%ae%a1%e7%90%86%e5%99%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring Boot 会自动配置事务管理器，但如果你想自定义，可以在配置类中添加：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.context.annotation.Bean;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.context.annotation.Configuration;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.jdbc.datasource.DataSourceTransactionManager;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; javax.sql.DataSource;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Configuration&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyBatisPlusConfig&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; DataSourceTransactionManager &lt;span style=&#34;color:#a6e22e&#34;&gt;transactionManager&lt;/span&gt;(DataSource dataSource) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DataSourceTransactionManager(dataSource);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3-使用事务&#34;&gt;&#xA;  3. 使用事务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-%e4%bd%bf%e7%94%a8%e4%ba%8b%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;31-声明式事务推荐&#34;&gt;&#xA;  3.1 声明式事务（推荐）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#31-%e5%a3%b0%e6%98%8e%e5%bc%8f%e4%ba%8b%e5%8a%a1%e6%8e%a8%e8%8d%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;在 Service 层方法上添加 &lt;code&gt;@Transactional&lt;/code&gt; 注解：&lt;/p&gt;</description>
    </item>
    <item>
      <title>unit test</title>
      <link>/post/computer-science/java/spring/unit-test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/java/spring/unit-test/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.spring.io/spring-framework/reference/testing.html&#34;&gt;document&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>vim</title>
      <link>/post/computer-science/vim/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/vim/</guid>
      <description>&lt;h1 id=&#34;vim&#34;&gt;&#xA;  vim&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#vim&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;nvim&#34;&gt;&#xA;  nvim&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#nvim&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://neovim.io/&#34;&gt;neovim.io&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;直接用brew安装就行 &lt;code&gt;brew install neovim&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;第一步肯定是要把插件管理工具安装一下&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;junegunn/vim-plug&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;直接运行文档中linux的安装命令&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;indent&#34;&gt;&#xA;  indent&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#indent&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://vi.stackexchange.com/questions/42406/how-can-i-make-neovim-wrap-lines-in-respect-to-indentation&#34;&gt;How can I make (Neo)Vim wrap lines in respect to indentation?&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;这个可以解决缩进换行的问题，很棒！&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;clipboard-剪贴板&#34;&gt;&#xA;  clipboard 剪贴板&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#clipboard-%e5%89%aa%e8%b4%b4%e6%9d%bf&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;直接在配置文件中添加这两行，就可以了&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;vnoremap y &amp;#34;+y&#xA;set clipboard+=unnamedplus&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;quickfix&#34;&gt;&#xA;  quickfix&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#quickfix&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/71778294&#34;&gt;VIM学习笔记 QuickFix&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;lazyvim&#34;&gt;&#xA;  LazyVim&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#lazyvim&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.lazyvim.org/&#34;&gt;lazyvim org&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://yelog.org/2024/08/02/write-markdown-in-neovim-experience-and-tips/&#34;&gt;用 neovim 写 markdown 是一种什么样的体验(含技巧)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;markdown&#34;&gt;&#xA;  markdown&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#markdown&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;theCW&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1ox411R7bo&#34;&gt;不影响听课的高效率记笔记方法：Vim + Markdown - 教学与配置&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/iamcco/markdown-preview.nvim&#34;&gt;iamcco/markdown-preview.nvim&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://linkarzu.com/posts/neovim/markdown-setup-2024/&#34;&gt;My neovim markdown setup in 2024&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/tadmccorkle/markdown.nvim&#34;&gt;tadmccorkle/markdown.nvim&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/cnshsliu/smp.nvim&#34;&gt;cnshsliu/smp.nvim&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/MeanderingProgrammer/render-markdown.nvim&#34;&gt;MeanderingProgrammer/render-markdown.nvim&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;这个插件可以直接在 neovim 中直接 render markdown 文件&lt;/li&gt;&#xA;&lt;li&gt;但是安装只提供了 lua 的安装方式&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;outlinenvim&#34;&gt;&#xA;  outline.nvim&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#outlinenvim&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/hedyhli/outline.nvim&#34;&gt;hedyhli/outline.nvim&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;这个插件太优秀了！&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;解决 outline 左箭头和下箭头乱码的问题&lt;/p&gt;</description>
    </item>
    <item>
      <title>windows</title>
      <link>/post/computer-science/operating-system/windows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/operating-system/windows/</guid>
      <description>&lt;h2 id=&#34;autohotkey&#34;&gt;&#xA;  AutoHotkey&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#autohotkey&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://ahkv2.mallocx.com/AutoHotkey.htm&#34;&gt;AutoHotkey&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;powershell&#34;&gt;&#xA;  powershell&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#powershell&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/fleschutz/PowerShell&#34;&gt;fleschutz/PowerShell&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Mega Collection of PowerShell Scripts&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sspai.com/post/81787&#34;&gt;一句话完成繁琐操作：你可以试试的 8 个 Windows 命令行工具&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;systeminfo&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;列出当前电脑的ip&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;Get-CimInstance -Class Win32_NetworkAdapterConfiguration -Filter IPEnabled=$true | Select-Object -ExpandProperty IPAddress&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;others&#34;&gt;&#xA;  others&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#others&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sspai.com/post/78613&#34;&gt;一日一技 | 重启试试不是长久之计，两条命令帮你排查意外关机成因&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sspai.com/post/47719&#34;&gt;在 Windows 上用 WSL 开发的操作体验指北&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>一本书讲透 ElasticSearch：原理、进阶与工程实践</title>
      <link>/post/books/computer-science/%E4%B8%80%E6%9C%AC%E4%B9%A6%E8%AE%B2%E9%80%8F-elasticsearch%E5%8E%9F%E7%90%86%E8%BF%9B%E9%98%B6%E4%B8%8E%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/books/computer-science/%E4%B8%80%E6%9C%AC%E4%B9%A6%E8%AE%B2%E9%80%8F-elasticsearch%E5%8E%9F%E7%90%86%E8%BF%9B%E9%98%B6%E4%B8%8E%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/</guid>
      <description>&lt;h2 id=&#34;第1章-elastic-stack全景&#34;&gt;&#xA;  第1章 Elastic Stack全景&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac1%e7%ab%a0-elastic-stack%e5%85%a8%e6%99%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;首先，Elasticsearch支持各类应用、网站等的全文搜索，包括淘宝、京东等电商平台的搜索，360手机助手、豌豆荚等应用市场平台的搜索，以及腾讯文档、石墨文档等平台的&lt;strong&gt;全文检索服务&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;li&gt;许多知名企业，如58集团、唯品会、日志易、国投瑞银等，都使用Elasticsearch来&lt;strong&gt;快速分析和处理大量的日志数据&lt;/strong&gt;，从而对业务运行状况进行实时的监控和故障排查。&lt;/li&gt;&#xA;&lt;li&gt;许多知名企业的商业智能系统，如睿思BI、百度数据可视化Sugar BI、永洪BI等，都借助Elasticsearch的&lt;strong&gt;高效、实时的数据分析和可视化能力&lt;/strong&gt;，帮助企业更好地理解市场趋势、优化决策过程。&lt;/li&gt;&#xA;&lt;li&gt;ClickHouse&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ClickHouse是一款由俄罗斯搜索引擎Yandex开发并开源的&lt;strong&gt;列式存储数据库&lt;/strong&gt;，专为**OLAP（在线分析处理）**场景设计。ClickHouse具有高速查询分析的能力，支持实时添加数据和修改结构，并且能够实现高度数据压缩比，从而有效节省存储空间。此外，ClickHouse支持SQL查询，易于使用和集成。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;第2章-elasticsearch基础知识&#34;&gt;&#xA;  第2章 Elasticsearch基础知识&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac2%e7%ab%a0-elasticsearch%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;倒排索引&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一本C语言图书末页的索引结构。这种结构揭示了核心关键词与页码之间的对应关系。这种关系模式可以视为倒排索引的实际例证。在此结构中，我们可以&lt;strong&gt;根据关键词快速找到包含这个关键词的内容的页码&lt;/strong&gt;。这与倒排索引在接收关键词输入后能够迅速定位包含该关键词的文档的性质是一致的。借由这种类比，我们可以更为直观地理解倒排索引在数据查询中的关键作用。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;数据索引化&#xA;&lt;ul&gt;&#xA;&lt;li&gt;数据索引化指的是数据在写入搜索引擎（本书中主要指Elasticsearch）的过程中，&lt;strong&gt;扫描文档中的每一个词项，结合分词器和词典对必要的词项建立倒排索引&lt;/strong&gt;，同时指明该词项在文章中出现的&lt;strong&gt;次数&lt;/strong&gt;和&lt;strong&gt;位置&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;全文检索的前提是待检索的数据已经索引化，当用户查询时能根据建立的倒排索引进行查找。&lt;/li&gt;&#xA;&lt;li&gt;全文检索的特点如下&#xA;&lt;ul&gt;&#xA;&lt;li&gt;只处理文本，不处理语义。&lt;/li&gt;&#xA;&lt;li&gt;结果列表有相关度排序。&lt;/li&gt;&#xA;&lt;li&gt;支持高亮显示结果数据。&lt;/li&gt;&#xA;&lt;li&gt;原始的文本被切分为单个单词、短语或特殊标记后进行存储。&lt;/li&gt;&#xA;&lt;li&gt;给定词与它的&lt;strong&gt;变体&lt;/strong&gt;（如近义词）会被折叠为一个词，如electrification和ectric、mice和mouse、“土豆”和“马铃薯”、“西红柿”和“番茄”等，每组词均被视为同一个词。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;22-elasticsearch的核心概念&#34;&gt;&#xA;  2.2 Elasticsearch的核心概念&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#22-elasticsearch%e7%9a%84%e6%a0%b8%e5%bf%83%e6%a6%82%e5%bf%b5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;集群&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Elasticsearch集群常用于处理大规模数据集，目的是实现&lt;strong&gt;容错&lt;/strong&gt;和&lt;strong&gt;高可用&lt;/strong&gt;。Elasticsearch集群需要一个&lt;strong&gt;唯一标识&lt;/strong&gt;的集群名称来防止不必要的节点加入。集群大小从单个节点到数千个节点不等，具体大小取决于实际业务场景。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;节点&#xA;&lt;ul&gt;&#xA;&lt;li&gt;节点是指&lt;strong&gt;一个Elasticsearch实例&lt;/strong&gt;，更确切地说，它是一个Elasticsearch进程。节点可以部署到物理机或者虚拟机上。每当Elasticsearch启动时，节点就会开始运行。&lt;strong&gt;每个节点都有唯一标识的名称&lt;/strong&gt;，在部署多节点集群环境的时候我们要注意不要写错节点名称。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;索引&#xA;&lt;ul&gt;&#xA;&lt;li&gt;索引可以看作&lt;strong&gt;数据库中的一个表&lt;/strong&gt;，它包含了一组具有相似结构的文档&lt;/li&gt;&#xA;&lt;li&gt;在Elasticsearch中，数据以&lt;strong&gt;JSON格式的文档&lt;/strong&gt;存储在索引内。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;每个索引具有唯一的名称&lt;/strong&gt;，以便在执行搜索、更新和删除操作时进行引用。&lt;/li&gt;&#xA;&lt;li&gt;索引的名称可以由&lt;strong&gt;用户自定义&lt;/strong&gt;，但必须全部小写。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;分片&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在了解分片是什么之前，让我们谈谈为什么需要分片。假设你有一个包含超大规模文档的索引，有总计1TB的数据。当前集群中有两个节点，每个节点有512GB的空间可用于存储数据。显然，&lt;strong&gt;整个索引无法存储在任何一个节点上，因此有必要以某种方式拆分索引的数据，否则会导致数据存储不完整&lt;/strong&gt;。在这种情况下，索引的大小超过了单个节点的硬件限制，分片就派上用场了。分片通过将索引分成更小的部分来解决这个问题。&lt;/li&gt;&#xA;&lt;li&gt;当处理涉及多个数据分片的查询时，Elasticsearch会&lt;strong&gt;将查询请求分发到各个相关的分片&lt;/strong&gt;，并将它们的结果集进行聚合。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;副本&#xA;&lt;ul&gt;&#xA;&lt;li&gt;分片可以被复制，被复制的分片称为“主分片”，如图2-3中的主分片1～4；主分片的复制版本称为“副本分片”或简称为“副本”，如图2-3中的副本1～4&lt;/li&gt;&#xA;&lt;li&gt;创建索引时需要指定主分片，且主分片数一经指定就不支持动态更新了。而副本同样需要在创建索引时指定，每个分片可以有0或多个副本，副本数支持动态更新。&lt;/li&gt;&#xA;&lt;li&gt;当某主分片所在的数据节点不可用时，会导致主分片丢失现象，若短时间内不对此采取补救措施，集群会将该分片对应的副本提升为新的主分片。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;文档&#xA;&lt;ul&gt;&#xA;&lt;li&gt;关系型数据库将数据以行或元组为单位存储在数据库表中，而Elasticsearch将数据以文档为单位存储在索引中。&lt;/li&gt;&#xA;&lt;li&gt;作为Elasticsearch的基本存储单元，&lt;strong&gt;文档是指存储在Elasticsearch索引中的JSON对象&lt;/strong&gt;。文档中的数据由键值对构成。键是字段的名称，值是不同数据类型的字段。不同的数据类型包含但不限于字符串类型、数字类型、布尔类型、对象类型等。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;字段&#xA;&lt;ul&gt;&#xA;&lt;li&gt;字段是Elasticsearch中最小的单个数据单元，类似于关系型数据库表中的字段。一般实战项目前期的设计环节都是根据业务需求拆分、定义字段，并且敲定字段类型。在上面航空类索引的示例中，“FlightNum”是字段，其含义为“航班号”，字段类型为keyword。&lt;/li&gt;&#xA;&lt;li&gt;与关系型数据库不同的是，&lt;strong&gt;Elasticsearch的一个字段可以设定两种或两种以上的数据类型&lt;/strong&gt;，通过定义multi-field来灵活地满足复杂的业务需求。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;映射&#xA;&lt;ul&gt;&#xA;&lt;li&gt;不少初学者对映射(Mapping)这个概念会感觉不好理解。映射类似于关系型数据库中的Schema，可以近似地理解为**“表结构”**。&lt;/li&gt;&#xA;&lt;li&gt;我们拿到一个业务需求后，往往会将业务细分会几个索引。每个索引都需要一个相对固定的表结构，包含但不限于字段名称、字段类型、是否需要分词、是否需要索引、是否需要存储、是否需要多字段类型等。这些都是设计映射时要考虑的问题。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;分词&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在英文文本中，空格就是切分语句或短语的“屏障”。但中文文本中则没有了这道“屏障”，于是分词就变得就不那么简单，需要由专门的分词算法构建的分词器来实现。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;第3章-elasticsearch集群部署&#34;&gt;&#xA;  第3章 Elasticsearch集群部署&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac3%e7%ab%a0-elasticsearch%e9%9b%86%e7%be%a4%e9%83%a8%e7%bd%b2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;什么是堆内存&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Java中的堆是JVM所管理的最大的一块内存空间，主要用于&lt;strong&gt;存放各种类的实例对象&lt;/strong&gt;。在Java中，堆被划分成两个不同的区域：新生代(Young)和老年代(Old)。新生代又被划分为3个区域：Eden、From Survivor、To Survivor。&lt;/li&gt;&#xA;&lt;li&gt;这样划分的目的是使JVM更好地管理堆内存中的对象，包括内存的分配以及回收。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;堆内存的作用是什么&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;堆内存的唯一目的就是&lt;strong&gt;创建对象实例&lt;/strong&gt;，所有的对象实例和数组都要在堆上分配。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;堆内存如何配置&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;默认情况下，Elasticsearch JVM使用的堆内存最小和最大值均为4 GB（8.X版本以上）&lt;/li&gt;&#xA;&lt;li&gt;在转移到生产环境时，配置足够容量的堆大小以确保Elasticsearch功能和性能是必要的。&lt;/li&gt;&#xA;&lt;li&gt;Elasticsearch将通过对Xms（最小堆大小）和Xmx（最大堆大小）的设置来分配jvm.options中指定的整个堆。&lt;/li&gt;&#xA;&lt;li&gt;堆内存的值取决于服务器上可用的内存大小。Elasticsearch堆内存设置对其性能表现来说十分关键。&lt;strong&gt;建议将堆大小配置为服务器可用内存的50%，上限为32GB，且预留足够的内存给操作系统以提升缓存效率&lt;/strong&gt;。合理调整堆内存大小可减轻垃圾回收工作的压力，优化查询速度和索引效率。请务必进行监控并根据实际需求来调整堆内存大小。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;为什么堆内存不能超过物理机内存的一半&lt;/p&gt;</description>
    </item>
    <item>
      <title>宏观经济学 第三版</title>
      <link>/post/books/%E5%AE%8F%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6-%E7%AC%AC%E4%B8%89%E7%89%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/books/%E5%AE%8F%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6-%E7%AC%AC%E4%B8%89%E7%89%88/</guid>
      <description>&lt;h1 id=&#34;宏观经济学-第三版&#34;&gt;&#xA;  宏观经济学 第三版&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%8f%e8%a7%82%e7%bb%8f%e6%b5%8e%e5%ad%a6-%e7%ac%ac%e4%b8%89%e7%89%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;第1章-经济学原理的实践&#34;&gt;&#xA;  第1章 经济学原理的实践&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac1%e7%ab%a0-%e7%bb%8f%e6%b5%8e%e5%ad%a6%e5%8e%9f%e7%90%86%e7%9a%84%e5%ae%9e%e8%b7%b5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;第2章-经济科学运用数据和模型理解世界&#34;&gt;&#xA;  第2章 经济科学：运用数据和模型理解世界&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac2%e7%ab%a0-%e7%bb%8f%e6%b5%8e%e7%a7%91%e5%ad%a6%e8%bf%90%e7%94%a8%e6%95%b0%e6%8d%ae%e5%92%8c%e6%a8%a1%e5%9e%8b%e7%90%86%e8%a7%a3%e4%b8%96%e7%95%8c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;第3章-优化竭力做到最好&#34;&gt;&#xA;  第3章 优化：竭力做到最好&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac3%e7%ab%a0-%e4%bc%98%e5%8c%96%e7%ab%ad%e5%8a%9b%e5%81%9a%e5%88%b0%e6%9c%80%e5%a5%bd&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;第4章-需求供给与均衡&#34;&gt;&#xA;  第4章 需求，供给与均衡&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac4%e7%ab%a0-%e9%9c%80%e6%b1%82%e4%be%9b%e7%bb%99%e4%b8%8e%e5%9d%87%e8%a1%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;第5章-国家财富定义和测算宏观经济总量&#34;&gt;&#xA;  第5章 国家财富：定义和测算宏观经济总量&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac5%e7%ab%a0-%e5%9b%bd%e5%ae%b6%e8%b4%a2%e5%af%8c%e5%ae%9a%e4%b9%89%e5%92%8c%e6%b5%8b%e7%ae%97%e5%ae%8f%e8%a7%82%e7%bb%8f%e6%b5%8e%e6%80%bb%e9%87%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;第6章-总收入&#34;&gt;&#xA;  第6章 总收入&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac6%e7%ab%a0-%e6%80%bb%e6%94%b6%e5%85%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;第7章-经济增长&#34;&gt;&#xA;  第7章 经济增长&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac7%e7%ab%a0-%e7%bb%8f%e6%b5%8e%e5%a2%9e%e9%95%bf&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;第8章-为什么很多地区仍然不发达&#34;&gt;&#xA;  第8章 为什么很多地区仍然不发达？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac8%e7%ab%a0-%e4%b8%ba%e4%bb%80%e4%b9%88%e5%be%88%e5%a4%9a%e5%9c%b0%e5%8c%ba%e4%bb%8d%e7%84%b6%e4%b8%8d%e5%8f%91%e8%be%be&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;第9章-就业与失业&#34;&gt;&#xA;  第9章 就业与失业&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac9%e7%ab%a0-%e5%b0%b1%e4%b8%9a%e4%b8%8e%e5%a4%b1%e4%b8%9a&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;第10章-信贷市场&#34;&gt;&#xA;  第10章 信贷市场&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac10%e7%ab%a0-%e4%bf%a1%e8%b4%b7%e5%b8%82%e5%9c%ba&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;信贷&lt;/strong&gt;：我们把包括企业家、购房者和学生在内的借款主体称为&lt;strong&gt;债务人&lt;/strong&gt;，他们所借入的资金被称为&lt;strong&gt;信贷&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;借款当然不是免费的，借款人需要支付利息。借款的初始金额被称为&lt;strong&gt;本金&lt;/strong&gt;。利率是借款者在偿还本金之外，需要（在满一年时）为每1美元贷款支付的额外费用。也可以说，利率就是一笔1美元贷款的&lt;strong&gt;年度成本&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;如果你借了1年期利率为i的L美元，1年后你要偿还本金L美元加上i×L美元的利息。为了和实际利率区分开来，我们把利率i称为&lt;strong&gt;名义利率&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;实际利率=名义利率-通货膨胀率&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;实际GDP=名义GDP-通货膨胀率&lt;/li&gt;&#xA;&lt;li&gt;几乎所有的贷款都是以&lt;strong&gt;名义利率&lt;/strong&gt;发放的&#xA;&lt;ul&gt;&#xA;&lt;li&gt;我现在理解了韩秀云说的贷款买房比全款买房更好，因为实际利率会随着通货膨胀越来越低，甚至可能低于越来的本金&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;通货膨胀率指的是整体经济中物价上涨的速度。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;其他条件不变时，通货膨胀率越高，企业销售的商品和服务价格就会越高，在给定的名义利率下偿还贷款就会越容易。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;信贷需求曲线：信贷需求量与实际利率之间的关系&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;政府所感知到的商业机会变化、家庭偏好或预期的变化、政府政策的变化，会使得信贷需求曲线左移或右移&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;实际利率：人们因存钱而得到的回报，因为今天存的1美元，在一年后的购买力是1+r美元，其中r是实际利率&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;换句话说，实际利率是当前消费的机会成本，也就是你基于未来的购买力而放弃的东西。因此，较高的实际利率会增加当前消费的机会成本，鼓励更高水平的储蓄。&lt;/li&gt;&#xA;&lt;li&gt;真实市场中，为了补偿出借人，具有不同违约风险的借款者需面对不同的实际利率。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;信贷供给曲线：信贷供给量与实际利率之间的关系&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;信贷供给曲线的移动则源于实际利率不变的情况下，追求优化的经济主体储蓄动机的变化（家庭储蓄动机的变化、企业储蓄动机的变化）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;人们为什么要储蓄？&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;为退休储蓄&lt;/li&gt;&#xA;&lt;li&gt;为孩子存钱&lt;/li&gt;&#xA;&lt;li&gt;为一些可预见的大额支出而存钱&lt;/li&gt;&#xA;&lt;li&gt;投资个人事业而存钱&lt;/li&gt;&#xA;&lt;li&gt;以备不时之需&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;信贷市场：借款者从储蓄者那里获取资金的市场，有时也被称为可贷资金市场&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;信贷市场均衡：信贷供给曲线与信贷需求曲线的交点所对应的实际利率和信贷量&#xA;&lt;ul&gt;&#xA;&lt;li&gt;交点决定了市场中的信贷总量(Q*)和均衡实际利率(r*)。在均衡实际利率下，信贷需求量等于信贷供给量。实际利率高于均衡水平将导致超额的信贷供给，这通常会给实际利率带来下行压力。实际利率低于均衡水平将导致超额的信贷需求，给实际利率带来上行压力。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;信贷市场的作用：通过使储蓄者把多余的钱出借给借款者，信贷市场改善了经济中的资源配置&lt;/p&gt;</description>
    </item>
    <item>
      <title>广州</title>
      <link>/post/life/%E5%B9%BF%E5%B7%9E/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/life/%E5%B9%BF%E5%B7%9E/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 二沙岛&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 鱼珠码头&#xA;&lt;ul&gt;&#xA;&lt;li&gt;自行车电动车也可以上船，刷地铁的码就行（车刷一次，人刷一次）&lt;/li&gt;&#xA;&lt;li&gt;如果要去大学城或者去生物岛骑车，就要到鱼珠码头去坐车（不然从海珠区那边绕过去太远了。。。。如果体力好也可以这么做）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 生物岛&#xA;&lt;ul&gt;&#xA;&lt;li&gt;骑车绕圈，路况很好&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 陈家祠&#xA;&lt;ul&gt;&#xA;&lt;li&gt;里面的木雕，象牙雕，屋顶上的雕像都很有特色。相比起广东省博物馆，陈家祠更值得去&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 广州动物园&#xA;&lt;ul&gt;&#xA;&lt;li&gt;水獭🦦，卡皮巴拉，蛇🐍有很多种类&lt;/li&gt;&#xA;&lt;li&gt;大熊猫馆有几只大熊猫🐼，里面有空调（果然国宝的待遇就是不一样）&lt;/li&gt;&#xA;&lt;li&gt;小熊猫在高高的树上，要仔细找一找才看得到&lt;/li&gt;&#xA;&lt;li&gt;去的那天天气太热了，动物们都懒羊羊的在睡觉&lt;/li&gt;&#xA;&lt;li&gt;如果坐5号线到动物园站，是从南门进，从南到北逛动物园，最后还要绕回南门坐地铁。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 白云山&#xA;&lt;ul&gt;&#xA;&lt;li&gt;天气凉快一点可以考虑去&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 广州美术馆&#xA;&lt;ul&gt;&#xA;&lt;li&gt;交通&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果是坐5号线出发的话，坐到珠江新城后转3号线坐一站到广州塔，然后走一小段路就到美术馆了&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 海鸥岛&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 永庆坊&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 流花湖公园&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 越秀公园&lt;/li&gt;&#xA;&lt;li&gt;图书馆&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 黄埔区图书馆 大沙馆&#xA;&lt;ul&gt;&#xA;&lt;li&gt;经常去这个图书馆自习，周三闭馆，1楼的自习区开放到晚上21点，其他区域到18点&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 黄埔区图书馆 香雪馆&#xA;&lt;ul&gt;&#xA;&lt;li&gt;大沙馆更豪华，有很多座位下面都有插座&lt;/li&gt;&#xA;&lt;li&gt;一楼有介绍黄埔区的展览陈列，拍了一些黄埔区行政区划相关的图片&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 广州市图书馆&#xA;&lt;ul&gt;&#xA;&lt;li&gt;人真的太多了。。。位置就在广东省博物馆的旁边&lt;/li&gt;&#xA;&lt;li&gt;层数很多，书的种类也很多。在二楼停留了一会儿，就兰花养殖的书就有好几排书架&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;博物馆&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 广东省博物馆&#xA;&lt;ul&gt;&#xA;&lt;li&gt;需要在博物馆的公众号提前预约，晚上22点放票。但当天去的时候好像不预约也行，但是需要买票。&lt;/li&gt;&#xA;&lt;li&gt;有一部分的展品和陈家祠是重合的（木雕，象牙雕，祠堂相关的文物），种类没有陈家祠的丰富&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 广东革命历史博物馆&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 广州十三行博物馆&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 中山大学生物博物馆&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 广州迪士普音响博物馆&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;周边城市&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 香港 🇭🇰&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 澳门 🇲🇴&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 北海&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 长沙&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 海口&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 上海&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 杭州&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 武汉&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 上饶&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 岳阳&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 九江&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 南昌&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>教育到底怎么了 2025-03-29</title>
      <link>/post/blog/2025/2025-03-29-%E6%95%99%E8%82%B2%E5%88%B0%E5%BA%95%E6%80%8E%E4%B9%88%E4%BA%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/blog/2025/2025-03-29-%E6%95%99%E8%82%B2%E5%88%B0%E5%BA%95%E6%80%8E%E4%B9%88%E4%BA%86/</guid>
      <description>&lt;h1 id=&#34;教育到底怎么了-2025-03-29&#34;&gt;&#xA;  教育到底怎么了 2025-03-29&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%99%e8%82%b2%e5%88%b0%e5%ba%95%e6%80%8e%e4%b9%88%e4%ba%86-2025-03-29&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;blockquote class=&#34;book-hint info&#34;&gt;&#xA;&lt;p&gt;我们的价值在哪里？&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;刚刚走过来图书馆的时候，听了一个新的播客（无界有声）「毕业即失业，教育到底怎么了」。听完之后感触还是很深的，尤其是在现在工作不好找的情况下，真的是很有体会。&lt;/p&gt;&#xA;&lt;p&gt;首先是播客里面提到的一个老生常谈的话题，我们接受的教育学到的东西在我们进入职场时有用吗？或者说社会需要什么你知道吗？我一直都觉得理论知识是很重要的，这决定了你能实践的深度和广度，对我而言我接受的教育并不是完全没有用的。但是第二个问题，我确实没有思考过。即使是上一家公司在降本增效的时候，同事调侃说领导要让我们思考「我们的价值在哪里？」「我们能为公司带来什么价值？」的时候我觉得这只是在PUA。现在我觉得这个问题是很有意义的，如果我们是一个普通人，我们需要在这个社会上生存，我们就需要去思考这个问题，尤其是在现在竞争这么激烈的情况下。如果你所在的行业真的就已经卷到不能再待下去了，更需要思考这个问题。你需要调整你自己，去学习新的技能，以市场为指导。&lt;/p&gt;&#xA;&lt;p&gt;现在学历是真的越来越不值钱了，你要培养你自己全方面的能力，而不是去内卷。上一份工作关系好的同事X一直推荐我买一个咖啡机，我平时每天都喝咖啡自己买一个咖啡机既省钱，又有做咖啡的乐趣多好；还有我渐渐地不怎么骑车了。工作都把我蹂躏成什么样子了，我没有思考的时间，对其他事情也渐渐地没有了兴趣，对我的爱好（骑行、乒乓球）也越来越不上心了。最主要的，我作为一个程序员，在高强度的工作压力下也没有很多的积累，也造成了我这次找工作焦虑的主要原因（我想如果我入职的岗位是纯粹做技术的，我这次应该就没有那么焦虑了吧）&lt;/p&gt;&#xA;&lt;p&gt;我不应该抱着学习地心态来面对社会和职场，我要想我有什么价值。读到这句话我想到最直接的就是我学习计算机，我想着要有一个环境我才能去了解掌握到高并发的知识，才能学习到AI相关的知识。不，我要努力为自己创造这样的条件，培养这些能力，让培养出来的这些能力成为我的通行劵。应该要放弃学习心态来面对社会和职场。&lt;/p&gt;&#xA;&lt;p&gt;不要通过学校和分数来评判你的成功和失败，你要具体分析你每一次的表现，在你能承受的范围内，再进步一点。就像这次找工作面试一样，不要去那么在意是通过了还是没有通过，去总结每次面试你的收获是什么，你有什么可以改进的地方，这样的心态才是好的。好的心态真的很重要。&lt;/p&gt;</description>
    </item>
    <item>
      <title>系统设计</title>
      <link>/post/computer-science/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</guid>
      <description>&lt;h1 id=&#34;系统设计&#34;&gt;&#xA;  系统设计&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%b3%bb%e7%bb%9f%e8%ae%be%e8%ae%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;数据持久化&#34;&gt;&#xA;  数据持久化&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e6%8c%81%e4%b9%85%e5%8c%96&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;冷热分离&#34;&gt;&#xA;  冷热分离&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%86%b7%e7%83%ad%e5%88%86%e7%a6%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/370031862&#34;&gt;冷热分离之 OTS 表格存储实战&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://developer.aliyun.com/article/1321304&#34;&gt;数据架构：数据冷热分离实践思考&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://xie.infoq.cn/article/8cb17c785305b9228bc92fea1&#34;&gt;数据架构：概念与冷热分离&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;查询分离&#34;&gt;&#xA;  查询分离&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9f%a5%e8%af%a2%e5%88%86%e7%a6%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;分表分库&#34;&gt;&#xA;  分表分库&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e8%a1%a8%e5%88%86%e5%ba%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h2 id=&#34;服务发现&#34;&gt;&#xA;  服务发现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9c%8d%e5%8a%a1%e5%8f%91%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;事务处理&#34;&gt;&#xA;  事务处理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8b%e5%8a%a1%e5%a4%84%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;本地事务&#34;&gt;&#xA;  本地事务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9c%ac%e5%9c%b0%e4%ba%8b%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;全局事务&#34;&gt;&#xA;  全局事务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%a8%e5%b1%80%e4%ba%8b%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;共享事务&#34;&gt;&#xA;  共享事务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%b1%e4%ba%ab%e4%ba%8b%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;分布式事务&#34;&gt;&#xA;  分布式事务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e5%b8%83%e5%bc%8f%e4%ba%8b%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h2 id=&#34;缓存&#34;&gt;&#xA;  缓存&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bc%93%e5%ad%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;客户端缓存&#34;&gt;&#xA;  客户端缓存&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%a2%e6%88%b7%e7%ab%af%e7%bc%93%e5%ad%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;系统是否真的需要缓存&#34;&gt;&#xA;  系统是否真的需要缓存？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%b3%bb%e7%bb%9f%e6%98%af%e5%90%a6%e7%9c%9f%e7%9a%84%e9%9c%80%e8%a6%81%e7%bc%93%e5%ad%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件开发中引入缓存的负面作用要明显大于硬件缓存带来的负面作用&#xA;&lt;ul&gt;&#xA;&lt;li&gt;从开发角度来说&#xA;&lt;ul&gt;&#xA;&lt;li&gt;你要考虑缓存的失效、更新、一致性等问题（硬件缓存也有这些问题，只是不需要由你去考虑，主流的ISA也都没有提供任何直接操作缓存的指令）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;从运维角度来说&#xA;&lt;ul&gt;&#xA;&lt;li&gt;缓存会掩盖一些缺陷，让问题在更久的时间以后，出现在距离发生现场更远的位置上&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;从安全角度来说&#xA;&lt;ul&gt;&#xA;&lt;li&gt;缓存可能会泄漏某些保密数据，也是容易受到攻击的薄弱点&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;引入缓存的理由&#xA;&lt;ul&gt;&#xA;&lt;li&gt;为缓解CPU压力而引入缓存&#xA;&lt;ul&gt;&#xA;&lt;li&gt;譬如把方法运行结果存储起来、把原本要实时计算的内容提前算好、对一些公用的数据进行复用，这可以节省CPU算力，顺带提升响应性能&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;为缓解I/O压力而引入缓存&#xA;&lt;ul&gt;&#xA;&lt;li&gt;譬如把原本对网络、磁盘等较慢介质的读写访问变为对内存等较快介质的访问，&lt;/li&gt;&#xA;&lt;li&gt;将原本对单点部件（如数据库）的读写访问变为对可扩缩部件（如缓存中间件）的访问，顺带提升响应性能&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;服务端缓存&#34;&gt;&#xA;  服务端缓存&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9c%8d%e5%8a%a1%e7%ab%af%e7%bc%93%e5%ad%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;读缓存&#34;&gt;&#xA;  读缓存&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%af%bb%e7%bc%93%e5%ad%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;写缓存&#34;&gt;&#xA;  写缓存&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%86%99%e7%bc%93%e5%ad%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h2 id=&#34;负载均衡&#34;&gt;&#xA;  负载均衡&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%b4%9f%e8%bd%bd%e5%9d%87%e8%a1%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;流量治理&#34;&gt;&#xA;  流量治理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b5%81%e9%87%8f%e6%b2%bb%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;服务容错&#34;&gt;&#xA;  服务容错&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9c%8d%e5%8a%a1%e5%ae%b9%e9%94%99&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;流量控制&#34;&gt;&#xA;  流量控制&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b5%81%e9%87%8f%e6%8e%a7%e5%88%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h2 id=&#34;可观测性&#34;&gt;&#xA;  可观测性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%af%e8%a7%82%e6%b5%8b%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;时间日志&#34;&gt;&#xA;  时间日志&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%97%b6%e9%97%b4%e6%97%a5%e5%bf%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;链路追踪&#34;&gt;&#xA;  链路追踪&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%93%be%e8%b7%af%e8%bf%bd%e8%b8%aa&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;聚合度量&#34;&gt;&#xA;  聚合度量&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%81%9a%e5%90%88%e5%ba%a6%e9%87%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h2 id=&#34;架构安全性&#34;&gt;&#xA;  架构安全性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9e%b6%e6%9e%84%e5%ae%89%e5%85%a8%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;认证&#34;&gt;&#xA;  认证&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%ae%a4%e8%af%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;授权&#34;&gt;&#xA;  授权&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8e%88%e6%9d%83&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;凭证&#34;&gt;&#xA;  凭证&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%87%ad%e8%af%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;保密&#34;&gt;&#xA;  保密&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bf%9d%e5%af%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;传输&#34;&gt;&#xA;  传输&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bc%a0%e8%be%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h2 id=&#34;分布式共识&#34;&gt;&#xA;  分布式共识&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e5%b8%83%e5%bc%8f%e5%85%b1%e8%af%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;reference&#34;&gt;&#xA;  Reference&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/35492898/&#34;&gt;凤凰架构 构建可靠的大型分布式系统&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/36661336/&#34;&gt;搞定系统设计 面试敲开大厂的门&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>能找到工作吗 2025-03-16</title>
      <link>/post/blog/2025/2025-03-16-%E8%83%BD%E6%89%BE%E5%88%B0%E5%B7%A5%E4%BD%9C%E5%90%97/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/blog/2025/2025-03-16-%E8%83%BD%E6%89%BE%E5%88%B0%E5%B7%A5%E4%BD%9C%E5%90%97/</guid>
      <description>&lt;h1 id=&#34;能找到工作吗-2025-03-16&#34;&gt;&#xA;  能找到工作吗？ 2025-03-16&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%83%bd%e6%89%be%e5%88%b0%e5%b7%a5%e4%bd%9c%e5%90%97-2025-03-16&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;从星期一开始找工作已经第七天，今天还是怎么也不想起来，很累，心里很焦虑。这几天旺财总是抱怨我，出门前怎么呆呆地站在那里，也不把阳台的自行车推出来一下，这几天发愣的次数越来越多。今早也是这样，回过神来早上咖啡还没去做。出门前旺财问我今天天气还不错，要不骑车去图书馆吧，我说要不走路过去吧，节奏慢一点。心里不想那么快就到了图书馆开始学习准备面试找工作的事情，慢慢走过去心情会好一些。&lt;/p&gt;&#xA;&lt;p&gt;在离职上一家公司时，我没有做任何的犹豫只想要离开，这份工作越到后面越和我想象的不一样，我想要去寻找新机会，我充满了信心，我能力不算出众但也不算太差。我觉得不会太困难。在正式找工作之前，我没有怎么去思考和关注就业市场，gap休息了一个多月之后，我就开始中等强度的学习，学习算法，编程相关的知识。来到广州安顿下来之后，我和旺财就开始泡了两个星期的图书馆一直到上个周日。&lt;/p&gt;&#xA;&lt;p&gt;到现在为止已经在Boss直聘上找了很多岗位，大部分都是不回复的，有几家回复了我觉得不合适，现在只有1家约了面试在周二的时候（第一面已经通过了，下周二晚上是第二面）。昨天早上旺财说要再改一改自己的简历，我现在的行动也渐渐失去了方向，就和旺财说那我也看看改一下。我找大学同学Z要了他的简历，旺财帮我要了她朋友的简历。下午和晚上在图书馆就又包装了一下项目部分的内容。图书馆闭馆之前感觉自己又有希望了。&lt;/p&gt;&#xA;&lt;p&gt;从行动开始找工作到现在其实就过了6天，但我真的没有想到这对我的心理有那么大的影响，我会那么地担忧这件事情，我会对这种不确定的时期感觉到如此的焦虑。但我仔细想来这是我第一次经历这样的事情。高考的成绩再不理想，我的下一个阶段也是开始大学生活；大学的生活马马虎虎，但最后找工作的时候也是在好几份工作中挑一个（21年的就业环境真好。。哭了）。但这次不一样了，首先我遭遇到的是很低的招聘回复率；其次就是程序开发这个行业情况越来越不好, 竞争压力越来越大，还有越来越多的人挤进来。我在担心我现在的处境，也在担心我未来的处境。&lt;/p&gt;&#xA;&lt;p&gt;这一次我真正感觉到我只是一个普通人，之前三年多相对稳定的工作并不代表什么，这段工作结束之后，我也是一个被“我应该挺不错的，为什么没有公司联系我面试”，“我的工作经历有什么问题吗？为什么招聘的人觉得我不合适？”，“是我的项目太简单了吗？是我不会包装我的简历吗？”，“是我能力不行吗？”这些问题不断困扰的人。我一边必须在网上获取信息，一边又不得不看到哪些让人焦虑的网上讨论，再加上我现在的经历，真的感觉喘不过气来。&lt;/p&gt;&#xA;&lt;p&gt;这才找工作过了7天？是呀，才过了7天。我想我该停一下了，花一点时间写一段文字让自己平静一下，想一想我该怎么调整我的心态。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;首先，计算机这条路我和旺财都没有走死，即使找不到好的公司，也能去干外包的开发。在现在的就业环境下，这也是没有办法的；现在看来计算机干到35岁，你还怕什么影响职业规划。&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>英伟达-黄仁勋之芯</title>
      <link>/post/books/%E8%8B%B1%E4%BC%9F%E8%BE%BE-%E9%BB%84%E4%BB%81%E5%8B%8B%E4%B9%8B%E8%8A%AF/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/books/%E8%8B%B1%E4%BC%9F%E8%BE%BE-%E9%BB%84%E4%BB%81%E5%8B%8B%E4%B9%8B%E8%8A%AF/</guid>
      <description>&lt;h1 id=&#34;黄仁勋-英伟达之芯&#34;&gt;&#xA;  黄仁勋-英伟达之芯&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%bb%84%e4%bb%81%e5%8b%8b-%e8%8b%b1%e4%bc%9f%e8%be%be%e4%b9%8b%e8%8a%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;第1章-求学生涯&#34;&gt;&#xA;  第1章 求学生涯&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac1%e7%ab%a0-%e6%b1%82%e5%ad%a6%e7%94%9f%e6%b6%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;第2章-职涯早期&#34;&gt;&#xA;  第2章 职涯早期&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac2%e7%ab%a0-%e8%81%8c%e6%b6%af%e6%97%a9%e6%9c%9f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;第3章-从餐厅起步的nvidia&#34;&gt;&#xA;  第3章 从餐厅起步的Nvidia&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac3%e7%ab%a0-%e4%bb%8e%e9%a4%90%e5%8e%85%e8%b5%b7%e6%ad%a5%e7%9a%84nvidia&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;第4章-英伟达遭遇绝境&#34;&gt;&#xA;  第4章 英伟达遭遇绝境&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac4%e7%ab%a0-%e8%8b%b1%e4%bc%9f%e8%be%be%e9%81%ad%e9%81%87%e7%bb%9d%e5%a2%83&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;第5章-咸鱼翻身&#34;&gt;&#xA;  第5章 咸鱼翻身&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac5%e7%ab%a0-%e5%92%b8%e9%b1%bc%e7%bf%bb%e8%ba%ab&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;第6章-新机器时代曙光初现&#34;&gt;&#xA;  第6章 新机器时代曙光初现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac6%e7%ab%a0-%e6%96%b0%e6%9c%ba%e5%99%a8%e6%97%b6%e4%bb%a3%e6%9b%99%e5%85%89%e5%88%9d%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;第7章-死亡竞赛&#34;&gt;&#xA;  第7章 死亡竞赛&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac7%e7%ab%a0-%e6%ad%bb%e4%ba%a1%e7%ab%9e%e8%b5%9b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;第8章-游戏玩家拯救英伟达&#34;&gt;&#xA;  第8章 游戏玩家拯救英伟达&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac8%e7%ab%a0-%e6%b8%b8%e6%88%8f%e7%8e%a9%e5%ae%b6%e6%8b%af%e6%95%91%e8%8b%b1%e4%bc%9f%e8%be%be&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;第9章-光速之道&#34;&gt;&#xA;  第9章 光速之道&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac9%e7%ab%a0-%e5%85%89%e9%80%9f%e4%b9%8b%e9%81%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;第10章-同频共振&#34;&gt;&#xA;  第10章 同频共振&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac10%e7%ab%a0-%e5%90%8c%e9%a2%91%e5%85%b1%e6%8c%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;第11章-范式转变的时刻&#34;&gt;&#xA;  第11章 范式转变的时刻&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac11%e7%ab%a0-%e8%8c%83%e5%bc%8f%e8%bd%ac%e5%8f%98%e7%9a%84%e6%97%b6%e5%88%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;第12章-千载难逢的机会&#34;&gt;&#xA;  第12章 千载难逢的机会&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac12%e7%ab%a0-%e5%8d%83%e8%bd%bd%e9%9a%be%e9%80%a2%e7%9a%84%e6%9c%ba%e4%bc%9a&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;第13章-由机器引领的时代&#34;&gt;&#xA;  第13章 由机器引领的时代&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac13%e7%ab%a0-%e7%94%b1%e6%9c%ba%e5%99%a8%e5%bc%95%e9%a2%86%e7%9a%84%e6%97%b6%e4%bb%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;克里泽夫斯基：辛顿在多伦多大学时的学生&lt;/li&gt;&#xA;&lt;li&gt;因为无法解释神经网络的计算过程，学术界不认可这种方法&lt;/li&gt;&#xA;&lt;li&gt;辛顿给&lt;strong&gt;苏茨克弗&lt;/strong&gt;和&lt;strong&gt;克里泽夫斯基&lt;/strong&gt;布置了一项艰巨的任务：利用英伟达的GPU训练计算机学会图像识别&lt;/li&gt;&#xA;&lt;li&gt;卡坦扎罗 2011年加入英伟达&#xA;&lt;ul&gt;&#xA;&lt;li&gt;cuDNN cuda deep neural network&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;矩阵乘法&lt;/li&gt;&#xA;&lt;li&gt;优秀的神经网络软件应该注重速度而不是精度&lt;/li&gt;&#xA;&lt;li&gt;马克思与黄仁勋的分歧&#xA;&lt;ul&gt;&#xA;&lt;li&gt;马斯克认为，先进的人工智能可能带来灭绝级威胁。这一观点得到了包括辛顿和苏茨克弗在内的大批技术专家的认同，他们还是最初那篇关于AlexNet的论文的合著者。然而黄仁勋完全不这么认为。他竟觉得人工智能毫无风险，真是令我吃惊。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;第14章-ai行业的佼佼者&#34;&gt;&#xA;  第14章 AI行业的佼佼者&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac14%e7%ab%a0-ai%e8%a1%8c%e4%b8%9a%e7%9a%84%e4%bd%bc%e4%bd%bc%e8%80%85&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;2016年，英伟达的股价飙升了224%，这让黄仁勋重获荣光，再度跻身亿万富翁行列。不过，在当年的标准普尔500指数中，表现最抢眼的股票并非英伟达，而是其长期竞争对手AMD，其股价涨幅高达309%。黄仁勋并不甘心位居次席。&lt;/li&gt;&#xA;&lt;li&gt;Omniverse&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;第15章-ai工厂&#34;&gt;&#xA;  第15章 AI工厂&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac15%e7%ab%a0-ai%e5%b7%a5%e5%8e%82&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;乌斯科雷特&lt;/strong&gt;把这套学习机制命名为“自注意力”&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;第16章-全球最具价值的半导体企业&#34;&gt;&#xA;  第16章 全球最具价值的半导体企业&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac16%e7%ab%a0-%e5%85%a8%e7%90%83%e6%9c%80%e5%85%b7%e4%bb%b7%e5%80%bc%e7%9a%84%e5%8d%8a%e5%af%bc%e4%bd%93%e4%bc%81%e4%b8%9a&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在2018年的GTC大会上，黄仁勋指出，在短短5年内，英伟达的GPU处理速度提升了25倍，这一成绩远超摩尔定律的预测。接着，他展示了一张图，这张图显示在2012年的显卡上需要一周的时间才能训练出AlexNet，而在他推出的新款计算机DGX-2上则仅需18分钟就能完成训练。&lt;/li&gt;&#xA;&lt;li&gt;2020年7月，英伟达的市值终于超越了英特尔。没过多久，英伟达的市值又超越了AMD。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;第17章-这个时代最重要的科技公司&#34;&gt;&#xA;  第17章 这个时代最重要的科技公司&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac17%e7%ab%a0-%e8%bf%99%e4%b8%aa%e6%97%b6%e4%bb%a3%e6%9c%80%e9%87%8d%e8%a6%81%e7%9a%84%e7%a7%91%e6%8a%80%e5%85%ac%e5%8f%b8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;第18章-人类需要更多智慧&#34;&gt;&#xA;  第18章 人类需要更多智慧&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac18%e7%ab%a0-%e4%ba%ba%e7%b1%bb%e9%9c%80%e8%a6%81%e6%9b%b4%e5%a4%9a%e6%99%ba%e6%85%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;第19章-更多电力更大算力&#34;&gt;&#xA;  第19章 更多电力更大算力&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac19%e7%ab%a0-%e6%9b%b4%e5%a4%9a%e7%94%b5%e5%8a%9b%e6%9b%b4%e5%a4%a7%e7%ae%97%e5%8a%9b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;第20章-地球上最重要的股票&#34;&gt;&#xA;  第20章 地球上最重要的股票&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac20%e7%ab%a0-%e5%9c%b0%e7%90%83%e4%b8%8a%e6%9c%80%e9%87%8d%e8%a6%81%e7%9a%84%e8%82%a1%e7%a5%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;第21章-向理性本身发起挑战&#34;&gt;&#xA;  第21章 向理性本身发起挑战&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac21%e7%ab%a0-%e5%90%91%e7%90%86%e6%80%a7%e6%9c%ac%e8%ba%ab%e5%8f%91%e8%b5%b7%e6%8c%91%e6%88%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;第22章-深不见底的恐惧&#34;&gt;&#xA;  第22章 深不见底的恐惧&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac22%e7%ab%a0-%e6%b7%b1%e4%b8%8d%e8%a7%81%e5%ba%95%e7%9a%84%e6%81%90%e6%83%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;第23章-思考机器&#34;&gt;&#xA;  第23章 思考机器&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac23%e7%ab%a0-%e6%80%9d%e8%80%83%e6%9c%ba%e5%99%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;</description>
    </item>
    <item>
      <title>运维</title>
      <link>/post/computer-science/%E8%BF%90%E7%BB%B4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/%E8%BF%90%E7%BB%B4/</guid>
      <description>&lt;h1 id=&#34;查询&#34;&gt;&#xA;  查询&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9f%a5%e8%af%a2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 查找文件&#xA;find ./ -name &amp;#34;elastic&amp;#34;&#xA;&#xA;# 端口查询&#xA;### 查询&#xA;sudo netstat -tulnp | grep :443&#xA;sudo lsof -i :443&#xA;### 杀死&#xA;kill -9 &#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;内存&#34;&gt;&#xA;  内存&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%86%85%e5%ad%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 服务器内存占用率&#xA;free -h&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;磁盘&#34;&gt;&#xA;  磁盘&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%a3%81%e7%9b%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 磁盘占用&#xA;df -h&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
  </channel>
</rss>
