<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Penruins</title>
    <link>/post/computer-science/algorithm/</link>
    <description>Recent content on Penruins</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>[Main Page](/)</copyright>
    <atom:link href="/post/computer-science/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Algorithm</title>
      <link>/post/computer-science/algorithm/algorithm/</link>
      <pubDate>Thu, 14 Nov 2024 08:59:49 +0800</pubDate>
      <guid>/post/computer-science/algorithm/algorithm/</guid>
      <description>&lt;h1 id=&#34;algorithm&#34;&gt;Algorithm&lt;a class=&#34;anchor&#34; href=&#34;#algorithm&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.programmercarl.com/&#34;&gt;代码随想录&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;tips&#34;&gt;Tips&lt;a class=&#34;anchor&#34; href=&#34;#tips&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;如果我要创建一个列表并且需要一直在列表的开头插入元素我要怎么实现代码保证效率&#34;&gt;如果我要创建一个列表，并且需要一直在列表的开头插入元素，我要怎么实现代码保证效率&lt;a class=&#34;anchor&#34; href=&#34;#%e5%a6%82%e6%9e%9c%e6%88%91%e8%a6%81%e5%88%9b%e5%bb%ba%e4%b8%80%e4%b8%aa%e5%88%97%e8%a1%a8%e5%b9%b6%e4%b8%94%e9%9c%80%e8%a6%81%e4%b8%80%e7%9b%b4%e5%9c%a8%e5%88%97%e8%a1%a8%e7%9a%84%e5%bc%80%e5%a4%b4%e6%8f%92%e5%85%a5%e5%85%83%e7%b4%a0%e6%88%91%e8%a6%81%e6%80%8e%e4%b9%88%e5%ae%9e%e7%8e%b0%e4%bb%a3%e7%a0%81%e4%bf%9d%e8%af%81%e6%95%88%e7%8e%87&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;在 Java 中，如果你需要频繁在列表的开头插入元素，使用 &lt;code&gt;LinkedList&lt;/code&gt; 会比 &lt;code&gt;ArrayList&lt;/code&gt; 更高效。因为 &lt;code&gt;LinkedList&lt;/code&gt; 在列表开头插入元素的时间复杂度是 O(1)，而 &lt;code&gt;ArrayList&lt;/code&gt; 在开头插入元素的时间复杂度是 O(n)，需要移动所有元素。&lt;/p&gt;&#xA;&lt;p&gt;使用 &lt;code&gt;LinkedList&lt;/code&gt; 的示例代码：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.util.LinkedList;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.util.List;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Main&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 创建一个 LinkedList&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 在列表开头插入元素&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        list.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(0, 1);  &lt;span style=&#34;color:#75715e&#34;&gt;// 插入元素 1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        list.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(0, 2);  &lt;span style=&#34;color:#75715e&#34;&gt;// 插入元素 2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        list.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(0, 3);  &lt;span style=&#34;color:#75715e&#34;&gt;// 插入元素 3&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 输出列表&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(list);  &lt;span style=&#34;color:#75715e&#34;&gt;// 输出: [3, 2, 1]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为什么 &lt;code&gt;LinkedList&lt;/code&gt; 更高效？&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;LinkedList&lt;/code&gt; 是基于双向链表实现的，插入和删除操作只需要调整节点的指针，时间复杂度为 O(1)。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;ArrayList&lt;/code&gt; 是基于动态数组实现的，插入和删除操作需要移动元素，时间复杂度为 O(n)。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;总结：&lt;/p&gt;</description>
    </item>
    <item>
      <title>algorithm practice 剑指 offer</title>
      <link>/post/computer-science/algorithm/algorithm-practice-%E5%89%91%E6%8C%87-offer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/algorithm/algorithm-practice-%E5%89%91%E6%8C%87-offer/</guid>
      <description>&lt;h2 id=&#34;algorithm-practice-剑指-offer&#34;&gt;algorithm practice 剑指 offer&lt;a class=&#34;anchor&#34; href=&#34;#algorithm-practice-%e5%89%91%e6%8c%87-offer&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;第1章-整数&#34;&gt;第1章 整数&lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac1%e7%ab%a0-%e6%95%b4%e6%95%b0&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;11-整数的基础知识&#34;&gt;1.1 整数的基础知识&lt;a class=&#34;anchor&#34; href=&#34;#11-%e6%95%b4%e6%95%b0%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题1整数除法&#34;&gt;面试题1：整数除法&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%981%e6%95%b4%e6%95%b0%e9%99%a4%e6%b3%95&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;12-二进制&#34;&gt;1.2 二进制&lt;a class=&#34;anchor&#34; href=&#34;#12-%e4%ba%8c%e8%bf%9b%e5%88%b6&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题2二进制加法&#34;&gt;面试题2：二进制加法&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%982%e4%ba%8c%e8%bf%9b%e5%88%b6%e5%8a%a0%e6%b3%95&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题3前n个数字二进制形式中1的个数&#34;&gt;面试题3：前n个数字二进制形式中1的个数&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%983%e5%89%8dn%e4%b8%aa%e6%95%b0%e5%ad%97%e4%ba%8c%e8%bf%9b%e5%88%b6%e5%bd%a2%e5%bc%8f%e4%b8%ad1%e7%9a%84%e4%b8%aa%e6%95%b0&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;简单计算每个整数的二进制形式中1的个数&#34;&gt;简单计算每个整数的二进制形式中1的个数&lt;a class=&#34;anchor&#34; href=&#34;#%e7%ae%80%e5%8d%95%e8%ae%a1%e7%ae%97%e6%af%8f%e4%b8%aa%e6%95%b4%e6%95%b0%e7%9a%84%e4%ba%8c%e8%bf%9b%e5%88%b6%e5%bd%a2%e5%bc%8f%e4%b8%ad1%e7%9a%84%e4%b8%aa%e6%95%b0&#34;&gt;#&lt;/a&gt;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;根据ii-1计算i的二进制形式中1的个数&#34;&gt;根据“i&amp;amp;（i-1）”计算i的二进制形式中1的个数&lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%b9%e6%8d%aeii-1%e8%ae%a1%e7%ae%97i%e7%9a%84%e4%ba%8c%e8%bf%9b%e5%88%b6%e5%bd%a2%e5%bc%8f%e4%b8%ad1%e7%9a%84%e4%b8%aa%e6%95%b0&#34;&gt;#&lt;/a&gt;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;根据i2计算i的二进制形式中1的个数&#34;&gt;根据“i/2”计算i的二进制形式中1的个数&lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%b9%e6%8d%aei2%e8%ae%a1%e7%ae%97i%e7%9a%84%e4%ba%8c%e8%bf%9b%e5%88%b6%e5%bd%a2%e5%bc%8f%e4%b8%ad1%e7%9a%84%e4%b8%aa%e6%95%b0&#34;&gt;#&lt;/a&gt;&lt;/h6&gt;&#xA;&lt;h5 id=&#34;面试题4只出现一次的数字&#34;&gt;面试题4：只出现一次的数字&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%984%e5%8f%aa%e5%87%ba%e7%8e%b0%e4%b8%80%e6%ac%a1%e7%9a%84%e6%95%b0%e5%ad%97&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题5单词长度的最大乘积&#34;&gt;面试题5：单词长度的最大乘积&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%985%e5%8d%95%e8%af%8d%e9%95%bf%e5%ba%a6%e7%9a%84%e6%9c%80%e5%a4%a7%e4%b9%98%e7%a7%af&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;用哈希表记录字符串中出现的字符&#34;&gt;用哈希表记录字符串中出现的字符&lt;a class=&#34;anchor&#34; href=&#34;#%e7%94%a8%e5%93%88%e5%b8%8c%e8%a1%a8%e8%ae%b0%e5%bd%95%e5%ad%97%e7%ac%a6%e4%b8%b2%e4%b8%ad%e5%87%ba%e7%8e%b0%e7%9a%84%e5%ad%97%e7%ac%a6&#34;&gt;#&lt;/a&gt;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;用整数的二进制数位记录字符串中出现的字符&#34;&gt;用整数的二进制数位记录字符串中出现的字符&lt;a class=&#34;anchor&#34; href=&#34;#%e7%94%a8%e6%95%b4%e6%95%b0%e7%9a%84%e4%ba%8c%e8%bf%9b%e5%88%b6%e6%95%b0%e4%bd%8d%e8%ae%b0%e5%bd%95%e5%ad%97%e7%ac%a6%e4%b8%b2%e4%b8%ad%e5%87%ba%e7%8e%b0%e7%9a%84%e5%ad%97%e7%ac%a6&#34;&gt;#&lt;/a&gt;&lt;/h6&gt;&#xA;&lt;h4 id=&#34;13-本章小结&#34;&gt;1.3 本章小结&lt;a class=&#34;anchor&#34; href=&#34;#13-%e6%9c%ac%e7%ab%a0%e5%b0%8f%e7%bb%93&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;第2章-数组&#34;&gt;第2章 数组&lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac2%e7%ab%a0-%e6%95%b0%e7%bb%84&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;21-数组的基础知识&#34;&gt;2.1 数组的基础知识&lt;a class=&#34;anchor&#34; href=&#34;#21-%e6%95%b0%e7%bb%84%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;22-双指针&#34;&gt;2.2 双指针&lt;a class=&#34;anchor&#34; href=&#34;#22-%e5%8f%8c%e6%8c%87%e9%92%88&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题6排序数组中的两个数字之和&#34;&gt;面试题6：排序数组中的两个数字之和&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%986%e6%8e%92%e5%ba%8f%e6%95%b0%e7%bb%84%e4%b8%ad%e7%9a%84%e4%b8%a4%e4%b8%aa%e6%95%b0%e5%ad%97%e4%b9%8b%e5%92%8c&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题7数组中和为0的3个数字&#34;&gt;面试题7：数组中和为0的3个数字&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%987%e6%95%b0%e7%bb%84%e4%b8%ad%e5%92%8c%e4%b8%ba0%e7%9a%843%e4%b8%aa%e6%95%b0%e5%ad%97&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题8和大于或等于k的最短子数组&#34;&gt;面试题8：和大于或等于k的最短子数组&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%988%e5%92%8c%e5%a4%a7%e4%ba%8e%e6%88%96%e7%ad%89%e4%ba%8ek%e7%9a%84%e6%9c%80%e7%9f%ad%e5%ad%90%e6%95%b0%e7%bb%84&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题9乘积小于k的子数组&#34;&gt;面试题9：乘积小于k的子数组&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%989%e4%b9%98%e7%a7%af%e5%b0%8f%e4%ba%8ek%e7%9a%84%e5%ad%90%e6%95%b0%e7%bb%84&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;23-累加数组数字求子数组之和&#34;&gt;2.3 累加数组数字求子数组之和&lt;a class=&#34;anchor&#34; href=&#34;#23-%e7%b4%af%e5%8a%a0%e6%95%b0%e7%bb%84%e6%95%b0%e5%ad%97%e6%b1%82%e5%ad%90%e6%95%b0%e7%bb%84%e4%b9%8b%e5%92%8c&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题10和为k的子数组&#34;&gt;面试题10：和为k的子数组&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9810%e5%92%8c%e4%b8%bak%e7%9a%84%e5%ad%90%e6%95%b0%e7%bb%84&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题110和1个数相同的子数组&#34;&gt;面试题11：0和1个数相同的子数组&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%98110%e5%92%8c1%e4%b8%aa%e6%95%b0%e7%9b%b8%e5%90%8c%e7%9a%84%e5%ad%90%e6%95%b0%e7%bb%84&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题12左右两边子数组的和相等&#34;&gt;面试题12：左右两边子数组的和相等&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9812%e5%b7%a6%e5%8f%b3%e4%b8%a4%e8%be%b9%e5%ad%90%e6%95%b0%e7%bb%84%e7%9a%84%e5%92%8c%e7%9b%b8%e7%ad%89&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题13二维子矩阵的数字之和&#34;&gt;面试题13：二维子矩阵的数字之和&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9813%e4%ba%8c%e7%bb%b4%e5%ad%90%e7%9f%a9%e9%98%b5%e7%9a%84%e6%95%b0%e5%ad%97%e4%b9%8b%e5%92%8c&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;24-本章小结&#34;&gt;2.4 本章小结&lt;a class=&#34;anchor&#34; href=&#34;#24-%e6%9c%ac%e7%ab%a0%e5%b0%8f%e7%bb%93&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;第3章-字符串&#34;&gt;第3章 字符串&lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac3%e7%ab%a0-%e5%ad%97%e7%ac%a6%e4%b8%b2&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;31-字符串的基础知识&#34;&gt;3.1 字符串的基础知识&lt;a class=&#34;anchor&#34; href=&#34;#31-%e5%ad%97%e7%ac%a6%e4%b8%b2%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;32-双指针&#34;&gt;3.2 双指针&lt;a class=&#34;anchor&#34; href=&#34;#32-%e5%8f%8c%e6%8c%87%e9%92%88&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题14字符串中的变位词&#34;&gt;面试题14：字符串中的变位词&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9814%e5%ad%97%e7%ac%a6%e4%b8%b2%e4%b8%ad%e7%9a%84%e5%8f%98%e4%bd%8d%e8%af%8d&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题15字符串中的所有变位词&#34;&gt;面试题15：字符串中的所有变位词&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9815%e5%ad%97%e7%ac%a6%e4%b8%b2%e4%b8%ad%e7%9a%84%e6%89%80%e6%9c%89%e5%8f%98%e4%bd%8d%e8%af%8d&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题16不含重复字符的最长子字符串&#34;&gt;面试题16：不含重复字符的最长子字符串&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9816%e4%b8%8d%e5%90%ab%e9%87%8d%e5%a4%8d%e5%ad%97%e7%ac%a6%e7%9a%84%e6%9c%80%e9%95%bf%e5%ad%90%e5%ad%97%e7%ac%a6%e4%b8%b2&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;需要多次遍历整个哈希表的解法&#34;&gt;需要多次遍历整个哈希表的解法&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9c%80%e8%a6%81%e5%a4%9a%e6%ac%a1%e9%81%8d%e5%8e%86%e6%95%b4%e4%b8%aa%e5%93%88%e5%b8%8c%e8%a1%a8%e7%9a%84%e8%a7%a3%e6%b3%95&#34;&gt;#&lt;/a&gt;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;避免多次遍历整个哈希表的解法&#34;&gt;避免多次遍历整个哈希表的解法&lt;a class=&#34;anchor&#34; href=&#34;#%e9%81%bf%e5%85%8d%e5%a4%9a%e6%ac%a1%e9%81%8d%e5%8e%86%e6%95%b4%e4%b8%aa%e5%93%88%e5%b8%8c%e8%a1%a8%e7%9a%84%e8%a7%a3%e6%b3%95&#34;&gt;#&lt;/a&gt;&lt;/h6&gt;&#xA;&lt;h5 id=&#34;面试题17包含所有字符的最短字符串&#34;&gt;面试题17：包含所有字符的最短字符串&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9817%e5%8c%85%e5%90%ab%e6%89%80%e6%9c%89%e5%ad%97%e7%ac%a6%e7%9a%84%e6%9c%80%e7%9f%ad%e5%ad%97%e7%ac%a6%e4%b8%b2&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;33-回文字符串&#34;&gt;3.3 回文字符串&lt;a class=&#34;anchor&#34; href=&#34;#33-%e5%9b%9e%e6%96%87%e5%ad%97%e7%ac%a6%e4%b8%b2&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题18有效的回文&#34;&gt;面试题18：有效的回文&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9818%e6%9c%89%e6%95%88%e7%9a%84%e5%9b%9e%e6%96%87&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题19最多删除一个字符得到回文&#34;&gt;面试题19：最多删除一个字符得到回文&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9819%e6%9c%80%e5%a4%9a%e5%88%a0%e9%99%a4%e4%b8%80%e4%b8%aa%e5%ad%97%e7%ac%a6%e5%be%97%e5%88%b0%e5%9b%9e%e6%96%87&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题20回文子字符串的个数&#34;&gt;面试题20：回文子字符串的个数&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9820%e5%9b%9e%e6%96%87%e5%ad%90%e5%ad%97%e7%ac%a6%e4%b8%b2%e7%9a%84%e4%b8%aa%e6%95%b0&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;34-本章小结&#34;&gt;3.4 本章小结&lt;a class=&#34;anchor&#34; href=&#34;#34-%e6%9c%ac%e7%ab%a0%e5%b0%8f%e7%bb%93&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;第4章-链表&#34;&gt;第4章 链表&lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac4%e7%ab%a0-%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;41-链表的基础知识&#34;&gt;4.1 链表的基础知识&lt;a class=&#34;anchor&#34; href=&#34;#41-%e9%93%be%e8%a1%a8%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;42-哨兵节点&#34;&gt;4.2 哨兵节点&lt;a class=&#34;anchor&#34; href=&#34;#42-%e5%93%a8%e5%85%b5%e8%8a%82%e7%82%b9&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;用哨兵节点简化链表插入操作&#34;&gt;用哨兵节点简化链表插入操作&lt;a class=&#34;anchor&#34; href=&#34;#%e7%94%a8%e5%93%a8%e5%85%b5%e8%8a%82%e7%82%b9%e7%ae%80%e5%8c%96%e9%93%be%e8%a1%a8%e6%8f%92%e5%85%a5%e6%93%8d%e4%bd%9c&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;用哨兵节点简化链表删除操作&#34;&gt;用哨兵节点简化链表删除操作&lt;a class=&#34;anchor&#34; href=&#34;#%e7%94%a8%e5%93%a8%e5%85%b5%e8%8a%82%e7%82%b9%e7%ae%80%e5%8c%96%e9%93%be%e8%a1%a8%e5%88%a0%e9%99%a4%e6%93%8d%e4%bd%9c&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;43-双指针&#34;&gt;4.3 双指针&lt;a class=&#34;anchor&#34; href=&#34;#43-%e5%8f%8c%e6%8c%87%e9%92%88&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题21删除倒数第k个节点&#34;&gt;面试题21：删除倒数第k个节点&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9821%e5%88%a0%e9%99%a4%e5%80%92%e6%95%b0%e7%ac%ack%e4%b8%aa%e8%8a%82%e7%82%b9&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题22链表中环的入口节点&#34;&gt;面试题22：链表中环的入口节点&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9822%e9%93%be%e8%a1%a8%e4%b8%ad%e7%8e%af%e7%9a%84%e5%85%a5%e5%8f%a3%e8%8a%82%e7%82%b9&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;需要知道环中节点数目的解法&#34;&gt;需要知道环中节点数目的解法&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9c%80%e8%a6%81%e7%9f%a5%e9%81%93%e7%8e%af%e4%b8%ad%e8%8a%82%e7%82%b9%e6%95%b0%e7%9b%ae%e7%9a%84%e8%a7%a3%e6%b3%95&#34;&gt;#&lt;/a&gt;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;不需要知道环中节点数目的解法&#34;&gt;不需要知道环中节点数目的解法&lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%8d%e9%9c%80%e8%a6%81%e7%9f%a5%e9%81%93%e7%8e%af%e4%b8%ad%e8%8a%82%e7%82%b9%e6%95%b0%e7%9b%ae%e7%9a%84%e8%a7%a3%e6%b3%95&#34;&gt;#&lt;/a&gt;&lt;/h6&gt;&#xA;&lt;h5 id=&#34;面试题23两个链表的第1个重合节点&#34;&gt;面试题23：两个链表的第1个重合节点&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9823%e4%b8%a4%e4%b8%aa%e9%93%be%e8%a1%a8%e7%9a%84%e7%ac%ac1%e4%b8%aa%e9%87%8d%e5%90%88%e8%8a%82%e7%82%b9&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;44-反转链表&#34;&gt;4.4 反转链表&lt;a class=&#34;anchor&#34; href=&#34;#44-%e5%8f%8d%e8%bd%ac%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题24反转链表&#34;&gt;面试题24：反转链表&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9824%e5%8f%8d%e8%bd%ac%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题25链表中的数字相加&#34;&gt;面试题25：链表中的数字相加&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9825%e9%93%be%e8%a1%a8%e4%b8%ad%e7%9a%84%e6%95%b0%e5%ad%97%e7%9b%b8%e5%8a%a0&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题26重排链表&#34;&gt;面试题26：重排链表&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9826%e9%87%8d%e6%8e%92%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题27回文链表&#34;&gt;面试题27：回文链表&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9827%e5%9b%9e%e6%96%87%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;45-双向链表和循环链表&#34;&gt;4.5 双向链表和循环链表&lt;a class=&#34;anchor&#34; href=&#34;#45-%e5%8f%8c%e5%90%91%e9%93%be%e8%a1%a8%e5%92%8c%e5%be%aa%e7%8e%af%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题28展平多级双向链&#34;&gt;面试题28：展平多级双向链&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9828%e5%b1%95%e5%b9%b3%e5%a4%9a%e7%ba%a7%e5%8f%8c%e5%90%91%e9%93%be&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题29排序的循环链表&#34;&gt;面试题29：排序的循环链表&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9829%e6%8e%92%e5%ba%8f%e7%9a%84%e5%be%aa%e7%8e%af%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;46-本章小结&#34;&gt;4.6 本章小结&lt;a class=&#34;anchor&#34; href=&#34;#46-%e6%9c%ac%e7%ab%a0%e5%b0%8f%e7%bb%93&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;第5章-哈希表&#34;&gt;第5章 哈希表&lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac5%e7%ab%a0-%e5%93%88%e5%b8%8c%e8%a1%a8&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;51-哈希表的基础知识&#34;&gt;5.1 哈希表的基础知识&lt;a class=&#34;anchor&#34; href=&#34;#51-%e5%93%88%e5%b8%8c%e8%a1%a8%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;52-哈希表的设计&#34;&gt;5.2 哈希表的设计&lt;a class=&#34;anchor&#34; href=&#34;#52-%e5%93%88%e5%b8%8c%e8%a1%a8%e7%9a%84%e8%ae%be%e8%ae%a1&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;53-哈希表的应用&#34;&gt;5.3 哈希表的应用&lt;a class=&#34;anchor&#34; href=&#34;#53-%e5%93%88%e5%b8%8c%e8%a1%a8%e7%9a%84%e5%ba%94%e7%94%a8&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;54-本章小结&#34;&gt;5.4 本章小结&lt;a class=&#34;anchor&#34; href=&#34;#54-%e6%9c%ac%e7%ab%a0%e5%b0%8f%e7%bb%93&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;第6章-栈&#34;&gt;第6章 栈&lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac6%e7%ab%a0-%e6%a0%88&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;61-栈的基础知识&#34;&gt;6.1 栈的基础知识&lt;a class=&#34;anchor&#34; href=&#34;#61-%e6%a0%88%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;62-栈的应用&#34;&gt;6.2 栈的应用&lt;a class=&#34;anchor&#34; href=&#34;#62-%e6%a0%88%e7%9a%84%e5%ba%94%e7%94%a8&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题36后缀表达式&#34;&gt;面试题36：后缀表达式&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9836%e5%90%8e%e7%bc%80%e8%a1%a8%e8%be%be%e5%bc%8f&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题37小行星碰撞&#34;&gt;面试题37：小行星碰撞&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9837%e5%b0%8f%e8%a1%8c%e6%98%9f%e7%a2%b0%e6%92%9e&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题38每日温度&#34;&gt;面试题38：每日温度&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9838%e6%af%8f%e6%97%a5%e6%b8%a9%e5%ba%a6&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题39直方图最大矩形面积&#34;&gt;面试题39：直方图最大矩形面积&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9839%e7%9b%b4%e6%96%b9%e5%9b%be%e6%9c%80%e5%a4%a7%e7%9f%a9%e5%bd%a2%e9%9d%a2%e7%a7%af&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;蛮力法&#34;&gt;蛮力法&lt;a class=&#34;anchor&#34; href=&#34;#%e8%9b%ae%e5%8a%9b%e6%b3%95&#34;&gt;#&lt;/a&gt;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;分治法&#34;&gt;分治法&lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e6%b2%bb%e6%b3%95&#34;&gt;#&lt;/a&gt;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;单调栈法&#34;&gt;单调栈法&lt;a class=&#34;anchor&#34; href=&#34;#%e5%8d%95%e8%b0%83%e6%a0%88%e6%b3%95&#34;&gt;#&lt;/a&gt;&lt;/h6&gt;&#xA;&lt;h5 id=&#34;面试题40矩阵中的最大矩形&#34;&gt;面试题40：矩阵中的最大矩形&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9840%e7%9f%a9%e9%98%b5%e4%b8%ad%e7%9a%84%e6%9c%80%e5%a4%a7%e7%9f%a9%e5%bd%a2&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;63-本章小结&#34;&gt;6.3 本章小结&lt;a class=&#34;anchor&#34; href=&#34;#63-%e6%9c%ac%e7%ab%a0%e5%b0%8f%e7%bb%93&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;第7章-队列&#34;&gt;第7章 队列&lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac7%e7%ab%a0-%e9%98%9f%e5%88%97&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;71-队列的基础知识&#34;&gt;7.1 队列的基础知识&lt;a class=&#34;anchor&#34; href=&#34;#71-%e9%98%9f%e5%88%97%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;72-队列的应用&#34;&gt;7.2 队列的应用&lt;a class=&#34;anchor&#34; href=&#34;#72-%e9%98%9f%e5%88%97%e7%9a%84%e5%ba%94%e7%94%a8&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题41滑动窗口的平均值&#34;&gt;面试题41：滑动窗口的平均值&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9841%e6%bb%91%e5%8a%a8%e7%aa%97%e5%8f%a3%e7%9a%84%e5%b9%b3%e5%9d%87%e5%80%bc&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题42最近请求次数&#34;&gt;面试题42：最近请求次数&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9842%e6%9c%80%e8%bf%91%e8%af%b7%e6%b1%82%e6%ac%a1%e6%95%b0&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;73-二叉树的广度优先搜索-solution0703001&#34;&gt;7.3 二叉树的广度优先搜索 Solution0703001&lt;a class=&#34;anchor&#34; href=&#34;#73-%e4%ba%8c%e5%8f%89%e6%a0%91%e7%9a%84%e5%b9%bf%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2-solution0703001&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;广度优先搜索&#34;&gt;广度优先搜索&lt;a class=&#34;anchor&#34; href=&#34;#%e5%b9%bf%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bfs&lt;/span&gt;(TreeNode root) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; queue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (root &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(root);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;()) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TreeNode node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        result.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (node.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (node.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;面试题43在完全二叉树中添加节点&#34;&gt;面试题43：在完全二叉树中添加节点&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9843%e5%9c%a8%e5%ae%8c%e5%85%a8%e4%ba%8c%e5%8f%89%e6%a0%91%e4%b8%ad%e6%b7%bb%e5%8a%a0%e8%8a%82%e7%82%b9&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// CBT Complete Binary Tree&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CBTInserter&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; queue;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; TreeNode root;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CBTInserter&lt;/span&gt;(TreeNode root) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        queue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;peek&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;peek&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            TreeNode node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TreeNode parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;peek&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TreeNode node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TreeNode(v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (parent.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            parent.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            parent.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(parent.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(parent.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; parent.&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; TreeNode &lt;span style=&#34;color:#a6e22e&#34;&gt;get_root&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;面试题44二叉树中每层的最大值&#34;&gt;面试题44：二叉树中每层的最大值&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9844%e4%ba%8c%e5%8f%89%e6%a0%91%e4%b8%ad%e6%af%8f%e5%b1%82%e7%9a%84%e6%9c%80%e5%a4%a7%e5%80%bc&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;用一个队列实现二叉树的广度优先搜索&#34;&gt;用一个队列实现二叉树的广度优先搜索&lt;a class=&#34;anchor&#34; href=&#34;#%e7%94%a8%e4%b8%80%e4%b8%aa%e9%98%9f%e5%88%97%e5%ae%9e%e7%8e%b0%e4%ba%8c%e5%8f%89%e6%a0%91%e7%9a%84%e5%b9%bf%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2&#34;&gt;#&lt;/a&gt;&lt;/h6&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;largestValues&lt;/span&gt;(TreeNode root) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; queue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (root &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(root);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; max &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Integer.&lt;span style=&#34;color:#a6e22e&#34;&gt;MIN_VALUE&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;()) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TreeNode node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        current&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        max &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(max.&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (node.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            next&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (node.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            next&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (current &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; 0) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            result.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(max);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            max &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Integer.&lt;span style=&#34;color:#a6e22e&#34;&gt;MIN_VALUE&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h6 id=&#34;用两个队列实现二叉树的广度优先搜索&#34;&gt;用两个队列实现二叉树的广度优先搜索&lt;a class=&#34;anchor&#34; href=&#34;#%e7%94%a8%e4%b8%a4%e4%b8%aa%e9%98%9f%e5%88%97%e5%ae%9e%e7%8e%b0%e4%ba%8c%e5%8f%89%e6%a0%91%e7%9a%84%e5%b9%bf%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2&#34;&gt;#&lt;/a&gt;&lt;/h6&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;largestValues&lt;/span&gt;(TreeNode root) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; queue1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; queue2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (root &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        queue1.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(root);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; max &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(max, node.&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (node.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        queue2.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (node.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        queue2.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (queue1.&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;()) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        result.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(max);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        max &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Integer.&lt;span style=&#34;color:#a6e22e&#34;&gt;MIN_VALUE&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        queue1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; queue2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        queue2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;面试题45二叉树最低层最左边的值&#34;&gt;面试题45：二叉树最低层最左边的值&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9845%e4%ba%8c%e5%8f%89%e6%a0%91%e6%9c%80%e4%bd%8e%e5%b1%82%e6%9c%80%e5%b7%a6%e8%be%b9%e7%9a%84%e5%80%bc&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findBottomLeftValue&lt;/span&gt;(TreeNode root) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; queue1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; queue2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    queue1.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(root);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; bottomLeft &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root.&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;queue.&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;()) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TreeNode node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; queue1.&lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (node.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            queue2.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (node.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            queue2.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (queue1.&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;()) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            queue1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; queue2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            queue2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;queue1.&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;()) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                bottomLeft &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; queue1.&lt;span style=&#34;color:#a6e22e&#34;&gt;peek&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bottomLeft;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;面试题46二叉树的右侧视图&#34;&gt;面试题46：二叉树的右侧视图&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9846%e4%ba%8c%e5%8f%89%e6%a0%91%e7%9a%84%e5%8f%b3%e4%be%a7%e8%a7%86%e5%9b%be&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rightSideView&lt;/span&gt;(TreeNode root) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; view &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (root &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; view;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; queue1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; queue2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    queue1.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(root);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;queue1.&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;()) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TreeNode node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; queue1.&lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (node.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            queue2.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (node.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            queue2.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (queue1.&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;()) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            view.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            queue1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; queue2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            queue2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; view;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;74-本章小结&#34;&gt;7.4 本章小结&lt;a class=&#34;anchor&#34; href=&#34;#74-%e6%9c%ac%e7%ab%a0%e5%b0%8f%e7%bb%93&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;第8章-树&#34;&gt;第8章 树&lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac8%e7%ab%a0-%e6%a0%91&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;81-树的基础知识&#34;&gt;8.1 树的基础知识&lt;a class=&#34;anchor&#34; href=&#34;#81-%e6%a0%91%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TreeNode&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; val;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    TreeNode left;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    TreeNode right;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    TreeNode(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;82-二叉树的深度优先搜索&#34;&gt;8.2 二叉树的深度优先搜索&lt;a class=&#34;anchor&#34; href=&#34;#82-%e4%ba%8c%e5%8f%89%e6%a0%91%e7%9a%84%e6%b7%b1%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;中序遍历&#34;&gt;中序遍历&lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%ad%e5%ba%8f%e9%81%8d%e5%8e%86&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inorderTraversal&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dfs(root, nodes);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; nodes;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt;(TreeNode root, List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; nodes) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (root &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dfs(root.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;, nodes);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        nodes.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(root.&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dfs(root.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;, nodes);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h6 id=&#34;迭代&#34;&gt;迭代&lt;a class=&#34;anchor&#34; href=&#34;#%e8%bf%ad%e4%bb%a3&#34;&gt;#&lt;/a&gt;&lt;/h6&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// left -&amp;gt; current -&amp;gt; right&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inorderTraversal&lt;/span&gt;(TreeNode root) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; stack &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    TreeNode cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (cur &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;stack.&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;()) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (cur &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            stack.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(cur);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cur.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; stack.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        nodes.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(cur.&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// current node&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cur.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; nodes;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;前序遍历&#34;&gt;前序遍历&lt;a class=&#34;anchor&#34; href=&#34;#%e5%89%8d%e5%ba%8f%e9%81%8d%e5%8e%86&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;preorderTraversal&lt;/span&gt;(TreeNode root) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dfs(root, nodes);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; nodes;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt;(TreeNode root, List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; nodes) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (root &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        nodes.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(root.&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dfs(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;, nodes);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dfs(node.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;, nodes);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h6 id=&#34;迭代-1&#34;&gt;迭代&lt;a class=&#34;anchor&#34; href=&#34;#%e8%bf%ad%e4%bb%a3-1&#34;&gt;#&lt;/a&gt;&lt;/h6&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// current -&amp;gt; left -&amp;gt; right&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;preorderTraversal&lt;/span&gt;(TreeNode root) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; stack &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    TreeNode cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (cur &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;stack.&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;()) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (cur &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            result.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(cur.&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// current node&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            stack.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(cur);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cur.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; stack.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cur.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;后序遍历&#34;&gt;后序遍历&lt;a class=&#34;anchor&#34; href=&#34;#%e5%90%8e%e5%ba%8f%e9%81%8d%e5%8e%86&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;迭代-2&#34;&gt;迭代&lt;a class=&#34;anchor&#34; href=&#34;#%e8%bf%ad%e4%bb%a3-2&#34;&gt;#&lt;/a&gt;&lt;/h6&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;postorderTraversal&lt;/span&gt;(TreeNode root) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; stack &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    TreeNode cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    TreeNode prev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (cur &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;stack.&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;()) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (cur &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            stack.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(cur);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cur.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; stack.&lt;span style=&#34;color:#a6e22e&#34;&gt;peek&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (cur.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cur.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; prev) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            stack.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            result.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(cur.&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            prev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cur;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;3种遍历方法小结&#34;&gt;3种遍历方法小结&lt;a class=&#34;anchor&#34; href=&#34;#3%e7%a7%8d%e9%81%8d%e5%8e%86%e6%96%b9%e6%b3%95%e5%b0%8f%e7%bb%93&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题47二叉树剪枝&#34;&gt;面试题47：二叉树剪枝&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9847%e4%ba%8c%e5%8f%89%e6%a0%91%e5%89%aa%e6%9e%9d&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; TreeNode &lt;span style=&#34;color:#a6e22e&#34;&gt;pruneTree&lt;/span&gt;(TreeNode root) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (root &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; root;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    root.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pruneTree(root.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    root.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pruneTree(root.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (root.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; root.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; root.&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; 0) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; root;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;面试题48序列化和反序列化二叉树&#34;&gt;面试题48：序列化和反序列化二叉树&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9848%e5%ba%8f%e5%88%97%e5%8c%96%e5%92%8c%e5%8f%8d%e5%ba%8f%e5%88%97%e5%8c%96%e4%ba%8c%e5%8f%89%e6%a0%91&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;序列化&#34;&gt;序列化&lt;a class=&#34;anchor&#34; href=&#34;#%e5%ba%8f%e5%88%97%e5%8c%96&#34;&gt;#&lt;/a&gt;&lt;/h6&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;serialize&lt;/span&gt;(TreeNode root) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (root &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    String leftStr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; serialize(root.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    String right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; serialize(root.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; String.&lt;span style=&#34;color:#a6e22e&#34;&gt;valueOf&lt;/span&gt;(root.&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; leftStr &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; rightStr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h6 id=&#34;反序列化&#34;&gt;反序列化&lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%8d%e5%ba%8f%e5%88%97%e5%8c%96&#34;&gt;#&lt;/a&gt;&lt;/h6&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; TreeNode &lt;span style=&#34;color:#a6e22e&#34;&gt;deserialize&lt;/span&gt;(String data) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; nodeStrs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data.&lt;span style=&#34;color:#a6e22e&#34;&gt;split&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {0};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dfs(nodeStrs, i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; TreeNode &lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt;(String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; strs, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; i) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    String str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; strs&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    i&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]++&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (str.&lt;span style=&#34;color:#a6e22e&#34;&gt;equals&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#&amp;#34;&lt;/span&gt;)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    TreeNode node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TreeNode(Integer.&lt;span style=&#34;color:#a6e22e&#34;&gt;valueOf&lt;/span&gt;(str));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    node.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dfs(strs, i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    node.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dfs(strs, i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; node;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;面试题49从根节点到叶节点的路径数字之和&#34;&gt;面试题49：从根节点到叶节点的路径数字之和&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9849%e4%bb%8e%e6%a0%b9%e8%8a%82%e7%82%b9%e5%88%b0%e5%8f%b6%e8%8a%82%e7%82%b9%e7%9a%84%e8%b7%af%e5%be%84%e6%95%b0%e5%ad%97%e4%b9%8b%e5%92%8c&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sumNumbers&lt;/span&gt;(TreeNode root) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dfs(root, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt;(TreeNode root, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; path) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (root &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; path &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; 10 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; root.&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (root.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; root.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; path;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dfs(root.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;, path) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dfs(root.&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;, path);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;面试题50向下的路径节点值之和&#34;&gt;面试题50：向下的路径节点值之和&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9850%e5%90%91%e4%b8%8b%e7%9a%84%e8%b7%af%e5%be%84%e8%8a%82%e7%82%b9%e5%80%bc%e4%b9%8b%e5%92%8c&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pathSum&lt;/span&gt;(TreeNode root, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sum) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer, Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; map &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; HashMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    map.&lt;span style=&#34;color:#a6e22e&#34;&gt;put&lt;/span&gt;(0, 1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dfs(root, sum, map, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt;(TreeNode root, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sum,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer, Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; map, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; path) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (root &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    path &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; root.&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map.&lt;span style=&#34;color:#a6e22e&#34;&gt;getOrDefault&lt;/span&gt;(path &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; sum, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;面试题51节点值之和最大的路径&#34;&gt;面试题51：节点值之和最大的路径&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9851%e8%8a%82%e7%82%b9%e5%80%bc%e4%b9%8b%e5%92%8c%e6%9c%80%e5%a4%a7%e7%9a%84%e8%b7%af%e5%be%84&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;83-二叉搜索树&#34;&gt;8.3 二叉搜索树&lt;a class=&#34;anchor&#34; href=&#34;#83-%e4%ba%8c%e5%8f%89%e6%90%9c%e7%b4%a2%e6%a0%91&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题52展平二叉搜索树&#34;&gt;面试题52：展平二叉搜索树&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9852%e5%b1%95%e5%b9%b3%e4%ba%8c%e5%8f%89%e6%90%9c%e7%b4%a2%e6%a0%91&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题53二叉搜索树的下一个节点&#34;&gt;面试题53：二叉搜索树的下一个节点&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9853%e4%ba%8c%e5%8f%89%e6%90%9c%e7%b4%a2%e6%a0%91%e7%9a%84%e4%b8%8b%e4%b8%80%e4%b8%aa%e8%8a%82%e7%82%b9&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;时间复杂度on的解法&#34;&gt;时间复杂度O(n)的解法&lt;a class=&#34;anchor&#34; href=&#34;#%e6%97%b6%e9%97%b4%e5%a4%8d%e6%9d%82%e5%ba%a6on%e7%9a%84%e8%a7%a3%e6%b3%95&#34;&gt;#&lt;/a&gt;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;时间复杂度oh的解法&#34;&gt;时间复杂度O(h)的解法&lt;a class=&#34;anchor&#34; href=&#34;#%e6%97%b6%e9%97%b4%e5%a4%8d%e6%9d%82%e5%ba%a6oh%e7%9a%84%e8%a7%a3%e6%b3%95&#34;&gt;#&lt;/a&gt;&lt;/h6&gt;&#xA;&lt;h5 id=&#34;面试题54所有大于或等于节点的值之和&#34;&gt;面试题54：所有大于或等于节点的值之和&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9854%e6%89%80%e6%9c%89%e5%a4%a7%e4%ba%8e%e6%88%96%e7%ad%89%e4%ba%8e%e8%8a%82%e7%82%b9%e7%9a%84%e5%80%bc%e4%b9%8b%e5%92%8c&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题55二叉搜索树迭代器&#34;&gt;面试题55：二叉搜索树迭代器&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9855%e4%ba%8c%e5%8f%89%e6%90%9c%e7%b4%a2%e6%a0%91%e8%bf%ad%e4%bb%a3%e5%99%a8&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题56二叉搜索树种两个节点的值之和&#34;&gt;面试题56：二叉搜索树种两个节点的值之和&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9856%e4%ba%8c%e5%8f%89%e6%90%9c%e7%b4%a2%e6%a0%91%e7%a7%8d%e4%b8%a4%e4%b8%aa%e8%8a%82%e7%82%b9%e7%9a%84%e5%80%bc%e4%b9%8b%e5%92%8c&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;利用哈希表空间复杂度为on的解法&#34;&gt;利用哈希表，空间复杂度为O（n）的解法&lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%a9%e7%94%a8%e5%93%88%e5%b8%8c%e8%a1%a8%e7%a9%ba%e9%97%b4%e5%a4%8d%e6%9d%82%e5%ba%a6%e4%b8%baon%e7%9a%84%e8%a7%a3%e6%b3%95&#34;&gt;#&lt;/a&gt;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;应用双指针空间复杂度为oh的解法&#34;&gt;应用双指针，空间复杂度为O（h）的解法&lt;a class=&#34;anchor&#34; href=&#34;#%e5%ba%94%e7%94%a8%e5%8f%8c%e6%8c%87%e9%92%88%e7%a9%ba%e9%97%b4%e5%a4%8d%e6%9d%82%e5%ba%a6%e4%b8%baoh%e7%9a%84%e8%a7%a3%e6%b3%95&#34;&gt;#&lt;/a&gt;&lt;/h6&gt;&#xA;&lt;h4 id=&#34;84-treeset和treemap的应用&#34;&gt;8.4 TreeSet和TreeMap的应用&lt;a class=&#34;anchor&#34; href=&#34;#84-treeset%e5%92%8ctreemap%e7%9a%84%e5%ba%94%e7%94%a8&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题57值和下标之差都在给定的范围内&#34;&gt;面试题57：值和下标之差都在给定的范围内&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9857%e5%80%bc%e5%92%8c%e4%b8%8b%e6%a0%87%e4%b9%8b%e5%b7%ae%e9%83%bd%e5%9c%a8%e7%bb%99%e5%ae%9a%e7%9a%84%e8%8c%83%e5%9b%b4%e5%86%85&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;时间复杂度为onlogk的解法&#34;&gt;时间复杂度为O（nlogk）的解法&lt;a class=&#34;anchor&#34; href=&#34;#%e6%97%b6%e9%97%b4%e5%a4%8d%e6%9d%82%e5%ba%a6%e4%b8%baonlogk%e7%9a%84%e8%a7%a3%e6%b3%95&#34;&gt;#&lt;/a&gt;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;时间复杂度为on的解法&#34;&gt;时间复杂度为O（n）的解法&lt;a class=&#34;anchor&#34; href=&#34;#%e6%97%b6%e9%97%b4%e5%a4%8d%e6%9d%82%e5%ba%a6%e4%b8%baon%e7%9a%84%e8%a7%a3%e6%b3%95&#34;&gt;#&lt;/a&gt;&lt;/h6&gt;&#xA;&lt;h5 id=&#34;面试题58日程表&#34;&gt;面试题58：日程表&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9858%e6%97%a5%e7%a8%8b%e8%a1%a8&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;85-本章小结&#34;&gt;8.5 本章小结&lt;a class=&#34;anchor&#34; href=&#34;#85-%e6%9c%ac%e7%ab%a0%e5%b0%8f%e7%bb%93&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;第9章-堆&#34;&gt;第9章 堆&lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac9%e7%ab%a0-%e5%a0%86&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;91-堆的基础知识&#34;&gt;9.1 堆的基础知识&lt;a class=&#34;anchor&#34; href=&#34;#91-%e5%a0%86%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;92-堆的应用&#34;&gt;9.2 堆的应用&lt;a class=&#34;anchor&#34; href=&#34;#92-%e5%a0%86%e7%9a%84%e5%ba%94%e7%94%a8&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;-面试题59数据流的第k大数字-jzoffer59java&#34;&gt;✅ 面试题59：数据流的第k大数字 JZOffer59.java&lt;a class=&#34;anchor&#34; href=&#34;#-%e9%9d%a2%e8%af%95%e9%a2%9859%e6%95%b0%e6%8d%ae%e6%b5%81%e7%9a%84%e7%ac%ack%e5%a4%a7%e6%95%b0%e5%ad%97-jzoffer59java&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-面试题60出现频率最高的k个数字-jzoffer60java&#34;&gt;✅ 面试题60：出现频率最高的k个数字 JZOffer60.java&lt;a class=&#34;anchor&#34; href=&#34;#-%e9%9d%a2%e8%af%95%e9%a2%9860%e5%87%ba%e7%8e%b0%e9%a2%91%e7%8e%87%e6%9c%80%e9%ab%98%e7%9a%84k%e4%b8%aa%e6%95%b0%e5%ad%97-jzoffer60java&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-面试题61和最小的k个数对-jzoffer61java&#34;&gt;✅ 面试题61：和最小的k个数对 JZOffer61.java&lt;a class=&#34;anchor&#34; href=&#34;#-%e9%9d%a2%e8%af%95%e9%a2%9861%e5%92%8c%e6%9c%80%e5%b0%8f%e7%9a%84k%e4%b8%aa%e6%95%b0%e5%af%b9-jzoffer61java&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;使用最大堆&#34;&gt;使用最大堆&lt;a class=&#34;anchor&#34; href=&#34;#%e4%bd%bf%e7%94%a8%e6%9c%80%e5%a4%a7%e5%a0%86&#34;&gt;#&lt;/a&gt;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;使用最小堆&#34;&gt;使用最小堆&lt;a class=&#34;anchor&#34; href=&#34;#%e4%bd%bf%e7%94%a8%e6%9c%80%e5%b0%8f%e5%a0%86&#34;&gt;#&lt;/a&gt;&lt;/h6&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;kSmallestPairs&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;93-本章小结&#34;&gt;9.3 本章小结&lt;a class=&#34;anchor&#34; href=&#34;#93-%e6%9c%ac%e7%ab%a0%e5%b0%8f%e7%bb%93&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;第10章-前缀树&#34;&gt;第10章 前缀树&lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac10%e7%ab%a0-%e5%89%8d%e7%bc%80%e6%a0%91&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;101-前缀树的基础知识&#34;&gt;10.1 前缀树的基础知识&lt;a class=&#34;anchor&#34; href=&#34;#101-%e5%89%8d%e7%bc%80%e6%a0%91%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;-面试题62实现前缀树-jzoffer62java&#34;&gt;✅ 面试题62：实现前缀树 JZOffer62.java&lt;a class=&#34;anchor&#34; href=&#34;#-%e9%9d%a2%e8%af%95%e9%a2%9862%e5%ae%9e%e7%8e%b0%e5%89%8d%e7%bc%80%e6%a0%91-jzoffer62java&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;102-前缀树的应用&#34;&gt;10.2 前缀树的应用&lt;a class=&#34;anchor&#34; href=&#34;#102-%e5%89%8d%e7%bc%80%e6%a0%91%e7%9a%84%e5%ba%94%e7%94%a8&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;-面试题63替换单词--jzoffer63java&#34;&gt;✅ 面试题63：替换单词  JZOffer63.java&lt;a class=&#34;anchor&#34; href=&#34;#-%e9%9d%a2%e8%af%95%e9%a2%9863%e6%9b%bf%e6%8d%a2%e5%8d%95%e8%af%8d--jzoffer63java&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题64神奇的字典&#34;&gt;面试题64：神奇的字典&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9864%e7%a5%9e%e5%a5%87%e7%9a%84%e5%ad%97%e5%85%b8&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题65最短的单词编码&#34;&gt;面试题65：最短的单词编码&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9865%e6%9c%80%e7%9f%ad%e7%9a%84%e5%8d%95%e8%af%8d%e7%bc%96%e7%a0%81&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题66单词之和&#34;&gt;面试题66：单词之和&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9866%e5%8d%95%e8%af%8d%e4%b9%8b%e5%92%8c&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题67最大的异或&#34;&gt;面试题67：最大的异或&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9867%e6%9c%80%e5%a4%a7%e7%9a%84%e5%bc%82%e6%88%96&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;103-本章小结&#34;&gt;10.3 本章小结&lt;a class=&#34;anchor&#34; href=&#34;#103-%e6%9c%ac%e7%ab%a0%e5%b0%8f%e7%bb%93&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;第11章-二分查找&#34;&gt;第11章 二分查找&lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac11%e7%ab%a0-%e4%ba%8c%e5%88%86%e6%9f%a5%e6%89%be&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;111-二分查找的基础知识&#34;&gt;11.1 二分查找的基础知识&lt;a class=&#34;anchor&#34; href=&#34;#111-%e4%ba%8c%e5%88%86%e6%9f%a5%e6%89%be%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;-二分查找算法-compenruinsjzofferbinarysearchjava&#34;&gt;✅ 二分查找算法 com.penruins.JZOffer.BinarySearch.java&lt;a class=&#34;anchor&#34; href=&#34;#-%e4%ba%8c%e5%88%86%e6%9f%a5%e6%89%be%e7%ae%97%e6%b3%95-compenruinsjzofferbinarysearchjava&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;112-在排序数组中二分查找&#34;&gt;11.2 在排序数组中二分查找&lt;a class=&#34;anchor&#34; href=&#34;#112-%e5%9c%a8%e6%8e%92%e5%ba%8f%e6%95%b0%e7%bb%84%e4%b8%ad%e4%ba%8c%e5%88%86%e6%9f%a5%e6%89%be&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题68查找插入位置&#34;&gt;面试题68：查找插入位置&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9868%e6%9f%a5%e6%89%be%e6%8f%92%e5%85%a5%e4%bd%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题69山峰数组的顶部&#34;&gt;面试题69：山峰数组的顶部&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9869%e5%b1%b1%e5%b3%b0%e6%95%b0%e7%bb%84%e7%9a%84%e9%a1%b6%e9%83%a8&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题70排序数组中只出现一次的数字-compenruinsjzofferjzoffer70java&#34;&gt;面试题70：排序数组中只出现一次的数字 com.penruins.JZOffer.JZOffer70.java&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9870%e6%8e%92%e5%ba%8f%e6%95%b0%e7%bb%84%e4%b8%ad%e5%8f%aa%e5%87%ba%e7%8e%b0%e4%b8%80%e6%ac%a1%e7%9a%84%e6%95%b0%e5%ad%97-compenruinsjzofferjzoffer70java&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;singleNonDuplicate 用异或运算的方式实现&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;面试题71按权重生成随机数&#34;&gt;面试题71：按权重生成随机数&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9871%e6%8c%89%e6%9d%83%e9%87%8d%e7%94%9f%e6%88%90%e9%9a%8f%e6%9c%ba%e6%95%b0&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;113-在数值范围内二分查找&#34;&gt;11.3 在数值范围内二分查找&lt;a class=&#34;anchor&#34; href=&#34;#113-%e5%9c%a8%e6%95%b0%e5%80%bc%e8%8c%83%e5%9b%b4%e5%86%85%e4%ba%8c%e5%88%86%e6%9f%a5%e6%89%be&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题72求平方根&#34;&gt;面试题72：求平方根&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9872%e6%b1%82%e5%b9%b3%e6%96%b9%e6%a0%b9&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题73狒狒吃香蕉&#34;&gt;面试题73：狒狒吃香蕉&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9873%e7%8b%92%e7%8b%92%e5%90%83%e9%a6%99%e8%95%89&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;114-本章小结&#34;&gt;11.4 本章小结&lt;a class=&#34;anchor&#34; href=&#34;#114-%e6%9c%ac%e7%ab%a0%e5%b0%8f%e7%bb%93&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;第12章-排序&#34;&gt;第12章 排序&lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac12%e7%ab%a0-%e6%8e%92%e5%ba%8f&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;121-排序的基础知识&#34;&gt;12.1 排序的基础知识&lt;a class=&#34;anchor&#34; href=&#34;#121-%e6%8e%92%e5%ba%8f%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题74合并区间&#34;&gt;面试题74：合并区间&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9874%e5%90%88%e5%b9%b6%e5%8c%ba%e9%97%b4&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;122-计数排序&#34;&gt;12.2 计数排序&lt;a class=&#34;anchor&#34; href=&#34;#122-%e8%ae%a1%e6%95%b0%e6%8e%92%e5%ba%8f&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题75数组相对排序&#34;&gt;面试题75：数组相对排序&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9875%e6%95%b0%e7%bb%84%e7%9b%b8%e5%af%b9%e6%8e%92%e5%ba%8f&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;123-快速排序&#34;&gt;12.3 快速排序&lt;a class=&#34;anchor&#34; href=&#34;#123-%e5%bf%ab%e9%80%9f%e6%8e%92%e5%ba%8f&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;快速排序算法-compenruinsjzofferquicksort&#34;&gt;快速排序算法 com.penruins.JZOffer.QuickSort&lt;a class=&#34;anchor&#34; href=&#34;#%e5%bf%ab%e9%80%9f%e6%8e%92%e5%ba%8f%e7%ae%97%e6%b3%95-compenruinsjzofferquicksort&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题76数组中第k大的数字&#34;&gt;面试题76：数组中第k大的数字&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9876%e6%95%b0%e7%bb%84%e4%b8%ad%e7%ac%ack%e5%a4%a7%e7%9a%84%e6%95%b0%e5%ad%97&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;124-归并排序&#34;&gt;12.4 归并排序&lt;a class=&#34;anchor&#34; href=&#34;#124-%e5%bd%92%e5%b9%b6%e6%8e%92%e5%ba%8f&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题77链表排序&#34;&gt;面试题77：链表排序&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9877%e9%93%be%e8%a1%a8%e6%8e%92%e5%ba%8f&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题78合并排序链表&#34;&gt;面试题78：合并排序链表&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9878%e5%90%88%e5%b9%b6%e6%8e%92%e5%ba%8f%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;利用最小堆选取值最小的节点&#34;&gt;利用最小堆选取值最小的节点&lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%a9%e7%94%a8%e6%9c%80%e5%b0%8f%e5%a0%86%e9%80%89%e5%8f%96%e5%80%bc%e6%9c%80%e5%b0%8f%e7%9a%84%e8%8a%82%e7%82%b9&#34;&gt;#&lt;/a&gt;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;按照归并排序的思路合并链表&#34;&gt;按照归并排序的思路合并链表&lt;a class=&#34;anchor&#34; href=&#34;#%e6%8c%89%e7%85%a7%e5%bd%92%e5%b9%b6%e6%8e%92%e5%ba%8f%e7%9a%84%e6%80%9d%e8%b7%af%e5%90%88%e5%b9%b6%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&lt;/h6&gt;&#xA;&lt;h4 id=&#34;125-本章小结&#34;&gt;12.5 本章小结&lt;a class=&#34;anchor&#34; href=&#34;#125-%e6%9c%ac%e7%ab%a0%e5%b0%8f%e7%bb%93&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;第13章-回溯法&#34;&gt;第13章 回溯法&lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac13%e7%ab%a0-%e5%9b%9e%e6%ba%af%e6%b3%95&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;131-回溯法的基础知识&#34;&gt;13.1 回溯法的基础知识&lt;a class=&#34;anchor&#34; href=&#34;#131-%e5%9b%9e%e6%ba%af%e6%b3%95%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;132-集合的组合排列&#34;&gt;13.2 集合的组合、排列&lt;a class=&#34;anchor&#34; href=&#34;#132-%e9%9b%86%e5%90%88%e7%9a%84%e7%bb%84%e5%90%88%e6%8e%92%e5%88%97&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;133-回溯法解决其他类型问题&#34;&gt;13.3 回溯法解决其他类型问题&lt;a class=&#34;anchor&#34; href=&#34;#133-%e5%9b%9e%e6%ba%af%e6%b3%95%e8%a7%a3%e5%86%b3%e5%85%b6%e4%bb%96%e7%b1%bb%e5%9e%8b%e9%97%ae%e9%a2%98&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;134-本章小结&#34;&gt;13.4 本章小结&lt;a class=&#34;anchor&#34; href=&#34;#134-%e6%9c%ac%e7%ab%a0%e5%b0%8f%e7%bb%93&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;第14章-动态规划&#34;&gt;第14章 动态规划&lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac14%e7%ab%a0-%e5%8a%a8%e6%80%81%e8%a7%84%e5%88%92&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;141-动态规划的基础知识&#34;&gt;14.1 动态规划的基础知识&lt;a class=&#34;anchor&#34; href=&#34;#141-%e5%8a%a8%e6%80%81%e8%a7%84%e5%88%92%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;142-单序列问题&#34;&gt;14.2 单序列问题&lt;a class=&#34;anchor&#34; href=&#34;#142-%e5%8d%95%e5%ba%8f%e5%88%97%e9%97%ae%e9%a2%98&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;143-双序列问题&#34;&gt;14.3 双序列问题&lt;a class=&#34;anchor&#34; href=&#34;#143-%e5%8f%8c%e5%ba%8f%e5%88%97%e9%97%ae%e9%a2%98&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;144-矩阵路径问题&#34;&gt;14.4 矩阵路径问题&lt;a class=&#34;anchor&#34; href=&#34;#144-%e7%9f%a9%e9%98%b5%e8%b7%af%e5%be%84%e9%97%ae%e9%a2%98&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;面试题98路径的数目&#34;&gt;面试题98：路径的数目&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9898%e8%b7%af%e5%be%84%e7%9a%84%e6%95%b0%e7%9b%ae&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;分析确定状态转移方程&#34;&gt;分析确定状态转移方程&lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e6%9e%90%e7%a1%ae%e5%ae%9a%e7%8a%b6%e6%80%81%e8%bd%ac%e7%a7%bb%e6%96%b9%e7%a8%8b&#34;&gt;#&lt;/a&gt;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;根据状态转移方程写递归代码&#34;&gt;根据状态转移方程写递归代码&lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%b9%e6%8d%ae%e7%8a%b6%e6%80%81%e8%bd%ac%e7%a7%bb%e6%96%b9%e7%a8%8b%e5%86%99%e9%80%92%e5%bd%92%e4%bb%a3%e7%a0%81&#34;&gt;#&lt;/a&gt;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;递归代码&#34;&gt;递归代码&lt;a class=&#34;anchor&#34; href=&#34;#%e9%80%92%e5%bd%92%e4%bb%a3%e7%a0%81&#34;&gt;#&lt;/a&gt;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;优化空间效率&#34;&gt;优化空间效率&lt;a class=&#34;anchor&#34; href=&#34;#%e4%bc%98%e5%8c%96%e7%a9%ba%e9%97%b4%e6%95%88%e7%8e%87&#34;&gt;#&lt;/a&gt;&lt;/h6&gt;&#xA;&lt;h5 id=&#34;面试题99最小路径之和&#34;&gt;面试题99：最小路径之和&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%9899%e6%9c%80%e5%b0%8f%e8%b7%af%e5%be%84%e4%b9%8b%e5%92%8c&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题100三角形中最小路径之和&#34;&gt;面试题100：三角形中最小路径之和&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%98100%e4%b8%89%e8%a7%92%e5%bd%a2%e4%b8%ad%e6%9c%80%e5%b0%8f%e8%b7%af%e5%be%84%e4%b9%8b%e5%92%8c&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;145-背包问题&#34;&gt;14.5 背包问题&lt;a class=&#34;anchor&#34; href=&#34;#145-%e8%83%8c%e5%8c%85%e9%97%ae%e9%a2%98&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;0-1 背包问题&lt;/li&gt;&#xA;&lt;li&gt;多重背包问题&lt;/li&gt;&#xA;&lt;li&gt;完全背包问题&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;面试题101分割等和子集&#34;&gt;面试题101：分割等和子集&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%98101%e5%88%86%e5%89%b2%e7%ad%89%e5%92%8c%e5%ad%90%e9%9b%86&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;分析确定状态转移方程-1&#34;&gt;分析确定状态转移方程&lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e6%9e%90%e7%a1%ae%e5%ae%9a%e7%8a%b6%e6%80%81%e8%bd%ac%e7%a7%bb%e6%96%b9%e7%a8%8b-1&#34;&gt;#&lt;/a&gt;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;根据状态转移方程写递归代码-1&#34;&gt;根据状态转移方程写递归代码&lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%b9%e6%8d%ae%e7%8a%b6%e6%80%81%e8%bd%ac%e7%a7%bb%e6%96%b9%e7%a8%8b%e5%86%99%e9%80%92%e5%bd%92%e4%bb%a3%e7%a0%81-1&#34;&gt;#&lt;/a&gt;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;根据状态转移方程写迭代代码&#34;&gt;根据状态转移方程写迭代代码&lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%b9%e6%8d%ae%e7%8a%b6%e6%80%81%e8%bd%ac%e7%a7%bb%e6%96%b9%e7%a8%8b%e5%86%99%e8%bf%ad%e4%bb%a3%e4%bb%a3%e7%a0%81&#34;&gt;#&lt;/a&gt;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;优化空间效率-1&#34;&gt;优化空间效率&lt;a class=&#34;anchor&#34; href=&#34;#%e4%bc%98%e5%8c%96%e7%a9%ba%e9%97%b4%e6%95%88%e7%8e%87-1&#34;&gt;#&lt;/a&gt;&lt;/h6&gt;&#xA;&lt;h5 id=&#34;面试题102加减的目标值&#34;&gt;面试题102：加减的目标值&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%98102%e5%8a%a0%e5%87%8f%e7%9a%84%e7%9b%ae%e6%a0%87%e5%80%bc&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;面试题103最小的硬币数目&#34;&gt;面试题103：最小的硬币数目&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%98103%e6%9c%80%e5%b0%8f%e7%9a%84%e7%a1%ac%e5%b8%81%e6%95%b0%e7%9b%ae&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h6 id=&#34;分析确定状态转移方程-2&#34;&gt;分析确定状态转移方程&lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e6%9e%90%e7%a1%ae%e5%ae%9a%e7%8a%b6%e6%80%81%e8%bd%ac%e7%a7%bb%e6%96%b9%e7%a8%8b-2&#34;&gt;#&lt;/a&gt;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;根据状态转移方程写代码&#34;&gt;根据状态转移方程写代码&lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%b9%e6%8d%ae%e7%8a%b6%e6%80%81%e8%bd%ac%e7%a7%bb%e6%96%b9%e7%a8%8b%e5%86%99%e4%bb%a3%e7%a0%81&#34;&gt;#&lt;/a&gt;&lt;/h6&gt;&#xA;&lt;h6 id=&#34;另一种思路&#34;&gt;另一种思路&lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%a6%e4%b8%80%e7%a7%8d%e6%80%9d%e8%b7%af&#34;&gt;#&lt;/a&gt;&lt;/h6&gt;&#xA;&lt;h5 id=&#34;面试题104排列的数目&#34;&gt;面试题104：排列的数目&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e9%a2%98104%e6%8e%92%e5%88%97%e7%9a%84%e6%95%b0%e7%9b%ae&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int[] nums = new int[1 2 3];&#xA;i = 3;&#xA;f(i) = f(i - nums[0]) + f(i - nums[1]) + f(i - nums[2]);&#xA;f(0) = 1;&#xA;f(1) = f(0) + f(-1) + f(-2) = 1;&#xA;f(2) = f(1) + f(0) + f(-1) = 2;&#xA;f(3) = f(2) + f(1) + f(0) = 4;&#xA;f(2) {1,1} {2}&#xA;f(1) {1}&#xA;f(0) {}&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;146-本章小结&#34;&gt;14.6 本章小结&lt;a class=&#34;anchor&#34; href=&#34;#146-%e6%9c%ac%e7%ab%a0%e5%b0%8f%e7%bb%93&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;第15章-图-305&#34;&gt;第15章 图 305&lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac15%e7%ab%a0-%e5%9b%be-305&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;151-图的基础知识-305&#34;&gt;15.1 图的基础知识 305&lt;a class=&#34;anchor&#34; href=&#34;#151-%e5%9b%be%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86-305&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;152-图的搜索-307&#34;&gt;15.2 图的搜索 307&lt;a class=&#34;anchor&#34; href=&#34;#152-%e5%9b%be%e7%9a%84%e6%90%9c%e7%b4%a2-307&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;153-拓扑排序-333&#34;&gt;15.3 拓扑排序 333&lt;a class=&#34;anchor&#34; href=&#34;#153-%e6%8b%93%e6%89%91%e6%8e%92%e5%ba%8f-333&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;154-并查集-342&#34;&gt;15.4 并查集 342&lt;a class=&#34;anchor&#34; href=&#34;#154-%e5%b9%b6%e6%9f%a5%e9%9b%86-342&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;155-本章小结-354&#34;&gt;15.5 本章小结 354&lt;a class=&#34;anchor&#34; href=&#34;#155-%e6%9c%ac%e7%ab%a0%e5%b0%8f%e7%bb%93-354&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;</description>
    </item>
    <item>
      <title>剑指offer题目对应</title>
      <link>/post/computer-science/algorithm/%E5%89%91%E6%8C%87offer%E8%BF%99%E6%9C%AC%E4%B9%A6%E4%B8%AD%E6%AF%8F%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98%E5%AF%B9%E5%BA%94leetcode%E7%9A%84%E9%A2%98%E7%9B%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/algorithm/%E5%89%91%E6%8C%87offer%E8%BF%99%E6%9C%AC%E4%B9%A6%E4%B8%AD%E6%AF%8F%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98%E5%AF%B9%E5%BA%94leetcode%E7%9A%84%E9%A2%98%E7%9B%AE/</guid>
      <description>&lt;h2 id=&#34;剑指offer这本书中每一道面试题对应leetcode的题目&#34;&gt;剑指offer这本书中每一道面试题对应leetcode的题目&lt;a class=&#34;anchor&#34; href=&#34;#%e5%89%91%e6%8c%87offer%e8%bf%99%e6%9c%ac%e4%b9%a6%e4%b8%ad%e6%af%8f%e4%b8%80%e9%81%93%e9%9d%a2%e8%af%95%e9%a2%98%e5%af%b9%e5%ba%94leetcode%e7%9a%84%e9%a2%98%e7%9b%ae&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;《剑指Offer》是一本经典的编程面试书籍，其中包含了许多高质量的编程题目。很多题目与LeetCode上的题目有对应关系。以下是一些《剑指Offer》中的题目及其在LeetCode上的对应题目：&lt;/p&gt;&#xA;&lt;h3 id=&#34;1-数组中重复的数字&#34;&gt;1. &lt;strong&gt;数组中重复的数字&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-%e6%95%b0%e7%bb%84%e4%b8%ad%e9%87%8d%e5%a4%8d%e7%9a%84%e6%95%b0%e5%ad%97&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：找出数组中重复的数字。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/find-the-duplicate-number/&#34;&gt;287. 寻找重复数&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;2-二维数组中的查找&#34;&gt;2. &lt;strong&gt;二维数组中的查找&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-%e4%ba%8c%e7%bb%b4%e6%95%b0%e7%bb%84%e4%b8%ad%e7%9a%84%e6%9f%a5%e6%89%be&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：在一个二维数组中查找某个数是否存在。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/search-a-2d-matrix-ii/&#34;&gt;240. 搜索二维矩阵 II&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;3-替换空格&#34;&gt;3. &lt;strong&gt;替换空格&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-%e6%9b%bf%e6%8d%a2%e7%a9%ba%e6%a0%bc&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：将字符串中的空格替换为&amp;quot;%20&amp;quot;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/ti-huan-kong-ge-lcof/&#34;&gt;剑指 Offer 05. 替换空格&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;4-从尾到头打印链表&#34;&gt;4. &lt;strong&gt;从尾到头打印链表&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-%e4%bb%8e%e5%b0%be%e5%88%b0%e5%a4%b4%e6%89%93%e5%8d%b0%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：从尾到头打印链表。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/&#34;&gt;剑指 Offer 06. 从尾到头打印链表&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;5-重建二叉树&#34;&gt;5. &lt;strong&gt;重建二叉树&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-%e9%87%8d%e5%bb%ba%e4%ba%8c%e5%8f%89%e6%a0%91&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：根据前序遍历和中序遍历的结果重建二叉树。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;&#xA;：&lt;a href=&#34;https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/&#34;&gt;105. 从前序与中序遍历序列构造二叉树&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;6-二叉树的下一个节点&#34;&gt;6. &lt;strong&gt;二叉树的下一个节点&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-%e4%ba%8c%e5%8f%89%e6%a0%91%e7%9a%84%e4%b8%8b%e4%b8%80%e4%b8%aa%e8%8a%82%e7%82%b9&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：给定二叉树中的一个节点，找到中序遍历的下一个节点。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/er-cha-shu-zhong-de-hou-xu-xu-lie-lcof/&#34;&gt;剑指 Offer 08. 二叉树的下一个节点&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;7-用两个栈实现队列&#34;&gt;7. &lt;strong&gt;用两个栈实现队列&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7-%e7%94%a8%e4%b8%a4%e4%b8%aa%e6%a0%88%e5%ae%9e%e7%8e%b0%e9%98%9f%e5%88%97&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：用两个栈实现队列。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/implement-queue-using-stacks/&#34;&gt;232. 用栈实现队列&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;8-斐波那契数列&#34;&gt;8. &lt;strong&gt;斐波那契数列&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8-%e6%96%90%e6%b3%a2%e9%82%a3%e5%a5%91%e6%95%b0%e5%88%97&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：求斐波那契数列的第n项。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/fibonacci-number/&#34;&gt;509. 斐波那契数&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;9-旋转数组的最小数字&#34;&gt;9. &lt;strong&gt;旋转数组的最小数字&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#9-%e6%97%8b%e8%bd%ac%e6%95%b0%e7%bb%84%e7%9a%84%e6%9c%80%e5%b0%8f%e6%95%b0%e5%ad%97&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：在一个旋转数组中查找最小的数字。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/find-minimum-in-rotated-sorted-array/&#34;&gt;153. 寻找旋转排序数组中的最小值&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;10-矩阵中的路径&#34;&gt;10. &lt;strong&gt;矩阵中的路径&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#10-%e7%9f%a9%e9%98%b5%e4%b8%ad%e7%9a%84%e8%b7%af%e5%be%84&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：在矩阵中查找是否存在某条路径。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/word-search/&#34;&gt;79. 单词搜索&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;11-机器人的运动范围&#34;&gt;11. &lt;strong&gt;机器人的运动范围&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11-%e6%9c%ba%e5%99%a8%e4%ba%ba%e7%9a%84%e8%bf%90%e5%8a%a8%e8%8c%83%e5%9b%b4&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：计算机器人能够到达的格子数。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/&#34;&gt;剑指 Offer 13. 机器人的运动范围&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;12-剪绳子&#34;&gt;12. &lt;strong&gt;剪绳子&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12-%e5%89%aa%e7%bb%b3%e5%ad%90&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：将绳子剪成若干段，使得乘积最大。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/integer-break/&#34;&gt;343. 整数拆分&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;13-二进制中1的个数&#34;&gt;13. &lt;strong&gt;二进制中1的个数&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#13-%e4%ba%8c%e8%bf%9b%e5%88%b6%e4%b8%ad1%e7%9a%84%e4%b8%aa%e6%95%b0&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：统计一个整数的二进制表示中1的个数。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/number-of-1-bits/&#34;&gt;191. 位1的个数&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;14-数值的整数次方&#34;&gt;14. &lt;strong&gt;数值的整数次方&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#14-%e6%95%b0%e5%80%bc%e7%9a%84%e6%95%b4%e6%95%b0%e6%ac%a1%e6%96%b9&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：实现函数计算数值的整数次方。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/powx-n/&#34;&gt;50. Pow(x, n)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;15-打印从1到最大的n位数&#34;&gt;15. &lt;strong&gt;打印从1到最大的n位数&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#15-%e6%89%93%e5%8d%b0%e4%bb%8e1%e5%88%b0%e6%9c%80%e5%a4%a7%e7%9a%84n%e4%bd%8d%e6%95%b0&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：打印从1到最大的n位数。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/da-yin-cong-1dao-zui-da-de-nwei-shu-lcof/&#34;&gt;剑指 Offer 17. 打印从1到最大的n位数&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;16-删除链表的节点&#34;&gt;16. &lt;strong&gt;删除链表的节点&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#16-%e5%88%a0%e9%99%a4%e9%93%be%e8%a1%a8%e7%9a%84%e8%8a%82%e7%82%b9&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：在O(1)时间内删除链表节点。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/delete-node-in-a-linked-list/&#34;&gt;237. 删除链表中的节点&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;17-正则表达式匹配&#34;&gt;17. &lt;strong&gt;正则表达式匹配&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#17-%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f%e5%8c%b9%e9%85%8d&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：实现正则表达式匹配。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/regular-expression-matching/&#34;&gt;10. 正则表达式匹配&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;18-表示数值的字符串&#34;&gt;18. &lt;strong&gt;表示数值的字符串&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#18-%e8%a1%a8%e7%a4%ba%e6%95%b0%e5%80%bc%e7%9a%84%e5%ad%97%e7%ac%a6%e4%b8%b2&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：判断字符串是否表示数值。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/biao-shi-shu-zhi-de-zi-fu-chuan-lcof/&#34;&gt;剑指 Offer 20. 表示数值的字符串&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;19-调整数组顺序使奇数位于偶数前面&#34;&gt;19. &lt;strong&gt;调整数组顺序使奇数位于偶数前面&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#19-%e8%b0%83%e6%95%b4%e6%95%b0%e7%bb%84%e9%a1%ba%e5%ba%8f%e4%bd%bf%e5%a5%87%e6%95%b0%e4%bd%8d%e4%ba%8e%e5%81%b6%e6%95%b0%e5%89%8d%e9%9d%a2&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：调整数组顺序，使奇数位于偶数前面。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/sort-array-by-parity/&#34;&gt;905. 按奇偶排序数组&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;20-链表中倒数第k个节点&#34;&gt;20. &lt;strong&gt;链表中倒数第k个节点&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#20-%e9%93%be%e8%a1%a8%e4%b8%ad%e5%80%92%e6%95%b0%e7%ac%ack%e4%b8%aa%e8%8a%82%e7%82%b9&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：找到链表中倒数第k个节点。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/&#34;&gt;剑指 Offer 22. 链表中倒数第k个节点&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;21-反转链表&#34;&gt;21. &lt;strong&gt;反转链表&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21-%e5%8f%8d%e8%bd%ac%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：反转链表。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/reverse-linked-list/&#34;&gt;206. 反转链表&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;22-合并两个排序的链表&#34;&gt;22. &lt;strong&gt;合并两个排序的链表&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22-%e5%90%88%e5%b9%b6%e4%b8%a4%e4%b8%aa%e6%8e%92%e5%ba%8f%e7%9a%84%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：合并两个排序的链表。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/merge-two-sorted-lists/&#34;&gt;21. 合并两个有序链表&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;23-树的子结构&#34;&gt;23. &lt;strong&gt;树的子结构&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#23-%e6%a0%91%e7%9a%84%e5%ad%90%e7%bb%93%e6%9e%84&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：判断一棵树是否是另一棵树的子结构。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/shu-de-zi-jie-gou-lcof/&#34;&gt;剑指 Offer 26. 树的子结构&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;24-二叉树的镜像&#34;&gt;24. &lt;strong&gt;二叉树的镜像&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#24-%e4%ba%8c%e5%8f%89%e6%a0%91%e7%9a%84%e9%95%9c%e5%83%8f&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：求二叉树的镜像。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/invert-binary-tree/&#34;&gt;226. 翻转二叉树&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;25-对称的二叉树&#34;&gt;25. &lt;strong&gt;对称的二叉树&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#25-%e5%af%b9%e7%a7%b0%e7%9a%84%e4%ba%8c%e5%8f%89%e6%a0%91&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：判断一棵二叉树是否是对称的。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/symmetric-tree/&#34;&gt;101. 对称二叉树&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;26-顺时针打印矩阵&#34;&gt;26. &lt;strong&gt;顺时针打印矩阵&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#26-%e9%a1%ba%e6%97%b6%e9%92%88%e6%89%93%e5%8d%b0%e7%9f%a9%e9%98%b5&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：顺时针打印矩阵。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/spiral-matrix/&#34;&gt;54. 螺旋矩阵&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;27-包含min函数的栈&#34;&gt;27. &lt;strong&gt;包含min函数的栈&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#27-%e5%8c%85%e5%90%abmin%e5%87%bd%e6%95%b0%e7%9a%84%e6%a0%88&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：实现一个包含min函数的栈。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/min-stack/&#34;&gt;155. 最小栈&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;28-栈的压入弹出序列&#34;&gt;28. &lt;strong&gt;栈的压入、弹出序列&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#28-%e6%a0%88%e7%9a%84%e5%8e%8b%e5%85%a5%e5%bc%b9%e5%87%ba%e5%ba%8f%e5%88%97&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：判断一个序列是否是栈的弹出序列。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/validate-stack-sequences/&#34;&gt;946. 验证栈序列&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;29-从上到下打印二叉树&#34;&gt;29. &lt;strong&gt;从上到下打印二叉树&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#29-%e4%bb%8e%e4%b8%8a%e5%88%b0%e4%b8%8b%e6%89%93%e5%8d%b0%e4%ba%8c%e5%8f%89%e6%a0%91&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：从上到下打印二叉树。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/binary-tree-level-order-traversal/&#34;&gt;102. 二叉树的层序遍历&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;30-二叉搜索树的后序遍历序列&#34;&gt;30. &lt;strong&gt;二叉搜索树的后序遍历序列&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#30-%e4%ba%8c%e5%8f%89%e6%90%9c%e7%b4%a2%e6%a0%91%e7%9a%84%e5%90%8e%e5%ba%8f%e9%81%8d%e5%8e%86%e5%ba%8f%e5%88%97&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：判断一个序列是否是二叉搜索树的后序遍历序列。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;&#xA;：&lt;a href=&#34;https://leetcode.cn/problems/er-cha-sou-suo-shu-de-hou-xu-bian-li-xu-lie-lcof/&#34;&gt;剑指 Offer 33. 二叉搜索树的后序遍历序列&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;31-二叉树中和为某一值的路径&#34;&gt;31. &lt;strong&gt;二叉树中和为某一值的路径&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#31-%e4%ba%8c%e5%8f%89%e6%a0%91%e4%b8%ad%e5%92%8c%e4%b8%ba%e6%9f%90%e4%b8%80%e5%80%bc%e7%9a%84%e8%b7%af%e5%be%84&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：找到二叉树中路径和等于某个值的路径。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/path-sum-ii/&#34;&gt;113. 路径总和 II&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;32-复杂链表的复制&#34;&gt;32. &lt;strong&gt;复杂链表的复制&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#32-%e5%a4%8d%e6%9d%82%e9%93%be%e8%a1%a8%e7%9a%84%e5%a4%8d%e5%88%b6&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：复制复杂链表。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/copy-list-with-random-pointer/&#34;&gt;138. 复制带随机指针的链表&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;33-二叉搜索树与双向链表&#34;&gt;33. &lt;strong&gt;二叉搜索树与双向链表&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#33-%e4%ba%8c%e5%8f%89%e6%90%9c%e7%b4%a2%e6%a0%91%e4%b8%8e%e5%8f%8c%e5%90%91%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：将二叉搜索树转换为双向链表。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;&#xA;：&lt;a href=&#34;https://leetcode.cn/problems/convert-binary-search-tree-to-sorted-doubly-linked-list/&#34;&gt;426. 将二叉搜索树转化为排序的双向链表&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;34-序列化二叉树&#34;&gt;34. &lt;strong&gt;序列化二叉树&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#34-%e5%ba%8f%e5%88%97%e5%8c%96%e4%ba%8c%e5%8f%89%e6%a0%91&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：实现二叉树的序列化和反序列化。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/serialize-and-deserialize-binary-tree/&#34;&gt;297. 二叉树的序列化与反序列化&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;35-字符串的排列&#34;&gt;35. &lt;strong&gt;字符串的排列&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#35-%e5%ad%97%e7%ac%a6%e4%b8%b2%e7%9a%84%e6%8e%92%e5%88%97&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：输出字符串的所有排列。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/zi-fu-chuan-de-pai-lie-lcof/&#34;&gt;剑指 Offer 38. 字符串的排列&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;36-数组中出现次数超过一半的数字&#34;&gt;36. &lt;strong&gt;数组中出现次数超过一半的数字&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#36-%e6%95%b0%e7%bb%84%e4%b8%ad%e5%87%ba%e7%8e%b0%e6%ac%a1%e6%95%b0%e8%b6%85%e8%bf%87%e4%b8%80%e5%8d%8a%e7%9a%84%e6%95%b0%e5%ad%97&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：找到数组中出现次数超过一半的数字。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/majority-element/&#34;&gt;169. 多数元素&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;37-最小的k个数&#34;&gt;37. &lt;strong&gt;最小的k个数&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#37-%e6%9c%80%e5%b0%8f%e7%9a%84k%e4%b8%aa%e6%95%b0&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：找到数组中最小的k个数。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/zui-xiao-de-kge-shu-lcof/&#34;&gt;剑指 Offer 40. 最小的k个数&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;38-连续子数组的最大和&#34;&gt;38. &lt;strong&gt;连续子数组的最大和&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#38-%e8%bf%9e%e7%bb%ad%e5%ad%90%e6%95%b0%e7%bb%84%e7%9a%84%e6%9c%80%e5%a4%a7%e5%92%8c&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：找到连续子数组的最大和。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/maximum-subarray/&#34;&gt;53. 最大子数组和&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;39-1n整数中1出现的次数&#34;&gt;39. &lt;strong&gt;1～n整数中1出现的次数&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#39-1n%e6%95%b4%e6%95%b0%e4%b8%ad1%e5%87%ba%e7%8e%b0%e7%9a%84%e6%ac%a1%e6%95%b0&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：统计1～n整数中1出现的次数。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/number-of-digit-one/&#34;&gt;233. 数字 1 的个数&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;40-数字序列中某一位的数字&#34;&gt;40. &lt;strong&gt;数字序列中某一位的数字&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#40-%e6%95%b0%e5%ad%97%e5%ba%8f%e5%88%97%e4%b8%ad%e6%9f%90%e4%b8%80%e4%bd%8d%e7%9a%84%e6%95%b0%e5%ad%97&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：找到数字序列中某一位的数字。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/nth-digit/&#34;&gt;400. 第 N 位数字&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;41-把数组排成最小的数&#34;&gt;41. &lt;strong&gt;把数组排成最小的数&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#41-%e6%8a%8a%e6%95%b0%e7%bb%84%e6%8e%92%e6%88%90%e6%9c%80%e5%b0%8f%e7%9a%84%e6%95%b0&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：把数组排成最小的数。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/ba-shu-zu-pai-cheng-zui-xiao-de-shu-lcof/&#34;&gt;剑指 Offer 45. 把数组排成最小的数&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;42-把数字翻译成字符串&#34;&gt;42. &lt;strong&gt;把数字翻译成字符串&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#42-%e6%8a%8a%e6%95%b0%e5%ad%97%e7%bf%bb%e8%af%91%e6%88%90%e5%ad%97%e7%ac%a6%e4%b8%b2&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：把数字翻译成字符串。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/decode-ways/&#34;&gt;91. 解码方法&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;43-礼物的最大价值&#34;&gt;43. &lt;strong&gt;礼物的最大价值&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#43-%e7%a4%bc%e7%89%a9%e7%9a%84%e6%9c%80%e5%a4%a7%e4%bb%b7%e5%80%bc&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：在矩阵中寻找礼物的最大价值。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/li-wu-de-zui-da-jie-zhi-lcof/&#34;&gt;剑指 Offer 47. 礼物的最大价值&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;44-最长不含重复字符的子字符串&#34;&gt;44. &lt;strong&gt;最长不含重复字符的子字符串&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#44-%e6%9c%80%e9%95%bf%e4%b8%8d%e5%90%ab%e9%87%8d%e5%a4%8d%e5%ad%97%e7%ac%a6%e7%9a%84%e5%ad%90%e5%ad%97%e7%ac%a6%e4%b8%b2&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：找到最长不含重复字符的子字符串。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/longest-substring-without-repeating-characters/&#34;&gt;3. 无重复字符的最长子串&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;45-丑数&#34;&gt;45. &lt;strong&gt;丑数&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#45-%e4%b8%91%e6%95%b0&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：找到第n个丑数。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/ugly-number-ii/&#34;&gt;264. 丑数 II&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;46-第一个只出现一次的字符&#34;&gt;46. &lt;strong&gt;第一个只出现一次的字符&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#46-%e7%ac%ac%e4%b8%80%e4%b8%aa%e5%8f%aa%e5%87%ba%e7%8e%b0%e4%b8%80%e6%ac%a1%e7%9a%84%e5%ad%97%e7%ac%a6&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：找到第一个只出现一次的字符。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/first-unique-character-in-a-string/&#34;&gt;387. 字符串中的第一个唯一字符&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;47-数组中的逆序对&#34;&gt;47. &lt;strong&gt;数组中的逆序对&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#47-%e6%95%b0%e7%bb%84%e4%b8%ad%e7%9a%84%e9%80%86%e5%ba%8f%e5%af%b9&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：统计数组中的逆序对。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/shu-zu-zhong-de-ni-xu-dui-lcof/&#34;&gt;剑指 Offer 51. 数组中的逆序对&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;48-两个链表的第一个公共节点&#34;&gt;48. &lt;strong&gt;两个链表的第一个公共节点&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#48-%e4%b8%a4%e4%b8%aa%e9%93%be%e8%a1%a8%e7%9a%84%e7%ac%ac%e4%b8%80%e4%b8%aa%e5%85%ac%e5%85%b1%e8%8a%82%e7%82%b9&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：找到两个链表的第一个公共节点。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/intersection-of-two-linked-lists/&#34;&gt;160. 相交链表&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;49-在排序数组中查找数字&#34;&gt;49. &lt;strong&gt;在排序数组中查找数字&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#49-%e5%9c%a8%e6%8e%92%e5%ba%8f%e6%95%b0%e7%bb%84%e4%b8%ad%e6%9f%a5%e6%89%be%e6%95%b0%e5%ad%97&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：在排序数组中查找某个数字出现的次数。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;&#xA;：&lt;a href=&#34;https://leetcode.cn/problems/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof/&#34;&gt;剑指 Offer 53 - I. 在排序数组中查找数字 I&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;50-0n-1中缺失的数字&#34;&gt;50. &lt;strong&gt;0～n-1中缺失的数字&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#50-0n-1%e4%b8%ad%e7%bc%ba%e5%a4%b1%e7%9a%84%e6%95%b0%e5%ad%97&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：找到0～n-1中缺失的数字。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/missing-number/&#34;&gt;268. 丢失的数字&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;51-二叉搜索树的第k大节点&#34;&gt;51. &lt;strong&gt;二叉搜索树的第k大节点&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#51-%e4%ba%8c%e5%8f%89%e6%90%9c%e7%b4%a2%e6%a0%91%e7%9a%84%e7%ac%ack%e5%a4%a7%e8%8a%82%e7%82%b9&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：找到二叉搜索树的第k大节点。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof/&#34;&gt;剑指 Offer 54. 二叉搜索树的第k大节点&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;52-二叉树的深度&#34;&gt;52. &lt;strong&gt;二叉树的深度&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#52-%e4%ba%8c%e5%8f%89%e6%a0%91%e7%9a%84%e6%b7%b1%e5%ba%a6&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：求二叉树的深度。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/maximum-depth-of-binary-tree/&#34;&gt;104. 二叉树的最大深度&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;53-平衡二叉树&#34;&gt;53. &lt;strong&gt;平衡二叉树&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#53-%e5%b9%b3%e8%a1%a1%e4%ba%8c%e5%8f%89%e6%a0%91&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：判断一棵二叉树是否是平衡二叉树。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/balanced-binary-tree/&#34;&gt;110. 平衡二叉树&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;54-数组中数字出现的次数&#34;&gt;54. &lt;strong&gt;数组中数字出现的次数&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#54-%e6%95%b0%e7%bb%84%e4%b8%ad%e6%95%b0%e5%ad%97%e5%87%ba%e7%8e%b0%e7%9a%84%e6%ac%a1%e6%95%b0&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：找到数组中只出现一次的两个数字。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/single-number-iii/&#34;&gt;260. 只出现一次的数字 III&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;55-数组中唯一只出现一次的数字&#34;&gt;55. &lt;strong&gt;数组中唯一只出现一次的数字&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#55-%e6%95%b0%e7%bb%84%e4%b8%ad%e5%94%af%e4%b8%80%e5%8f%aa%e5%87%ba%e7%8e%b0%e4%b8%80%e6%ac%a1%e7%9a%84%e6%95%b0%e5%ad%97&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：找到数组中唯一只出现一次的数字。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/single-number-ii/&#34;&gt;137. 只出现一次的数字 II&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;56-和为s的两个数字&#34;&gt;56. &lt;strong&gt;和为s的两个数字&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#56-%e5%92%8c%e4%b8%bas%e7%9a%84%e4%b8%a4%e4%b8%aa%e6%95%b0%e5%ad%97&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：找到数组中两个数字，使得它们的和等于s。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/he-wei-sde-liang-ge-shu-zi-lcof/&#34;&gt;剑指 Offer 57. 和为s的两个数字&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;57-和为s的连续正数序列&#34;&gt;57. &lt;strong&gt;和为s的连续正数序列&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#57-%e5%92%8c%e4%b8%bas%e7%9a%84%e8%bf%9e%e7%bb%ad%e6%ad%a3%e6%95%b0%e5%ba%8f%e5%88%97&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：找到所有和为s的连续正数序列。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;&#xA;：&lt;a href=&#34;https://leetcode.cn/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof/&#34;&gt;剑指 Offer 57 - II. 和为s的连续正数序列&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;58-翻转单词顺序&#34;&gt;58. &lt;strong&gt;翻转单词顺序&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#58-%e7%bf%bb%e8%bd%ac%e5%8d%95%e8%af%8d%e9%a1%ba%e5%ba%8f&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：翻转句子中单词的顺序。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/reverse-words-in-a-string/&#34;&gt;151. 反转字符串中的单词&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;59-左旋转字符串&#34;&gt;59. &lt;strong&gt;左旋转字符串&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#59-%e5%b7%a6%e6%97%8b%e8%bd%ac%e5%ad%97%e7%ac%a6%e4%b8%b2&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：左旋转字符串。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/&#34;&gt;剑指 Offer 58 - II. 左旋转字符串&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;60-滑动窗口的最大值&#34;&gt;60. &lt;strong&gt;滑动窗口的最大值&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#60-%e6%bb%91%e5%8a%a8%e7%aa%97%e5%8f%a3%e7%9a%84%e6%9c%80%e5%a4%a7%e5%80%bc&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：找到滑动窗口中的最大值。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/sliding-window-maximum/&#34;&gt;239. 滑动窗口最大值&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;61-扑克牌中的顺子&#34;&gt;61. &lt;strong&gt;扑克牌中的顺子&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#61-%e6%89%91%e5%85%8b%e7%89%8c%e4%b8%ad%e7%9a%84%e9%a1%ba%e5%ad%90&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：判断扑克牌是否是顺子。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/bu-ke-pai-zhong-de-shun-zi-lcof/&#34;&gt;剑指 Offer 61. 扑克牌中的顺子&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;62-圆圈中最后剩下的数字&#34;&gt;62. &lt;strong&gt;圆圈中最后剩下的数字&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#62-%e5%9c%86%e5%9c%88%e4%b8%ad%e6%9c%80%e5%90%8e%e5%89%a9%e4%b8%8b%e7%9a%84%e6%95%b0%e5%ad%97&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：圆圈中最后剩下的数字（约瑟夫环问题）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;&#xA;：&lt;a href=&#34;https://leetcode.cn/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/&#34;&gt;剑指 Offer 62. 圆圈中最后剩下的数字&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;63-股票的最大利润&#34;&gt;63. &lt;strong&gt;股票的最大利润&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#63-%e8%82%a1%e7%a5%a8%e7%9a%84%e6%9c%80%e5%a4%a7%e5%88%a9%e6%b6%a6&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：计算股票的最大利润。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/&#34;&gt;121. 买卖股票的最佳时机&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;64-求12n&#34;&gt;64. &lt;strong&gt;求1+2+…+n&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#64-%e6%b1%8212n&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：求1+2+…+n，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/qiu-12n-lcof/&#34;&gt;剑指 Offer 64. 求1+2+…+n&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;65-不用加减乘除做加法&#34;&gt;65. &lt;strong&gt;不用加减乘除做加法&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#65-%e4%b8%8d%e7%94%a8%e5%8a%a0%e5%87%8f%e4%b9%98%e9%99%a4%e5%81%9a%e5%8a%a0%e6%b3%95&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：不用加减乘除做加法。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/sum-of-two-integers/&#34;&gt;371. 两整数之和&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;66-构建乘积数组&#34;&gt;66. &lt;strong&gt;构建乘积数组&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#66-%e6%9e%84%e5%bb%ba%e4%b9%98%e7%a7%af%e6%95%b0%e7%bb%84&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：构建乘积数组。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/product-of-array-except-self/&#34;&gt;238. 除自身以外数组的乘积&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;67-把字符串转换成整数&#34;&gt;67. &lt;strong&gt;把字符串转换成整数&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#67-%e6%8a%8a%e5%ad%97%e7%ac%a6%e4%b8%b2%e8%bd%ac%e6%8d%a2%e6%88%90%e6%95%b4%e6%95%b0&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：把字符串转换成整数。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/string-to-integer-atoi/&#34;&gt;8. 字符串转换整数 (atoi)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;68-树中两个节点的最低公共祖先&#34;&gt;68. &lt;strong&gt;树中两个节点的最低公共祖先&lt;/strong&gt;&lt;a class=&#34;anchor&#34; href=&#34;#68-%e6%a0%91%e4%b8%ad%e4%b8%a4%e4%b8%aa%e8%8a%82%e7%82%b9%e7%9a%84%e6%9c%80%e4%bd%8e%e5%85%ac%e5%85%b1%e7%a5%96%e5%85%88&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;剑指Offer题目&lt;/strong&gt;：找到树中两个节点的最低公共祖先。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LeetCode对应题目&lt;/strong&gt;：&lt;a href=&#34;https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/&#34;&gt;236. 二叉树的最近公共祖先&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;以上是《剑指Offer》中部分题目与LeetCode上对应题目的对照表。由于LeetCode的题目库不断更新，可能会有新的题目与《剑指Offer》中的题目对应。建议在准备面试时，结合两本书的题目进行练习。&lt;/p&gt;</description>
    </item>
    <item>
      <title>面试经典 150 题</title>
      <link>/post/computer-science/algorithm/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B8150%E9%A2%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/computer-science/algorithm/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B8150%E9%A2%98/</guid>
      <description>&lt;h2 id=&#34;面试经典-150-题&#34;&gt;面试经典 150 题&lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e7%bb%8f%e5%85%b8-150-%e9%a2%98&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;h4 id=&#34;数组--字符串&#34;&gt;数组 / 字符串&lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e7%bb%84--%e5%ad%97%e7%ac%a6%e4%b8%b2&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;-88-合并两个有序数组&#34;&gt;✅ 88 合并两个有序数组&lt;a class=&#34;anchor&#34; href=&#34;#-88-%e5%90%88%e5%b9%b6%e4%b8%a4%e4%b8%aa%e6%9c%89%e5%ba%8f%e6%95%b0%e7%bb%84&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-27-移除元素&#34;&gt;✅ 27 移除元素&lt;a class=&#34;anchor&#34; href=&#34;#-27-%e7%a7%bb%e9%99%a4%e5%85%83%e7%b4%a0&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-26-删除有序数组中的重复项&#34;&gt;✅ 26 删除有序数组中的重复项&lt;a class=&#34;anchor&#34; href=&#34;#-26-%e5%88%a0%e9%99%a4%e6%9c%89%e5%ba%8f%e6%95%b0%e7%bb%84%e4%b8%ad%e7%9a%84%e9%87%8d%e5%a4%8d%e9%a1%b9&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-80-删除有序数组中的重复项-ii&#34;&gt;✅ 80 删除有序数组中的重复项 II&lt;a class=&#34;anchor&#34; href=&#34;#-80-%e5%88%a0%e9%99%a4%e6%9c%89%e5%ba%8f%e6%95%b0%e7%bb%84%e4%b8%ad%e7%9a%84%e9%87%8d%e5%a4%8d%e9%a1%b9-ii&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-169-多数元素&#34;&gt;✅ 169 多数元素&lt;a class=&#34;anchor&#34; href=&#34;#-169-%e5%a4%9a%e6%95%b0%e5%85%83%e7%b4%a0&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-189-轮转数组&#34;&gt;✅ 189 轮转数组&lt;a class=&#34;anchor&#34; href=&#34;#-189-%e8%bd%ae%e8%bd%ac%e6%95%b0%e7%bb%84&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-121-买卖股票的最佳时机&#34;&gt;✅ 121 买卖股票的最佳时机&lt;a class=&#34;anchor&#34; href=&#34;#-121-%e4%b9%b0%e5%8d%96%e8%82%a1%e7%a5%a8%e7%9a%84%e6%9c%80%e4%bd%b3%e6%97%b6%e6%9c%ba&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;122-买卖股票的最佳时机-ii&#34;&gt;122 买卖股票的最佳时机 II&lt;a class=&#34;anchor&#34; href=&#34;#122-%e4%b9%b0%e5%8d%96%e8%82%a1%e7%a5%a8%e7%9a%84%e6%9c%80%e4%bd%b3%e6%97%b6%e6%9c%ba-ii&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-55-跳跃游戏&#34;&gt;✅ 55 跳跃游戏&lt;a class=&#34;anchor&#34; href=&#34;#-55-%e8%b7%b3%e8%b7%83%e6%b8%b8%e6%88%8f&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-45-跳跃游戏-ii&#34;&gt;✅ 45 跳跃游戏 II&lt;a class=&#34;anchor&#34; href=&#34;#-45-%e8%b7%b3%e8%b7%83%e6%b8%b8%e6%88%8f-ii&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-274-h-指数&#34;&gt;✅ 274 H 指数&lt;a class=&#34;anchor&#34; href=&#34;#-274-h-%e6%8c%87%e6%95%b0&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;o1-时间插入删除和获取随机元素&#34;&gt;O(1) 时间插入、删除和获取随机元素&lt;a class=&#34;anchor&#34; href=&#34;#o1-%e6%97%b6%e9%97%b4%e6%8f%92%e5%85%a5%e5%88%a0%e9%99%a4%e5%92%8c%e8%8e%b7%e5%8f%96%e9%9a%8f%e6%9c%ba%e5%85%83%e7%b4%a0&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;除自身以外数组的乘积&#34;&gt;除自身以外数组的乘积&lt;a class=&#34;anchor&#34; href=&#34;#%e9%99%a4%e8%87%aa%e8%ba%ab%e4%bb%a5%e5%a4%96%e6%95%b0%e7%bb%84%e7%9a%84%e4%b9%98%e7%a7%af&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;加油站&#34;&gt;加油站&lt;a class=&#34;anchor&#34; href=&#34;#%e5%8a%a0%e6%b2%b9%e7%ab%99&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;分发糖果&#34;&gt;分发糖果&lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e5%8f%91%e7%b3%96%e6%9e%9c&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;接雨水&#34;&gt;接雨水&lt;a class=&#34;anchor&#34; href=&#34;#%e6%8e%a5%e9%9b%a8%e6%b0%b4&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-13-罗马数字转整数&#34;&gt;✅ 13 罗马数字转整数&lt;a class=&#34;anchor&#34; href=&#34;#-13-%e7%bd%97%e9%a9%ac%e6%95%b0%e5%ad%97%e8%bd%ac%e6%95%b4%e6%95%b0&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;整数转罗马数字&#34;&gt;整数转罗马数字&lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b4%e6%95%b0%e8%bd%ac%e7%bd%97%e9%a9%ac%e6%95%b0%e5%ad%97&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-58-最后一个单词的长度&#34;&gt;✅ 58 最后一个单词的长度&lt;a class=&#34;anchor&#34; href=&#34;#-58-%e6%9c%80%e5%90%8e%e4%b8%80%e4%b8%aa%e5%8d%95%e8%af%8d%e7%9a%84%e9%95%bf%e5%ba%a6&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-14-最长公共前缀&#34;&gt;✅ 14 最长公共前缀&lt;a class=&#34;anchor&#34; href=&#34;#-14-%e6%9c%80%e9%95%bf%e5%85%ac%e5%85%b1%e5%89%8d%e7%bc%80&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-151-反转字符串中的单词&#34;&gt;✅ 151 反转字符串中的单词&lt;a class=&#34;anchor&#34; href=&#34;#-151-%e5%8f%8d%e8%bd%ac%e5%ad%97%e7%ac%a6%e4%b8%b2%e4%b8%ad%e7%9a%84%e5%8d%95%e8%af%8d&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;z-字形变换&#34;&gt;Z 字形变换&lt;a class=&#34;anchor&#34; href=&#34;#z-%e5%ad%97%e5%bd%a2%e5%8f%98%e6%8d%a2&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-28-找出字符串中第一个匹配项的下标&#34;&gt;✅ 28 找出字符串中第一个匹配项的下标&lt;a class=&#34;anchor&#34; href=&#34;#-28-%e6%89%be%e5%87%ba%e5%ad%97%e7%ac%a6%e4%b8%b2%e4%b8%ad%e7%ac%ac%e4%b8%80%e4%b8%aa%e5%8c%b9%e9%85%8d%e9%a1%b9%e7%9a%84%e4%b8%8b%e6%a0%87&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;文本左右对齐&#34;&gt;文本左右对齐&lt;a class=&#34;anchor&#34; href=&#34;#%e6%96%87%e6%9c%ac%e5%b7%a6%e5%8f%b3%e5%af%b9%e9%bd%90&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;双指针&#34;&gt;双指针&lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%8c%e6%8c%87%e9%92%88&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;-125-验证回文串&#34;&gt;✅ 125 验证回文串&lt;a class=&#34;anchor&#34; href=&#34;#-125-%e9%aa%8c%e8%af%81%e5%9b%9e%e6%96%87%e4%b8%b2&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-392-判断子序列&#34;&gt;✅ 392 判断子序列&lt;a class=&#34;anchor&#34; href=&#34;#-392-%e5%88%a4%e6%96%ad%e5%ad%90%e5%ba%8f%e5%88%97&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-167-两数之和-ii---输入有序数组&#34;&gt;✅ 167 两数之和 II - 输入有序数组&lt;a class=&#34;anchor&#34; href=&#34;#-167-%e4%b8%a4%e6%95%b0%e4%b9%8b%e5%92%8c-ii---%e8%be%93%e5%85%a5%e6%9c%89%e5%ba%8f%e6%95%b0%e7%bb%84&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;盛最多水的容器&#34;&gt;盛最多水的容器&lt;a class=&#34;anchor&#34; href=&#34;#%e7%9b%9b%e6%9c%80%e5%a4%9a%e6%b0%b4%e7%9a%84%e5%ae%b9%e5%99%a8&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;三数之和&#34;&gt;三数之和&lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%89%e6%95%b0%e4%b9%8b%e5%92%8c&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;滑动窗口&#34;&gt;滑动窗口&lt;a class=&#34;anchor&#34; href=&#34;#%e6%bb%91%e5%8a%a8%e7%aa%97%e5%8f%a3&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;-长度最小的子数组&#34;&gt;✅ 长度最小的子数组&lt;a class=&#34;anchor&#34; href=&#34;#-%e9%95%bf%e5%ba%a6%e6%9c%80%e5%b0%8f%e7%9a%84%e5%ad%90%e6%95%b0%e7%bb%84&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-无重复字符的最长子串&#34;&gt;✅ 无重复字符的最长子串&lt;a class=&#34;anchor&#34; href=&#34;#-%e6%97%a0%e9%87%8d%e5%a4%8d%e5%ad%97%e7%ac%a6%e7%9a%84%e6%9c%80%e9%95%bf%e5%ad%90%e4%b8%b2&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-串联所有单词的子串&#34;&gt;✅ 串联所有单词的子串&lt;a class=&#34;anchor&#34; href=&#34;#-%e4%b8%b2%e8%81%94%e6%89%80%e6%9c%89%e5%8d%95%e8%af%8d%e7%9a%84%e5%ad%90%e4%b8%b2&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;最小覆盖子串&#34;&gt;最小覆盖子串&lt;a class=&#34;anchor&#34; href=&#34;#%e6%9c%80%e5%b0%8f%e8%a6%86%e7%9b%96%e5%ad%90%e4%b8%b2&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;矩阵&#34;&gt;矩阵&lt;a class=&#34;anchor&#34; href=&#34;#%e7%9f%a9%e9%98%b5&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;-有效的数独&#34;&gt;✅ 有效的数独&lt;a class=&#34;anchor&#34; href=&#34;#-%e6%9c%89%e6%95%88%e7%9a%84%e6%95%b0%e7%8b%ac&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-螺旋矩阵&#34;&gt;✅ 螺旋矩阵&lt;a class=&#34;anchor&#34; href=&#34;#-%e8%9e%ba%e6%97%8b%e7%9f%a9%e9%98%b5&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;旋转图像&#34;&gt;旋转图像&lt;a class=&#34;anchor&#34; href=&#34;#%e6%97%8b%e8%bd%ac%e5%9b%be%e5%83%8f&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-矩阵置零&#34;&gt;✅ 矩阵置零&lt;a class=&#34;anchor&#34; href=&#34;#-%e7%9f%a9%e9%98%b5%e7%bd%ae%e9%9b%b6&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-生命游戏&#34;&gt;✅ 生命游戏&lt;a class=&#34;anchor&#34; href=&#34;#-%e7%94%9f%e5%91%bd%e6%b8%b8%e6%88%8f&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;哈希表&#34;&gt;哈希表&lt;a class=&#34;anchor&#34; href=&#34;#%e5%93%88%e5%b8%8c%e8%a1%a8&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;-383-赎金信&#34;&gt;✅ 383 赎金信&lt;a class=&#34;anchor&#34; href=&#34;#-383-%e8%b5%8e%e9%87%91%e4%bf%a1&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-205-同构字符串&#34;&gt;✅ 205 同构字符串&lt;a class=&#34;anchor&#34; href=&#34;#-205-%e5%90%8c%e6%9e%84%e5%ad%97%e7%ac%a6%e4%b8%b2&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-290-单词规律&#34;&gt;✅ 290 单词规律&lt;a class=&#34;anchor&#34; href=&#34;#-290-%e5%8d%95%e8%af%8d%e8%a7%84%e5%be%8b&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-242-有效的字母异位词&#34;&gt;✅ 242 有效的字母异位词&lt;a class=&#34;anchor&#34; href=&#34;#-242-%e6%9c%89%e6%95%88%e7%9a%84%e5%ad%97%e6%af%8d%e5%bc%82%e4%bd%8d%e8%af%8d&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-49-字母异位词分组&#34;&gt;✅ 49 字母异位词分组&lt;a class=&#34;anchor&#34; href=&#34;#-49-%e5%ad%97%e6%af%8d%e5%bc%82%e4%bd%8d%e8%af%8d%e5%88%86%e7%bb%84&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-1-两数之和&#34;&gt;✅ 1 两数之和&lt;a class=&#34;anchor&#34; href=&#34;#-1-%e4%b8%a4%e6%95%b0%e4%b9%8b%e5%92%8c&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-202-快乐数&#34;&gt;✅ 202 快乐数&lt;a class=&#34;anchor&#34; href=&#34;#-202-%e5%bf%ab%e4%b9%90%e6%95%b0&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-219-存在重复元素-ii&#34;&gt;✅ 219 存在重复元素 II&lt;a class=&#34;anchor&#34; href=&#34;#-219-%e5%ad%98%e5%9c%a8%e9%87%8d%e5%a4%8d%e5%85%83%e7%b4%a0-ii&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-128-最长连续序列&#34;&gt;✅ 128 最长连续序列&lt;a class=&#34;anchor&#34; href=&#34;#-128-%e6%9c%80%e9%95%bf%e8%bf%9e%e7%bb%ad%e5%ba%8f%e5%88%97&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;区间&#34;&gt;区间&lt;a class=&#34;anchor&#34; href=&#34;#%e5%8c%ba%e9%97%b4&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;汇总区间&#34;&gt;汇总区间&lt;a class=&#34;anchor&#34; href=&#34;#%e6%b1%87%e6%80%bb%e5%8c%ba%e9%97%b4&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;合并区间&#34;&gt;合并区间&lt;a class=&#34;anchor&#34; href=&#34;#%e5%90%88%e5%b9%b6%e5%8c%ba%e9%97%b4&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;插入区间&#34;&gt;插入区间&lt;a class=&#34;anchor&#34; href=&#34;#%e6%8f%92%e5%85%a5%e5%8c%ba%e9%97%b4&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;用最少数量的箭引爆气球&#34;&gt;用最少数量的箭引爆气球&lt;a class=&#34;anchor&#34; href=&#34;#%e7%94%a8%e6%9c%80%e5%b0%91%e6%95%b0%e9%87%8f%e7%9a%84%e7%ae%ad%e5%bc%95%e7%88%86%e6%b0%94%e7%90%83&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;栈&#34;&gt;栈&lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%88&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;-20-有效的括号&#34;&gt;✅ 20 有效的括号&lt;a class=&#34;anchor&#34; href=&#34;#-20-%e6%9c%89%e6%95%88%e7%9a%84%e6%8b%ac%e5%8f%b7&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-71-简化路径&#34;&gt;✅ 71 简化路径&lt;a class=&#34;anchor&#34; href=&#34;#-71-%e7%ae%80%e5%8c%96%e8%b7%af%e5%be%84&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-155-最小栈&#34;&gt;✅ 155 最小栈&lt;a class=&#34;anchor&#34; href=&#34;#-155-%e6%9c%80%e5%b0%8f%e6%a0%88&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-150-逆波兰表达式求值&#34;&gt;✅ 150 逆波兰表达式求值&lt;a class=&#34;anchor&#34; href=&#34;#-150-%e9%80%86%e6%b3%a2%e5%85%b0%e8%a1%a8%e8%be%be%e5%bc%8f%e6%b1%82%e5%80%bc&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;基本计算器&#34;&gt;基本计算器&lt;a class=&#34;anchor&#34; href=&#34;#%e5%9f%ba%e6%9c%ac%e8%ae%a1%e7%ae%97%e5%99%a8&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;链表&#34;&gt;链表&lt;a class=&#34;anchor&#34; href=&#34;#%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;-141-环形链表&#34;&gt;✅ 141 环形链表&lt;a class=&#34;anchor&#34; href=&#34;#-141-%e7%8e%af%e5%bd%a2%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-2-两数相加&#34;&gt;✅ 2 两数相加&lt;a class=&#34;anchor&#34; href=&#34;#-2-%e4%b8%a4%e6%95%b0%e7%9b%b8%e5%8a%a0&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-21-合并两个有序链表&#34;&gt;✅ 21 合并两个有序链表&lt;a class=&#34;anchor&#34; href=&#34;#-21-%e5%90%88%e5%b9%b6%e4%b8%a4%e4%b8%aa%e6%9c%89%e5%ba%8f%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-138-随机链表的复制&#34;&gt;✅ 138 随机链表的复制&lt;a class=&#34;anchor&#34; href=&#34;#-138-%e9%9a%8f%e6%9c%ba%e9%93%be%e8%a1%a8%e7%9a%84%e5%a4%8d%e5%88%b6&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-92-反转链表-ii&#34;&gt;✅ 92 反转链表 II&lt;a class=&#34;anchor&#34; href=&#34;#-92-%e5%8f%8d%e8%bd%ac%e9%93%be%e8%a1%a8-ii&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;k-个一组翻转链表&#34;&gt;K 个一组翻转链表&lt;a class=&#34;anchor&#34; href=&#34;#k-%e4%b8%aa%e4%b8%80%e7%bb%84%e7%bf%bb%e8%bd%ac%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-19-删除链表的倒数第-n-个结点&#34;&gt;✅ 19 删除链表的倒数第 N 个结点&lt;a class=&#34;anchor&#34; href=&#34;#-19-%e5%88%a0%e9%99%a4%e9%93%be%e8%a1%a8%e7%9a%84%e5%80%92%e6%95%b0%e7%ac%ac-n-%e4%b8%aa%e7%bb%93%e7%82%b9&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-82-删除排序链表中的重复元素-ii&#34;&gt;✅ 82 删除排序链表中的重复元素 II&lt;a class=&#34;anchor&#34; href=&#34;#-82-%e5%88%a0%e9%99%a4%e6%8e%92%e5%ba%8f%e9%93%be%e8%a1%a8%e4%b8%ad%e7%9a%84%e9%87%8d%e5%a4%8d%e5%85%83%e7%b4%a0-ii&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-61-旋转链表&#34;&gt;✅ 61 旋转链表&lt;a class=&#34;anchor&#34; href=&#34;#-61-%e6%97%8b%e8%bd%ac%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-86-分隔链表&#34;&gt;✅ 86 分隔链表&lt;a class=&#34;anchor&#34; href=&#34;#-86-%e5%88%86%e9%9a%94%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-146-lru-缓存&#34;&gt;✅ 146 LRU 缓存&lt;a class=&#34;anchor&#34; href=&#34;#-146-lru-%e7%bc%93%e5%ad%98&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;二叉树&#34;&gt;二叉树&lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e5%8f%89%e6%a0%91&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;-104-二叉树的最大深度&#34;&gt;✅ 104 二叉树的最大深度&lt;a class=&#34;anchor&#34; href=&#34;#-104-%e4%ba%8c%e5%8f%89%e6%a0%91%e7%9a%84%e6%9c%80%e5%a4%a7%e6%b7%b1%e5%ba%a6&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.cn/problems/maximum-depth-of-binary-tree/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;104. 二叉树的最大深度&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;-100-相同的树&#34;&gt;✅ 100 相同的树&lt;a class=&#34;anchor&#34; href=&#34;#-100-%e7%9b%b8%e5%90%8c%e7%9a%84%e6%a0%91&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.cn/problems/same-tree/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;100. 相同的树&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;-226-翻转二叉树&#34;&gt;✅ 226 翻转二叉树&lt;a class=&#34;anchor&#34; href=&#34;#-226-%e7%bf%bb%e8%bd%ac%e4%ba%8c%e5%8f%89%e6%a0%91&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.cn/problems/invert-binary-tree/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;226. 翻转二叉树&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;-101-对称二叉树&#34;&gt;✅ 101 对称二叉树&lt;a class=&#34;anchor&#34; href=&#34;#-101-%e5%af%b9%e7%a7%b0%e4%ba%8c%e5%8f%89%e6%a0%91&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.cn/problems/symmetric-tree/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;101. 对称二叉树&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;-105-从前序与中序遍历序列构造二叉树&#34;&gt;✅ 105 从前序与中序遍历序列构造二叉树&lt;a class=&#34;anchor&#34; href=&#34;#-105-%e4%bb%8e%e5%89%8d%e5%ba%8f%e4%b8%8e%e4%b8%ad%e5%ba%8f%e9%81%8d%e5%8e%86%e5%ba%8f%e5%88%97%e6%9e%84%e9%80%a0%e4%ba%8c%e5%8f%89%e6%a0%91&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;105. 从前序与中序遍历序列构造二叉树&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;-106-从中序与后序遍历序列构造二叉树&#34;&gt;✅ 106 从中序与后序遍历序列构造二叉树&lt;a class=&#34;anchor&#34; href=&#34;#-106-%e4%bb%8e%e4%b8%ad%e5%ba%8f%e4%b8%8e%e5%90%8e%e5%ba%8f%e9%81%8d%e5%8e%86%e5%ba%8f%e5%88%97%e6%9e%84%e9%80%a0%e4%ba%8c%e5%8f%89%e6%a0%91&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;106. 从中序与后序遍历序列构造二叉树&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;-117-填充每个节点的下一个右侧节点指针-ii&#34;&gt;✅ 117 填充每个节点的下一个右侧节点指针 II&lt;a class=&#34;anchor&#34; href=&#34;#-117-%e5%a1%ab%e5%85%85%e6%af%8f%e4%b8%aa%e8%8a%82%e7%82%b9%e7%9a%84%e4%b8%8b%e4%b8%80%e4%b8%aa%e5%8f%b3%e4%be%a7%e8%8a%82%e7%82%b9%e6%8c%87%e9%92%88-ii&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.cn/problems/populating-next-right-pointers-in-each-node-ii/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;117. 填充每个节点的下一个右侧节点指针 II&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;二叉树展开为链表&#34;&gt;二叉树展开为链表&lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e5%8f%89%e6%a0%91%e5%b1%95%e5%bc%80%e4%b8%ba%e9%93%be%e8%a1%a8&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-路径总和&#34;&gt;✅ 路径总和&lt;a class=&#34;anchor&#34; href=&#34;#-%e8%b7%af%e5%be%84%e6%80%bb%e5%92%8c&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;求根节点到叶节点数字之和&#34;&gt;求根节点到叶节点数字之和&lt;a class=&#34;anchor&#34; href=&#34;#%e6%b1%82%e6%a0%b9%e8%8a%82%e7%82%b9%e5%88%b0%e5%8f%b6%e8%8a%82%e7%82%b9%e6%95%b0%e5%ad%97%e4%b9%8b%e5%92%8c&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;二叉树中的最大路径和&#34;&gt;二叉树中的最大路径和&lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e5%8f%89%e6%a0%91%e4%b8%ad%e7%9a%84%e6%9c%80%e5%a4%a7%e8%b7%af%e5%be%84%e5%92%8c&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;二叉搜索树迭代器&#34;&gt;二叉搜索树迭代器&lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e5%8f%89%e6%90%9c%e7%b4%a2%e6%a0%91%e8%bf%ad%e4%bb%a3%e5%99%a8&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;完全二叉树的节点个数&#34;&gt;完全二叉树的节点个数&lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%8c%e5%85%a8%e4%ba%8c%e5%8f%89%e6%a0%91%e7%9a%84%e8%8a%82%e7%82%b9%e4%b8%aa%e6%95%b0&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;二叉树的最近公共祖先&#34;&gt;二叉树的最近公共祖先&lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e5%8f%89%e6%a0%91%e7%9a%84%e6%9c%80%e8%bf%91%e5%85%ac%e5%85%b1%e7%a5%96%e5%85%88&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;二叉树层次遍历&#34;&gt;二叉树层次遍历&lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e5%8f%89%e6%a0%91%e5%b1%82%e6%ac%a1%e9%81%8d%e5%8e%86&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;-199-二叉树的右视图&#34;&gt;✅ 199 二叉树的右视图&lt;a class=&#34;anchor&#34; href=&#34;#-199-%e4%ba%8c%e5%8f%89%e6%a0%91%e7%9a%84%e5%8f%b3%e8%a7%86%e5%9b%be&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.cn/problems/binary-tree-right-side-view/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;199.二叉树的右视图&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;-637-二叉树的层平均值&#34;&gt;✅ 637 二叉树的层平均值&lt;a class=&#34;anchor&#34; href=&#34;#-637-%e4%ba%8c%e5%8f%89%e6%a0%91%e7%9a%84%e5%b1%82%e5%b9%b3%e5%9d%87%e5%80%bc&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.cn/problems/average-of-levels-in-binary-tree/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;637. 二叉树的层平均值&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;-二叉树的层序遍历&#34;&gt;✅ 二叉树的层序遍历&lt;a class=&#34;anchor&#34; href=&#34;#-%e4%ba%8c%e5%8f%89%e6%a0%91%e7%9a%84%e5%b1%82%e5%ba%8f%e9%81%8d%e5%8e%86&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-二叉树的锯齿形层序遍历&#34;&gt;✅ 二叉树的锯齿形层序遍历&lt;a class=&#34;anchor&#34; href=&#34;#-%e4%ba%8c%e5%8f%89%e6%a0%91%e7%9a%84%e9%94%af%e9%bd%bf%e5%bd%a2%e5%b1%82%e5%ba%8f%e9%81%8d%e5%8e%86&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.cn/problems/binary-tree-zigzag-level-order-traversal/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;103.二叉树的锯齿形层序遍历&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;-二叉搜索树&#34;&gt;✅ 二叉搜索树&lt;a class=&#34;anchor&#34; href=&#34;#-%e4%ba%8c%e5%8f%89%e6%90%9c%e7%b4%a2%e6%a0%91&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;-二叉搜索树的最小绝对差&#34;&gt;✅ 二叉搜索树的最小绝对差&lt;a class=&#34;anchor&#34; href=&#34;#-%e4%ba%8c%e5%8f%89%e6%90%9c%e7%b4%a2%e6%a0%91%e7%9a%84%e6%9c%80%e5%b0%8f%e7%bb%9d%e5%af%b9%e5%b7%ae&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;-二叉搜索树中第-k-小的元素&#34;&gt;✅ 二叉搜索树中第 K 小的元素&lt;a class=&#34;anchor&#34; href=&#34;#-%e4%ba%8c%e5%8f%89%e6%90%9c%e7%b4%a2%e6%a0%91%e4%b8%ad%e7%ac%ac-k-%e5%b0%8f%e7%9a%84%e5%85%83%e7%b4%a0&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;验证二叉搜索树&#34;&gt;验证二叉搜索树&lt;a class=&#34;anchor&#34; href=&#34;#%e9%aa%8c%e8%af%81%e4%ba%8c%e5%8f%89%e6%90%9c%e7%b4%a2%e6%a0%91&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;图&#34;&gt;图&lt;a class=&#34;anchor&#34; href=&#34;#%e5%9b%be&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;-200-岛屿数量&#34;&gt;✅ 200 岛屿数量&lt;a class=&#34;anchor&#34; href=&#34;#-200-%e5%b2%9b%e5%b1%bf%e6%95%b0%e9%87%8f&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.cn/problems/number-of-islands/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;200.岛屿数量&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;被围绕的区域&#34;&gt;被围绕的区域&lt;a class=&#34;anchor&#34; href=&#34;#%e8%a2%ab%e5%9b%b4%e7%bb%95%e7%9a%84%e5%8c%ba%e5%9f%9f&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;克隆图&#34;&gt;克隆图&lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%8b%e9%9a%86%e5%9b%be&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;除法求值&#34;&gt;除法求值&lt;a class=&#34;anchor&#34; href=&#34;#%e9%99%a4%e6%b3%95%e6%b1%82%e5%80%bc&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;课程表&#34;&gt;课程表&lt;a class=&#34;anchor&#34; href=&#34;#%e8%af%be%e7%a8%8b%e8%a1%a8&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;课程表-ii&#34;&gt;课程表 II&lt;a class=&#34;anchor&#34; href=&#34;#%e8%af%be%e7%a8%8b%e8%a1%a8-ii&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;h4 id=&#34;图的广度优先搜索&#34;&gt;图的广度优先搜索&lt;a class=&#34;anchor&#34; href=&#34;#%e5%9b%be%e7%9a%84%e5%b9%bf%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2&#34;&gt;#&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;909-蛇梯棋&#34;&gt;909 蛇梯棋&lt;a class=&#34;anchor&#34; href=&#34;#909-%e8%9b%87%e6%a2%af%e6%a3%8b&#34;&gt;#&lt;/a&gt;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.cn/problems/snakes-and-ladders/description/?envType=study-plan-v2&amp;amp;envId=top-interview-150&#34;&gt;909 蛇梯棋&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;官方题解&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
